
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003658  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003890  08003890  00004890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003960  08003960  00004960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08003964  08003964  00004964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  20000000  08003968  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b0  20000010  08003974  00005010  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200000c0  08003974  000050c0  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
  9 .comment      00000026  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY
 10 .debug_info   000133f8  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026bf  00000000  00000000  00018460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a68  00000000  00000000  0001ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001123  00000000  00000000  0001b588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031c57  00000000  00000000  0001c6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001045f  00000000  00000000  0004e302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014233f  00000000  00000000  0005e761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001a18  00000000  00000000  001a0aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00007a88  00000000  00000000  001a24b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005c  00000000  00000000  001a9f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <deregister_tm_clones>:
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <deregister_tm_clones+0x10>)
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <deregister_tm_clones+0x14>)
 800023c:	4283      	cmp	r3, r0
 800023e:	d002      	beq.n	8000246 <deregister_tm_clones+0xe>
 8000240:	4b03      	ldr	r3, [pc, #12]	@ (8000250 <deregister_tm_clones+0x18>)
 8000242:	b103      	cbz	r3, 8000246 <deregister_tm_clones+0xe>
 8000244:	4718      	bx	r3
 8000246:	4770      	bx	lr
 8000248:	2000000c 	.word	0x2000000c
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000

08000254 <register_tm_clones>:
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <register_tm_clones+0x1c>)
 8000256:	4907      	ldr	r1, [pc, #28]	@ (8000274 <register_tm_clones+0x20>)
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	1089      	asrs	r1, r1, #2
 800025c:	bf48      	it	mi
 800025e:	3101      	addmi	r1, #1
 8000260:	1049      	asrs	r1, r1, #1
 8000262:	d003      	beq.n	800026c <register_tm_clones+0x18>
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <register_tm_clones+0x24>)
 8000266:	b10b      	cbz	r3, 800026c <register_tm_clones+0x18>
 8000268:	4801      	ldr	r0, [pc, #4]	@ (8000270 <register_tm_clones+0x1c>)
 800026a:	4718      	bx	r3
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	2000000c 	.word	0x2000000c
 8000274:	2000000c 	.word	0x2000000c
 8000278:	00000000 	.word	0x00000000

0800027c <__do_global_dtors_aux>:
 800027c:	b510      	push	{r4, lr}
 800027e:	4c06      	ldr	r4, [pc, #24]	@ (8000298 <__do_global_dtors_aux+0x1c>)
 8000280:	7823      	ldrb	r3, [r4, #0]
 8000282:	b943      	cbnz	r3, 8000296 <__do_global_dtors_aux+0x1a>
 8000284:	f7ff ffd8 	bl	8000238 <deregister_tm_clones>
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <__do_global_dtors_aux+0x20>)
 800028a:	b113      	cbz	r3, 8000292 <__do_global_dtors_aux+0x16>
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x24>)
 800028e:	f3af 8000 	nop.w
 8000292:	2301      	movs	r3, #1
 8000294:	7023      	strb	r3, [r4, #0]
 8000296:	bd10      	pop	{r4, pc}
 8000298:	20000010 	.word	0x20000010
 800029c:	00000000 	.word	0x00000000
 80002a0:	08003878 	.word	0x08003878

080002a4 <frame_dummy>:
 80002a4:	b508      	push	{r3, lr}
 80002a6:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <frame_dummy+0x14>)
 80002a8:	b11b      	cbz	r3, 80002b2 <frame_dummy+0xe>
 80002aa:	4904      	ldr	r1, [pc, #16]	@ (80002bc <frame_dummy+0x18>)
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <frame_dummy+0x1c>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002b6:	e7cd      	b.n	8000254 <register_tm_clones>
 80002b8:	00000000 	.word	0x00000000
 80002bc:	20000014 	.word	0x20000014
 80002c0:	08003878 	.word	0x08003878

080002c4 <__libc_init_array>:
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <__libc_init_array+0x40>)
 80002c6:	b570      	push	{r4, r5, r6, lr}
 80002c8:	4d0f      	ldr	r5, [pc, #60]	@ (8000308 <__libc_init_array+0x44>)
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	eba3 0605 	sub.w	r6, r3, r5
 80002d0:	d007      	beq.n	80002e2 <__libc_init_array+0x1e>
 80002d2:	10b6      	asrs	r6, r6, #2
 80002d4:	2400      	movs	r4, #0
 80002d6:	3401      	adds	r4, #1
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d8f9      	bhi.n	80002d6 <__libc_init_array+0x12>
 80002e2:	4d0a      	ldr	r5, [pc, #40]	@ (800030c <__libc_init_array+0x48>)
 80002e4:	f003 fac8 	bl	8003878 <_init>
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <__libc_init_array+0x4c>)
 80002ea:	1b5e      	subs	r6, r3, r5
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80002f2:	d006      	beq.n	8000302 <__libc_init_array+0x3e>
 80002f4:	2400      	movs	r4, #0
 80002f6:	3401      	adds	r4, #1
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d8f9      	bhi.n	80002f6 <__libc_init_array+0x32>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	08003960 	.word	0x08003960
 8000308:	08003960 	.word	0x08003960
 800030c:	08003960 	.word	0x08003960
 8000310:	08003964 	.word	0x08003964

08000314 <memset>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	0786      	lsls	r6, r0, #30
 8000318:	d047      	beq.n	80003aa <memset+0x96>
 800031a:	1e54      	subs	r4, r2, #1
 800031c:	2a00      	cmp	r2, #0
 800031e:	d03e      	beq.n	800039e <memset+0x8a>
 8000320:	b2ca      	uxtb	r2, r1
 8000322:	4603      	mov	r3, r0
 8000324:	e001      	b.n	800032a <memset+0x16>
 8000326:	3c01      	subs	r4, #1
 8000328:	d339      	bcc.n	800039e <memset+0x8a>
 800032a:	f803 2b01 	strb.w	r2, [r3], #1
 800032e:	079d      	lsls	r5, r3, #30
 8000330:	d1f9      	bne.n	8000326 <memset+0x12>
 8000332:	2c03      	cmp	r4, #3
 8000334:	d92c      	bls.n	8000390 <memset+0x7c>
 8000336:	b2cd      	uxtb	r5, r1
 8000338:	2c0f      	cmp	r4, #15
 800033a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800033e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8000342:	d935      	bls.n	80003b0 <memset+0x9c>
 8000344:	f1a4 0c10 	sub.w	ip, r4, #16
 8000348:	f103 0e10 	add.w	lr, r3, #16
 800034c:	461a      	mov	r2, r3
 800034e:	f02c 060f 	bic.w	r6, ip, #15
 8000352:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8000356:	44b6      	add	lr, r6
 8000358:	e9c2 5500 	strd	r5, r5, [r2]
 800035c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000360:	3210      	adds	r2, #16
 8000362:	4572      	cmp	r2, lr
 8000364:	d1f8      	bne.n	8000358 <memset+0x44>
 8000366:	f10c 0201 	add.w	r2, ip, #1
 800036a:	f014 0f0c 	tst.w	r4, #12
 800036e:	f004 0c0f 	and.w	ip, r4, #15
 8000372:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000376:	d013      	beq.n	80003a0 <memset+0x8c>
 8000378:	f1ac 0304 	sub.w	r3, ip, #4
 800037c:	f023 0303 	bic.w	r3, r3, #3
 8000380:	3304      	adds	r3, #4
 8000382:	4413      	add	r3, r2
 8000384:	f842 5b04 	str.w	r5, [r2], #4
 8000388:	4293      	cmp	r3, r2
 800038a:	d1fb      	bne.n	8000384 <memset+0x70>
 800038c:	f00c 0403 	and.w	r4, ip, #3
 8000390:	b12c      	cbz	r4, 800039e <memset+0x8a>
 8000392:	b2c9      	uxtb	r1, r1
 8000394:	441c      	add	r4, r3
 8000396:	f803 1b01 	strb.w	r1, [r3], #1
 800039a:	42a3      	cmp	r3, r4
 800039c:	d1fb      	bne.n	8000396 <memset+0x82>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	4664      	mov	r4, ip
 80003a2:	4613      	mov	r3, r2
 80003a4:	2c00      	cmp	r4, #0
 80003a6:	d1f4      	bne.n	8000392 <memset+0x7e>
 80003a8:	e7f9      	b.n	800039e <memset+0x8a>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4614      	mov	r4, r2
 80003ae:	e7c0      	b.n	8000332 <memset+0x1e>
 80003b0:	461a      	mov	r2, r3
 80003b2:	46a4      	mov	ip, r4
 80003b4:	e7e0      	b.n	8000378 <memset+0x64>
 80003b6:	bf00      	nop

080003b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003b8:	b530      	push	{r4, r5, lr}
 80003ba:	b09f      	sub	sp, #124	@ 0x7c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003bc:	2260      	movs	r2, #96	@ 0x60
 80003be:	2100      	movs	r1, #0
 80003c0:	a806      	add	r0, sp, #24
 80003c2:	f7ff ffa7 	bl	8000314 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003c6:	2300      	movs	r3, #0

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80003c8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003cc:	e9cd 3300 	strd	r3, r3, [sp]
 80003d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80003d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80003d8:	f001 fe8a 	bl	80020f0 <HAL_PWREx_ControlVoltageScaling>
 80003dc:	b108      	cbz	r0, 80003e2 <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003de:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003e0:	e7fe      	b.n	80003e0 <SystemClock_Config+0x28>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e2:	4603      	mov	r3, r0
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80003e4:	9317      	str	r3, [sp, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80003e6:	2301      	movs	r3, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e8:	2202      	movs	r2, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80003ee:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8000448 <SystemClock_Config+0x90>
	RCC_OscInitStruct.PLL.PLLM = 1;
 80003f2:	9316      	str	r3, [sp, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLR = 1;
 80003f4:	931b      	str	r3, [sp, #108]	@ 0x6c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f6:	2410      	movs	r4, #16
	RCC_OscInitStruct.PLL.PLLN = 10;
 80003f8:	230a      	movs	r3, #10
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003fa:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLN = 10;
 80003fc:	9318      	str	r3, [sp, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80003fe:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000402:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000406:	e9cd 2219 	strd	r2, r2, [sp, #100]	@ 0x64
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	940a      	str	r4, [sp, #40]	@ 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040c:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040e:	9109      	str	r1, [sp, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000410:	f002 f95c 	bl	80026cc <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	b108      	cbz	r0, 800041c <SystemClock_Config+0x64>
 8000418:	b672      	cpsid	i
	while (1) {
 800041a:	e7fe      	b.n	800041a <SystemClock_Config+0x62>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800041c:	251f      	movs	r5, #31
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041e:	2403      	movs	r4, #3
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000420:	2200      	movs	r2, #0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000422:	e9cd 3302 	strd	r3, r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000426:	2300      	movs	r3, #0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000428:	4668      	mov	r0, sp
 800042a:	2104      	movs	r1, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	e9cd 5400 	strd	r5, r4, [sp]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000434:	f001 ffe4 	bl	8002400 <HAL_RCC_ClockConfig>
 8000438:	b108      	cbz	r0, 800043e <SystemClock_Config+0x86>
 800043a:	b672      	cpsid	i
	while (1) {
 800043c:	e7fe      	b.n	800043c <SystemClock_Config+0x84>
}
 800043e:	b01f      	add	sp, #124	@ 0x7c
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	bf00      	nop
 8000444:	f3af 8000 	nop.w
 8000448:	0000000c 	.word	0x0000000c
 800044c:	00000000 	.word	0x00000000

08000450 <main>:
int main(void) {
 8000450:	b570      	push	{r4, r5, r6, lr}
	int32_t begin = DWT->CYCCNT;
 8000452:	4d4d      	ldr	r5, [pc, #308]	@ (8000588 <main+0x138>)
int main(void) {
 8000454:	b08a      	sub	sp, #40	@ 0x28
	int32_t begin = DWT->CYCCNT;
 8000456:	686b      	ldr	r3, [r5, #4]
	HAL_Init();
 8000458:	f000 f9e4 	bl	8000824 <HAL_Init>
	SystemClock_Config();
 800045c:	f7ff ffac 	bl	80003b8 <SystemClock_Config>
	HAL_PWREx_DisableUCPDDeadBattery();
 8000460:	f001 feda 	bl	8002218 <HAL_PWREx_DisableUCPDDeadBattery>
	if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK) {
 8000464:	2002      	movs	r0, #2
 8000466:	f001 fe95 	bl	8002194 <HAL_PWREx_ConfigSupply>
 800046a:	b108      	cbz	r0, 8000470 <main+0x20>
 800046c:	b672      	cpsid	i
	while (1) {
 800046e:	e7fe      	b.n	800046e <main+0x1e>
	GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000470:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000474:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000478:	e9cd 0005 	strd	r0, r0, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b43      	ldr	r3, [pc, #268]	@ (800058c <main+0x13c>)
 800047e:	4604      	mov	r4, r0
 8000480:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
	HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000484:	4842      	ldr	r0, [pc, #264]	@ (8000590 <main+0x140>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	f042 0201 	orr.w	r2, r2, #1
 800048a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800048e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000492:	f002 0201 	and.w	r2, r2, #1
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800049a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800049e:	f042 0202 	orr.w	r2, r2, #2
 80004a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80004a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
	GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80004aa:	9102      	str	r1, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004ac:	f003 0302 	and.w	r3, r3, #2
 80004b0:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80004b2:	a902      	add	r1, sp, #8
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f001 fc73 	bl	8001da0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = UCPD1_CC2_Pin;
 80004ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004be:	2303      	movs	r3, #3
	HAL_GPIO_Init(UCPD1_CC2_GPIO_Port, &GPIO_InitStruct);
 80004c0:	4833      	ldr	r0, [pc, #204]	@ (8000590 <main+0x140>)
 80004c2:	a902      	add	r1, sp, #8
	GPIO_InitStruct.Pin = UCPD1_CC2_Pin;
 80004c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(UCPD1_CC2_GPIO_Port, &GPIO_InitStruct);
 80004ca:	f001 fc69 	bl	8001da0 <HAL_GPIO_Init>
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK) {
 80004ce:	4620      	mov	r0, r4
 80004d0:	f001 fdf0 	bl	80020b4 <HAL_ICACHE_ConfigAssociativityMode>
 80004d4:	b108      	cbz	r0, 80004da <main+0x8a>
 80004d6:	b672      	cpsid	i
	while (1) {
 80004d8:	e7fe      	b.n	80004d8 <main+0x88>
	if (HAL_ICACHE_Enable() != HAL_OK) {
 80004da:	f001 fdff 	bl	80020dc <HAL_ICACHE_Enable>
 80004de:	4606      	mov	r6, r0
 80004e0:	b108      	cbz	r0, 80004e6 <main+0x96>
 80004e2:	b672      	cpsid	i
	while (1) {
 80004e4:	e7fe      	b.n	80004e4 <main+0x94>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80004e6:	4601      	mov	r1, r0
 80004e8:	2220      	movs	r2, #32
 80004ea:	a802      	add	r0, sp, #8
 80004ec:	f7ff ff12 	bl	8000314 <memset>
	hadc4.Instance = ADC4;
 80004f0:	4c28      	ldr	r4, [pc, #160]	@ (8000594 <main+0x144>)
 80004f2:	4b29      	ldr	r3, [pc, #164]	@ (8000598 <main+0x148>)
	hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80004f4:	2204      	movs	r2, #4
 80004f6:	f44f 1030 	mov.w	r0, #2883584	@ 0x2c0000
	hadc4.Instance = ADC4;
 80004fa:	6023      	str	r3, [r4, #0]
	hadc4.Init.ContinuousConvMode = ENABLE;
 80004fc:	2301      	movs	r3, #1
	hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80004fe:	e9c4 0201 	strd	r0, r2, [r4, #4]
	hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000502:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
	hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000506:	61a2      	str	r2, [r4, #24]
	hadc4.Init.ContinuousConvMode = ENABLE;
 8000508:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
	hadc4.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800050c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
	hadc4.Init.NbrOfConversion = 1;
 8000510:	62a3      	str	r3, [r4, #40]	@ 0x28
	hadc4.Init.DMAContinuousRequests = ENABLE;
 8000512:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
	hadc4.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000516:	2300      	movs	r3, #0
	if (HAL_ADC_Init(&hadc4) != HAL_OK) {
 8000518:	4620      	mov	r0, r4
	hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051a:	e9c4 660d 	strd	r6, r6, [r4, #52]	@ 0x34
	hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800051e:	e9c4 6611 	strd	r6, r6, [r4, #68]	@ 0x44
	hadc4.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000522:	e9c4 2304 	strd	r2, r3, [r4, #16]
	hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000526:	66a1      	str	r1, [r4, #104]	@ 0x68
	hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000528:	6226      	str	r6, [r4, #32]
	hadc4.Init.LowPowerAutoWait = DISABLE;
 800052a:	7726      	strb	r6, [r4, #28]
	hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 800052c:	64e6      	str	r6, [r4, #76]	@ 0x4c
	hadc4.Init.OversamplingMode = DISABLE;
 800052e:	f884 6054 	strb.w	r6, [r4, #84]	@ 0x54
	if (HAL_ADC_Init(&hadc4) != HAL_OK) {
 8000532:	f000 f9bb 	bl	80008ac <HAL_ADC_Init>
 8000536:	b108      	cbz	r0, 800053c <main+0xec>
 8000538:	b672      	cpsid	i
	while (1) {
 800053a:	e7fe      	b.n	800053a <main+0xea>
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800053c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8000580 <main+0x130>
	sConfig.Channel = ADC_CHANNEL_11;
 8000540:	2301      	movs	r3, #1
 8000542:	4a16      	ldr	r2, [pc, #88]	@ (800059c <main+0x14c>)
	sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000544:	9004      	str	r0, [sp, #16]
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK) {
 8000546:	a902      	add	r1, sp, #8
 8000548:	4620      	mov	r0, r4
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800054a:	ed8d 7b06 	vstr	d7, [sp, #24]
	sConfig.Channel = ADC_CHANNEL_11;
 800054e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK) {
 8000552:	f000 fd35 	bl	8000fc0 <HAL_ADC_ConfigChannel>
 8000556:	4601      	mov	r1, r0
 8000558:	b108      	cbz	r0, 800055e <main+0x10e>
 800055a:	b672      	cpsid	i
	while (1) {
 800055c:	e7fe      	b.n	800055c <main+0x10c>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800055e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000562:	4620      	mov	r0, r4
 8000564:	f001 fa7c 	bl	8001a60 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc4);
 8000568:	4620      	mov	r0, r4
 800056a:	f001 f9db 	bl	8001924 <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(&hadc4, 10000);
 800056e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000572:	4620      	mov	r0, r4
 8000574:	f000 fb52 	bl	8000c1c <HAL_ADC_PollForConversion>
	int32_t end = DWT->CYCCNT;
 8000578:	686b      	ldr	r3, [r5, #4]
	while (1) {
 800057a:	e7fe      	b.n	800057a <main+0x12a>
 800057c:	f3af 8000 	nop.w
 8000580:	00000004 	.word	0x00000004
 8000584:	00000000 	.word	0x00000000
 8000588:	e0001000 	.word	0xe0001000
 800058c:	46020c00 	.word	0x46020c00
 8000590:	42020400 	.word	0x42020400
 8000594:	20000030 	.word	0x20000030
 8000598:	46021000 	.word	0x46021000
 800059c:	2e000800 	.word	0x2e000800

080005a0 <Error_Handler>:
 80005a0:	b672      	cpsid	i
	while (1) {
 80005a2:	e7fe      	b.n	80005a2 <Error_Handler+0x2>

080005a4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <HAL_MspInit+0x30>)
{
 80005a6:	b500      	push	{lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
{
 80005ac:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	f042 0204 	orr.w	r2, r2, #4
 80005b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80005b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_EnableVddA();
 80005c2:	f001 fe21 	bl	8002208 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80005c6:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c8:	b003      	add	sp, #12
 80005ca:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80005ce:	f001 bb23 	b.w	8001c18 <HAL_NVIC_SetPriorityGrouping>
 80005d2:	bf00      	nop
 80005d4:	46020c00 	.word	0x46020c00

080005d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005d8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	2100      	movs	r1, #0
{
 80005dc:	4604      	mov	r4, r0
 80005de:	b0b8      	sub	sp, #224	@ 0xe0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	22c0      	movs	r2, #192	@ 0xc0
 80005e2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80005e8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80005ec:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ee:	f7ff fe91 	bl	8000314 <memset>
  if(hadc->Instance==ADC4)
 80005f2:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <HAL_ADC_MspInit+0xb0>)
 80005f4:	6822      	ldr	r2, [r4, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d001      	beq.n	80005fe <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC4_MspInit 1 */

  }

}
 80005fa:	b038      	add	sp, #224	@ 0xe0
 80005fc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80005fe:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 8000678 <HAL_ADC_MspInit+0xa0>
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000602:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000606:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000608:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800060c:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060e:	f002 fe1f 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	bb60      	cbnz	r0, 800066e <HAL_ADC_MspInit+0x96>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000614:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8000680 <HAL_ADC_MspInit+0xa8>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2400      	movs	r4, #0
    __HAL_RCC_ADC4_CLK_ENABLE();
 800061a:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC4_CLK_ENABLE();
 800061e:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
 8000622:	f040 0020 	orr.w	r0, r0, #32
 8000626:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
 800062a:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
 800062e:	f000 0020 	and.w	r0, r0, #32
 8000632:	9000      	str	r0, [sp, #0]
 8000634:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 800063a:	f040 0001 	orr.w	r0, r0, #1
 800063e:	f8c3 008c 	str.w	r0, [r3, #140]	@ 0x8c
 8000642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	4812      	ldr	r0, [pc, #72]	@ (8000690 <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800064e:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	f001 fba3 	bl	8001da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 800065a:	4622      	mov	r2, r4
 800065c:	4621      	mov	r1, r4
 800065e:	2071      	movs	r0, #113	@ 0x71
 8000660:	f001 faec 	bl	8001c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000664:	2071      	movs	r0, #113	@ 0x71
 8000666:	f001 fb25 	bl	8001cb4 <HAL_NVIC_EnableIRQ>
}
 800066a:	b038      	add	sp, #224	@ 0xe0
 800066c:	bd10      	pop	{r4, pc}
      Error_Handler();
 800066e:	f7ff ff97 	bl	80005a0 <Error_Handler>
 8000672:	e7cf      	b.n	8000614 <HAL_ADC_MspInit+0x3c>
 8000674:	f3af 8000 	nop.w
 8000678:	00008000 	.word	0x00008000
 800067c:	00000000 	.word	0x00000000
 8000680:	00000040 	.word	0x00000040
 8000684:	00000003 	.word	0x00000003
 8000688:	46021000 	.word	0x46021000
 800068c:	46020c00 	.word	0x46020c00
 8000690:	42020000 	.word	0x42020000

08000694 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000694:	e7fe      	b.n	8000694 <NMI_Handler>
 8000696:	bf00      	nop

08000698 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <HardFault_Handler>
 800069a:	bf00      	nop

0800069c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <MemManage_Handler>
 800069e:	bf00      	nop

080006a0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <BusFault_Handler>
 80006a2:	bf00      	nop

080006a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler>
 80006a6:	bf00      	nop

080006a8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 b8e2 	b.w	800087c <HAL_IncTick>

080006b8 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 (12bits) global interrupt.
  */
void ADC4_IRQHandler(void)
{
 80006b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 80006ba:	4c08      	ldr	r4, [pc, #32]	@ (80006dc <ADC4_IRQHandler+0x24>)
 80006bc:	4620      	mov	r0, r4
 80006be:	f000 fb37 	bl	8000d30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */
	extern uint32_t value_adc;
	value_adc = HAL_ADC_GetValue(&hadc4);
 80006c2:	4620      	mov	r0, r4
 80006c4:	f000 fb24 	bl	8000d10 <HAL_ADC_GetValue>
 80006c8:	4602      	mov	r2, r0
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <ADC4_IRQHandler+0x28>)
	HAL_ADC_PollForConversion(&hadc4, 10000);
 80006cc:	4620      	mov	r0, r4
  /* USER CODE END ADC4_IRQn 1 */
}
 80006ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_PollForConversion(&hadc4, 10000);
 80006d2:	f242 7110 	movw	r1, #10000	@ 0x2710
	value_adc = HAL_ADC_GetValue(&hadc4);
 80006d6:	601a      	str	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc4, 10000);
 80006d8:	f000 baa0 	b.w	8000c1c <HAL_ADC_PollForConversion>
 80006dc:	20000030 	.word	0x20000030
 80006e0:	2000002c 	.word	0x2000002c

080006e4 <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80006e4:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_MSISON;
 80006e6:	2101      	movs	r1, #1
{
 80006e8:	b410      	push	{r4}

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006ea:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ee:	480e      	ldr	r0, [pc, #56]	@ (8000728 <SystemInit+0x44>)
 80006f0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  RCC->CR = RCC_CR_MSISON;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <SystemInit+0x48>)
 80006fe:	6019      	str	r1, [r3, #0]
  RCC->CFGR1 = 0U;
 8000700:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000702:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000704:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000706:	6819      	ldr	r1, [r3, #0]
 8000708:	f021 51a8 	bic.w	r1, r1, #352321536	@ 0x15000000
 800070c:	f421 2110 	bic.w	r1, r1, #589824	@ 0x90000
 8000710:	6019      	str	r1, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000714:	6819      	ldr	r1, [r3, #0]
 8000716:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800071a:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0U;
 800071c:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800071e:	6084      	str	r4, [r0, #8]
  #endif
}
 8000720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00
 800072c:	46020c00 	.word	0x46020c00

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000768 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000734:	f7ff ffd6 	bl	80006e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000738:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800073a:	e003      	b.n	8000744 <LoopCopyDataInit>

0800073c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800073c:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800073e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000740:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000742:	3104      	adds	r1, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000748:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800074a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800074c:	d3f6      	bcc.n	800073c <CopyDataInit>
	ldr	r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000750:	e002      	b.n	8000758 <LoopFillZerobss>

08000752 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000752:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000754:	f842 3b04 	str.w	r3, [r2], #4

08000758 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <LoopForever+0x16>)
	cmp	r2, r3
 800075a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800075c:	d3f9      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075e:	f7ff fdb1 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000762:	f7ff fe75 	bl	8000450 <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000768:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800076c:	08003968 	.word	0x08003968
	ldr	r0, =_sdata
 8000770:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000774:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000778:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800077c:	200000c0 	.word	0x200000c0

08000780 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_IRQHandler>
	...

08000784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000786:	4e24      	ldr	r6, [pc, #144]	@ (8000818 <HAL_InitTick+0x94>)
 8000788:	7832      	ldrb	r2, [r6, #0]
 800078a:	b1ea      	cbz	r2, 80007c8 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800078c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000790:	691c      	ldr	r4, [r3, #16]
 8000792:	4605      	mov	r5, r0
 8000794:	f014 0404 	ands.w	r4, r4, #4
 8000798:	d018      	beq.n	80007cc <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800079a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800079e:	fbb1 f2f2 	udiv	r2, r1, r2
 80007a2:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <HAL_InitTick+0x98>)
 80007a4:	681c      	ldr	r4, [r3, #0]
 80007a6:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80007aa:	4620      	mov	r0, r4
 80007ac:	f001 fa90 	bl	8001cd0 <HAL_SYSTICK_Config>
 80007b0:	4604      	mov	r4, r0
 80007b2:	b948      	cbnz	r0, 80007c8 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b4:	4602      	mov	r2, r0
 80007b6:	4629      	mov	r1, r5
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007bc:	f001 fa3e 	bl	8001c3c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <HAL_InitTick+0x9c>)
 80007c2:	4620      	mov	r0, r4
 80007c4:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80007c8:	2001      	movs	r0, #1
}
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80007cc:	f001 face 	bl	8001d6c <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 80007d0:	2801      	cmp	r0, #1
 80007d2:	d00d      	beq.n	80007f0 <HAL_InitTick+0x6c>
 80007d4:	2802      	cmp	r0, #2
 80007d6:	d015      	beq.n	8000804 <HAL_InitTick+0x80>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d1e6      	bne.n	80007aa <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80007dc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80007e0:	7831      	ldrb	r1, [r6, #0]
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <HAL_InitTick+0x98>)
 80007e4:	fbb2 f2f1 	udiv	r2, r2, r1
 80007e8:	681c      	ldr	r4, [r3, #0]
 80007ea:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 80007ee:	e7dc      	b.n	80007aa <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80007f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007f4:	7831      	ldrb	r1, [r6, #0]
 80007f6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80007fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80007fe:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8000802:	e7d2      	b.n	80007aa <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000804:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000808:	7831      	ldrb	r1, [r6, #0]
 800080a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800080e:	fbb2 f2f1 	udiv	r2, r2, r1
 8000812:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8000816:	e7c8      	b.n	80007aa <HAL_InitTick+0x26>
 8000818:	20000004 	.word	0x20000004
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008

08000824 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000824:	4a11      	ldr	r2, [pc, #68]	@ (800086c <HAL_Init+0x48>)
{
 8000826:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000828:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000830:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000832:	f001 f9f1 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000836:	f001 fd55 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 800083a:	4603      	mov	r3, r0
 800083c:	4a0c      	ldr	r2, [pc, #48]	@ (8000870 <HAL_Init+0x4c>)
 800083e:	480d      	ldr	r0, [pc, #52]	@ (8000874 <HAL_Init+0x50>)
 8000840:	6a12      	ldr	r2, [r2, #32]
 8000842:	490d      	ldr	r1, [pc, #52]	@ (8000878 <HAL_Init+0x54>)
 8000844:	f002 020f 	and.w	r2, r2, #15
 8000848:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800084a:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800084c:	40d3      	lsrs	r3, r2
 800084e:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000850:	f001 fa4e 	bl	8001cf0 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff ff95 	bl	8000784 <HAL_InitTick>
 800085a:	b110      	cbz	r0, 8000862 <HAL_Init+0x3e>
    return HAL_ERROR;
 800085c:	2401      	movs	r4, #1
}
 800085e:	4620      	mov	r0, r4
 8000860:	bd10      	pop	{r4, pc}
 8000862:	4604      	mov	r4, r0
  HAL_MspInit();
 8000864:	f7ff fe9e 	bl	80005a4 <HAL_MspInit>
}
 8000868:	4620      	mov	r0, r4
 800086a:	bd10      	pop	{r4, pc}
 800086c:	40022000 	.word	0x40022000
 8000870:	46020c00 	.word	0x46020c00
 8000874:	080038d0 	.word	0x080038d0
 8000878:	20000000 	.word	0x20000000

0800087c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800087c:	4a03      	ldr	r2, [pc, #12]	@ (800088c <HAL_IncTick+0x10>)
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <HAL_IncTick+0x14>)
 8000880:	6811      	ldr	r1, [r2, #0]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	440b      	add	r3, r1
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	200000bc 	.word	0x200000bc
 8000890:	20000004 	.word	0x20000004

08000894 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000894:	4b01      	ldr	r3, [pc, #4]	@ (800089c <HAL_GetTick+0x8>)
 8000896:	6818      	ldr	r0, [r3, #0]
}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	200000bc 	.word	0x200000bc

080008a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80008a0:	4b01      	ldr	r3, [pc, #4]	@ (80008a8 <HAL_GetREVID+0x8>)
 80008a2:	6818      	ldr	r0, [r3, #0]
}
 80008a4:	0c00      	lsrs	r0, r0, #16
 80008a6:	4770      	bx	lr
 80008a8:	e0044000 	.word	0xe0044000

080008ac <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80008ac:	2800      	cmp	r0, #0
 80008ae:	f000 80cb 	beq.w	8000a48 <HAL_ADC_Init+0x19c>
{
 80008b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008b4:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 80008b6:	4604      	mov	r4, r0
{
 80008b8:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	f000 80ab 	beq.w	8000a16 <HAL_ADC_Init+0x16a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80008c0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80008c2:	6893      	ldr	r3, [r2, #8]
 80008c4:	009d      	lsls	r5, r3, #2
 80008c6:	d505      	bpl.n	80008d4 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008c8:	6893      	ldr	r3, [r2, #8]
 80008ca:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80008ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80008d2:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80008d4:	6893      	ldr	r3, [r2, #8]
 80008d6:	00d8      	lsls	r0, r3, #3
 80008d8:	d419      	bmi.n	800090e <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80008da:	4ba5      	ldr	r3, [pc, #660]	@ (8000b70 <HAL_ADC_Init+0x2c4>)
 80008dc:	48a5      	ldr	r0, [pc, #660]	@ (8000b74 <HAL_ADC_Init+0x2c8>)
 80008de:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80008e0:	6891      	ldr	r1, [r2, #8]
 80008e2:	099b      	lsrs	r3, r3, #6
 80008e4:	fba0 0303 	umull	r0, r3, r0, r3
 80008e8:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80008ec:	099b      	lsrs	r3, r3, #6
 80008ee:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80008f2:	3301      	adds	r3, #1
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80008fa:	6091      	str	r1, [r2, #8]
 80008fc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80008fe:	9b01      	ldr	r3, [sp, #4]
 8000900:	b12b      	cbz	r3, 800090e <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8000902:	9b01      	ldr	r3, [sp, #4]
 8000904:	3b01      	subs	r3, #1
 8000906:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000908:	9b01      	ldr	r3, [sp, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1f9      	bne.n	8000902 <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800090e:	6893      	ldr	r3, [r2, #8]
 8000910:	00d9      	lsls	r1, r3, #3
 8000912:	d412      	bmi.n	800093a <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    tmp_hal_status = HAL_ERROR;
 8000914:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000916:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000918:	f043 0310 	orr.w	r3, r3, #16
 800091c:	67a3      	str	r3, [r4, #120]	@ 0x78
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800091e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8000920:	4303      	orrs	r3, r0
 8000922:	67e3      	str	r3, [r4, #124]	@ 0x7c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000924:	6893      	ldr	r3, [r2, #8]
 8000926:	075b      	lsls	r3, r3, #29
 8000928:	d50b      	bpl.n	8000942 <HAL_ADC_Init+0x96>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800092a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800092c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 8000934:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8000936:	b003      	add	sp, #12
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093a:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800093c:	2000      	movs	r0, #0
 800093e:	075b      	lsls	r3, r3, #29
 8000940:	d4f3      	bmi.n	800092a <HAL_ADC_Init+0x7e>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000942:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8000944:	f011 0110 	ands.w	r1, r1, #16
 8000948:	d1f0      	bne.n	800092c <HAL_ADC_Init+0x80>
    ADC_STATE_CLR_SET(hadc->State,
 800094a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800094c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	67a3      	str	r3, [r4, #120]	@ 0x78
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000956:	6893      	ldr	r3, [r2, #8]
 8000958:	07df      	lsls	r7, r3, #31
 800095a:	d562      	bpl.n	8000a22 <HAL_ADC_Init+0x176>
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800095c:	4b86      	ldr	r3, [pc, #536]	@ (8000b78 <HAL_ADC_Init+0x2cc>)
 800095e:	429a      	cmp	r2, r3
 8000960:	f000 8086 	beq.w	8000a70 <HAL_ADC_Init+0x1c4>
 8000964:	68a5      	ldr	r5, [r4, #8]
                    hadc->Init.Overrun                                                    |
 8000966:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000968:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                    hadc->Init.Overrun                                                    |
 800096c:	432b      	orrs	r3, r5
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800096e:	f894 5024 	ldrb.w	r5, [r4, #36]	@ 0x24
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000972:	2901      	cmp	r1, #1
                    hadc->Init.Overrun                                                    |
 8000974:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8000978:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800097c:	d103      	bne.n	8000986 <HAL_ADC_Init+0xda>
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800097e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000980:	3901      	subs	r1, #1
 8000982:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000986:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000988:	b121      	cbz	r1, 8000994 <HAL_ADC_Init+0xe8>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800098a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800098c:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
 8000990:	4329      	orrs	r1, r5
 8000992:	430b      	orrs	r3, r1
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8000994:	68d5      	ldr	r5, [r2, #12]
 8000996:	4979      	ldr	r1, [pc, #484]	@ (8000b7c <HAL_ADC_Init+0x2d0>)
 8000998:	4029      	ands	r1, r5
 800099a:	4319      	orrs	r1, r3
 800099c:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800099e:	6891      	ldr	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009a0:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009a2:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	430b      	orrs	r3, r1
 80009ac:	d123      	bne.n	80009f6 <HAL_ADC_Init+0x14a>
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80009ae:	4b74      	ldr	r3, [pc, #464]	@ (8000b80 <HAL_ADC_Init+0x2d4>)
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009b0:	7f21      	ldrb	r1, [r4, #28]
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80009b2:	429a      	cmp	r2, r3
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80009b4:	68d3      	ldr	r3, [r2, #12]
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80009b6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80009b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009bc:	ea4f 3181 	mov.w	r1, r1, lsl #14
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80009c0:	f023 0303 	bic.w	r3, r3, #3
 80009c4:	ea43 0301 	orr.w	r3, r3, r1
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80009c8:	bf18      	it	ne
 80009ca:	006d      	lslne	r5, r5, #1
        if (hadc->Init.GainCompensation != 0UL)
 80009cc:	68e1      	ldr	r1, [r4, #12]
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80009ce:	432b      	orrs	r3, r5
 80009d0:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80009d2:	2900      	cmp	r1, #0
 80009d4:	f040 80e8 	bne.w	8000ba8 <HAL_ADC_Init+0x2fc>
        if (hadc->Init.OversamplingMode == ENABLE)
 80009d8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80009dc:	2b01      	cmp	r3, #1
 80009de:	f000 80ff 	beq.w	8000be0 <HAL_ADC_Init+0x334>
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80009e2:	6913      	ldr	r3, [r2, #16]
 80009e4:	f023 0301 	bic.w	r3, r3, #1
 80009e8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80009ea:	6913      	ldr	r3, [r2, #16]
 80009ec:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80009ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80009f2:	430b      	orrs	r3, r1
 80009f4:	6113      	str	r3, [r2, #16]
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80009f6:	6923      	ldr	r3, [r4, #16]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	f000 80df 	beq.w	8000bbc <HAL_ADC_Init+0x310>
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80009fe:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000a00:	f023 030f 	bic.w	r3, r3, #15
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a06:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000a08:	f023 0303 	bic.w	r3, r3, #3
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8000a12:	b003      	add	sp, #12
 8000a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8000a16:	f7ff fddf 	bl	80005d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000a1a:	67e5      	str	r5, [r4, #124]	@ 0x7c
    hadc->Lock = HAL_UNLOCKED;
 8000a1c:	f884 5074 	strb.w	r5, [r4, #116]	@ 0x74
 8000a20:	e74e      	b.n	80008c0 <HAL_ADC_Init+0x14>
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8000a22:	4b55      	ldr	r3, [pc, #340]	@ (8000b78 <HAL_ADC_Init+0x2cc>)
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8000a24:	68a5      	ldr	r5, [r4, #8]
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d010      	beq.n	8000a4c <HAL_ADC_Init+0x1a0>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a2a:	4955      	ldr	r1, [pc, #340]	@ (8000b80 <HAL_ADC_Init+0x2d4>)
 8000a2c:	428a      	cmp	r2, r1
 8000a2e:	f000 80cd 	beq.w	8000bcc <HAL_ADC_Init+0x320>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	07db      	lsls	r3, r3, #31
 8000a36:	d496      	bmi.n	8000966 <HAL_ADC_Init+0xba>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000a38:	4952      	ldr	r1, [pc, #328]	@ (8000b84 <HAL_ADC_Init+0x2d8>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8000a3a:	680b      	ldr	r3, [r1, #0]
 8000a3c:	6866      	ldr	r6, [r4, #4]
 8000a3e:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8000a42:	4333      	orrs	r3, r6
 8000a44:	600b      	str	r3, [r1, #0]
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8000a46:	e78e      	b.n	8000966 <HAL_ADC_Init+0xba>
    return HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
}
 8000a4a:	4770      	bx	lr
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8000a4c:	1e6b      	subs	r3, r5, #1
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8000a4e:	68d5      	ldr	r5, [r2, #12]
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8000a50:	f003 030c 	and.w	r3, r3, #12
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8000a54:	f025 050c 	bic.w	r5, r5, #12
 8000a58:	432b      	orrs	r3, r5
 8000a5a:	60d3      	str	r3, [r2, #12]
        MODIFY_REG(ADC4_COMMON->CCR,
 8000a5c:	f8d2 5308 	ldr.w	r5, [r2, #776]	@ 0x308
 8000a60:	6863      	ldr	r3, [r4, #4]
 8000a62:	f425 1570 	bic.w	r5, r5, #3932160	@ 0x3c0000
 8000a66:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000a6a:	432b      	orrs	r3, r5
 8000a6c:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8000a70:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a72:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a76:	7f27      	ldrb	r7, [r4, #28]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8000a78:	3b00      	subs	r3, #0
 8000a7a:	6965      	ldr	r5, [r4, #20]
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a7c:	ea4f 3246 	mov.w	r2, r6, lsl #13
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8000a80:	bf18      	it	ne
 8000a82:	2301      	movne	r3, #1
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a84:	ea42 3287 	orr.w	r2, r2, r7, lsl #14
 8000a88:	432a      	orrs	r2, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8000a8a:	6925      	ldr	r5, [r4, #16]
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8000a8c:	f894 7040 	ldrb.w	r7, [r4, #64]	@ 0x40
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8000a90:	2d00      	cmp	r5, #0
 8000a92:	bfa8      	it	ge
 8000a94:	f44f 1c00 	movge.w	ip, #2097152	@ 0x200000
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8000a98:	ea4f 3303 	mov.w	r3, r3, lsl #12
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8000a9c:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8000aa0:	ea42 0203 	orr.w	r2, r2, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aa4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8000aa8:	bfb8      	it	lt
 8000aaa:	f025 4c00 	biclt.w	ip, r5, #2147483648	@ 0x80000000
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aae:	2b01      	cmp	r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8000ab0:	ea42 020c 	orr.w	r2, r2, ip
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ab4:	d056      	beq.n	8000b64 <HAL_ADC_Init+0x2b8>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ab6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000ab8:	b123      	cbz	r3, 8000ac4 <HAL_ADC_Init+0x218>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8000aba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8000abc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8000ac0:	4333      	orrs	r3, r6
 8000ac2:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ac4:	4e2c      	ldr	r6, [pc, #176]	@ (8000b78 <HAL_ADC_Init+0x2cc>)
 8000ac6:	4b30      	ldr	r3, [pc, #192]	@ (8000b88 <HAL_ADC_Init+0x2dc>)
 8000ac8:	68f7      	ldr	r7, [r6, #12]
 8000aca:	403b      	ands	r3, r7
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60f3      	str	r3, [r6, #12]
      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8000ad0:	6a23      	ldr	r3, [r4, #32]
 8000ad2:	b113      	cbz	r3, 8000ada <HAL_ADC_Init+0x22e>
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8000ad4:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8000ad6:	433b      	orrs	r3, r7
 8000ad8:	6473      	str	r3, [r6, #68]	@ 0x44
      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8000ada:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8000adc:	b11b      	cbz	r3, 8000ae6 <HAL_ADC_Init+0x23a>
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8000ade:	4e26      	ldr	r6, [pc, #152]	@ (8000b78 <HAL_ADC_Init+0x2cc>)
 8000ae0:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8000ae2:	433b      	orrs	r3, r7
 8000ae4:	6473      	str	r3, [r6, #68]	@ 0x44
      if (hadc->Init.OversamplingMode == ENABLE)
 8000ae6:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d052      	beq.n	8000b94 <HAL_ADC_Init+0x2e8>
      MODIFY_REG(hadc->Instance->CFGR2,
 8000aee:	4e22      	ldr	r6, [pc, #136]	@ (8000b78 <HAL_ADC_Init+0x2cc>)
 8000af0:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <HAL_ADC_Init+0x2e0>)
 8000af2:	6937      	ldr	r7, [r6, #16]
 8000af4:	403b      	ands	r3, r7
 8000af6:	430b      	orrs	r3, r1
 8000af8:	6133      	str	r3, [r6, #16]
  MODIFY_REG(ADCx->SMPR1,
 8000afa:	6973      	ldr	r3, [r6, #20]
 8000afc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8000afe:	f023 0307 	bic.w	r3, r3, #7
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6173      	str	r3, [r6, #20]
 8000b06:	6973      	ldr	r3, [r6, #20]
 8000b08:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8000b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b0e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8000b12:	6173      	str	r3, [r6, #20]
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8000b14:	b30d      	cbz	r5, 8000b5a <HAL_ADC_Init+0x2ae>
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8000b16:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 8000b1a:	d10d      	bne.n	8000b38 <HAL_ADC_Init+0x28c>
        MODIFY_REG(hadc->Instance->CHSELR,
 8000b1c:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8000b1e:	f06f 010f 	mvn.w	r1, #15
 8000b22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000b24:	3b01      	subs	r3, #1
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	f003 031c 	and.w	r3, r3, #28
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8000b34:	430b      	orrs	r3, r1
 8000b36:	62b3      	str	r3, [r6, #40]	@ 0x28
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000b38:	490f      	ldr	r1, [pc, #60]	@ (8000b78 <HAL_ADC_Init+0x2cc>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_ADC_Init+0x2e4>)
 8000b3c:	68c9      	ldr	r1, [r1, #12]
 8000b3e:	400b      	ands	r3, r1
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d04a      	beq.n	8000bda <HAL_ADC_Init+0x32e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b44:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000b46:	f023 0312 	bic.w	r3, r3, #18
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	67a3      	str	r3, [r4, #120]	@ 0x78
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b50:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	67e3      	str	r3, [r4, #124]	@ 0x7c
        tmp_hal_status = HAL_ERROR;
 8000b58:	e6ec      	b.n	8000934 <HAL_ADC_Init+0x88>
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8000b5a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8000b5c:	f063 030f 	orn	r3, r3, #15
 8000b60:	62b3      	str	r3, [r6, #40]	@ 0x28
 8000b62:	e7e9      	b.n	8000b38 <HAL_ADC_Init+0x28c>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d14e      	bne.n	8000c06 <HAL_ADC_Init+0x35a>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b68:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8000b6c:	e7a3      	b.n	8000ab6 <HAL_ADC_Init+0x20a>
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	053e2d63 	.word	0x053e2d63
 8000b78:	46021000 	.word	0x46021000
 8000b7c:	fff0c013 	.word	0xfff0c013
 8000b80:	42028000 	.word	0x42028000
 8000b84:	46021308 	.word	0x46021308
 8000b88:	ffde800d 	.word	0xffde800d
 8000b8c:	f7fffc02 	.word	0xf7fffc02
 8000b90:	833ffff3 	.word	0x833ffff3
                     hadc->Init.Oversampling.TriggeredMode |
 8000b94:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8000b96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8000ba0:	430b      	orrs	r3, r1
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8000ba2:	f043 0101 	orr.w	r1, r3, #1
 8000ba6:	e7a2      	b.n	8000aee <HAL_ADC_Init+0x242>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000ba8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000baa:	f36f 030d 	bfc	r3, #0, #14
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	6713      	str	r3, [r2, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8000bb2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000bb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb8:	6713      	str	r3, [r2, #112]	@ 0x70
}
 8000bba:	e70d      	b.n	80009d8 <HAL_ADC_Init+0x12c>
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000bbc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000bbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000bc0:	f021 010f 	bic.w	r1, r1, #15
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	e71c      	b.n	8000a06 <HAL_ADC_Init+0x15a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000bcc:	6893      	ldr	r3, [r2, #8]
 8000bce:	07de      	lsls	r6, r3, #31
 8000bd0:	f53f aec9 	bmi.w	8000966 <HAL_ADC_Init+0xba>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000bd4:	f501 7142 	add.w	r1, r1, #776	@ 0x308
 8000bd8:	e72f      	b.n	8000a3a <HAL_ADC_Init+0x18e>
        ADC_CLEAR_ERRORCODE(hadc);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8000bde:	e712      	b.n	8000a06 <HAL_ADC_Init+0x15a>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000be0:	e9d4 3117 	ldrd	r3, r1, [r4, #92]	@ 0x5c
 8000be4:	6915      	ldr	r5, [r2, #16]
 8000be6:	430b      	orrs	r3, r1
 8000be8:	490b      	ldr	r1, [pc, #44]	@ (8000c18 <HAL_ADC_Init+0x36c>)
 8000bea:	4029      	ands	r1, r5
 8000bec:	430b      	orrs	r3, r1
 8000bee:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8000bfa:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6113      	str	r3, [r2, #16]
 8000c04:	e6f1      	b.n	80009ea <HAL_ADC_Init+0x13e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c06:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000c08:	f043 0320 	orr.w	r3, r3, #32
 8000c0c:	67a3      	str	r3, [r4, #120]	@ 0x78
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c0e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8000c16:	e74e      	b.n	8000ab6 <HAL_ADC_Init+0x20a>
 8000c18:	fc00f81e 	.word	0xfc00f81e

08000c1c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000c1e:	6984      	ldr	r4, [r0, #24]
{
 8000c20:	4605      	mov	r5, r0
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000c22:	2c08      	cmp	r4, #8
{
 8000c24:	460f      	mov	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000c26:	d004      	beq.n	8000c32 <HAL_ADC_PollForConversion+0x16>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8000c28:	6803      	ldr	r3, [r0, #0]
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8000c2a:	68db      	ldr	r3, [r3, #12]
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8000c2c:	07da      	lsls	r2, r3, #31
 8000c2e:	d42a      	bmi.n	8000c86 <HAL_ADC_PollForConversion+0x6a>
        tmp_flag_end = (ADC_FLAG_EOC);
 8000c30:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000c32:	f7ff fe2f 	bl	8000894 <HAL_GetTick>
 8000c36:	1c7b      	adds	r3, r7, #1
 8000c38:	4606      	mov	r6, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000c3a:	682a      	ldr	r2, [r5, #0]
 8000c3c:	d12a      	bne.n	8000c94 <HAL_ADC_PollForConversion+0x78>
 8000c3e:	6813      	ldr	r3, [r2, #0]
 8000c40:	421c      	tst	r4, r3
 8000c42:	d0fc      	beq.n	8000c3e <HAL_ADC_PollForConversion+0x22>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c44:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8000c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4a:	67ab      	str	r3, [r5, #120]	@ 0x78
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000c4c:	68d3      	ldr	r3, [r2, #12]
 8000c4e:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
 8000c52:	d116      	bne.n	8000c82 <HAL_ADC_PollForConversion+0x66>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000c54:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8000c58:	b99b      	cbnz	r3, 8000c82 <HAL_ADC_PollForConversion+0x66>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <HAL_ADC_PollForConversion+0xf0>)
 8000c5c:	429a      	cmp	r2, r3
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000c5e:	6813      	ldr	r3, [r2, #0]
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8000c60:	d02c      	beq.n	8000cbc <HAL_ADC_PollForConversion+0xa0>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000c62:	071f      	lsls	r7, r3, #28
 8000c64:	d506      	bpl.n	8000c74 <HAL_ADC_PollForConversion+0x58>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000c66:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8000c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c6c:	67ab      	str	r3, [r5, #120]	@ 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000c6e:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8000c70:	04de      	lsls	r6, r3, #19
 8000c72:	d53b      	bpl.n	8000cec <HAL_ADC_PollForConversion+0xd0>
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8000c74:	2c08      	cmp	r4, #8
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8000c76:	68d3      	ldr	r3, [r2, #12]
      if (tmp_flag_end == ADC_FLAG_EOS)
 8000c78:	d03d      	beq.n	8000cf6 <HAL_ADC_PollForConversion+0xda>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8000c7a:	0458      	lsls	r0, r3, #17
 8000c7c:	d401      	bmi.n	8000c82 <HAL_ADC_PollForConversion+0x66>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000c7e:	230c      	movs	r3, #12
 8000c80:	6013      	str	r3, [r2, #0]
      }

    }
  }

  return HAL_OK;
 8000c82:	2000      	movs	r0, #0
}
 8000c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c86:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8000c88:	f043 0320 	orr.w	r3, r3, #32
 8000c8c:	6783      	str	r3, [r0, #120]	@ 0x78
        return HAL_ERROR;
 8000c8e:	2001      	movs	r0, #1
}
 8000c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000c92:	b147      	cbz	r7, 8000ca6 <HAL_ADC_PollForConversion+0x8a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000c94:	6813      	ldr	r3, [r2, #0]
 8000c96:	4223      	tst	r3, r4
 8000c98:	d1d4      	bne.n	8000c44 <HAL_ADC_PollForConversion+0x28>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000c9a:	f7ff fdfb 	bl	8000894 <HAL_GetTick>
 8000c9e:	1b83      	subs	r3, r0, r6
 8000ca0:	42bb      	cmp	r3, r7
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000ca2:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000ca4:	d9f5      	bls.n	8000c92 <HAL_ADC_PollForConversion+0x76>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000ca6:	6813      	ldr	r3, [r2, #0]
 8000ca8:	4023      	ands	r3, r4
 8000caa:	d1f3      	bne.n	8000c94 <HAL_ADC_PollForConversion+0x78>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cac:	6faa      	ldr	r2, [r5, #120]	@ 0x78
          __HAL_UNLOCK(hadc);
 8000cae:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cb2:	f042 0204 	orr.w	r2, r2, #4
          return HAL_TIMEOUT;
 8000cb6:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cb8:	67aa      	str	r2, [r5, #120]	@ 0x78
}
 8000cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000cbc:	0719      	lsls	r1, r3, #28
 8000cbe:	d50e      	bpl.n	8000cde <HAL_ADC_PollForConversion+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cc0:	6893      	ldr	r3, [r2, #8]
 8000cc2:	075b      	lsls	r3, r3, #29
 8000cc4:	d419      	bmi.n	8000cfa <HAL_ADC_PollForConversion+0xde>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000cc6:	6853      	ldr	r3, [r2, #4]
 8000cc8:	f023 030c 	bic.w	r3, r3, #12
 8000ccc:	6053      	str	r3, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000cce:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8000cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cd4:	f023 0301 	bic.w	r3, r3, #1
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	67ab      	str	r3, [r5, #120]	@ 0x78
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000cde:	7f2b      	ldrb	r3, [r5, #28]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1ce      	bne.n	8000c82 <HAL_ADC_PollForConversion+0x66>
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000ce4:	220c      	movs	r2, #12
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <HAL_ADC_PollForConversion+0xf0>)
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	e7ca      	b.n	8000c82 <HAL_ADC_PollForConversion+0x66>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cec:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	67ab      	str	r3, [r5, #120]	@ 0x78
 8000cf4:	e7be      	b.n	8000c74 <HAL_ADC_PollForConversion+0x58>
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000cf6:	6014      	str	r4, [r2, #0]
 8000cf8:	e7c3      	b.n	8000c82 <HAL_ADC_PollForConversion+0x66>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cfa:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8000cfc:	f043 0320 	orr.w	r3, r3, #32
 8000d00:	67ab      	str	r3, [r5, #120]	@ 0x78
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d02:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8000d0a:	e7e8      	b.n	8000cde <HAL_ADC_PollForConversion+0xc2>
 8000d0c:	46021000 	.word	0x46021000

08000d10 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000d10:	6803      	ldr	r3, [r0, #0]
 8000d12:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <HAL_ADC_ErrorCallback>:
  *           "HAL_ADC_Start_DMA()"
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <HAL_ADC_CalibrationCpltCallback>:
/**
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <HAL_ADC_VoltageRegulatorCallback>:
/**
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <HAL_ADC_ADCReadyCallback>:
/**
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000d30:	6803      	ldr	r3, [r0, #0]
{
 8000d32:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000d34:	681d      	ldr	r5, [r3, #0]
{
 8000d36:	4604      	mov	r4, r0
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000d38:	07aa      	lsls	r2, r5, #30
  uint32_t tmp_ier = hadc->Instance->IER;
 8000d3a:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000d3c:	d502      	bpl.n	8000d44 <HAL_ADC_IRQHandler+0x14>
 8000d3e:	07b0      	lsls	r0, r6, #30
 8000d40:	f100 80ae 	bmi.w	8000ea0 <HAL_ADC_IRQHandler+0x170>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000d44:	076a      	lsls	r2, r5, #29
 8000d46:	d564      	bpl.n	8000e12 <HAL_ADC_IRQHandler+0xe2>
 8000d48:	0770      	lsls	r0, r6, #29
 8000d4a:	d562      	bpl.n	8000e12 <HAL_ADC_IRQHandler+0xe2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d4c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8000d4e:	06d0      	lsls	r0, r2, #27
 8000d50:	d403      	bmi.n	8000d5a <HAL_ADC_IRQHandler+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d52:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8000d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d58:	67a2      	str	r2, [r4, #120]	@ 0x78
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8000d5a:	4a92      	ldr	r2, [pc, #584]	@ (8000fa4 <HAL_ADC_IRQHandler+0x274>)
 8000d5c:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	f000 80eb 	beq.w	8000f3a <HAL_ADC_IRQHandler+0x20a>
 8000d64:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8000d68:	d118      	bne.n	8000d9c <HAL_ADC_IRQHandler+0x6c>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8000d6a:	68da      	ldr	r2, [r3, #12]
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8000d6c:	0491      	lsls	r1, r2, #18
 8000d6e:	d415      	bmi.n	8000d9c <HAL_ADC_IRQHandler+0x6c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	0712      	lsls	r2, r2, #28
 8000d74:	d512      	bpl.n	8000d9c <HAL_ADC_IRQHandler+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	0750      	lsls	r0, r2, #29
 8000d7a:	f100 8109 	bmi.w	8000f90 <HAL_ADC_IRQHandler+0x260>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	f022 020c 	bic.w	r2, r2, #12
 8000d84:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000d86:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d8c:	67a3      	str	r3, [r4, #120]	@ 0x78
              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000d8e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000d90:	04d9      	lsls	r1, r3, #19
 8000d92:	d403      	bmi.n	8000d9c <HAL_ADC_IRQHandler+0x6c>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d94:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	67a3      	str	r3, [r4, #120]	@ 0x78
    HAL_ADC_ConvCpltCallback(hadc);
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff ffbb 	bl	8000d18 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000da2:	220c      	movs	r2, #12
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	601a      	str	r2, [r3, #0]
  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8000da8:	4a7e      	ldr	r2, [pc, #504]	@ (8000fa4 <HAL_ADC_IRQHandler+0x274>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d038      	beq.n	8000e20 <HAL_ADC_IRQHandler+0xf0>
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000dae:	06a9      	lsls	r1, r5, #26
 8000db0:	d55d      	bpl.n	8000e6e <HAL_ADC_IRQHandler+0x13e>
 8000db2:	06b2      	lsls	r2, r6, #26
 8000db4:	d55b      	bpl.n	8000e6e <HAL_ADC_IRQHandler+0x13e>
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000db6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8000db8:	06d2      	lsls	r2, r2, #27
 8000dba:	d403      	bmi.n	8000dc4 <HAL_ADC_IRQHandler+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000dbc:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8000dbe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000dc2:	67a2      	str	r2, [r4, #120]	@ 0x78
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000dc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dc6:	f412 7fc0 	tst.w	r2, #384	@ 0x180
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000dca:	68da      	ldr	r2, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000dcc:	f040 80ad 	bne.w	8000f2a <HAL_ADC_IRQHandler+0x1fa>
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000dd0:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8000dd4:	f000 80ce 	beq.w	8000f74 <HAL_ADC_IRQHandler+0x244>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8000dd8:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8000dda:	0190      	lsls	r0, r2, #6
 8000ddc:	f100 80a6 	bmi.w	8000f2c <HAL_ADC_IRQHandler+0x1fc>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	0651      	lsls	r1, r2, #25
 8000de4:	f140 80a2 	bpl.w	8000f2c <HAL_ADC_IRQHandler+0x1fc>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	0712      	lsls	r2, r2, #28
 8000dec:	f100 809e 	bmi.w	8000f2c <HAL_ADC_IRQHandler+0x1fc>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8000df6:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000df8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000dfe:	67a3      	str	r3, [r4, #120]	@ 0x78
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000e00:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000e02:	05d8      	lsls	r0, r3, #23
 8000e04:	f100 8092 	bmi.w	8000f2c <HAL_ADC_IRQHandler+0x1fc>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e08:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8000e10:	e08c      	b.n	8000f2c <HAL_ADC_IRQHandler+0x1fc>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e12:	0729      	lsls	r1, r5, #28
 8000e14:	d5c8      	bpl.n	8000da8 <HAL_ADC_IRQHandler+0x78>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000e16:	0732      	lsls	r2, r6, #28
 8000e18:	d498      	bmi.n	8000d4c <HAL_ADC_IRQHandler+0x1c>
  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8000e1a:	4a62      	ldr	r2, [pc, #392]	@ (8000fa4 <HAL_ADC_IRQHandler+0x274>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d1c6      	bne.n	8000dae <HAL_ADC_IRQHandler+0x7e>
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000e20:	0629      	lsls	r1, r5, #24
 8000e22:	d501      	bpl.n	8000e28 <HAL_ADC_IRQHandler+0xf8>
 8000e24:	0632      	lsls	r2, r6, #24
 8000e26:	d45d      	bmi.n	8000ee4 <HAL_ADC_IRQHandler+0x1b4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000e28:	05e8      	lsls	r0, r5, #23
 8000e2a:	d501      	bpl.n	8000e30 <HAL_ADC_IRQHandler+0x100>
 8000e2c:	05f1      	lsls	r1, r6, #23
 8000e2e:	d464      	bmi.n	8000efa <HAL_ADC_IRQHandler+0x1ca>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000e30:	05aa      	lsls	r2, r5, #22
 8000e32:	d501      	bpl.n	8000e38 <HAL_ADC_IRQHandler+0x108>
 8000e34:	05b0      	lsls	r0, r6, #22
 8000e36:	d46c      	bmi.n	8000f12 <HAL_ADC_IRQHandler+0x1e2>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000e38:	06e9      	lsls	r1, r5, #27
 8000e3a:	d501      	bpl.n	8000e40 <HAL_ADC_IRQHandler+0x110>
 8000e3c:	06f2      	lsls	r2, r6, #27
 8000e3e:	d43d      	bmi.n	8000ebc <HAL_ADC_IRQHandler+0x18c>
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8000e40:	07e9      	lsls	r1, r5, #31
 8000e42:	d510      	bpl.n	8000e66 <HAL_ADC_IRQHandler+0x136>
 8000e44:	07f2      	lsls	r2, r6, #31
 8000e46:	d50e      	bpl.n	8000e66 <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e48:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000e4a:	06db      	lsls	r3, r3, #27
 8000e4c:	d403      	bmi.n	8000e56 <HAL_ADC_IRQHandler+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e4e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	67a3      	str	r3, [r4, #120]	@ 0x78
    HAL_ADC_ADCReadyCallback(hadc);
 8000e56:	4620      	mov	r0, r4
 8000e58:	f7ff ff68 	bl	8000d2c <HAL_ADC_ADCReadyCallback>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	f022 0201 	bic.w	r2, r2, #1
 8000e64:	605a      	str	r2, [r3, #4]
  if (hadc->Instance == ADC4)  /* ADC4 */
 8000e66:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa4 <HAL_ADC_IRQHandler+0x274>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d008      	beq.n	8000e7e <HAL_ADC_IRQHandler+0x14e>
}
 8000e6c:	bd70      	pop	{r4, r5, r6, pc}
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000e6e:	0668      	lsls	r0, r5, #25
 8000e70:	d5d6      	bpl.n	8000e20 <HAL_ADC_IRQHandler+0xf0>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000e72:	0671      	lsls	r1, r6, #25
 8000e74:	d5d4      	bpl.n	8000e20 <HAL_ADC_IRQHandler+0xf0>
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e76:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8000e78:	06d2      	lsls	r2, r2, #27
 8000e7a:	d4a3      	bmi.n	8000dc4 <HAL_ADC_IRQHandler+0x94>
 8000e7c:	e79e      	b.n	8000dbc <HAL_ADC_IRQHandler+0x8c>
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8000e7e:	0528      	lsls	r0, r5, #20
 8000e80:	d501      	bpl.n	8000e86 <HAL_ADC_IRQHandler+0x156>
 8000e82:	0531      	lsls	r1, r6, #20
 8000e84:	d47c      	bmi.n	8000f80 <HAL_ADC_IRQHandler+0x250>
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8000e86:	04ea      	lsls	r2, r5, #19
 8000e88:	d5f0      	bpl.n	8000e6c <HAL_ADC_IRQHandler+0x13c>
 8000e8a:	04f3      	lsls	r3, r6, #19
 8000e8c:	d5ee      	bpl.n	8000e6c <HAL_ADC_IRQHandler+0x13c>
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff ff4a 	bl	8000d28 <HAL_ADC_VoltageRegulatorCallback>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8000e94:	6822      	ldr	r2, [r4, #0]
 8000e96:	6853      	ldr	r3, [r2, #4]
 8000e98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e9c:	6053      	str	r3, [r2, #4]
}
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ea0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000ea2:	06d9      	lsls	r1, r3, #27
 8000ea4:	d403      	bmi.n	8000eae <HAL_ADC_IRQHandler+0x17e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000ea6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000ea8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000eac:	67a3      	str	r3, [r4, #120]	@ 0x78
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f000 feb0 	bl	8001c14 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e743      	b.n	8000d44 <HAL_ADC_IRQHandler+0x14>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000ebc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000ebe:	b112      	cbz	r2, 8000ec6 <HAL_ADC_IRQHandler+0x196>
        if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8000ec0:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8000ec2:	0790      	lsls	r0, r2, #30
 8000ec4:	d00b      	beq.n	8000ede <HAL_ADC_IRQHandler+0x1ae>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000ec6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
      HAL_ADC_ErrorCallback(hadc);
 8000ec8:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ece:	67a3      	str	r3, [r4, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000ed0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	67e3      	str	r3, [r4, #124]	@ 0x7c
      HAL_ADC_ErrorCallback(hadc);
 8000ed8:	f7ff ff22 	bl	8000d20 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	2210      	movs	r2, #16
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	e7ad      	b.n	8000e40 <HAL_ADC_IRQHandler+0x110>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ee4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ee6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eec:	67a3      	str	r3, [r4, #120]	@ 0x78
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000eee:	f7ff ff15 	bl	8000d1c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e796      	b.n	8000e28 <HAL_ADC_IRQHandler+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000efa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000efc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f02:	67a3      	str	r3, [r4, #120]	@ 0x78
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000f04:	f000 fe82 	bl	8001c0c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e78e      	b.n	8000e30 <HAL_ADC_IRQHandler+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000f12:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000f14:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000f16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f1a:	67a3      	str	r3, [r4, #120]	@ 0x78
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000f1c:	f000 fe78 	bl	8001c10 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e786      	b.n	8000e38 <HAL_ADC_IRQHandler+0x108>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8000f2a:	68db      	ldr	r3, [r3, #12]
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f000 fe6b 	bl	8001c08 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000f32:	2260      	movs	r2, #96	@ 0x60
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e772      	b.n	8000e20 <HAL_ADC_IRQHandler+0xf0>
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000f3a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8000f3e:	f47f af2d 	bne.w	8000d9c <HAL_ADC_IRQHandler+0x6c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8000f42:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	f47f af28 	bne.w	8000d9c <HAL_ADC_IRQHandler+0x6c>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	0712      	lsls	r2, r2, #28
 8000f50:	f57f af24 	bpl.w	8000d9c <HAL_ADC_IRQHandler+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	0750      	lsls	r0, r2, #29
 8000f58:	d428      	bmi.n	8000fac <HAL_ADC_IRQHandler+0x27c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	f022 020c 	bic.w	r2, r2, #12
 8000f60:	605a      	str	r2, [r3, #4]
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8000f62:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	67a3      	str	r3, [r4, #120]	@ 0x78
 8000f72:	e713      	b.n	8000d9c <HAL_ADC_IRQHandler+0x6c>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8000f74:	68d9      	ldr	r1, [r3, #12]
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8000f76:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa8 <HAL_ADC_IRQHandler+0x278>)
 8000f78:	438a      	bics	r2, r1
 8000f7a:	f47f af31 	bne.w	8000de0 <HAL_ADC_IRQHandler+0xb0>
 8000f7e:	e7d5      	b.n	8000f2c <HAL_ADC_IRQHandler+0x1fc>
      HAL_ADC_CalibrationCpltCallback(hadc);
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff fecf 	bl	8000d24 <HAL_ADC_CalibrationCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8000f86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	e77a      	b.n	8000e86 <HAL_ADC_IRQHandler+0x156>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f90:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	67a3      	str	r3, [r4, #120]	@ 0x78
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f98:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8000fa0:	e6fc      	b.n	8000d9c <HAL_ADC_IRQHandler+0x6c>
 8000fa2:	bf00      	nop
 8000fa4:	46021000 	.word	0x46021000
 8000fa8:	02002000 	.word	0x02002000
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fac:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	67a3      	str	r3, [r4, #120]	@ 0x78
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8000fbc:	e6ee      	b.n	8000d9c <HAL_ADC_IRQHandler+0x6c>
 8000fbe:	bf00      	nop

08000fc0 <HAL_ADC_ConfigChannel>:
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000fc0:	2300      	movs	r3, #0
{
 8000fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc6:	b084      	sub	sp, #16
  __IO uint32_t wait_loop_index = 0;
 8000fc8:	9303      	str	r3, [sp, #12]

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8000fca:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8000fce:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	f000 80d2 	beq.w	800117a <HAL_ADC_ConfigChannel+0x1ba>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
 8000fdc:	68aa      	ldr	r2, [r5, #8]
 8000fde:	4604      	mov	r4, r0
 8000fe0:	0752      	lsls	r2, r2, #29
 8000fe2:	d50a      	bpl.n	8000ffa <HAL_ADC_ConfigChannel+0x3a>
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    tmp_hal_status = HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8000fe8:	f043 0320 	orr.w	r3, r3, #32
 8000fec:	67a3      	str	r3, [r4, #120]	@ 0x78
  }

  __HAL_UNLOCK(hadc);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74

  return tmp_hal_status;
}
 8000ff4:	b004      	add	sp, #16
 8000ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8000ffa:	4aa3      	ldr	r2, [pc, #652]	@ (8001288 <HAL_ADC_ConfigChannel+0x2c8>)
 8000ffc:	460e      	mov	r6, r1
 8000ffe:	4295      	cmp	r5, r2
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8001000:	680f      	ldr	r7, [r1, #0]
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001002:	f000 80be 	beq.w	8001182 <HAL_ADC_ConfigChannel+0x1c2>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8001006:	f037 427f 	bics.w	r2, r7, #4278190080	@ 0xff000000
 800100a:	f3c7 6084 	ubfx	r0, r7, #26, #5
 800100e:	d078      	beq.n	8001102 <HAL_ADC_ConfigChannel+0x142>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	fa97 f7a7 	rbit	r7, r7
  if (value == 0U)
 8001014:	b117      	cbz	r7, 800101c <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8001016:	fab7 f787 	clz	r7, r7
 800101a:	40bb      	lsls	r3, r7
    MODIFY_REG(*preg,
 800101c:	271f      	movs	r7, #31
 800101e:	69ea      	ldr	r2, [r5, #28]
 8001020:	4313      	orrs	r3, r2
 8001022:	61eb      	str	r3, [r5, #28]
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001024:	6873      	ldr	r3, [r6, #4]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001026:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 800102a:	0999      	lsrs	r1, r3, #6
 800102c:	f001 010c 	and.w	r1, r1, #12
    MODIFY_REG(*preg,
 8001030:	403b      	ands	r3, r7
 8001032:	4098      	lsls	r0, r3
 8001034:	409f      	lsls	r7, r3
 8001036:	5853      	ldr	r3, [r2, r1]
 8001038:	ea23 0307 	bic.w	r3, r3, r7
 800103c:	4303      	orrs	r3, r0
 800103e:	5053      	str	r3, [r2, r1]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001040:	68ab      	ldr	r3, [r5, #8]
 8001042:	f013 0f04 	tst.w	r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001046:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001048:	d156      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800104a:	071b      	lsls	r3, r3, #28
 800104c:	d454      	bmi.n	80010f8 <HAL_ADC_ConfigChannel+0x138>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800104e:	6833      	ldr	r3, [r6, #0]
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001050:	f033 427f 	bics.w	r2, r3, #4278190080	@ 0xff000000
 8001054:	f000 8168 	beq.w	8001328 <HAL_ADC_ConfigChannel+0x368>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800105c:	fab2 f282 	clz	r2, r2
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001060:	2707      	movs	r7, #7
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001062:	f343 6140 	sbfx	r1, r3, #25, #1
 8001066:	f001 010a 	and.w	r1, r1, #10
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800106a:	0ddb      	lsrs	r3, r3, #23
 800106c:	f003 0304 	and.w	r3, r3, #4
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001070:	68b0      	ldr	r0, [r6, #8]
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001072:	1a52      	subs	r2, r2, r1
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001074:	f105 0c14 	add.w	ip, r5, #20
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001078:	f85c 1003 	ldr.w	r1, [ip, r3]
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800107c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001080:	4090      	lsls	r0, r2
 8001082:	fa07 f202 	lsl.w	r2, r7, r2
 8001086:	ea21 0202 	bic.w	r2, r1, r2
 800108a:	4302      	orrs	r2, r0
 800108c:	f84c 2003 	str.w	r2, [ip, r3]
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001090:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001094:	2904      	cmp	r1, #4
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001096:	68ea      	ldr	r2, [r5, #12]
        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001098:	f000 81ee 	beq.w	8001478 <HAL_ADC_ConfigChannel+0x4b8>
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800109c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80010a0:	0052      	lsls	r2, r2, #1
 80010a2:	fa03 f202 	lsl.w	r2, r3, r2
  MODIFY_REG(*preg,
 80010a6:	6833      	ldr	r3, [r6, #0]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
 80010ae:	431a      	orrs	r2, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010b0:	f105 0360 	add.w	r3, r5, #96	@ 0x60
  MODIFY_REG(*preg,
 80010b4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80010b8:	f000 60e0 	and.w	r0, r0, #117440512	@ 0x7000000
 80010bc:	4302      	orrs	r2, r0
 80010be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010c2:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80010c4:	69f0      	ldr	r0, [r6, #28]
 80010c6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80010ca:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80010ce:	4302      	orrs	r2, r0
 80010d0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
          if (pConfig->OffsetSaturation == ENABLE)
 80010d4:	7eb2      	ldrb	r2, [r6, #26]
 80010d6:	2a01      	cmp	r2, #1
 80010d8:	f000 823b 	beq.w	8001552 <HAL_ADC_ConfigChannel+0x592>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010dc:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80010de:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80010e2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80010e6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ea:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80010ec:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80010f0:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80010f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010f8:	68ab      	ldr	r3, [r5, #8]
 80010fa:	07df      	lsls	r7, r3, #31
 80010fc:	d503      	bpl.n	8001106 <HAL_ADC_ConfigChannel+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fe:	2000      	movs	r0, #0
 8001100:	e775      	b.n	8000fee <HAL_ADC_ConfigChannel+0x2e>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8001102:	4083      	lsls	r3, r0
 8001104:	e78a      	b.n	800101c <HAL_ADC_ConfigChannel+0x5c>
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001106:	68f0      	ldr	r0, [r6, #12]
 8001108:	6832      	ldr	r2, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800110a:	4b60      	ldr	r3, [pc, #384]	@ (800128c <HAL_ADC_ConfigChannel+0x2cc>)
 800110c:	f8d5 10c0 	ldr.w	r1, [r5, #192]	@ 0xc0
 8001110:	f000 0718 	and.w	r7, r0, #24
 8001114:	40fb      	lsrs	r3, r7
 8001116:	f022 477f 	bic.w	r7, r2, #4278190080	@ 0xff000000
 800111a:	4013      	ands	r3, r2
 800111c:	ea21 0107 	bic.w	r1, r1, r7
 8001120:	430b      	orrs	r3, r1
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001122:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8001126:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800112a:	f000 80c5 	beq.w	80012b8 <HAL_ADC_ConfigChannel+0x2f8>
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800112e:	2a00      	cmp	r2, #0
 8001130:	dae5      	bge.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001132:	4b57      	ldr	r3, [pc, #348]	@ (8001290 <HAL_ADC_ConfigChannel+0x2d0>)
 8001134:	429d      	cmp	r5, r3
 8001136:	f000 8188 	beq.w	800144a <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 800113a:	4b53      	ldr	r3, [pc, #332]	@ (8001288 <HAL_ADC_ConfigChannel+0x2c8>)
 800113c:	f8d3 1308 	ldr.w	r1, [r3, #776]	@ 0x308
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	07de      	lsls	r6, r3, #31
 8001144:	f53f af4e 	bmi.w	8000fe4 <HAL_ADC_ConfigChannel+0x24>
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001148:	4b52      	ldr	r3, [pc, #328]	@ (8001294 <HAL_ADC_ConfigChannel+0x2d4>)
 800114a:	429a      	cmp	r2, r3
 800114c:	d0d7      	beq.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800114e:	4b52      	ldr	r3, [pc, #328]	@ (8001298 <HAL_ADC_ConfigChannel+0x2d8>)
 8001150:	429a      	cmp	r2, r3
 8001152:	d0d4      	beq.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001154:	4e51      	ldr	r6, [pc, #324]	@ (800129c <HAL_ADC_ConfigChannel+0x2dc>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001156:	f001 70e0 	and.w	r0, r1, #29360128	@ 0x1c00000
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800115a:	4b51      	ldr	r3, [pc, #324]	@ (80012a0 <HAL_ADC_ConfigChannel+0x2e0>)
 800115c:	429a      	cmp	r2, r3
 800115e:	d1ce      	bne.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001160:	024f      	lsls	r7, r1, #9
 8001162:	d4cc      	bmi.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
              if (ADC_VREFINT_INSTANCE(hadc))
 8001164:	4b4a      	ldr	r3, [pc, #296]	@ (8001290 <HAL_ADC_ConfigChannel+0x2d0>)
 8001166:	429d      	cmp	r5, r3
 8001168:	d1c9      	bne.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800116a:	6833      	ldr	r3, [r6, #0]
 800116c:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8001170:	4303      	orrs	r3, r0
 8001172:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001176:	6033      	str	r3, [r6, #0]
}
 8001178:	e7c1      	b.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
  __HAL_LOCK(hadc);
 800117a:	2002      	movs	r0, #2
}
 800117c:	b004      	add	sp, #16
 800117e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (HAL_GetREVID() == REV_ID_A)
 8001182:	f7ff fb8d 	bl	80008a0 <HAL_GetREVID>
 8001186:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800118a:	f000 8148 	beq.w	800141e <HAL_ADC_ConfigChannel+0x45e>
      if (pConfig->Rank != ADC4_RANK_NONE)
 800118e:	6872      	ldr	r2, [r6, #4]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001190:	6923      	ldr	r3, [r4, #16]
      if (pConfig->Rank != ADC4_RANK_NONE)
 8001192:	2a02      	cmp	r2, #2
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001194:	f023 0310 	bic.w	r3, r3, #16
      if (pConfig->Rank != ADC4_RANK_NONE)
 8001198:	f000 8104 	beq.w	80013a4 <HAL_ADC_ConfigChannel+0x3e4>
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800119c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80011a0:	f027 417f 	bic.w	r1, r7, #4278190080	@ 0xff000000
 80011a4:	f000 80d2 	beq.w	800134c <HAL_ADC_ConfigChannel+0x38c>
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80011a8:	200f      	movs	r0, #15
 80011aa:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 80011ae:	f002 0c1f 	and.w	ip, r2, #31
 80011b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80011b6:	ea23 0000 	bic.w	r0, r3, r0
 80011ba:	2900      	cmp	r1, #0
 80011bc:	f040 81e5 	bne.w	800158a <HAL_ADC_ConfigChannel+0x5ca>
 80011c0:	f3c7 6384 	ubfx	r3, r7, #26, #5
 80011c4:	fa03 f30c 	lsl.w	r3, r3, ip
 80011c8:	4303      	orrs	r3, r0
 80011ca:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80011ce:	0892      	lsrs	r2, r2, #2
 80011d0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80011d2:	3201      	adds	r2, #1
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f240 821b 	bls.w	8001610 <HAL_ADC_ConfigChannel+0x650>
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80011da:	6822      	ldr	r2, [r4, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80011dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <HAL_ADC_ConfigChannel+0x2c8>)
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80011de:	68b0      	ldr	r0, [r6, #8]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f000 80d0 	beq.w	8001386 <HAL_ADC_ConfigChannel+0x3c6>
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80011e6:	2900      	cmp	r1, #0
 80011e8:	f040 818c 	bne.w	8001504 <HAL_ADC_ConfigChannel+0x544>
 80011ec:	f3c7 6384 	ubfx	r3, r7, #26, #5
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80011f0:	2107      	movs	r1, #7
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80011f2:	f347 6540 	sbfx	r5, r7, #25, #1
 80011f6:	f005 050a 	and.w	r5, r5, #10
 80011fa:	1b5b      	subs	r3, r3, r5
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80011fc:	0dff      	lsrs	r7, r7, #23
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80011fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001202:	f007 0704 	and.w	r7, r7, #4
 8001206:	f102 0514 	add.w	r5, r2, #20
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800120a:	4098      	lsls	r0, r3
 800120c:	4099      	lsls	r1, r3
 800120e:	59eb      	ldr	r3, [r5, r7]
 8001210:	ea23 0301 	bic.w	r3, r3, r1
 8001214:	4303      	orrs	r3, r0
 8001216:	51eb      	str	r3, [r5, r7]
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001218:	6833      	ldr	r3, [r6, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f6bf af6f 	bge.w	80010fe <HAL_ADC_ConfigChannel+0x13e>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001220:	4d1b      	ldr	r5, [pc, #108]	@ (8001290 <HAL_ADC_ConfigChannel+0x2d0>)
 8001222:	491e      	ldr	r1, [pc, #120]	@ (800129c <HAL_ADC_ConfigChannel+0x2dc>)
 8001224:	481f      	ldr	r0, [pc, #124]	@ (80012a4 <HAL_ADC_ConfigChannel+0x2e4>)
 8001226:	42aa      	cmp	r2, r5
 8001228:	bf08      	it	eq
 800122a:	4601      	moveq	r1, r0
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800122c:	481e      	ldr	r0, [pc, #120]	@ (80012a8 <HAL_ADC_ConfigChannel+0x2e8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 800122e:	680d      	ldr	r5, [r1, #0]
 8001230:	4283      	cmp	r3, r0
 8001232:	f005 77e0 	and.w	r7, r5, #29360128	@ 0x1c00000
 8001236:	f000 8235 	beq.w	80016a4 <HAL_ADC_ConfigChannel+0x6e4>
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800123a:	481c      	ldr	r0, [pc, #112]	@ (80012ac <HAL_ADC_ConfigChannel+0x2ec>)
 800123c:	4283      	cmp	r3, r0
 800123e:	f000 8285 	beq.w	800174c <HAL_ADC_ConfigChannel+0x78c>
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8001242:	4817      	ldr	r0, [pc, #92]	@ (80012a0 <HAL_ADC_ConfigChannel+0x2e0>)
 8001244:	4283      	cmp	r3, r0
 8001246:	f000 828c 	beq.w	8001762 <HAL_ADC_ConfigChannel+0x7a2>
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800124a:	4819      	ldr	r0, [pc, #100]	@ (80012b0 <HAL_ADC_ConfigChannel+0x2f0>)
 800124c:	4283      	cmp	r3, r0
 800124e:	d105      	bne.n	800125c <HAL_ADC_ConfigChannel+0x29c>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001250:	0268      	lsls	r0, r5, #9
 8001252:	d403      	bmi.n	800125c <HAL_ADC_ConfigChannel+0x29c>
            if (ADC_VCORE_INSTANCE(hadc))
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_ADC_ConfigChannel+0x2c8>)
 8001256:	429a      	cmp	r2, r3
 8001258:	f000 8302 	beq.w	8001860 <HAL_ADC_ConfigChannel+0x8a0>
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800125c:	f7ff fb20 	bl	80008a0 <HAL_GetREVID>
 8001260:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001264:	f47f af4b 	bne.w	80010fe <HAL_ADC_ConfigChannel+0x13e>
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_ADC_ConfigChannel+0x2f4>)
 800126a:	6832      	ldr	r2, [r6, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	f47f af46 	bne.w	80010fe <HAL_ADC_ConfigChannel+0x13e>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001272:	026b      	lsls	r3, r5, #9
 8001274:	f53f af43 	bmi.w	80010fe <HAL_ADC_ConfigChannel+0x13e>
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
 8001286:	e73a      	b.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
 8001288:	46021000 	.word	0x46021000
 800128c:	000fffff 	.word	0x000fffff
 8001290:	42028000 	.word	0x42028000
 8001294:	ce080000 	.word	0xce080000
 8001298:	ca040000 	.word	0xca040000
 800129c:	46021308 	.word	0x46021308
 80012a0:	80000001 	.word	0x80000001
 80012a4:	42028308 	.word	0x42028308
 80012a8:	b6002000 	.word	0xb6002000
 80012ac:	ba004000 	.word	0xba004000
 80012b0:	b2001000 	.word	0xb2001000
 80012b4:	d7200000 	.word	0xd7200000
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80012b8:	b3cf      	cbz	r7, 800132e <HAL_ADC_ConfigChannel+0x36e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	fa92 f3a2 	rbit	r3, r2
  if (value == 0U)
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8125 	beq.w	800150e <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 80012c4:	fab3 f183 	clz	r1, r3
 80012c8:	3101      	adds	r1, #1
 80012ca:	f001 001f 	and.w	r0, r1, #31
 80012ce:	2809      	cmp	r0, #9
 80012d0:	f240 811d 	bls.w	800150e <HAL_ADC_ConfigChannel+0x54e>
 80012d4:	fab3 f283 	clz	r2, r3
 80012d8:	2301      	movs	r3, #1
 80012da:	441a      	add	r2, r3
 80012dc:	0689      	lsls	r1, r1, #26
 80012de:	f002 021f 	and.w	r2, r2, #31
 80012e2:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80012e6:	4093      	lsls	r3, r2
 80012e8:	430b      	orrs	r3, r1
 80012ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80012ee:	f033 427f 	bics.w	r2, r3, #4278190080	@ 0xff000000
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80012f2:	68b1      	ldr	r1, [r6, #8]
 80012f4:	f040 80bb 	bne.w	800146e <HAL_ADC_ConfigChannel+0x4ae>
 80012f8:	f3c3 6284 	ubfx	r2, r3, #26, #5
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80012fc:	2007      	movs	r0, #7
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80012fe:	f343 6740 	sbfx	r7, r3, #25, #1
 8001302:	f007 070a 	and.w	r7, r7, #10
 8001306:	1bd2      	subs	r2, r2, r7
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001308:	0ddb      	lsrs	r3, r3, #23
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800130a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	f105 0714 	add.w	r7, r5, #20
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001316:	4091      	lsls	r1, r2
 8001318:	4090      	lsls	r0, r2
 800131a:	58fa      	ldr	r2, [r7, r3]
 800131c:	ea22 0200 	bic.w	r2, r2, r0
 8001320:	430a      	orrs	r2, r1
 8001322:	50fa      	str	r2, [r7, r3]
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001324:	6832      	ldr	r2, [r6, #0]
}
 8001326:	e702      	b.n	800112e <HAL_ADC_ConfigChannel+0x16e>
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001328:	f3c3 6284 	ubfx	r2, r3, #26, #5
 800132c:	e698      	b.n	8001060 <HAL_ADC_ConfigChannel+0xa0>
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800132e:	2301      	movs	r3, #1
 8001330:	0e91      	lsrs	r1, r2, #26
 8001332:	3101      	adds	r1, #1
 8001334:	f001 021f 	and.w	r2, r1, #31
 8001338:	2a09      	cmp	r2, #9
 800133a:	ea4f 6181 	mov.w	r1, r1, lsl #26
 800133e:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8001342:	fa03 f302 	lsl.w	r3, r3, r2
 8001346:	d8cf      	bhi.n	80012e8 <HAL_ADC_ConfigChannel+0x328>
 8001348:	430b      	orrs	r3, r1
 800134a:	e7d0      	b.n	80012ee <HAL_ADC_ConfigChannel+0x32e>
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 800134c:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800134e:	2900      	cmp	r1, #0
 8001350:	f040 80f5 	bne.w	800153e <HAL_ADC_ConfigChannel+0x57e>
 8001354:	2001      	movs	r0, #1
 8001356:	f3c7 6384 	ubfx	r3, r7, #26, #5
 800135a:	4098      	lsls	r0, r3
 800135c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800135e:	4303      	orrs	r3, r0
 8001360:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001362:	e73b      	b.n	80011dc <HAL_ADC_ConfigChannel+0x21c>
    MODIFY_REG(ADCx->CHSELR,
 8001364:	230f      	movs	r3, #15
 8001366:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001368:	fa03 f30c 	lsl.w	r3, r3, ip
 800136c:	ea22 0203 	bic.w	r2, r2, r3
 8001370:	2900      	cmp	r1, #0
 8001372:	f040 8270 	bne.w	8001856 <HAL_ADC_ConfigChannel+0x896>
 8001376:	f3c7 6384 	ubfx	r3, r7, #26, #5
 800137a:	fa03 f30c 	lsl.w	r3, r3, ip
 800137e:	4313      	orrs	r3, r2
 8001380:	4abb      	ldr	r2, [pc, #748]	@ (8001670 <HAL_ADC_ConfigChannel+0x6b0>)
 8001382:	6293      	str	r3, [r2, #40]	@ 0x28
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8001384:	68b0      	ldr	r0, [r6, #8]
    MODIFY_REG(ADCx->SMPR1,
 8001386:	4aba      	ldr	r2, [pc, #744]	@ (8001670 <HAL_ADC_ConfigChannel+0x6b0>)
 8001388:	6951      	ldr	r1, [r2, #20]
 800138a:	ea81 0300 	eor.w	r3, r1, r0
 800138e:	ea03 2307 	and.w	r3, r3, r7, lsl #8
 8001392:	404b      	eors	r3, r1
 8001394:	6153      	str	r3, [r2, #20]
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001396:	6833      	ldr	r3, [r6, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f6bf aeb0 	bge.w	80010fe <HAL_ADC_ConfigChannel+0x13e>
 800139e:	462a      	mov	r2, r5
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013a0:	49b4      	ldr	r1, [pc, #720]	@ (8001674 <HAL_ADC_ConfigChannel+0x6b4>)
 80013a2:	e743      	b.n	800122c <HAL_ADC_ConfigChannel+0x26c>
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80013a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013a8:	d108      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x3fc>
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80013aa:	2201      	movs	r2, #1
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80013ac:	6821      	ldr	r1, [r4, #0]
 80013ae:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80013b2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80013b4:	40ba      	lsls	r2, r7
 80013b6:	ea23 0302 	bic.w	r3, r3, r2
 80013ba:	628b      	str	r3, [r1, #40]	@ 0x28
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013bc:	6833      	ldr	r3, [r6, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f6bf ae9d 	bge.w	80010fe <HAL_ADC_ConfigChannel+0x13e>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013c4:	6825      	ldr	r5, [r4, #0]
 80013c6:	49ac      	ldr	r1, [pc, #688]	@ (8001678 <HAL_ADC_ConfigChannel+0x6b8>)
 80013c8:	48ac      	ldr	r0, [pc, #688]	@ (800167c <HAL_ADC_ConfigChannel+0x6bc>)
 80013ca:	4aaa      	ldr	r2, [pc, #680]	@ (8001674 <HAL_ADC_ConfigChannel+0x6b4>)
 80013cc:	4285      	cmp	r5, r0
 80013ce:	bf08      	it	eq
 80013d0:	460a      	moveq	r2, r1
          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d2:	49ab      	ldr	r1, [pc, #684]	@ (8001680 <HAL_ADC_ConfigChannel+0x6c0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80013d4:	6815      	ldr	r5, [r2, #0]
 80013d6:	428b      	cmp	r3, r1
 80013d8:	f000 81f1 	beq.w	80017be <HAL_ADC_ConfigChannel+0x7fe>
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013dc:	49a9      	ldr	r1, [pc, #676]	@ (8001684 <HAL_ADC_ConfigChannel+0x6c4>)
 80013de:	428b      	cmp	r3, r1
 80013e0:	f000 820b 	beq.w	80017fa <HAL_ADC_ConfigChannel+0x83a>
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80013e4:	49a8      	ldr	r1, [pc, #672]	@ (8001688 <HAL_ADC_ConfigChannel+0x6c8>)
 80013e6:	428b      	cmp	r3, r1
 80013e8:	f000 822d 	beq.w	8001846 <HAL_ADC_ConfigChannel+0x886>
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80013ec:	49a7      	ldr	r1, [pc, #668]	@ (800168c <HAL_ADC_ConfigChannel+0x6cc>)
 80013ee:	428b      	cmp	r3, r1
 80013f0:	f47f af34 	bne.w	800125c <HAL_ADC_ConfigChannel+0x29c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80013f4:	6811      	ldr	r1, [r2, #0]
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013f6:	f005 73c0 	and.w	r3, r5, #25165824	@ 0x1800000
 80013fa:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80013fe:	430b      	orrs	r3, r1
 8001400:	6013      	str	r3, [r2, #0]
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8001402:	f7ff fa4d 	bl	80008a0 <HAL_GetREVID>
 8001406:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800140a:	f63f af27 	bhi.w	800125c <HAL_ADC_ConfigChannel+0x29c>
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800140e:	6822      	ldr	r2, [r4, #0]
 8001410:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
 800141c:	e71e      	b.n	800125c <HAL_ADC_ConfigChannel+0x29c>
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 800141e:	6837      	ldr	r7, [r6, #0]
 8001420:	4b9b      	ldr	r3, [pc, #620]	@ (8001690 <HAL_ADC_ConfigChannel+0x6d0>)
 8001422:	429f      	cmp	r7, r3
 8001424:	f000 80f2 	beq.w	800160c <HAL_ADC_ConfigChannel+0x64c>
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8001428:	4b9a      	ldr	r3, [pc, #616]	@ (8001694 <HAL_ADC_ConfigChannel+0x6d4>)
 800142a:	429f      	cmp	r7, r3
 800142c:	f000 818c 	beq.w	8001748 <HAL_ADC_ConfigChannel+0x788>
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8001430:	4b96      	ldr	r3, [pc, #600]	@ (800168c <HAL_ADC_ConfigChannel+0x6cc>)
 8001432:	429f      	cmp	r7, r3
 8001434:	f000 81c1 	beq.w	80017ba <HAL_ADC_ConfigChannel+0x7fa>
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8001438:	4b97      	ldr	r3, [pc, #604]	@ (8001698 <HAL_ADC_ConfigChannel+0x6d8>)
 800143a:	429f      	cmp	r7, r3
 800143c:	f000 81db 	beq.w	80017f6 <HAL_ADC_ConfigChannel+0x836>
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8001440:	4a96      	ldr	r2, [pc, #600]	@ (800169c <HAL_ADC_ConfigChannel+0x6dc>)
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8001442:	4297      	cmp	r7, r2
 8001444:	bf08      	it	eq
 8001446:	461f      	moveq	r7, r3
 8001448:	e6a1      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 800144a:	f8d5 1308 	ldr.w	r1, [r5, #776]	@ 0x308
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800144e:	68ab      	ldr	r3, [r5, #8]
 8001450:	07d8      	lsls	r0, r3, #31
 8001452:	f53f adc7 	bmi.w	8000fe4 <HAL_ADC_ConfigChannel+0x24>
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001456:	4b8a      	ldr	r3, [pc, #552]	@ (8001680 <HAL_ADC_ConfigChannel+0x6c0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001458:	f001 70e0 	and.w	r0, r1, #29360128	@ 0x1c00000
 800145c:	429a      	cmp	r2, r3
 800145e:	f000 818b 	beq.w	8001778 <HAL_ADC_ConfigChannel+0x7b8>
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8001462:	4b88      	ldr	r3, [pc, #544]	@ (8001684 <HAL_ADC_ConfigChannel+0x6c4>)
 8001464:	429a      	cmp	r2, r3
 8001466:	f000 81b9 	beq.w	80017dc <HAL_ADC_ConfigChannel+0x81c>
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800146a:	4e83      	ldr	r6, [pc, #524]	@ (8001678 <HAL_ADC_ConfigChannel+0x6b8>)
 800146c:	e675      	b.n	800115a <HAL_ADC_ConfigChannel+0x19a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8001472:	fab2 f282 	clz	r2, r2
 8001476:	e741      	b.n	80012fc <HAL_ADC_ConfigChannel+0x33c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001478:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800147a:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800147c:	6833      	ldr	r3, [r6, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800147e:	0e92      	lsrs	r2, r2, #26
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001480:	f033 477f 	bics.w	r7, r3, #4278190080	@ 0xff000000
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001484:	f002 021e 	and.w	r2, r2, #30
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001488:	f040 8084 	bne.w	8001594 <HAL_ADC_ConfigChannel+0x5d4>
 800148c:	f3c3 6184 	ubfx	r1, r3, #26, #5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001490:	4291      	cmp	r1, r2
 8001492:	d10a      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x4ea>
  MODIFY_REG(*preg,
 8001494:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
 800149c:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
 80014a0:	4313      	orrs	r3, r2
 80014a2:	662b      	str	r3, [r5, #96]	@ 0x60
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014a4:	6833      	ldr	r3, [r6, #0]
 80014a6:	f023 477f 	bic.w	r7, r3, #4278190080	@ 0xff000000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014aa:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 80014ac:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ae:	f105 0060 	add.w	r0, r5, #96	@ 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014b2:	0e92      	lsrs	r2, r2, #26
 80014b4:	f002 021e 	and.w	r2, r2, #30
 80014b8:	f105 0e64 	add.w	lr, r5, #100	@ 0x64
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80014bc:	2f00      	cmp	r7, #0
 80014be:	d178      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x5f2>
 80014c0:	f3c3 6784 	ubfx	r7, r3, #26, #5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014c4:	42ba      	cmp	r2, r7
 80014c6:	f000 8125 	beq.w	8001714 <HAL_ADC_ConfigChannel+0x754>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014ca:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 80014cc:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ce:	f105 0c68 	add.w	ip, r5, #104	@ 0x68
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80014d2:	0e92      	lsrs	r2, r2, #26
 80014d4:	f002 021e 	and.w	r2, r2, #30
 80014d8:	42ba      	cmp	r2, r7
 80014da:	f000 8101 	beq.w	80016e0 <HAL_ADC_ConfigChannel+0x720>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014de:	68c2      	ldr	r2, [r0, #12]
 80014e0:	68c2      	ldr	r2, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e2:	f100 010c 	add.w	r1, r0, #12
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014e6:	0e92      	lsrs	r2, r2, #26
 80014e8:	f002 021e 	and.w	r2, r2, #30
 80014ec:	4297      	cmp	r7, r2
 80014ee:	f47f ae03 	bne.w	80010f8 <HAL_ADC_ConfigChannel+0x138>
  MODIFY_REG(*preg,
 80014f2:	680a      	ldr	r2, [r1, #0]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
 80014fa:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
}
 8001502:	e5f9      	b.n	80010f8 <HAL_ADC_ConfigChannel+0x138>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	fa97 f3a7 	rbit	r3, r7
  return __builtin_clz(value);
 8001508:	fab3 f383 	clz	r3, r3
 800150c:	e670      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x230>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8001512:	2900      	cmp	r1, #0
 8001514:	f000 815d 	beq.w	80017d2 <HAL_ADC_ConfigChannel+0x812>
  return __builtin_clz(value);
 8001518:	fab1 f181 	clz	r1, r1
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800151c:	3101      	adds	r1, #1
 800151e:	0689      	lsls	r1, r1, #26
 8001520:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001528:	2a00      	cmp	r2, #0
 800152a:	f000 8150 	beq.w	80017ce <HAL_ADC_ConfigChannel+0x80e>
 800152e:	2301      	movs	r3, #1
  return __builtin_clz(value);
 8001530:	fab2 f282 	clz	r2, r2
 8001534:	441a      	add	r2, r3
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	4093      	lsls	r3, r2
 800153c:	e704      	b.n	8001348 <HAL_ADC_ConfigChannel+0x388>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	fa97 f3a7 	rbit	r3, r7
  if (value == 0U)
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8148 	beq.w	80017d8 <HAL_ADC_ConfigChannel+0x818>
  return __builtin_clz(value);
 8001548:	fab3 f383 	clz	r3, r3
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800154c:	2001      	movs	r0, #1
 800154e:	4098      	lsls	r0, r3
 8001550:	e704      	b.n	800135c <HAL_ADC_ConfigChannel+0x39c>
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8001552:	7e72      	ldrb	r2, [r6, #25]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001554:	6937      	ldr	r7, [r6, #16]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001556:	fab2 f082 	clz	r0, r2
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800155a:	f1a2 0101 	sub.w	r1, r2, #1
 800155e:	fab1 f181 	clz	r1, r1
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001562:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001566:	0940      	lsrs	r0, r0, #5
 8001568:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800156c:	ea42 6240 	orr.w	r2, r2, r0, lsl #25
 8001570:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001574:	6930      	ldr	r0, [r6, #16]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001576:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001578:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800157c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001580:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8001584:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8001588:	e5b6      	b.n	80010f8 <HAL_ADC_ConfigChannel+0x138>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	fa97 f3a7 	rbit	r3, r7
  return __builtin_clz(value);
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	e617      	b.n	80011c4 <HAL_ADC_ConfigChannel+0x204>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8001598:	b111      	cbz	r1, 80015a0 <HAL_ADC_ConfigChannel+0x5e0>
  return __builtin_clz(value);
 800159a:	fab1 f181 	clz	r1, r1
 800159e:	e777      	b.n	8001490 <HAL_ADC_ConfigChannel+0x4d0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015a0:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 80015a2:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a4:	f105 0060 	add.w	r0, r5, #96	@ 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015a8:	0e92      	lsrs	r2, r2, #26
 80015aa:	f002 021e 	and.w	r2, r2, #30
 80015ae:	f105 0e64 	add.w	lr, r5, #100	@ 0x64
 80015b2:	f100 0c08 	add.w	ip, r0, #8
 80015b6:	4667      	mov	r7, ip
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 80015bc:	2900      	cmp	r1, #0
 80015be:	f000 8124 	beq.w	800180a <HAL_ADC_ConfigChannel+0x84a>
  return __builtin_clz(value);
 80015c2:	fab1 f181 	clz	r1, r1
 80015c6:	4291      	cmp	r1, r2
 80015c8:	f000 80a6 	beq.w	8001718 <HAL_ADC_ConfigChannel+0x758>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015cc:	f8dc 2000 	ldr.w	r2, [ip]
 80015d0:	f8dc 2000 	ldr.w	r2, [ip]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015d4:	0e92      	lsrs	r2, r2, #26
 80015d6:	f002 021e 	and.w	r2, r2, #30
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015da:	f100 010c 	add.w	r1, r0, #12
 80015de:	468e      	mov	lr, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 80015e4:	2f00      	cmp	r7, #0
 80015e6:	f000 8116 	beq.w	8001816 <HAL_ADC_ConfigChannel+0x856>
  return __builtin_clz(value);
 80015ea:	fab7 f787 	clz	r7, r7
 80015ee:	4297      	cmp	r7, r2
 80015f0:	d078      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0x724>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015f2:	680a      	ldr	r2, [r1, #0]
 80015f4:	680a      	ldr	r2, [r1, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015f6:	0e92      	lsrs	r2, r2, #26
 80015f8:	f002 021e 	and.w	r2, r2, #30
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8001600:	2f00      	cmp	r7, #0
 8001602:	f43f ad79 	beq.w	80010f8 <HAL_ADC_ConfigChannel+0x138>
  return __builtin_clz(value);
 8001606:	fab7 f787 	clz	r7, r7
 800160a:	e76f      	b.n	80014ec <HAL_ADC_ConfigChannel+0x52c>
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 800160c:	4f24      	ldr	r7, [pc, #144]	@ (80016a0 <HAL_ADC_ConfigChannel+0x6e0>)
 800160e:	e5be      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8001610:	9101      	str	r1, [sp, #4]
 8001612:	f7ff f945 	bl	80008a0 <HAL_GetREVID>
 8001616:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800161a:	9901      	ldr	r1, [sp, #4]
 800161c:	d80a      	bhi.n	8001634 <HAL_ADC_ConfigChannel+0x674>
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 800161e:	2900      	cmp	r1, #0
 8001620:	f040 80ff 	bne.w	8001822 <HAL_ADC_ConfigChannel+0x862>
 8001624:	f3c7 6384 	ubfx	r3, r7, #26, #5
 8001628:	2b13      	cmp	r3, #19
 800162a:	d903      	bls.n	8001634 <HAL_ADC_ConfigChannel+0x674>
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800162c:	2701      	movs	r7, #1
 800162e:	3b09      	subs	r3, #9
 8001630:	409f      	lsls	r7, r3
 8001632:	4639      	mov	r1, r7
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8001634:	6822      	ldr	r2, [r4, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001636:	480e      	ldr	r0, [pc, #56]	@ (8001670 <HAL_ADC_ConfigChannel+0x6b0>)
 8001638:	6873      	ldr	r3, [r6, #4]
 800163a:	4282      	cmp	r2, r0
    MODIFY_REG(*preg,
 800163c:	f003 0c1f 	and.w	ip, r3, #31
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001640:	f43f ae90 	beq.w	8001364 <HAL_ADC_ConfigChannel+0x3a4>
    MODIFY_REG(*preg,
 8001644:	f04f 081f 	mov.w	r8, #31
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	f003 000c 	and.w	r0, r3, #12
 800164e:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
    MODIFY_REG(*preg,
 8001652:	f85e 3000 	ldr.w	r3, [lr, r0]
 8001656:	f3c7 6584 	ubfx	r5, r7, #26, #5
 800165a:	fa05 f50c 	lsl.w	r5, r5, ip
 800165e:	fa08 fc0c 	lsl.w	ip, r8, ip
 8001662:	ea23 030c 	bic.w	r3, r3, ip
 8001666:	432b      	orrs	r3, r5
 8001668:	f84e 3000 	str.w	r3, [lr, r0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800166c:	68b0      	ldr	r0, [r6, #8]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800166e:	e5ba      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x226>
 8001670:	46021000 	.word	0x46021000
 8001674:	46021308 	.word	0x46021308
 8001678:	42028308 	.word	0x42028308
 800167c:	42028000 	.word	0x42028000
 8001680:	ce080000 	.word	0xce080000
 8001684:	ca040000 	.word	0xca040000
 8001688:	80000001 	.word	0x80000001
 800168c:	b2001000 	.word	0xb2001000
 8001690:	b6002000 	.word	0xb6002000
 8001694:	ba004000 	.word	0xba004000
 8001698:	d6200000 	.word	0xd6200000
 800169c:	d7200000 	.word	0xd7200000
 80016a0:	da400000 	.word	0xda400000
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016a4:	0228      	lsls	r0, r5, #8
 80016a6:	f53f add9 	bmi.w	800125c <HAL_ADC_ConfigChannel+0x29c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80016aa:	680b      	ldr	r3, [r1, #0]
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016ac:	4a73      	ldr	r2, [pc, #460]	@ (800187c <HAL_ADC_ConfigChannel+0x8bc>)
 80016ae:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80016b2:	433b      	orrs	r3, r7
 80016b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016b8:	600b      	str	r3, [r1, #0]
 80016ba:	4b71      	ldr	r3, [pc, #452]	@ (8001880 <HAL_ADC_ConfigChannel+0x8c0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	099b      	lsrs	r3, r3, #6
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	9303      	str	r3, [sp, #12]
            while (wait_loop_index != 0UL)
 80016ca:	9b03      	ldr	r3, [sp, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f43f adc5 	beq.w	800125c <HAL_ADC_ConfigChannel+0x29c>
              wait_loop_index--;
 80016d2:	9b03      	ldr	r3, [sp, #12]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	9303      	str	r3, [sp, #12]
            while (wait_loop_index != 0UL)
 80016d8:	9b03      	ldr	r3, [sp, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x712>
 80016de:	e5bd      	b.n	800125c <HAL_ADC_ConfigChannel+0x29c>
 80016e0:	f100 0e0c 	add.w	lr, r0, #12
  MODIFY_REG(*preg,
 80016e4:	f8dc 2000 	ldr.w	r2, [ip]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
 80016ee:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
 80016f2:	4313      	orrs	r3, r2
 80016f4:	f8cc 3000 	str.w	r3, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016f8:	68c3      	ldr	r3, [r0, #12]
 80016fa:	68c2      	ldr	r2, [r0, #12]
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016fc:	6833      	ldr	r3, [r6, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016fe:	0e92      	lsrs	r2, r2, #26
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001700:	f033 407f 	bics.w	r0, r3, #4278190080	@ 0xff000000
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001704:	4671      	mov	r1, lr
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001706:	f002 021e 	and.w	r2, r2, #30
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800170a:	f47f af77 	bne.w	80015fc <HAL_ADC_ConfigChannel+0x63c>
 800170e:	f3c3 6784 	ubfx	r7, r3, #26, #5
 8001712:	e6eb      	b.n	80014ec <HAL_ADC_ConfigChannel+0x52c>
 8001714:	f105 0768 	add.w	r7, r5, #104	@ 0x68
  MODIFY_REG(*preg,
 8001718:	f8de 2000 	ldr.w	r2, [lr]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
 8001722:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
 8001726:	4313      	orrs	r3, r2
 8001728:	f8ce 3000 	str.w	r3, [lr]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800172c:	6883      	ldr	r3, [r0, #8]
 800172e:	6882      	ldr	r2, [r0, #8]
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001730:	6833      	ldr	r3, [r6, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001732:	0e92      	lsrs	r2, r2, #26
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001734:	f033 417f 	bics.w	r1, r3, #4278190080	@ 0xff000000
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001738:	46bc      	mov	ip, r7
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800173a:	f002 021e 	and.w	r2, r2, #30
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800173e:	f47f af4c 	bne.w	80015da <HAL_ADC_ConfigChannel+0x61a>
 8001742:	f3c3 6784 	ubfx	r7, r3, #26, #5
 8001746:	e6c7      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x518>
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8001748:	4f4e      	ldr	r7, [pc, #312]	@ (8001884 <HAL_ADC_ConfigChannel+0x8c4>)
 800174a:	e520      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800174c:	01ea      	lsls	r2, r5, #7
 800174e:	f53f ad85 	bmi.w	800125c <HAL_ADC_ConfigChannel+0x29c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001752:	680b      	ldr	r3, [r1, #0]
 8001754:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8001758:	433b      	orrs	r3, r7
 800175a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800175e:	600b      	str	r3, [r1, #0]
}
 8001760:	e57c      	b.n	800125c <HAL_ADC_ConfigChannel+0x29c>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001762:	026b      	lsls	r3, r5, #9
 8001764:	f53f ad7a 	bmi.w	800125c <HAL_ADC_ConfigChannel+0x29c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001768:	680b      	ldr	r3, [r1, #0]
 800176a:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800176e:	433b      	orrs	r3, r7
 8001770:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001774:	600b      	str	r3, [r1, #0]
}
 8001776:	e571      	b.n	800125c <HAL_ADC_ConfigChannel+0x29c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001778:	020a      	lsls	r2, r1, #8
 800177a:	f53f acc0 	bmi.w	80010fe <HAL_ADC_ConfigChannel+0x13e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800177e:	f8d5 3308 	ldr.w	r3, [r5, #776]	@ 0x308
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001782:	4a3f      	ldr	r2, [pc, #252]	@ (8001880 <HAL_ADC_ConfigChannel+0x8c0>)
 8001784:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8001788:	4303      	orrs	r3, r0
 800178a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800178e:	f8c5 3308 	str.w	r3, [r5, #776]	@ 0x308
 8001792:	6813      	ldr	r3, [r2, #0]
 8001794:	4a39      	ldr	r2, [pc, #228]	@ (800187c <HAL_ADC_ConfigChannel+0x8bc>)
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	3301      	adds	r3, #1
 80017a0:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80017a2:	9303      	str	r3, [sp, #12]
                while (wait_loop_index != 0UL)
 80017a4:	9b03      	ldr	r3, [sp, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f43f aca9 	beq.w	80010fe <HAL_ADC_ConfigChannel+0x13e>
                  wait_loop_index--;
 80017ac:	9b03      	ldr	r3, [sp, #12]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	9303      	str	r3, [sp, #12]
                while (wait_loop_index != 0UL)
 80017b2:	9b03      	ldr	r3, [sp, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f9      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x7ec>
 80017b8:	e4a1      	b.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 80017ba:	4f33      	ldr	r7, [pc, #204]	@ (8001888 <HAL_ADC_ConfigChannel+0x8c8>)
 80017bc:	e4e7      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
 80017be:	6811      	ldr	r1, [r2, #0]
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017c0:	f005 73a0 	and.w	r3, r5, #20971520	@ 0x1400000
 80017c4:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	e546      	b.n	800125c <HAL_ADC_ConfigChannel+0x29c>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e5ba      	b.n	8001348 <HAL_ADC_ConfigChannel+0x388>
 80017d2:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80017d6:	e6a5      	b.n	8001524 <HAL_ADC_ConfigChannel+0x564>
 80017d8:	2001      	movs	r0, #1
 80017da:	e5bf      	b.n	800135c <HAL_ADC_ConfigChannel+0x39c>
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80017dc:	01cb      	lsls	r3, r1, #7
 80017de:	f53f ac8e 	bmi.w	80010fe <HAL_ADC_ConfigChannel+0x13e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80017e2:	f8d5 3308 	ldr.w	r3, [r5, #776]	@ 0x308
 80017e6:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80017ea:	4303      	orrs	r3, r0
 80017ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017f0:	f8c5 3308 	str.w	r3, [r5, #776]	@ 0x308
}
 80017f4:	e483      	b.n	80010fe <HAL_ADC_ConfigChannel+0x13e>
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 80017f6:	4f25      	ldr	r7, [pc, #148]	@ (800188c <HAL_ADC_ConfigChannel+0x8cc>)
 80017f8:	e4c9      	b.n	800118e <HAL_ADC_ConfigChannel+0x1ce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80017fa:	6811      	ldr	r1, [r2, #0]
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017fc:	f405 0340 	and.w	r3, r5, #12582912	@ 0xc00000
 8001800:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8001804:	430b      	orrs	r3, r1
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	e528      	b.n	800125c <HAL_ADC_ConfigChannel+0x29c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800180a:	6882      	ldr	r2, [r0, #8]
 800180c:	6882      	ldr	r2, [r0, #8]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800180e:	0e92      	lsrs	r2, r2, #26
 8001810:	f002 021e 	and.w	r2, r2, #30
 8001814:	e6e1      	b.n	80015da <HAL_ADC_ConfigChannel+0x61a>
 8001816:	68c2      	ldr	r2, [r0, #12]
 8001818:	68c2      	ldr	r2, [r0, #12]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800181a:	0e92      	lsrs	r2, r2, #26
 800181c:	f002 021e 	and.w	r2, r2, #30
 8001820:	e6ec      	b.n	80015fc <HAL_ADC_ConfigChannel+0x63c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	fa97 f3a7 	rbit	r3, r7
  if (value == 0U)
 8001826:	b123      	cbz	r3, 8001832 <HAL_ADC_ConfigChannel+0x872>
  return __builtin_clz(value);
 8001828:	fab3 f383 	clz	r3, r3
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 800182c:	2b13      	cmp	r3, #19
 800182e:	f77f af01 	ble.w	8001634 <HAL_ADC_ConfigChannel+0x674>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	fa97 f7a7 	rbit	r7, r7
  return __builtin_clz(value);
 8001836:	fab7 f787 	clz	r7, r7
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800183a:	2301      	movs	r3, #1
 800183c:	3f09      	subs	r7, #9
 800183e:	fa03 f707 	lsl.w	r7, r3, r7
 8001842:	4639      	mov	r1, r7
 8001844:	e6f6      	b.n	8001634 <HAL_ADC_ConfigChannel+0x674>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001846:	6811      	ldr	r1, [r2, #0]
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001848:	f005 73c0 	and.w	r3, r5, #25165824	@ 0x1800000
 800184c:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8001850:	430b      	orrs	r3, r1
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	e502      	b.n	800125c <HAL_ADC_ConfigChannel+0x29c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	fa97 f3a7 	rbit	r3, r7
  return __builtin_clz(value);
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	e58c      	b.n	800137a <HAL_ADC_ConfigChannel+0x3ba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001860:	680b      	ldr	r3, [r1, #0]
 8001862:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8001866:	433b      	orrs	r3, r7
 8001868:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800186c:	600b      	str	r3, [r1, #0]
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800186e:	f7ff f817 	bl	80008a0 <HAL_GetREVID>
 8001872:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8001876:	f63f acf1 	bhi.w	800125c <HAL_ADC_ConfigChannel+0x29c>
 800187a:	e5c8      	b.n	800140e <HAL_ADC_ConfigChannel+0x44e>
 800187c:	053e2d63 	.word	0x053e2d63
 8001880:	20000000 	.word	0x20000000
 8001884:	de800000 	.word	0xde800000
 8001888:	81000001 	.word	0x81000001
 800188c:	d2100000 	.word	0xd2100000

08001890 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001890:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	07d2      	lsls	r2, r2, #31
 8001896:	d501      	bpl.n	800189c <ADC_Enable+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001898:	2000      	movs	r0, #0
}
 800189a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <ADC_Enable+0x88>)
{
 80018a0:	b570      	push	{r4, r5, r6, lr}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80018a2:	4211      	tst	r1, r2
 80018a4:	4606      	mov	r6, r0
 80018a6:	d12c      	bne.n	8001902 <ADC_Enable+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80018a8:	2201      	movs	r2, #1
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 80018aa:	6a01      	ldr	r1, [r0, #32]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80018ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80018b4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	609a      	str	r2, [r3, #8]
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 80018be:	b111      	cbz	r1, 80018c6 <ADC_Enable+0x36>
 80018c0:	4a16      	ldr	r2, [pc, #88]	@ (800191c <ADC_Enable+0x8c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d01b      	beq.n	80018fe <ADC_Enable+0x6e>
      tickstart = HAL_GetTick();
 80018c6:	f7fe ffe5 	bl	8000894 <HAL_GetTick>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018ca:	6833      	ldr	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018cc:	4604      	mov	r4, r0
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	07d5      	lsls	r5, r2, #31
 80018d2:	d414      	bmi.n	80018fe <ADC_Enable+0x6e>
 80018d4:	4d12      	ldr	r5, [pc, #72]	@ (8001920 <ADC_Enable+0x90>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	07d0      	lsls	r0, r2, #31
 80018da:	d404      	bmi.n	80018e6 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	402a      	ands	r2, r5
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	609a      	str	r2, [r3, #8]
          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018e6:	f7fe ffd5 	bl	8000894 <HAL_GetTick>
 80018ea:	1b03      	subs	r3, r0, r4
 80018ec:	2b02      	cmp	r3, #2
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018ee:	6833      	ldr	r3, [r6, #0]
          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018f0:	d902      	bls.n	80018f8 <ADC_Enable+0x68>
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	07d1      	lsls	r1, r2, #31
 80018f6:	d504      	bpl.n	8001902 <ADC_Enable+0x72>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	07d2      	lsls	r2, r2, #31
 80018fc:	d5eb      	bpl.n	80018d6 <ADC_Enable+0x46>
  return HAL_OK;
 80018fe:	2000      	movs	r0, #0
}
 8001900:	bd70      	pop	{r4, r5, r6, pc}
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
      return HAL_ERROR;
 8001904:	2001      	movs	r0, #1
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001906:	f043 0310 	orr.w	r3, r3, #16
 800190a:	67b3      	str	r3, [r6, #120]	@ 0x78
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190c:	6ff3      	ldr	r3, [r6, #124]	@ 0x7c
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	67f3      	str	r3, [r6, #124]	@ 0x7c
}
 8001914:	bd70      	pop	{r4, r5, r6, pc}
 8001916:	bf00      	nop
 8001918:	8000003f 	.word	0x8000003f
 800191c:	46021000 	.word	0x46021000
 8001920:	7fffffc0 	.word	0x7fffffc0

08001924 <HAL_ADC_Start_IT>:
{
 8001924:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001926:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001928:	689d      	ldr	r5, [r3, #8]
 800192a:	f015 0504 	ands.w	r5, r5, #4
 800192e:	d150      	bne.n	80019d2 <HAL_ADC_Start_IT+0xae>
    __HAL_LOCK(hadc);
 8001930:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 8001934:	4604      	mov	r4, r0
 8001936:	2b01      	cmp	r3, #1
 8001938:	d04b      	beq.n	80019d2 <HAL_ADC_Start_IT+0xae>
 800193a:	2301      	movs	r3, #1
 800193c:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    tmp_hal_status = ADC_Enable(hadc);
 8001940:	f7ff ffa6 	bl	8001890 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001944:	2800      	cmp	r0, #0
 8001946:	d146      	bne.n	80019d6 <HAL_ADC_Start_IT+0xb2>
      __HAL_UNLOCK(hadc);
 8001948:	2200      	movs	r2, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800194a:	251c      	movs	r5, #28
      ADC_STATE_CLR_SET(hadc->State,
 800194c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800194e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195a:	67a3      	str	r3, [r4, #120]	@ 0x78
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800195c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800195e:	04d9      	lsls	r1, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001960:	bf49      	itett	mi
 8001962:	6fe3      	ldrmi	r3, [r4, #124]	@ 0x7c
        ADC_CLEAR_ERRORCODE(hadc);
 8001964:	67e0      	strpl	r0, [r4, #124]	@ 0x7c
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001966:	f023 0306 	bicmi.w	r3, r3, #6
 800196a:	67e3      	strmi	r3, [r4, #124]	@ 0x7c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800196c:	6823      	ldr	r3, [r4, #0]
      switch (hadc->Init.EOCSelection)
 800196e:	69a1      	ldr	r1, [r4, #24]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001970:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8001972:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001976:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8001978:	2908      	cmp	r1, #8
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800197a:	f022 021c 	bic.w	r2, r2, #28
 800197e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001980:	685a      	ldr	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001982:	bf0c      	ite	eq
 8001984:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001988:	f042 0204 	orrne.w	r2, r2, #4
 800198c:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800198e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001990:	b91a      	cbnz	r2, 800199a <HAL_ADC_Start_IT+0x76>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	f042 0210 	orr.w	r2, r2, #16
 8001998:	605a      	str	r2, [r3, #4]
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	0192      	lsls	r2, r2, #6
 800199e:	d50f      	bpl.n	80019c0 <HAL_ADC_Start_IT+0x9c>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019a0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
        switch (hadc->Init.EOCSelection)
 80019a2:	2908      	cmp	r1, #8
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019a4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80019a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80019ac:	67a2      	str	r2, [r4, #120]	@ 0x78
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80019ae:	685a      	ldr	r2, [r3, #4]
        switch (hadc->Init.EOCSelection)
 80019b0:	d014      	beq.n	80019dc <HAL_ADC_Start_IT+0xb8>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80019b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019b6:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	f042 0220 	orr.w	r2, r2, #32
 80019be:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80019c6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80019ca:	f042 0204 	orr.w	r2, r2, #4
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 80019d2:	2002      	movs	r0, #2
}
 80019d4:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80019d6:	f884 5074 	strb.w	r5, [r4, #116]	@ 0x74
}
 80019da:	bd38      	pop	{r3, r4, r5, pc}
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019dc:	f022 0220 	bic.w	r2, r2, #32
 80019e0:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019e8:	605a      	str	r2, [r3, #4]
            break;
 80019ea:	e7e9      	b.n	80019c0 <HAL_ADC_Start_IT+0x9c>

080019ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80019ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80019ee:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	0795      	lsls	r5, r2, #30
 80019f4:	d502      	bpl.n	80019fc <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f6:	689b      	ldr	r3, [r3, #8]
        }
      }
    }
  }

  return HAL_OK;
 80019f8:	2000      	movs	r0, #0
}
 80019fa:	bd38      	pop	{r3, r4, r5, pc}
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	07d4      	lsls	r4, r2, #31
 8001a00:	d5fa      	bpl.n	80019f8 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	4604      	mov	r4, r0
 8001a06:	f002 020d 	and.w	r2, r2, #13
 8001a0a:	2a01      	cmp	r2, #1
 8001a0c:	d009      	beq.n	8001a22 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
      return HAL_ERROR;
 8001a10:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	67a3      	str	r3, [r4, #120]	@ 0x78
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a18:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	67e3      	str	r3, [r4, #124]	@ 0x7c
}
 8001a20:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001a22:	2103      	movs	r1, #3
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001a2a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001a2e:	f042 0202 	orr.w	r2, r2, #2
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001a36:	f7fe ff2d 	bl	8000894 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a3a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001a3c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	07d9      	lsls	r1, r3, #31
 8001a42:	d403      	bmi.n	8001a4c <ADC_Disable+0x60>
 8001a44:	e7d8      	b.n	80019f8 <ADC_Disable+0xc>
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	07db      	lsls	r3, r3, #31
 8001a4a:	d5d5      	bpl.n	80019f8 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a4c:	f7fe ff22 	bl	8000894 <HAL_GetTick>
 8001a50:	1b40      	subs	r0, r0, r5
 8001a52:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a54:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a56:	d9f6      	bls.n	8001a46 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	07d2      	lsls	r2, r2, #31
 8001a5c:	d5f3      	bpl.n	8001a46 <ADC_Disable+0x5a>
 8001a5e:	e7d6      	b.n	8001a0e <ADC_Disable+0x22>

08001a60 <HAL_ADCEx_Calibration_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001a60:	2300      	movs	r3, #0
{
 8001a62:	b570      	push	{r4, r5, r6, lr}
 8001a64:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8001a66:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8001a68:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d041      	beq.n	8001af4 <HAL_ADCEx_Calibration_Start+0x94>
 8001a70:	2301      	movs	r3, #1
 8001a72:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001a76:	4604      	mov	r4, r0
 8001a78:	460d      	mov	r5, r1
 8001a7a:	f7ff ffb7 	bl	80019ec <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8001a7e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
  if (tmp_hal_status == HAL_OK)
 8001a80:	bb80      	cbnz	r0, 8001ae4 <HAL_ADCEx_Calibration_Start+0x84>
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8001a82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a86:	f023 0302 	bic.w	r3, r3, #2
 8001a8a:	f043 0302 	orr.w	r3, r3, #2

    if (hadc->Instance == ADC4)
 8001a8e:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8001a90:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (hadc->Instance == ADC4)
 8001a92:	4b58      	ldr	r3, [pc, #352]	@ (8001bf4 <HAL_ADCEx_Calibration_Start+0x194>)
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d07d      	beq.n	8001b94 <HAL_ADCEx_Calibration_Start+0x134>
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8001a98:	f240 4c55 	movw	ip, #1109	@ 0x455
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8001a9c:	4956      	ldr	r1, [pc, #344]	@ (8001bf8 <HAL_ADCEx_Calibration_Start+0x198>)
 8001a9e:	680b      	ldr	r3, [r1, #0]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8001aa0:	680e      	ldr	r6, [r1, #0]
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8001aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8001aa6:	4563      	cmp	r3, ip
 8001aa8:	d02a      	beq.n	8001b00 <HAL_ADCEx_Calibration_Start+0xa0>
 8001aaa:	f240 4176 	movw	r1, #1142	@ 0x476
 8001aae:	428b      	cmp	r3, r1
 8001ab0:	d026      	beq.n	8001b00 <HAL_ADCEx_Calibration_Start+0xa0>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8001ab2:	f46f 6190 	mvn.w	r1, #1152	@ 0x480
 8001ab6:	440b      	add	r3, r1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d91e      	bls.n	8001afa <HAL_ADCEx_Calibration_Start+0x9a>
    MODIFY_REG(ADCx->CR,
 8001abc:	6891      	ldr	r1, [r2, #8]
 8001abe:	4b4f      	ldr	r3, [pc, #316]	@ (8001bfc <HAL_ADCEx_Calibration_Start+0x19c>)
 8001ac0:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	432b      	orrs	r3, r5
 8001ac8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001acc:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001ace:	6893      	ldr	r3, [r2, #8]

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
        {
          wait_loop_index++;
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001ad0:	494b      	ldr	r1, [pc, #300]	@ (8001c00 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db57      	blt.n	8001b86 <HAL_ADCEx_Calibration_Start+0x126>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ad6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8001ad8:	f023 0303 	bic.w	r3, r3, #3
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	67a3      	str	r3, [r4, #120]	@ 0x78
 8001ae2:	e002      	b.n	8001aea <HAL_ADCEx_Calibration_Start+0x8a>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	67a3      	str	r3, [r4, #120]	@ 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001aea:	2300      	movs	r3, #0
 8001aec:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74

  return tmp_hal_status;
}
 8001af0:	b002      	add	sp, #8
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8001af4:	2002      	movs	r0, #2
}
 8001af6:	b002      	add	sp, #8
 8001af8:	bd70      	pop	{r4, r5, r6, pc}
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8001afa:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
 8001afe:	d3dd      	bcc.n	8001abc <HAL_ADCEx_Calibration_Start+0x5c>
        tmp_hal_status = ADC_Enable(hadc);
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff fec5 	bl	8001890 <ADC_Enable>
        if (tmp_hal_status == HAL_OK)
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d1e5      	bne.n	8001ad6 <HAL_ADCEx_Calibration_Start+0x76>
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8001b0a:	6822      	ldr	r2, [r4, #0]
 8001b0c:	6893      	ldr	r3, [r2, #8]
 8001b0e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001b12:	f043 6310 	orr.w	r3, r3, #150994944	@ 0x9000000
 8001b16:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b18:	f3bf 8f5f 	dmb	sy
          MODIFY_REG(hadc->Instance->CALFACT2, 0xFFFFFF00UL, 0x03021100UL);
 8001b1c:	6821      	ldr	r1, [r4, #0]
 8001b1e:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8001b20:	f8d1 20c8 	ldr.w	r2, [r1, #200]	@ 0xc8
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
 8001b2c:	f3bf 8f5f 	dmb	sy
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8001b30:	6822      	ldr	r2, [r4, #0]
          tmp_hal_status = ADC_Disable(hadc);
 8001b32:	4620      	mov	r0, r4
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8001b34:	f8d2 30c4 	ldr.w	r3, [r2, #196]	@ 0xc4
 8001b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b3c:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
          tmp_hal_status = ADC_Disable(hadc);
 8001b40:	f7ff ff54 	bl	80019ec <ADC_Disable>
          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8001b44:	f1b5 1f01 	cmp.w	r5, #65537	@ 0x10001
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8001b48:	6822      	ldr	r2, [r4, #0]
          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8001b4a:	d044      	beq.n	8001bd6 <HAL_ADCEx_Calibration_Start+0x176>
          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8001b4c:	6893      	ldr	r3, [r2, #8]
 8001b4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b52:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b5a:	6093      	str	r3, [r2, #8]
 8001b5c:	6893      	ldr	r3, [r2, #8]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001b5e:	4928      	ldr	r1, [pc, #160]	@ (8001c00 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	dab8      	bge.n	8001ad6 <HAL_ADCEx_Calibration_Start+0x76>
            wait_loop_index++;
 8001b64:	9b01      	ldr	r3, [sp, #4]
 8001b66:	3301      	adds	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001b6a:	9b01      	ldr	r3, [sp, #4]
 8001b6c:	428b      	cmp	r3, r1
 8001b6e:	d9f5      	bls.n	8001b5c <HAL_ADCEx_Calibration_Start+0xfc>
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b70:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b74:	f023 0312 	bic.w	r3, r3, #18
 8001b78:	f043 0310 	orr.w	r3, r3, #16
 8001b7c:	67a3      	str	r3, [r4, #120]	@ 0x78
              __HAL_UNLOCK(hadc);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
 8001b84:	e7b4      	b.n	8001af0 <HAL_ADCEx_Calibration_Start+0x90>
          wait_loop_index++;
 8001b86:	9b01      	ldr	r3, [sp, #4]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001b8c:	9b01      	ldr	r3, [sp, #4]
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	d99d      	bls.n	8001ace <HAL_ADCEx_Calibration_Start+0x6e>
 8001b92:	e7ed      	b.n	8001b70 <HAL_ADCEx_Calibration_Start+0x110>
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8001b94:	6c51      	ldr	r1, [r2, #68]	@ 0x44
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8001b96:	68d5      	ldr	r5, [r2, #12]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8001b98:	68d3      	ldr	r3, [r2, #12]
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8001b9a:	f001 0101 	and.w	r1, r1, #1
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8001b9e:	f023 0303 	bic.w	r3, r3, #3
 8001ba2:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8001ba4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8001ba6:	f005 0503 	and.w	r5, r5, #3
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6453      	str	r3, [r2, #68]	@ 0x44
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8001bb0:	6893      	ldr	r3, [r2, #8]
 8001bb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bb6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bbe:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001bc0:	6893      	ldr	r3, [r2, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8001c00 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0d      	blt.n	8001be4 <HAL_ADCEx_Calibration_Start+0x184>
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001bc8:	68d3      	ldr	r3, [r2, #12]
 8001bca:	432b      	orrs	r3, r5
 8001bcc:	60d3      	str	r3, [r2, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8001bce:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd4:	e77f      	b.n	8001ad6 <HAL_ADCEx_Calibration_Start+0x76>
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8001bd6:	6891      	ldr	r1, [r2, #8]
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_ADCEx_Calibration_Start+0x19c>)
 8001bda:	400b      	ands	r3, r1
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be0:	6093      	str	r3, [r2, #8]
 8001be2:	e7b3      	b.n	8001b4c <HAL_ADCEx_Calibration_Start+0xec>
        wait_loop_index++;
 8001be4:	9b01      	ldr	r3, [sp, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001bea:	9b01      	ldr	r3, [sp, #4]
 8001bec:	42b3      	cmp	r3, r6
 8001bee:	d9e7      	bls.n	8001bc0 <HAL_ADCEx_Calibration_Start+0x160>
 8001bf0:	e7be      	b.n	8001b70 <HAL_ADCEx_Calibration_Start+0x110>
 8001bf2:	bf00      	nop
 8001bf4:	46021000 	.word	0x46021000
 8001bf8:	e0044000 	.word	0xe0044000
 8001bfc:	7ffeffc0 	.word	0x7ffeffc0
 8001c00:	022b6b7f 	.word	0x022b6b7f
 8001c04:	03021100 	.word	0x03021100

08001c08 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop

08001c0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop

08001c14 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c18:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4906      	ldr	r1, [pc, #24]	@ (8001c38 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c1e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c22:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001c34:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3e:	b500      	push	{lr}
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c46:	f1c3 0e07 	rsb	lr, r3, #7
 8001c4a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c52:	bf28      	it	cs
 8001c54:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c58:	f1bc 0f06 	cmp.w	ip, #6
 8001c5c:	d91c      	bls.n	8001c98 <HAL_NVIC_SetPriority+0x5c>
 8001c5e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c66:	fa03 f30c 	lsl.w	r3, r3, ip
 8001c6a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c72:	fa03 f30e 	lsl.w	r3, r3, lr
 8001c76:	ea21 0303 	bic.w	r3, r1, r3
 8001c7a:	fa03 f30c 	lsl.w	r3, r3, ip
 8001c7e:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001c82:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001c86:	db0a      	blt.n	8001c9e <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001c8c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001c90:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c98:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	4694      	mov	ip, r2
 8001c9c:	e7e7      	b.n	8001c6e <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <HAL_NVIC_SetPriority+0x74>)
 8001ca0:	f000 000f 	and.w	r0, r0, #15
 8001ca4:	4402      	add	r2, r0
 8001ca6:	7613      	strb	r3, [r2, #24]
 8001ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cac:	e000ed00 	.word	0xe000ed00
 8001cb0:	e000ecfc 	.word	0xe000ecfc

08001cb4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	db07      	blt.n	8001cc8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f000 011f 	and.w	r1, r0, #31
 8001cbe:	4a03      	ldr	r2, [pc, #12]	@ (8001ccc <HAL_NVIC_EnableIRQ+0x18>)
 8001cc0:	0940      	lsrs	r0, r0, #5
 8001cc2:	408b      	lsls	r3, r1
 8001cc4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	1e43      	subs	r3, r0, #1
 8001cd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd6:	d209      	bcs.n	8001cec <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001cd8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001cdc:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001cde:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 8001ce0:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001ce2:	6913      	ldr	r3, [r2, #16]
 8001ce4:	f043 0303 	orr.w	r3, r3, #3
 8001ce8:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 8001cea:	4770      	bx	lr
    return (1UL);
 8001cec:	2001      	movs	r0, #1
}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001cf0:	2804      	cmp	r0, #4
 8001cf2:	d813      	bhi.n	8001d1c <HAL_SYSTICK_CLKSourceConfig+0x2c>
 8001cf4:	e8df f000 	tbb	[pc, r0]
 8001cf8:	12031a2a 	.word	0x12031a2a
 8001cfc:	13          	.byte	0x13
 8001cfd:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001cfe:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8001d02:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001d04:	4a18      	ldr	r2, [pc, #96]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d06:	f023 0304 	bic.w	r3, r3, #4
 8001d0a:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001d0c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8001d10:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8001d1c:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d1e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001d22:	6913      	ldr	r3, [r2, #16]
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6113      	str	r3, [r2, #16]
      break;
 8001d2a:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d2c:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8001d30:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001d32:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001d3a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8001d3e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001d4a:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d4c:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8001d50:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001d52:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001d5a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8001d5e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001d66:	4770      	bx	lr
 8001d68:	46020c00 	.word	0x46020c00

08001d6c <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001d6c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	075b      	lsls	r3, r3, #29
 8001d74:	d410      	bmi.n	8001d98 <HAL_SYSTICK_GetCLKSourceConfig+0x2c>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001d76:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 8001d78:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8001d7c:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000

    switch (systick_rcc_source)
 8001d80:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8001d84:	d006      	beq.n	8001d94 <HAL_SYSTICK_GetCLKSourceConfig+0x28>
 8001d86:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 8001d8a:	fab0 f080 	clz	r0, r0
 8001d8e:	0940      	lsrs	r0, r0, #5
 8001d90:	0040      	lsls	r0, r0, #1
 8001d92:	4770      	bx	lr
 8001d94:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 8001d96:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001d98:	2004      	movs	r0, #4
 8001d9a:	4770      	bx	lr
 8001d9c:	46020c00 	.word	0x46020c00

08001da0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Save GPIO port address */
  p_gpio = GPIOx;

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001da4:	f8d1 b000 	ldr.w	fp, [r1]
{
 8001da8:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001daa:	f1bb 0f00 	cmp.w	fp, #0
 8001dae:	f000 80b4 	beq.w	8001f1a <HAL_GPIO_Init+0x17a>
 8001db2:	4bbb      	ldr	r3, [pc, #748]	@ (80020a0 <HAL_GPIO_Init+0x300>)
 8001db4:	468a      	mov	sl, r1
 8001db6:	4298      	cmp	r0, r3
 8001db8:	f000 80be 	beq.w	8001f38 <HAL_GPIO_Init+0x198>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001dbc:	4bb9      	ldr	r3, [pc, #740]	@ (80020a4 <HAL_GPIO_Init+0x304>)
  uint32_t position = 0U;
 8001dbe:	2200      	movs	r2, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001dc0:	ea03 2390 	and.w	r3, r3, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001dc4:	f04f 0801 	mov.w	r8, #1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001dc8:	9303      	str	r3, [sp, #12]
 8001dca:	e029      	b.n	8001e20 <HAL_GPIO_Init+0x80>
        tmp = p_gpio->MODER;
 8001dcc:	6806      	ldr	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dce:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001dd2:	ea05 0c06 	and.w	ip, r5, r6
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001dd6:	f003 0603 	and.w	r6, r3, #3
 8001dda:	fa06 f607 	lsl.w	r6, r6, r7
 8001dde:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->MODER = tmp;
 8001de2:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de4:	d901      	bls.n	8001dea <HAL_GPIO_Init+0x4a>
 8001de6:	2b11      	cmp	r3, #17
 8001de8:	d153      	bne.n	8001e92 <HAL_GPIO_Init+0xf2>
        tmp = p_gpio->OSPEEDR;
 8001dea:	6886      	ldr	r6, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001dec:	091b      	lsrs	r3, r3, #4
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001dee:	ea06 0c05 	and.w	ip, r6, r5
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001df2:	f8da 600c 	ldr.w	r6, [sl, #12]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001df6:	4093      	lsls	r3, r2
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001df8:	40be      	lsls	r6, r7
 8001dfa:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->OSPEEDR = tmp;
 8001dfe:	6086      	str	r6, [r0, #8]
        tmp = p_gpio->OTYPER;
 8001e00:	6846      	ldr	r6, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001e02:	ea26 0101 	bic.w	r1, r6, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001e06:	430b      	orrs	r3, r1
        p_gpio->OTYPER = tmp;
 8001e08:	6043      	str	r3, [r0, #4]
        tmp = p_gpio->PUPDR;
 8001e0a:	68c1      	ldr	r1, [r0, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001e0c:	f8da 3008 	ldr.w	r3, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001e10:	4029      	ands	r1, r5
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001e12:	40bb      	lsls	r3, r7
 8001e14:	430b      	orrs	r3, r1
        p_gpio->PUPDR = tmp;
 8001e16:	60c3      	str	r3, [r0, #12]
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
      }
    }
    position++;
 8001e18:	3201      	adds	r2, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e1a:	fa3b f302 	lsrs.w	r3, fp, r2
 8001e1e:	d07c      	beq.n	8001f1a <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e20:	fa08 f102 	lsl.w	r1, r8, r2
    if (iocurrent != 0U)
 8001e24:	ea1b 0e01 	ands.w	lr, fp, r1
 8001e28:	d0f6      	beq.n	8001e18 <HAL_GPIO_Init+0x78>
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e2a:	2403      	movs	r4, #3
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001e2c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001e30:	0057      	lsls	r7, r2, #1
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e32:	f023 0610 	bic.w	r6, r3, #16
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e36:	fa04 f507 	lsl.w	r5, r4, r7
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e3a:	2e02      	cmp	r6, #2
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e3c:	ea6f 0505 	mvn.w	r5, r5
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e40:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e44:	d1c2      	bne.n	8001dcc <HAL_GPIO_Init+0x2c>
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e46:	fa06 f407 	lsl.w	r4, r6, r7
        tmp = GPIOx->AFR[position >> 3U];
 8001e4a:	08d6      	lsrs	r6, r2, #3
 8001e4c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e50:	9402      	str	r4, [sp, #8]
 8001e52:	4634      	mov	r4, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e54:	f8da 6010 	ldr.w	r6, [sl, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e58:	f002 0c07 	and.w	ip, r2, #7
 8001e5c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e60:	f006 060f 	and.w	r6, r6, #15
 8001e64:	fa06 f60c 	lsl.w	r6, r6, ip
 8001e68:	9601      	str	r6, [sp, #4]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e6a:	260f      	movs	r6, #15
 8001e6c:	fa06 fc0c 	lsl.w	ip, r6, ip
        tmp = GPIOx->AFR[position >> 3U];
 8001e70:	6a26      	ldr	r6, [r4, #32]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e72:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e76:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e7a:	9e01      	ldr	r6, [sp, #4]
 8001e7c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8001e80:	6226      	str	r6, [r4, #32]
        tmp = p_gpio->MODER;
 8001e82:	6806      	ldr	r6, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e84:	9c02      	ldr	r4, [sp, #8]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e86:	ea06 0605 	and.w	r6, r6, r5
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e8a:	ea46 0604 	orr.w	r6, r6, r4
        p_gpio->MODER = tmp;
 8001e8e:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e90:	d0ab      	beq.n	8001dea <HAL_GPIO_Init+0x4a>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e92:	2b12      	cmp	r3, #18
 8001e94:	d0a9      	beq.n	8001dea <HAL_GPIO_Init+0x4a>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d0be      	beq.n	8001e18 <HAL_GPIO_Init+0x78>
        tmp = p_gpio->PUPDR;
 8001e9a:	68c1      	ldr	r1, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001e9c:	400d      	ands	r5, r1
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001e9e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8001ea2:	40b9      	lsls	r1, r7
 8001ea4:	4329      	orrs	r1, r5
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea6:	00dd      	lsls	r5, r3, #3
        p_gpio->PUPDR = tmp;
 8001ea8:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eaa:	d5b5      	bpl.n	8001e18 <HAL_GPIO_Init+0x78>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001eac:	240f      	movs	r4, #15
 8001eae:	f022 0503 	bic.w	r5, r2, #3
 8001eb2:	f105 458c 	add.w	r5, r5, #1174405120	@ 0x46000000
 8001eb6:	f002 0103 	and.w	r1, r2, #3
 8001eba:	f505 3508 	add.w	r5, r5, #139264	@ 0x22000
 8001ebe:	00c9      	lsls	r1, r1, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8001ec0:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001ec2:	fa04 f701 	lsl.w	r7, r4, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001ec6:	9c03      	ldr	r4, [sp, #12]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001ec8:	ea26 0607 	bic.w	r6, r6, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001ecc:	fa04 f101 	lsl.w	r1, r4, r1
 8001ed0:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ed2:	6629      	str	r1, [r5, #96]	@ 0x60
        tmp = EXTI->RTSR1;
 8001ed4:	4974      	ldr	r1, [pc, #464]	@ (80020a8 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed6:	02dc      	lsls	r4, r3, #11
        tmp &= ~((uint32_t)iocurrent);
 8001ed8:	ea6f 050e 	mvn.w	r5, lr
        tmp = EXTI->RTSR1;
 8001edc:	6809      	ldr	r1, [r1, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ede:	d428      	bmi.n	8001f32 <HAL_GPIO_Init+0x192>
        tmp &= ~((uint32_t)iocurrent);
 8001ee0:	4029      	ands	r1, r5
        EXTI->RTSR1 = tmp;
 8001ee2:	4c71      	ldr	r4, [pc, #452]	@ (80020a8 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee4:	029f      	lsls	r7, r3, #10
        EXTI->RTSR1 = tmp;
 8001ee6:	6021      	str	r1, [r4, #0]
        tmp = EXTI->FTSR1;
 8001ee8:	6861      	ldr	r1, [r4, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eea:	d41f      	bmi.n	8001f2c <HAL_GPIO_Init+0x18c>
        tmp &= ~((uint32_t)iocurrent);
 8001eec:	4029      	ands	r1, r5
        EXTI->FTSR1 = tmp;
 8001eee:	4c6e      	ldr	r4, [pc, #440]	@ (80020a8 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef0:	039e      	lsls	r6, r3, #14
        EXTI->FTSR1 = tmp;
 8001ef2:	6061      	str	r1, [r4, #4]
        tmp = EXTI->EMR1;
 8001ef4:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef8:	d415      	bmi.n	8001f26 <HAL_GPIO_Init+0x186>
        tmp &= ~((uint32_t)iocurrent);
 8001efa:	4029      	ands	r1, r5
        EXTI->EMR1 = tmp;
 8001efc:	4c6a      	ldr	r4, [pc, #424]	@ (80020a8 <HAL_GPIO_Init+0x308>)
 8001efe:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8001f02:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f06:	03dc      	lsls	r4, r3, #15
 8001f08:	d40a      	bmi.n	8001f20 <HAL_GPIO_Init+0x180>
        tmp &= ~((uint32_t)iocurrent);
 8001f0a:	4029      	ands	r1, r5
        EXTI->IMR1 = tmp;
 8001f0c:	4b66      	ldr	r3, [pc, #408]	@ (80020a8 <HAL_GPIO_Init+0x308>)
    position++;
 8001f0e:	3201      	adds	r2, #1
        EXTI->IMR1 = tmp;
 8001f10:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f14:	fa3b f302 	lsrs.w	r3, fp, r2
 8001f18:	d182      	bne.n	8001e20 <HAL_GPIO_Init+0x80>
  }
}
 8001f1a:	b005      	add	sp, #20
 8001f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          tmp |= iocurrent;
 8001f20:	ea41 010e 	orr.w	r1, r1, lr
 8001f24:	e7f2      	b.n	8001f0c <HAL_GPIO_Init+0x16c>
          tmp |= iocurrent;
 8001f26:	ea41 010e 	orr.w	r1, r1, lr
 8001f2a:	e7e7      	b.n	8001efc <HAL_GPIO_Init+0x15c>
          tmp |= iocurrent;
 8001f2c:	ea41 010e 	orr.w	r1, r1, lr
 8001f30:	e7dd      	b.n	8001eee <HAL_GPIO_Init+0x14e>
          tmp |= iocurrent;
 8001f32:	ea4e 0101 	orr.w	r1, lr, r1
 8001f36:	e7d4      	b.n	8001ee2 <HAL_GPIO_Init+0x142>
  uint32_t position = 0U;
 8001f38:	2300      	movs	r3, #0
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f3a:	2701      	movs	r7, #1
        tmp = EXTI->RTSR1;
 8001f3c:	4e5a      	ldr	r6, [pc, #360]	@ (80020a8 <HAL_GPIO_Init+0x308>)
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f3e:	fa07 f103 	lsl.w	r1, r7, r3
    if (iocurrent != 0U)
 8001f42:	ea11 050b 	ands.w	r5, r1, fp
 8001f46:	d059      	beq.n	8001ffc <HAL_GPIO_Init+0x25c>
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001f48:	f04f 090f 	mov.w	r9, #15
        tmp = GPIOx->MODER;
 8001f4c:	6804      	ldr	r4, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001f4e:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001f52:	ea24 0401 	bic.w	r4, r4, r1
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001f56:	4955      	ldr	r1, [pc, #340]	@ (80020ac <HAL_GPIO_Init+0x30c>)
 8001f58:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001f5c:	f002 0101 	and.w	r1, r2, #1
 8001f60:	4099      	lsls	r1, r3
 8001f62:	4321      	orrs	r1, r4
        GPIOx->MODER = tmp;
 8001f64:	6001      	str	r1, [r0, #0]
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001f66:	4952      	ldr	r1, [pc, #328]	@ (80020b0 <HAL_GPIO_Init+0x310>)
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001f68:	ea4f 0edc 	mov.w	lr, ip, lsr #3
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001f6c:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001f70:	f00c 0407 	and.w	r4, ip, #7
 8001f74:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001f78:	f8de 8020 	ldr.w	r8, [lr, #32]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001f7c:	00a4      	lsls	r4, r4, #2
 8001f7e:	fa09 f904 	lsl.w	r9, r9, r4
 8001f82:	ea28 0809 	bic.w	r8, r8, r9
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001f86:	f04f 090b 	mov.w	r9, #11
 8001f8a:	fa09 f404 	lsl.w	r4, r9, r4
 8001f8e:	ea44 0408 	orr.w	r4, r4, r8
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f92:	f04f 0803 	mov.w	r8, #3
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001f96:	f8ce 4020 	str.w	r4, [lr, #32]
        tmp = p_gpio->MODER;
 8001f9a:	680c      	ldr	r4, [r1, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001f9c:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8001fa0:	fa08 f80e 	lsl.w	r8, r8, lr
 8001fa4:	ea24 0908 	bic.w	r9, r4, r8
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001fa8:	2402      	movs	r4, #2
 8001faa:	fa04 f40e 	lsl.w	r4, r4, lr
 8001fae:	ea44 0409 	orr.w	r4, r4, r9
        p_gpio->MODER = tmp;
 8001fb2:	600c      	str	r4, [r1, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb4:	1e54      	subs	r4, r2, #1
 8001fb6:	2c01      	cmp	r4, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001fb8:	ea6f 0808 	mvn.w	r8, r8
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fbc:	d901      	bls.n	8001fc2 <HAL_GPIO_Init+0x222>
 8001fbe:	2a11      	cmp	r2, #17
 8001fc0:	d123      	bne.n	800200a <HAL_GPIO_Init+0x26a>
        tmp = p_gpio->OSPEEDR;
 8001fc2:	688c      	ldr	r4, [r1, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001fc4:	0912      	lsrs	r2, r2, #4
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001fc6:	fa07 f50c 	lsl.w	r5, r7, ip
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001fca:	fa02 f20c 	lsl.w	r2, r2, ip
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fce:	ea08 0c04 	and.w	ip, r8, r4
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fd2:	f8da 400c 	ldr.w	r4, [sl, #12]
 8001fd6:	fa04 f40e 	lsl.w	r4, r4, lr
 8001fda:	ea44 040c 	orr.w	r4, r4, ip
        p_gpio->OSPEEDR = tmp;
 8001fde:	608c      	str	r4, [r1, #8]
        tmp = p_gpio->OTYPER;
 8001fe0:	684c      	ldr	r4, [r1, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001fe2:	ea24 0405 	bic.w	r4, r4, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001fe6:	4322      	orrs	r2, r4
        p_gpio->OTYPER = tmp;
 8001fe8:	604a      	str	r2, [r1, #4]
        tmp = p_gpio->PUPDR;
 8001fea:	68cc      	ldr	r4, [r1, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001fec:	f8da 2008 	ldr.w	r2, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001ff0:	ea08 0404 	and.w	r4, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001ff4:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ff8:	4322      	orrs	r2, r4
        p_gpio->PUPDR = tmp;
 8001ffa:	60ca      	str	r2, [r1, #12]
    position++;
 8001ffc:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ffe:	fa3b f203 	lsrs.w	r2, fp, r3
 8002002:	d19c      	bne.n	8001f3e <HAL_GPIO_Init+0x19e>
}
 8002004:	b005      	add	sp, #20
 8002006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200a:	2a12      	cmp	r2, #18
 800200c:	d0d9      	beq.n	8001fc2 <HAL_GPIO_Init+0x222>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800200e:	2a03      	cmp	r2, #3
 8002010:	d0f4      	beq.n	8001ffc <HAL_GPIO_Init+0x25c>
        tmp = p_gpio->PUPDR;
 8002012:	68cc      	ldr	r4, [r1, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002014:	ea08 0804 	and.w	r8, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002018:	f8da 4008 	ldr.w	r4, [sl, #8]
 800201c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002020:	ea44 0408 	orr.w	r4, r4, r8
        p_gpio->PUPDR = tmp;
 8002024:	60cc      	str	r4, [r1, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002026:	00d1      	lsls	r1, r2, #3
 8002028:	d5e8      	bpl.n	8001ffc <HAL_GPIO_Init+0x25c>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800202a:	f04f 080f 	mov.w	r8, #15
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800202e:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8002032:	f023 0103 	bic.w	r1, r3, #3
 8002036:	f101 418c 	add.w	r1, r1, #1174405120	@ 0x46000000
 800203a:	f501 3108 	add.w	r1, r1, #139264	@ 0x22000
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800203e:	f003 0c03 	and.w	ip, r3, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8002042:	f8d1 e060 	ldr.w	lr, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002046:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800204a:	fa08 f80c 	lsl.w	r8, r8, ip
 800204e:	ea2e 0e08 	bic.w	lr, lr, r8
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002052:	fa04 f40c 	lsl.w	r4, r4, ip
 8002056:	ea44 040e 	orr.w	r4, r4, lr
        EXTI->EXTICR[position >> 2U] = tmp;
 800205a:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 800205c:	43ec      	mvns	r4, r5
        tmp = EXTI->RTSR1;
 800205e:	6831      	ldr	r1, [r6, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002060:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
        tmp &= ~((uint32_t)iocurrent);
 8002064:	bf0c      	ite	eq
 8002066:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8002068:	4329      	orrne	r1, r5
        EXTI->RTSR1 = tmp;
 800206a:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 800206c:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800206e:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8002072:	bf0c      	ite	eq
 8002074:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8002076:	4329      	orrne	r1, r5
        EXTI->FTSR1 = tmp;
 8002078:	6071      	str	r1, [r6, #4]
        tmp = EXTI->EMR1;
 800207a:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800207e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8002082:	bf0c      	ite	eq
 8002084:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8002086:	4329      	orrne	r1, r5
        EXTI->EMR1 = tmp;
 8002088:	f8c6 1084 	str.w	r1, [r6, #132]	@ 0x84
        tmp = EXTI->IMR1;
 800208c:	f8d6 1080 	ldr.w	r1, [r6, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002090:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 8002092:	bf54      	ite	pl
 8002094:	4021      	andpl	r1, r4
          tmp |= iocurrent;
 8002096:	4329      	orrmi	r1, r5
        EXTI->IMR1 = tmp;
 8002098:	f8c6 1080 	str.w	r1, [r6, #128]	@ 0x80
 800209c:	e7ae      	b.n	8001ffc <HAL_GPIO_Init+0x25c>
 800209e:	bf00      	nop
 80020a0:	46020000 	.word	0x46020000
 80020a4:	002f7f7f 	.word	0x002f7f7f
 80020a8:	46022000 	.word	0x46022000
 80020ac:	080038e4 	.word	0x080038e4
 80020b0:	080038e0 	.word	0x080038e0

080020b4 <HAL_ICACHE_ConfigAssociativityMode>:

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80020b4:	4908      	ldr	r1, [pc, #32]	@ (80020d8 <HAL_ICACHE_ConfigAssociativityMode+0x24>)
 80020b6:	680b      	ldr	r3, [r1, #0]
 80020b8:	f013 0301 	ands.w	r3, r3, #1
 80020bc:	d10a      	bne.n	80020d4 <HAL_ICACHE_ConfigAssociativityMode+0x20>
 80020be:	4602      	mov	r2, r0
{
 80020c0:	b410      	push	{r4}
  {
    status = HAL_ERROR;
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80020c2:	680c      	ldr	r4, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	4618      	mov	r0, r3
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80020c6:	f024 0304 	bic.w	r3, r4, #4
 80020ca:	4313      	orrs	r3, r2
  }

  return status;
}
 80020cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80020d0:	600b      	str	r3, [r1, #0]
}
 80020d2:	4770      	bx	lr
    status = HAL_ERROR;
 80020d4:	2001      	movs	r0, #1
}
 80020d6:	4770      	bx	lr
 80020d8:	40030400 	.word	0x40030400

080020dc <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80020dc:	4a03      	ldr	r2, [pc, #12]	@ (80020ec <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 80020de:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40030400 	.word	0x40030400

080020f0 <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80020f0:	4a21      	ldr	r2, [pc, #132]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80020f2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80020f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80020f8:	4283      	cmp	r3, r0
 80020fa:	d034      	beq.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80020fc:	f04f 0c32 	mov.w	ip, #50	@ 0x32
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002100:	68d3      	ldr	r3, [r2, #12]
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002102:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002106:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800210a:	ea43 0300 	orr.w	r3, r3, r0
 800210e:	bf88      	it	hi
 8002110:	f443 2380 	orrhi.w	r3, r3, #262144	@ 0x40000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002114:	60d3      	str	r3, [r2, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002118:	4a19      	ldr	r2, [pc, #100]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x90>)
 800211a:	681b      	ldr	r3, [r3, #0]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800211c:	4816      	ldr	r0, [pc, #88]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x88>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800211e:	fba2 1303 	umull	r1, r3, r2, r3
 8002122:	099b      	lsrs	r3, r3, #6
 8002124:	fb0c f303 	mul.w	r3, ip, r3
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800212c:	68c1      	ldr	r1, [r0, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800212e:	099b      	lsrs	r3, r3, #6
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002130:	040a      	lsls	r2, r1, #16
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002132:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002136:	d407      	bmi.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x58>
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002138:	461a      	mov	r2, r3
 800213a:	e000      	b.n	800213e <HAL_PWREx_ControlVoltageScaling+0x4e>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800213c:	b18a      	cbz	r2, 8002162 <HAL_PWREx_ControlVoltageScaling+0x72>
 800213e:	68c1      	ldr	r1, [r0, #12]
  {
    timeout--;
 8002140:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002142:	0409      	lsls	r1, r1, #16
 8002144:	d5fa      	bpl.n	800213c <HAL_PWREx_ControlVoltageScaling+0x4c>
  }

  /* Check time out */
  if (timeout != 0U)
 8002146:	b162      	cbz	r2, 8002162 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002148:	490b      	ldr	r1, [pc, #44]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800214a:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 800214c:	0410      	lsls	r0, r2, #16
 800214e:	d406      	bmi.n	800215e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002150:	e000      	b.n	8002154 <HAL_PWREx_ControlVoltageScaling+0x64>
 8002152:	b133      	cbz	r3, 8002162 <HAL_PWREx_ControlVoltageScaling+0x72>
 8002154:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
    {
      timeout--;
 8002156:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002158:	0412      	lsls	r2, r2, #16
 800215a:	d5fa      	bpl.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800215c:	b10b      	cbz	r3, 8002162 <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 800215e:	2000      	movs	r0, #0
 8002160:	4770      	bx	lr
  {
    return HAL_TIMEOUT;
 8002162:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002164:	4770      	bx	lr
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800216a:	d9f8      	bls.n	800215e <HAL_PWREx_ControlVoltageScaling+0x6e>
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800216c:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 800216e:	2000      	movs	r0, #0
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002174:	60d3      	str	r3, [r2, #12]
 8002176:	4770      	bx	lr
 8002178:	46020800 	.word	0x46020800
 800217c:	20000000 	.word	0x20000000
 8002180:	10624dd3 	.word	0x10624dd3

08002184 <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002184:	4b02      	ldr	r3, [pc, #8]	@ (8002190 <HAL_PWREx_GetVoltageRange+0xc>)
 8002186:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
}
 8002188:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	46020800 	.word	0x46020800

08002194 <HAL_PWREx_ConfigSupply>:

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002194:	2132      	movs	r1, #50	@ 0x32
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HAL_PWREx_ConfigSupply+0x68>)
 8002198:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <HAL_PWREx_ConfigSupply+0x6c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fba2 c303 	umull	ip, r3, r2, r3
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021aa:	4916      	ldr	r1, [pc, #88]	@ (8002204 <HAL_PWREx_ConfigSupply+0x70>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80021ac:	099b      	lsrs	r3, r3, #6
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021ae:	688a      	ldr	r2, [r1, #8]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80021b0:	3301      	adds	r3, #1
  if (SupplySource == PWR_LDO_SUPPLY)
 80021b2:	b980      	cbnz	r0, 80021d6 <HAL_PWREx_ConfigSupply+0x42>
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021b4:	f022 0202 	bic.w	r2, r2, #2
 80021b8:	608a      	str	r2, [r1, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021ba:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80021bc:	0790      	lsls	r0, r2, #30
 80021be:	d402      	bmi.n	80021c6 <HAL_PWREx_ConfigSupply+0x32>
  if (timeout == 0U)
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80021c0:	2000      	movs	r0, #0
 80021c2:	4770      	bx	lr
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021c4:	b12b      	cbz	r3, 80021d2 <HAL_PWREx_ConfigSupply+0x3e>
 80021c6:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 80021c8:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021ca:	0792      	lsls	r2, r2, #30
 80021cc:	d4fa      	bmi.n	80021c4 <HAL_PWREx_ConfigSupply+0x30>
  if (timeout == 0U)
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f6      	bne.n	80021c0 <HAL_PWREx_ConfigSupply+0x2c>
    return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
}
 80021d4:	4770      	bx	lr
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021d6:	f042 0202 	orr.w	r2, r2, #2
 80021da:	608a      	str	r2, [r1, #8]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021dc:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80021de:	0790      	lsls	r0, r2, #30
 80021e0:	d4ee      	bmi.n	80021c0 <HAL_PWREx_ConfigSupply+0x2c>
 80021e2:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 80021e4:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021e6:	0792      	lsls	r2, r2, #30
 80021e8:	d4f1      	bmi.n	80021ce <HAL_PWREx_ConfigSupply+0x3a>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f1      	beq.n	80021d2 <HAL_PWREx_ConfigSupply+0x3e>
 80021ee:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 80021f0:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021f2:	0792      	lsls	r2, r2, #30
 80021f4:	d5f9      	bpl.n	80021ea <HAL_PWREx_ConfigSupply+0x56>
  if (timeout == 0U)
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1e2      	bne.n	80021c0 <HAL_PWREx_ConfigSupply+0x2c>
 80021fa:	e7ea      	b.n	80021d2 <HAL_PWREx_ConfigSupply+0x3e>
 80021fc:	20000000 	.word	0x20000000
 8002200:	10624dd3 	.word	0x10624dd3
 8002204:	46020800 	.word	0x46020800

08002208 <HAL_PWREx_EnableVddA>:
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8002208:	4a02      	ldr	r2, [pc, #8]	@ (8002214 <HAL_PWREx_EnableVddA+0xc>)
 800220a:	6913      	ldr	r3, [r2, #16]
 800220c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002210:	6113      	str	r3, [r2, #16]
}
 8002212:	4770      	bx	lr
 8002214:	46020800 	.word	0x46020800

08002218 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002218:	4a02      	ldr	r2, [pc, #8]	@ (8002224 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800221a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002222:	4770      	bx	lr
 8002224:	46020800 	.word	0x46020800

08002228 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002228:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800222a:	4d2c      	ldr	r5, [pc, #176]	@ (80022dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
{
 800222c:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800222e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
{
 8002232:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002234:	075b      	lsls	r3, r3, #29
 8002236:	d52b      	bpl.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002238:	f7ff ffa4 	bl	8002184 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800223c:	f420 3380 	bic.w	r3, r0, #65536	@ 0x10000
 8002240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002244:	d007      	beq.n	8002256 <RCC_SetFlashLatencyFromMSIRange+0x2e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002246:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 800224a:	d217      	bcs.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800224c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8002250:	d133      	bne.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002252:	2203      	movs	r2, #3
 8002254:	e004      	b.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x38>
    if (msirange < RCC_MSIRANGE_1)
 8002256:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 800225a:	bf2c      	ite	cs
 800225c:	2200      	movcs	r2, #0
 800225e:	2201      	movcc	r2, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002260:	491f      	ldr	r1, [pc, #124]	@ (80022e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002262:	680b      	ldr	r3, [r1, #0]
 8002264:	f023 030f 	bic.w	r3, r3, #15
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800226c:	6808      	ldr	r0, [r1, #0]
 800226e:	f000 000f 	and.w	r0, r0, #15
 8002272:	1a80      	subs	r0, r0, r2
 8002274:	bf18      	it	ne
 8002276:	2001      	movne	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002278:	b003      	add	sp, #12
 800227a:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 800227c:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8002280:	d91e      	bls.n	80022c0 <RCC_SetFlashLatencyFromMSIRange+0x98>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002282:	bb10      	cbnz	r0, 80022ca <RCC_SetFlashLatencyFromMSIRange+0xa2>
          if (msirange > RCC_MSIRANGE_3)
 8002284:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
 8002288:	bf8c      	ite	hi
 800228a:	2200      	movhi	r2, #0
 800228c:	2201      	movls	r2, #1
 800228e:	e7e7      	b.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x38>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 800229c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80022a8:	f7ff ff6c 	bl	8002184 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ac:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 80022b8:	e7c0      	b.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x14>
        return HAL_ERROR;
 80022ba:	2001      	movs	r0, #1
}
 80022bc:	b003      	add	sp, #12
 80022be:	bd30      	pop	{r4, r5, pc}
        if (msirange == RCC_MSIRANGE_1)
 80022c0:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 80022c4:	d003      	beq.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0xa6>
          latency = FLASH_LATENCY_1; /* 1WS */
 80022c6:	2201      	movs	r2, #1
 80022c8:	e7ca      	b.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x38>
      latency = FLASH_LATENCY_0; /* 0WS */
 80022ca:	2200      	movs	r2, #0
 80022cc:	e7c8      	b.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x38>
            latency = FLASH_LATENCY_2; /* 2WS */
 80022ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80022d2:	bf0c      	ite	eq
 80022d4:	2201      	moveq	r2, #1
 80022d6:	2202      	movne	r2, #2
 80022d8:	e7c2      	b.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x38>
 80022da:	bf00      	nop
 80022dc:	46020c00 	.word	0x46020c00
 80022e0:	40022000 	.word	0x40022000

080022e4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e4:	4a41      	ldr	r2, [pc, #260]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 80022e6:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022ea:	f013 030c 	ands.w	r3, r3, #12
 80022ee:	d00b      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x24>
 80022f0:	2b0c      	cmp	r3, #12
 80022f2:	d05f      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0xd0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f4:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 80022f6:	483e      	ldr	r0, [pc, #248]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x10c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f8:	f002 020c 	and.w	r2, r2, #12
 80022fc:	2a04      	cmp	r2, #4
 80022fe:	d072      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x102>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002300:	2b08      	cmp	r3, #8
 8002302:	bf18      	it	ne
 8002304:	2000      	movne	r0, #0
 8002306:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002308:	4a38      	ldr	r2, [pc, #224]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 800230a:	6891      	ldr	r1, [r2, #8]
 800230c:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800230e:	bf54      	ite	pl
 8002310:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002314:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8002316:	4937      	ldr	r1, [pc, #220]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x110>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002318:	bf54      	ite	pl
 800231a:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800231e:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8002320:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002324:	2b00      	cmp	r3, #0
 8002326:	d05f      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x104>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002328:	4930      	ldr	r1, [pc, #192]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
{
 800232a:	b510      	push	{r4, lr}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800232c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800232e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002330:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002332:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002336:	3301      	adds	r3, #1
 8002338:	ee07 3a10 	vmov	s14, r3
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800233c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800233e:	f3c4 1e00 	ubfx	lr, r4, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002342:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002346:	fb0e f303 	mul.w	r3, lr, r3
 800234a:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800234e:	f002 0c03 	and.w	ip, r2, #3
    switch (pllsource)
 8002352:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 800235a:	d002      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x7e>
 800235c:	f1bc 0f03 	cmp.w	ip, #3
 8002360:	d12f      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002362:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002364:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236c:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002370:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80023f8 <HAL_RCC_GetSysClockFreq+0x114>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002374:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002378:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800237c:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 80023fc <HAL_RCC_GetSysClockFreq+0x118>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002380:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002384:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002388:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800238e:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002394:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002398:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800239c:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023aa:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80023ae:	ee17 0a90 	vmov	r0, s15
}
 80023b2:	bd10      	pop	{r4, pc}
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b4:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023b8:	2901      	cmp	r1, #1
 80023ba:	d0a5      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U;
 80023bc:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023be:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c0:	e7b2      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023c2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80023c4:	ee05 0a90 	vmov	s11, r0
 80023c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023cc:	ee06 3a10 	vmov	s12, r3
 80023d0:	eeb8 5a65 	vcvt.f32.u32	s10, s11
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80023d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023d8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80023dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80023e0:	eddf 5a05 	vldr	s11, [pc, #20]	@ 80023f8 <HAL_RCC_GetSysClockFreq+0x114>
 80023e4:	e7cc      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x9c>
 80023e6:	4770      	bx	lr
}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	46020c00 	.word	0x46020c00
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	08003890 	.word	0x08003890
 80023f8:	39000000 	.word	0x39000000
 80023fc:	4b742400 	.word	0x4b742400

08002400 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8002400:	2800      	cmp	r0, #0
 8002402:	f000 810e 	beq.w	8002622 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002406:	4a9f      	ldr	r2, [pc, #636]	@ (8002684 <HAL_RCC_ClockConfig+0x284>)
{
 8002408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	6813      	ldr	r3, [r2, #0]
 800240e:	4604      	mov	r4, r0
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	428b      	cmp	r3, r1
 8002416:	460d      	mov	r5, r1
{
 8002418:	b082      	sub	sp, #8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800241a:	d20d      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241c:	6813      	ldr	r3, [r2, #0]
 800241e:	f023 030f 	bic.w	r3, r3, #15
 8002422:	430b      	orrs	r3, r1
 8002424:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	6813      	ldr	r3, [r2, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	428b      	cmp	r3, r1
 800242e:	d003      	beq.n	8002438 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
}
 8002432:	b002      	add	sp, #8
 8002434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	06df      	lsls	r7, r3, #27
 800243c:	d50b      	bpl.n	8002456 <HAL_RCC_ClockConfig+0x56>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800243e:	4992      	ldr	r1, [pc, #584]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002440:	6960      	ldr	r0, [r4, #20]
 8002442:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8002444:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002448:	4290      	cmp	r0, r2
 800244a:	d904      	bls.n	8002456 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800244c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800244e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002452:	4302      	orrs	r2, r0
 8002454:	624a      	str	r2, [r1, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	071e      	lsls	r6, r3, #28
 8002458:	d50d      	bpl.n	8002476 <HAL_RCC_ClockConfig+0x76>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800245a:	498b      	ldr	r1, [pc, #556]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 800245c:	6920      	ldr	r0, [r4, #16]
 800245e:	6a0a      	ldr	r2, [r1, #32]
 8002460:	0912      	lsrs	r2, r2, #4
 8002462:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002466:	4290      	cmp	r0, r2
 8002468:	d905      	bls.n	8002476 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800246a:	6a0a      	ldr	r2, [r1, #32]
 800246c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002470:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8002474:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002476:	0758      	lsls	r0, r3, #29
 8002478:	d50b      	bpl.n	8002492 <HAL_RCC_ClockConfig+0x92>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800247a:	4983      	ldr	r1, [pc, #524]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 800247c:	68e0      	ldr	r0, [r4, #12]
 800247e:	6a0a      	ldr	r2, [r1, #32]
 8002480:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002484:	4290      	cmp	r0, r2
 8002486:	d904      	bls.n	8002492 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002488:	6a0a      	ldr	r2, [r1, #32]
 800248a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800248e:	4302      	orrs	r2, r0
 8002490:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002492:	0799      	lsls	r1, r3, #30
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002494:	f003 0201 	and.w	r2, r3, #1
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	d530      	bpl.n	80024fc <HAL_RCC_ClockConfig+0xfc>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800249a:	4e7b      	ldr	r6, [pc, #492]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 800249c:	68a0      	ldr	r0, [r4, #8]
 800249e:	6a31      	ldr	r1, [r6, #32]
 80024a0:	f001 010f 	and.w	r1, r1, #15
 80024a4:	4288      	cmp	r0, r1
 80024a6:	d904      	bls.n	80024b2 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	6a31      	ldr	r1, [r6, #32]
 80024aa:	f021 010f 	bic.w	r1, r1, #15
 80024ae:	4301      	orrs	r1, r0
 80024b0:	6231      	str	r1, [r6, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	f000 8081 	beq.w	80025ba <HAL_RCC_ClockConfig+0x1ba>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b8:	6863      	ldr	r3, [r4, #4]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	f000 80b3 	beq.w	8002626 <HAL_RCC_ClockConfig+0x226>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c0:	4a71      	ldr	r2, [pc, #452]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	2b02      	cmp	r3, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c4:	6812      	ldr	r2, [r2, #0]
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c6:	f000 8084 	beq.w	80025d2 <HAL_RCC_ClockConfig+0x1d2>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 80be 	bne.w	800264c <HAL_RCC_ClockConfig+0x24c>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80024d0:	0757      	lsls	r7, r2, #29
 80024d2:	d5ad      	bpl.n	8002430 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80024d4:	4e6c      	ldr	r6, [pc, #432]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d6:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80024da:	69f2      	ldr	r2, [r6, #28]
 80024dc:	f022 0203 	bic.w	r2, r2, #3
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 80024e4:	f7fe f9d6 	bl	8000894 <HAL_GetTick>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e8:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80024ea:	4607      	mov	r7, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d05b      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x1a8>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d077      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 808a 	bne.w	800260e <HAL_RCC_ClockConfig+0x20e>
 80024fa:	e07e      	b.n	80025fa <HAL_RCC_ClockConfig+0x1fa>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	d1db      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xb8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002500:	4960      	ldr	r1, [pc, #384]	@ (8002684 <HAL_RCC_ClockConfig+0x284>)
 8002502:	680a      	ldr	r2, [r1, #0]
 8002504:	f002 020f 	and.w	r2, r2, #15
 8002508:	42aa      	cmp	r2, r5
 800250a:	d909      	bls.n	8002520 <HAL_RCC_ClockConfig+0x120>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250c:	680a      	ldr	r2, [r1, #0]
 800250e:	f022 020f 	bic.w	r2, r2, #15
 8002512:	432a      	orrs	r2, r5
 8002514:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	680a      	ldr	r2, [r1, #0]
 8002518:	f002 020f 	and.w	r2, r2, #15
 800251c:	42aa      	cmp	r2, r5
 800251e:	d187      	bne.n	8002430 <HAL_RCC_ClockConfig+0x30>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	0759      	lsls	r1, r3, #29
 8002522:	d50b      	bpl.n	800253c <HAL_RCC_ClockConfig+0x13c>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002524:	4958      	ldr	r1, [pc, #352]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002526:	68e0      	ldr	r0, [r4, #12]
 8002528:	6a0a      	ldr	r2, [r1, #32]
 800252a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800252e:	4290      	cmp	r0, r2
 8002530:	d204      	bcs.n	800253c <HAL_RCC_ClockConfig+0x13c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002532:	6a0a      	ldr	r2, [r1, #32]
 8002534:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002538:	4302      	orrs	r2, r0
 800253a:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	071a      	lsls	r2, r3, #28
 800253e:	d50d      	bpl.n	800255c <HAL_RCC_ClockConfig+0x15c>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002540:	4951      	ldr	r1, [pc, #324]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002542:	6920      	ldr	r0, [r4, #16]
 8002544:	6a0a      	ldr	r2, [r1, #32]
 8002546:	0912      	lsrs	r2, r2, #4
 8002548:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800254c:	4290      	cmp	r0, r2
 800254e:	d205      	bcs.n	800255c <HAL_RCC_ClockConfig+0x15c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002550:	6a0a      	ldr	r2, [r1, #32]
 8002552:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002556:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800255a:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800255c:	06db      	lsls	r3, r3, #27
 800255e:	d50b      	bpl.n	8002578 <HAL_RCC_ClockConfig+0x178>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002560:	4a49      	ldr	r2, [pc, #292]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002562:	6961      	ldr	r1, [r4, #20]
 8002564:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002566:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800256a:	4299      	cmp	r1, r3
 800256c:	d204      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800256e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002574:	430b      	orrs	r3, r1
 8002576:	6253      	str	r3, [r2, #36]	@ 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002578:	f7ff feb4 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 800257c:	4603      	mov	r3, r0
 800257e:	4a42      	ldr	r2, [pc, #264]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002580:	4942      	ldr	r1, [pc, #264]	@ (800268c <HAL_RCC_ClockConfig+0x28c>)
 8002582:	6a12      	ldr	r2, [r2, #32]
  status = HAL_InitTick(uwTickPrio);
 8002584:	4842      	ldr	r0, [pc, #264]	@ (8002690 <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002586:	f002 020f 	and.w	r2, r2, #15
 800258a:	5c89      	ldrb	r1, [r1, r2]
  status = HAL_InitTick(uwTickPrio);
 800258c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800258e:	4a41      	ldr	r2, [pc, #260]	@ (8002694 <HAL_RCC_ClockConfig+0x294>)
 8002590:	40cb      	lsrs	r3, r1
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	b002      	add	sp, #8
 8002596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800259a:	f7fe b8f3 	b.w	8000784 <HAL_InitTick>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259e:	f7fe f979 	bl	8000894 <HAL_GetTick>
 80025a2:	1bc3      	subs	r3, r0, r7
 80025a4:	4543      	cmp	r3, r8
 80025a6:	d838      	bhi.n	800261a <HAL_RCC_ClockConfig+0x21a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a8:	69f3      	ldr	r3, [r6, #28]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d1f5      	bne.n	800259e <HAL_RCC_ClockConfig+0x19e>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	0798      	lsls	r0, r3, #30
 80025b6:	d5a3      	bpl.n	8002500 <HAL_RCC_ClockConfig+0x100>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80025b8:	68a0      	ldr	r0, [r4, #8]
 80025ba:	4933      	ldr	r1, [pc, #204]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 80025bc:	6a0a      	ldr	r2, [r1, #32]
 80025be:	f002 020f 	and.w	r2, r2, #15
 80025c2:	4282      	cmp	r2, r0
 80025c4:	d99c      	bls.n	8002500 <HAL_RCC_ClockConfig+0x100>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80025c6:	6a0a      	ldr	r2, [r1, #32]
 80025c8:	f022 020f 	bic.w	r2, r2, #15
 80025cc:	4302      	orrs	r2, r0
 80025ce:	620a      	str	r2, [r1, #32]
 80025d0:	e796      	b.n	8002500 <HAL_RCC_ClockConfig+0x100>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d2:	0392      	lsls	r2, r2, #14
 80025d4:	f53f af7e 	bmi.w	80024d4 <HAL_RCC_ClockConfig+0xd4>
 80025d8:	e72a      	b.n	8002430 <HAL_RCC_ClockConfig+0x30>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025da:	f7fe f95b 	bl	8000894 <HAL_GetTick>
 80025de:	1bc0      	subs	r0, r0, r7
 80025e0:	4540      	cmp	r0, r8
 80025e2:	d81a      	bhi.n	800261a <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e4:	69f3      	ldr	r3, [r6, #28]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d1f5      	bne.n	80025da <HAL_RCC_ClockConfig+0x1da>
 80025ee:	e7e0      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fe f950 	bl	8000894 <HAL_GetTick>
 80025f4:	1bc0      	subs	r0, r0, r7
 80025f6:	4540      	cmp	r0, r8
 80025f8:	d80f      	bhi.n	800261a <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025fa:	69f3      	ldr	r3, [r6, #28]
 80025fc:	f013 0f0c 	tst.w	r3, #12
 8002600:	d1f6      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x1f0>
 8002602:	e7d6      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe f946 	bl	8000894 <HAL_GetTick>
 8002608:	1bc0      	subs	r0, r0, r7
 800260a:	4540      	cmp	r0, r8
 800260c:	d805      	bhi.n	800261a <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800260e:	69f3      	ldr	r3, [r6, #28]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b04      	cmp	r3, #4
 8002616:	d1f5      	bne.n	8002604 <HAL_RCC_ClockConfig+0x204>
 8002618:	e7cb      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1b2>
            return HAL_TIMEOUT;
 800261a:	2003      	movs	r0, #3
}
 800261c:	b002      	add	sp, #8
 800261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002622:	2001      	movs	r0, #1
}
 8002624:	4770      	bx	lr
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b18      	ldr	r3, [pc, #96]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002628:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800262c:	0752      	lsls	r2, r2, #29
 800262e:	d511      	bpl.n	8002654 <HAL_RCC_ClockConfig+0x254>
      tickstart = HAL_GetTick();
 8002630:	f7fe f930 	bl	8000894 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002634:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 8002636:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	035b      	lsls	r3, r3, #13
 800263c:	d441      	bmi.n	80026c2 <HAL_RCC_ClockConfig+0x2c2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800263e:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0199      	lsls	r1, r3, #6
 8002644:	f57f aef4 	bpl.w	8002430 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	e743      	b.n	80024d4 <HAL_RCC_ClockConfig+0xd4>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800264c:	0556      	lsls	r6, r2, #21
 800264e:	f57f aeef 	bpl.w	8002430 <HAL_RCC_ClockConfig+0x30>
 8002652:	e73f      	b.n	80024d4 <HAL_RCC_ClockConfig+0xd4>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002658:	f042 0204 	orr.w	r2, r2, #4
 800265c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	9b01      	ldr	r3, [sp, #4]
      tickstart = HAL_GetTick();
 800266c:	f7fe f912 	bl	8000894 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 8002672:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	035f      	lsls	r7, r3, #13
 8002678:	d51b      	bpl.n	80026b2 <HAL_RCC_ClockConfig+0x2b2>
        pwrclkchanged = SET;
 800267a:	f04f 0801 	mov.w	r8, #1
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800267e:	4f06      	ldr	r7, [pc, #24]	@ (8002698 <HAL_RCC_ClockConfig+0x298>)
 8002680:	e011      	b.n	80026a6 <HAL_RCC_ClockConfig+0x2a6>
 8002682:	bf00      	nop
 8002684:	40022000 	.word	0x40022000
 8002688:	46020c00 	.word	0x46020c00
 800268c:	080038d0 	.word	0x080038d0
 8002690:	20000008 	.word	0x20000008
 8002694:	20000000 	.word	0x20000000
 8002698:	46020800 	.word	0x46020800
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800269c:	f7fe f8fa 	bl	8000894 <HAL_GetTick>
 80026a0:	1b80      	subs	r0, r0, r6
 80026a2:	2802      	cmp	r0, #2
 80026a4:	d8b9      	bhi.n	800261a <HAL_RCC_ClockConfig+0x21a>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	0458      	lsls	r0, r3, #17
 80026aa:	d5f7      	bpl.n	800269c <HAL_RCC_ClockConfig+0x29c>
      if (pwrclkchanged == SET)
 80026ac:	f1b8 0f00 	cmp.w	r8, #0
 80026b0:	d0c5      	beq.n	800263e <HAL_RCC_ClockConfig+0x23e>
        __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4a05      	ldr	r2, [pc, #20]	@ (80026c8 <HAL_RCC_ClockConfig+0x2c8>)
 80026b4:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026c0:	e7bd      	b.n	800263e <HAL_RCC_ClockConfig+0x23e>
    FlagStatus  pwrclkchanged = RESET;
 80026c2:	f04f 0800 	mov.w	r8, #0
 80026c6:	e7da      	b.n	800267e <HAL_RCC_ClockConfig+0x27e>
 80026c8:	46020c00 	.word	0x46020c00

080026cc <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 80026cc:	2800      	cmp	r0, #0
 80026ce:	f000 82a4 	beq.w	8002c1a <HAL_RCC_OscConfig+0x54e>
{
 80026d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d6:	4aae      	ldr	r2, [pc, #696]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026d8:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026da:	69d5      	ldr	r5, [r2, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026dc:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026de:	06da      	lsls	r2, r3, #27
 80026e0:	4604      	mov	r4, r0
{
 80026e2:	b084      	sub	sp, #16
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e8:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ec:	d531      	bpl.n	8002752 <HAL_RCC_OscConfig+0x86>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026ee:	2d00      	cmp	r5, #0
 80026f0:	f000 81b2 	beq.w	8002a58 <HAL_RCC_OscConfig+0x38c>
 80026f4:	2d0c      	cmp	r5, #12
 80026f6:	f000 81ac 	beq.w	8002a52 <HAL_RCC_OscConfig+0x386>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026fa:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 80026fc:	4fa4      	ldr	r7, [pc, #656]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 822b 	beq.w	8002b5a <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_MSI_ENABLE();
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800270c:	f7fe f8c2 	bl	8000894 <HAL_GetTick>
 8002710:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002712:	e006      	b.n	8002722 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002714:	f7fe f8be 	bl	8000894 <HAL_GetTick>
 8002718:	eba0 0008 	sub.w	r0, r0, r8
 800271c:	2802      	cmp	r0, #2
 800271e:	f200 820e 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	075a      	lsls	r2, r3, #29
 8002726:	d5f5      	bpl.n	8002714 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002734:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002738:	4313      	orrs	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800273c:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8002740:	6a21      	ldr	r1, [r4, #32]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f0c0 8367 	bcc.w	8002e16 <HAL_RCC_OscConfig+0x74a>
 8002748:	f023 031f 	bic.w	r3, r3, #31
 800274c:	430b      	orrs	r3, r1
 800274e:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	07df      	lsls	r7, r3, #31
 8002754:	d531      	bpl.n	80027ba <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002756:	2d08      	cmp	r5, #8
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002758:	6862      	ldr	r2, [r4, #4]
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800275a:	f000 81bd 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x40c>
 800275e:	2d0c      	cmp	r5, #12
 8002760:	f000 81b7 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002764:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002768:	f000 825b 	beq.w	8002c22 <HAL_RCC_OscConfig+0x556>
 800276c:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8002770:	f000 833c 	beq.w	8002dec <HAL_RCC_OscConfig+0x720>
 8002774:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 8002778:	f000 82fb 	beq.w	8002d72 <HAL_RCC_OscConfig+0x6a6>
 800277c:	4f84      	ldr	r7, [pc, #528]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002794:	603b      	str	r3, [r7, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002796:	2a00      	cmp	r2, #0
 8002798:	f040 8248 	bne.w	8002c2c <HAL_RCC_OscConfig+0x560>
        tickstart = HAL_GetTick();
 800279c:	f7fe f87a 	bl	8000894 <HAL_GetTick>
 80027a0:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a2:	e006      	b.n	80027b2 <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7fe f876 	bl	8000894 <HAL_GetTick>
 80027a8:	eba0 0008 	sub.w	r0, r0, r8
 80027ac:	2864      	cmp	r0, #100	@ 0x64
 80027ae:	f200 81c6 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	0399      	lsls	r1, r3, #14
 80027b6:	d4f5      	bmi.n	80027a4 <HAL_RCC_OscConfig+0xd8>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	079a      	lsls	r2, r3, #30
 80027bc:	d50f      	bpl.n	80027de <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80027be:	2d04      	cmp	r5, #4
 80027c0:	f040 81c4 	bne.w	8002b4c <HAL_RCC_OscConfig+0x480>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027c4:	68e3      	ldr	r3, [r4, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 817f 	beq.w	8002aca <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4a70      	ldr	r2, [pc, #448]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 80027ce:	6921      	ldr	r1, [r4, #16]
 80027d0:	6913      	ldr	r3, [r2, #16]
 80027d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80027d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80027da:	6113      	str	r3, [r2, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	0718      	lsls	r0, r3, #28
 80027e0:	d54d      	bpl.n	800287e <HAL_RCC_OscConfig+0x1b2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 80027e4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80027e8:	0751      	lsls	r1, r2, #29
 80027ea:	f100 81b4 	bmi.w	8002b56 <HAL_RCC_OscConfig+0x48a>
      pwrclkchanged = SET;
 80027ee:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80027f4:	f042 0204 	orr.w	r2, r2, #4
 80027f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002808:	4e62      	ldr	r6, [pc, #392]	@ (8002994 <HAL_RCC_OscConfig+0x2c8>)
 800280a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800280c:	07da      	lsls	r2, r3, #31
 800280e:	f140 8186 	bpl.w	8002b1e <HAL_RCC_OscConfig+0x452>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002812:	6963      	ldr	r3, [r4, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 825d 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x608>
      uint32_t bdcr_temp = RCC->BDCR;
 800281a:	4e5d      	ldr	r6, [pc, #372]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800281c:	69a2      	ldr	r2, [r4, #24]
      uint32_t bdcr_temp = RCC->BDCR;
 800281e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002822:	f003 5180 	and.w	r1, r3, #268435456	@ 0x10000000
 8002826:	428a      	cmp	r2, r1
 8002828:	d010      	beq.n	800284c <HAL_RCC_OscConfig+0x180>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800282a:	f003 6140 	and.w	r1, r3, #201326592	@ 0xc000000
 800282e:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8002832:	f000 814a 	beq.w	8002aca <HAL_RCC_OscConfig+0x3fe>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002836:	0158      	lsls	r0, r3, #5
 8002838:	f100 82b1 	bmi.w	8002d9e <HAL_RCC_OscConfig+0x6d2>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800283c:	4954      	ldr	r1, [pc, #336]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 800283e:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      __HAL_RCC_LSI_ENABLE();
 800284c:	4e50      	ldr	r6, [pc, #320]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 800284e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002852:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002856:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800285a:	f7fe f81b 	bl	8000894 <HAL_GetTick>
 800285e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002860:	e005      	b.n	800286e <HAL_RCC_OscConfig+0x1a2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002862:	f7fe f817 	bl	8000894 <HAL_GetTick>
 8002866:	1bc0      	subs	r0, r0, r7
 8002868:	2805      	cmp	r0, #5
 800286a:	f200 8168 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800286e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002872:	011a      	lsls	r2, r3, #4
 8002874:	d5f5      	bpl.n	8002862 <HAL_RCC_OscConfig+0x196>
    if (pwrclkchanged == SET)
 8002876:	2d00      	cmp	r5, #0
 8002878:	f040 8289 	bne.w	8002d8e <HAL_RCC_OscConfig+0x6c2>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	075d      	lsls	r5, r3, #29
 8002880:	d55e      	bpl.n	8002940 <HAL_RCC_OscConfig+0x274>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002882:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 8002884:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002888:	0750      	lsls	r0, r2, #29
 800288a:	f100 81c8 	bmi.w	8002c1e <HAL_RCC_OscConfig+0x552>
      pwrclkchanged = SET;
 800288e:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002894:	f042 0204 	orr.w	r2, r2, #4
 8002898:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800289c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	9b02      	ldr	r3, [sp, #8]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028a8:	4e3a      	ldr	r6, [pc, #232]	@ (8002994 <HAL_RCC_OscConfig+0x2c8>)
 80028aa:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80028ac:	07d9      	lsls	r1, r3, #31
 80028ae:	f140 828c 	bpl.w	8002dca <HAL_RCC_OscConfig+0x6fe>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80028b2:	68a3      	ldr	r3, [r4, #8]
 80028b4:	07da      	lsls	r2, r3, #31
 80028b6:	f140 81d3 	bpl.w	8002c60 <HAL_RCC_OscConfig+0x594>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80028ba:	075e      	lsls	r6, r3, #29
 80028bc:	f140 8251 	bpl.w	8002d62 <HAL_RCC_OscConfig+0x696>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028c0:	4b33      	ldr	r3, [pc, #204]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 80028c2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80028c6:	f042 0204 	orr.w	r2, r2, #4
 80028ca:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028ce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80028da:	f7fd ffdb 	bl	8000894 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80028e2:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e4:	4f2a      	ldr	r7, [pc, #168]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 80028e6:	e005      	b.n	80028f4 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fd ffd4 	bl	8000894 <HAL_GetTick>
 80028ec:	1b80      	subs	r0, r0, r6
 80028ee:	4540      	cmp	r0, r8
 80028f0:	f200 8125 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80028f8:	0798      	lsls	r0, r3, #30
 80028fa:	d5f5      	bpl.n	80028e8 <HAL_RCC_OscConfig+0x21c>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80028fc:	68a3      	ldr	r3, [r4, #8]
 80028fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002902:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002906:	f000 82c7 	beq.w	8002e98 <HAL_RCC_OscConfig+0x7cc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800290a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800290e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002916:	4f1e      	ldr	r7, [pc, #120]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 8002918:	e005      	b.n	8002926 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fd ffbb 	bl	8000894 <HAL_GetTick>
 800291e:	1b80      	subs	r0, r0, r6
 8002920:	4540      	cmp	r0, r8
 8002922:	f200 810c 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002926:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800292a:	0519      	lsls	r1, r3, #20
 800292c:	d5f5      	bpl.n	800291a <HAL_RCC_OscConfig+0x24e>
    if (pwrclkchanged == SET)
 800292e:	b135      	cbz	r5, 800293e <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002930:	4a17      	ldr	r2, [pc, #92]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
 8002932:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	069a      	lsls	r2, r3, #26
 8002942:	d516      	bpl.n	8002972 <HAL_RCC_OscConfig+0x2a6>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002944:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      __HAL_RCC_HSI48_ENABLE();
 8002946:	4d12      	ldr	r5, [pc, #72]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 81dc 	beq.w	8002d06 <HAL_RCC_OscConfig+0x63a>
      __HAL_RCC_HSI48_ENABLE();
 800294e:	682b      	ldr	r3, [r5, #0]
 8002950:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002954:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002956:	f7fd ff9d 	bl	8000894 <HAL_GetTick>
 800295a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800295c:	e005      	b.n	800296a <HAL_RCC_OscConfig+0x29e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295e:	f7fd ff99 	bl	8000894 <HAL_GetTick>
 8002962:	1b80      	subs	r0, r0, r6
 8002964:	2802      	cmp	r0, #2
 8002966:	f200 80ea 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800296a:	682b      	ldr	r3, [r5, #0]
 800296c:	049b      	lsls	r3, r3, #18
 800296e:	d5f6      	bpl.n	800295e <HAL_RCC_OscConfig+0x292>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	061d      	lsls	r5, r3, #24
 8002974:	d51a      	bpl.n	80029ac <HAL_RCC_OscConfig+0x2e0>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002976:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      __HAL_RCC_SHSI_ENABLE();
 8002978:	4d05      	ldr	r5, [pc, #20]	@ (8002990 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 81df 	beq.w	8002d3e <HAL_RCC_OscConfig+0x672>
      __HAL_RCC_SHSI_ENABLE();
 8002980:	682b      	ldr	r3, [r5, #0]
 8002982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002986:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002988:	f7fd ff84 	bl	8000894 <HAL_GetTick>
 800298c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800298e:	e009      	b.n	80029a4 <HAL_RCC_OscConfig+0x2d8>
 8002990:	46020c00 	.word	0x46020c00
 8002994:	46020800 	.word	0x46020800
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002998:	f7fd ff7c 	bl	8000894 <HAL_GetTick>
 800299c:	1b80      	subs	r0, r0, r6
 800299e:	2802      	cmp	r0, #2
 80029a0:	f200 80cd 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80029a4:	682b      	ldr	r3, [r5, #0]
 80029a6:	0418      	lsls	r0, r3, #16
 80029a8:	d5f6      	bpl.n	8002998 <HAL_RCC_OscConfig+0x2cc>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	065a      	lsls	r2, r3, #25
 80029ae:	d52b      	bpl.n	8002a08 <HAL_RCC_OscConfig+0x33c>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80029b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8257 	beq.w	8002e66 <HAL_RCC_OscConfig+0x79a>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80029b8:	4ba5      	ldr	r3, [pc, #660]	@ (8002c50 <HAL_RCC_OscConfig+0x584>)
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80029c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80029ce:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 80029d2:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 80029d6:	f0c0 8235 	bcc.w	8002e44 <HAL_RCC_OscConfig+0x778>
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	f022 021f 	bic.w	r2, r2, #31
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_MSIK_ENABLE();
 80029e4:	4d9a      	ldr	r5, [pc, #616]	@ (8002c50 <HAL_RCC_OscConfig+0x584>)
 80029e6:	682b      	ldr	r3, [r5, #0]
 80029e8:	f043 0310 	orr.w	r3, r3, #16
 80029ec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80029ee:	f7fd ff51 	bl	8000894 <HAL_GetTick>
 80029f2:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80029f4:	e005      	b.n	8002a02 <HAL_RCC_OscConfig+0x336>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80029f6:	f7fd ff4d 	bl	8000894 <HAL_GetTick>
 80029fa:	1b80      	subs	r0, r0, r6
 80029fc:	2802      	cmp	r0, #2
 80029fe:	f200 809e 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002a02:	682b      	ldr	r3, [r5, #0]
 8002a04:	069b      	lsls	r3, r3, #26
 8002a06:	d5f6      	bpl.n	80029f6 <HAL_RCC_OscConfig+0x32a>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a0a:	b303      	cbz	r3, 8002a4e <HAL_RCC_OscConfig+0x382>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0c:	4d90      	ldr	r5, [pc, #576]	@ (8002c50 <HAL_RCC_OscConfig+0x584>)
 8002a0e:	69ea      	ldr	r2, [r5, #28]
 8002a10:	f002 020c 	and.w	r2, r2, #12
 8002a14:	2a0c      	cmp	r2, #12
 8002a16:	f000 8255 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x7f8>
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1a:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a22:	602b      	str	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a24:	f000 82a6 	beq.w	8002f74 <HAL_RCC_OscConfig+0x8a8>
        tickstart = HAL_GetTick();
 8002a28:	f7fd ff34 	bl	8000894 <HAL_GetTick>
 8002a2c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a2e:	e005      	b.n	8002a3c <HAL_RCC_OscConfig+0x370>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fd ff30 	bl	8000894 <HAL_GetTick>
 8002a34:	1b00      	subs	r0, r0, r4
 8002a36:	2802      	cmp	r0, #2
 8002a38:	f200 8081 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	0199      	lsls	r1, r3, #6
 8002a40:	d4f6      	bmi.n	8002a30 <HAL_RCC_OscConfig+0x364>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002a42:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002a44:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002a48:	f023 0303 	bic.w	r3, r3, #3
 8002a4c:	62ab      	str	r3, [r5, #40]	@ 0x28
  return HAL_OK;
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e03c      	b.n	8002acc <HAL_RCC_OscConfig+0x400>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a52:	2e01      	cmp	r6, #1
 8002a54:	f47f ae51 	bne.w	80026fa <HAL_RCC_OscConfig+0x2e>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a58:	69e3      	ldr	r3, [r4, #28]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d035      	beq.n	8002aca <HAL_RCC_OscConfig+0x3fe>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c50 <HAL_RCC_OscConfig+0x584>)
 8002a60:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	0217      	lsls	r7, r2, #8
 8002a66:	bf56      	itet	pl
 8002a68:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
 8002a6c:	689b      	ldrmi	r3, [r3, #8]
 8002a6e:	041b      	lslpl	r3, r3, #16
 8002a70:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002a74:	4298      	cmp	r0, r3
 8002a76:	f240 8083 	bls.w	8002b80 <HAL_RCC_OscConfig+0x4b4>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	f000 81c4 	beq.w	8002e08 <HAL_RCC_OscConfig+0x73c>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002a80:	4b73      	ldr	r3, [pc, #460]	@ (8002c50 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a82:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002a94:	ea42 0200 	orr.w	r2, r2, r0
 8002a98:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a9a:	6a21      	ldr	r1, [r4, #32]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	f080 8149 	bcs.w	8002d34 <HAL_RCC_OscConfig+0x668>
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	f2c0 81f2 	blt.w	8002e8c <HAL_RCC_OscConfig+0x7c0>
 8002aa8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002aac:	bf2b      	itete	cs
 8002aae:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8002ab2:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8002ab6:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8002aba:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	e081      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4fa>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ac2:	f7ff fbb1 	bl	8002228 <RCC_SetFlashLatencyFromMSIRange>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d07d      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x4fa>
    return HAL_ERROR;
 8002aca:	2001      	movs	r0, #1
}
 8002acc:	b004      	add	sp, #16
 8002ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ad2:	2e03      	cmp	r6, #3
 8002ad4:	f47f ae46 	bne.w	8002764 <HAL_RCC_OscConfig+0x98>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d0f6      	beq.n	8002aca <HAL_RCC_OscConfig+0x3fe>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002adc:	079d      	lsls	r5, r3, #30
 8002ade:	f57f ae7e 	bpl.w	80027de <HAL_RCC_OscConfig+0x112>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae2:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4d5a      	ldr	r5, [pc, #360]	@ (8002c50 <HAL_RCC_OscConfig+0x584>)
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8085 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x52a>
        __HAL_RCC_HSI_ENABLE();
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002af4:	f7fd fece 	bl	8000894 <HAL_GetTick>
 8002af8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afa:	e004      	b.n	8002b06 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afc:	f7fd feca 	bl	8000894 <HAL_GetTick>
 8002b00:	1b80      	subs	r0, r0, r6
 8002b02:	2802      	cmp	r0, #2
 8002b04:	d81b      	bhi.n	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b06:	682b      	ldr	r3, [r5, #0]
 8002b08:	055b      	lsls	r3, r3, #21
 8002b0a:	d5f7      	bpl.n	8002afc <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	692b      	ldr	r3, [r5, #16]
 8002b0e:	6922      	ldr	r2, [r4, #16]
 8002b10:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b18:	612b      	str	r3, [r5, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	e65f      	b.n	80027de <HAL_RCC_OscConfig+0x112>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b1e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 8002b26:	f7fd feb5 	bl	8000894 <HAL_GetTick>
 8002b2a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b2c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002b2e:	07db      	lsls	r3, r3, #31
 8002b30:	f53f ae6f 	bmi.w	8002812 <HAL_RCC_OscConfig+0x146>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b34:	f7fd feae 	bl	8000894 <HAL_GetTick>
 8002b38:	1bc0      	subs	r0, r0, r7
 8002b3a:	2802      	cmp	r0, #2
 8002b3c:	d9f6      	bls.n	8002b2c <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8002b3e:	2003      	movs	r0, #3
}
 8002b40:	b004      	add	sp, #16
 8002b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b46:	079a      	lsls	r2, r3, #30
 8002b48:	f57f ae49 	bpl.w	80027de <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b4c:	2d0c      	cmp	r5, #12
 8002b4e:	d1c8      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x416>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b50:	2e02      	cmp	r6, #2
 8002b52:	d1c6      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x416>
 8002b54:	e636      	b.n	80027c4 <HAL_RCC_OscConfig+0xf8>
    FlagStatus  pwrclkchanged = RESET;
 8002b56:	2500      	movs	r5, #0
 8002b58:	e656      	b.n	8002808 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_DISABLE();
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002b62:	f7fd fe97 	bl	8000894 <HAL_GetTick>
 8002b66:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002b68:	e005      	b.n	8002b76 <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b6a:	f7fd fe93 	bl	8000894 <HAL_GetTick>
 8002b6e:	eba0 0008 	sub.w	r0, r0, r8
 8002b72:	2802      	cmp	r0, #2
 8002b74:	d8e3      	bhi.n	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	075b      	lsls	r3, r3, #29
 8002b7a:	d4f6      	bmi.n	8002b6a <HAL_RCC_OscConfig+0x49e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	e5e8      	b.n	8002752 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002b80:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002b82:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002b94:	ea42 0200 	orr.w	r2, r2, r0
 8002b98:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002b9a:	6a21      	ldr	r1, [r4, #32]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	f080 80c4 	bcs.w	8002d2a <HAL_RCC_OscConfig+0x65e>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	f2c0 8148 	blt.w	8002e38 <HAL_RCC_OscConfig+0x76c>
 8002ba8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002bac:	bf2b      	itete	cs
 8002bae:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8002bb2:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8002bb6:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8002bba:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8002bbe:	60da      	str	r2, [r3, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bc0:	2d00      	cmp	r5, #0
 8002bc2:	f43f af7e 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x3f6>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bc6:	f7ff fb8d 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4a20      	ldr	r2, [pc, #128]	@ (8002c50 <HAL_RCC_OscConfig+0x584>)
 8002bce:	4921      	ldr	r1, [pc, #132]	@ (8002c54 <HAL_RCC_OscConfig+0x588>)
 8002bd0:	6a12      	ldr	r2, [r2, #32]
 8002bd2:	f002 020f 	and.w	r2, r2, #15
 8002bd6:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 8002bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c58 <HAL_RCC_OscConfig+0x58c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bda:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 8002bdc:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bde:	4a1f      	ldr	r2, [pc, #124]	@ (8002c5c <HAL_RCC_OscConfig+0x590>)
 8002be0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002be2:	f7fd fdcf 	bl	8000784 <HAL_InitTick>
        if (status != HAL_OK)
 8002be6:	2800      	cmp	r0, #0
 8002be8:	f47f af70 	bne.w	8002acc <HAL_RCC_OscConfig+0x400>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	07d9      	lsls	r1, r3, #31
 8002bf0:	d5a9      	bpl.n	8002b46 <HAL_RCC_OscConfig+0x47a>
 8002bf2:	6862      	ldr	r2, [r4, #4]
 8002bf4:	e5b3      	b.n	800275e <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_DISABLE();
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002bfe:	f7fd fe49 	bl	8000894 <HAL_GetTick>
 8002c02:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c04:	e004      	b.n	8002c10 <HAL_RCC_OscConfig+0x544>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c06:	f7fd fe45 	bl	8000894 <HAL_GetTick>
 8002c0a:	1b80      	subs	r0, r0, r6
 8002c0c:	2802      	cmp	r0, #2
 8002c0e:	d896      	bhi.n	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	055f      	lsls	r7, r3, #21
 8002c14:	d4f7      	bmi.n	8002c06 <HAL_RCC_OscConfig+0x53a>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	e5e1      	b.n	80027de <HAL_RCC_OscConfig+0x112>
    return HAL_ERROR;
 8002c1a:	2001      	movs	r0, #1
}
 8002c1c:	4770      	bx	lr
    FlagStatus pwrclkchanged = RESET;
 8002c1e:	2500      	movs	r5, #0
 8002c20:	e642      	b.n	80028a8 <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002c22:	4a0b      	ldr	r2, [pc, #44]	@ (8002c50 <HAL_RCC_OscConfig+0x584>)
 8002c24:	6813      	ldr	r3, [r2, #0]
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c2c:	f7fd fe32 	bl	8000894 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c30:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8002c50 <HAL_RCC_OscConfig+0x584>
        tickstart = HAL_GetTick();
 8002c34:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c36:	e005      	b.n	8002c44 <HAL_RCC_OscConfig+0x578>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fd fe2c 	bl	8000894 <HAL_GetTick>
 8002c3c:	1bc0      	subs	r0, r0, r7
 8002c3e:	2864      	cmp	r0, #100	@ 0x64
 8002c40:	f63f af7d 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c44:	f8d8 3000 	ldr.w	r3, [r8]
 8002c48:	0398      	lsls	r0, r3, #14
 8002c4a:	d5f5      	bpl.n	8002c38 <HAL_RCC_OscConfig+0x56c>
 8002c4c:	e5b4      	b.n	80027b8 <HAL_RCC_OscConfig+0xec>
 8002c4e:	bf00      	nop
 8002c50:	46020c00 	.word	0x46020c00
 8002c54:	080038d0 	.word	0x080038d0
 8002c58:	20000008 	.word	0x20000008
 8002c5c:	20000000 	.word	0x20000000
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c60:	4e97      	ldr	r6, [pc, #604]	@ (8002ec0 <HAL_RCC_OscConfig+0x7f4>)
 8002c62:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c6e:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f47f ae2d 	bne.w	80028da <HAL_RCC_OscConfig+0x20e>
      tickstart = HAL_GetTick();
 8002c80:	f7fd fe08 	bl	8000894 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002c88:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c8a:	e005      	b.n	8002c98 <HAL_RCC_OscConfig+0x5cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fd fe02 	bl	8000894 <HAL_GetTick>
 8002c90:	1bc0      	subs	r0, r0, r7
 8002c92:	4540      	cmp	r0, r8
 8002c94:	f63f af53 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c98:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002c9c:	079b      	lsls	r3, r3, #30
 8002c9e:	d4f5      	bmi.n	8002c8c <HAL_RCC_OscConfig+0x5c0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002ca0:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002ca4:	0618      	lsls	r0, r3, #24
 8002ca6:	f57f ae42 	bpl.w	800292e <HAL_RCC_OscConfig+0x262>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002caa:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f241 3888 	movw	r8, #5000	@ 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cb6:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cba:	4e81      	ldr	r6, [pc, #516]	@ (8002ec0 <HAL_RCC_OscConfig+0x7f4>)
 8002cbc:	e005      	b.n	8002cca <HAL_RCC_OscConfig+0x5fe>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fd fde9 	bl	8000894 <HAL_GetTick>
 8002cc2:	1bc0      	subs	r0, r0, r7
 8002cc4:	4540      	cmp	r0, r8
 8002cc6:	f63f af3a 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cca:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002cce:	0519      	lsls	r1, r3, #20
 8002cd0:	d4f5      	bmi.n	8002cbe <HAL_RCC_OscConfig+0x5f2>
 8002cd2:	e62c      	b.n	800292e <HAL_RCC_OscConfig+0x262>
      __HAL_RCC_LSI_DISABLE();
 8002cd4:	4e7a      	ldr	r6, [pc, #488]	@ (8002ec0 <HAL_RCC_OscConfig+0x7f4>)
 8002cd6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002cda:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002cde:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8002ce2:	f7fd fdd7 	bl	8000894 <HAL_GetTick>
 8002ce6:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCC_OscConfig+0x62a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cea:	f7fd fdd3 	bl	8000894 <HAL_GetTick>
 8002cee:	1bc0      	subs	r0, r0, r7
 8002cf0:	2805      	cmp	r0, #5
 8002cf2:	f63f af24 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002cf6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	d4f5      	bmi.n	8002cea <HAL_RCC_OscConfig+0x61e>
    if (pwrclkchanged == SET)
 8002cfe:	2d00      	cmp	r5, #0
 8002d00:	f43f adbc 	beq.w	800287c <HAL_RCC_OscConfig+0x1b0>
 8002d04:	e043      	b.n	8002d8e <HAL_RCC_OscConfig+0x6c2>
      __HAL_RCC_HSI48_DISABLE();
 8002d06:	682b      	ldr	r3, [r5, #0]
 8002d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d0c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002d0e:	f7fd fdc1 	bl	8000894 <HAL_GetTick>
 8002d12:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d14:	e005      	b.n	8002d22 <HAL_RCC_OscConfig+0x656>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d16:	f7fd fdbd 	bl	8000894 <HAL_GetTick>
 8002d1a:	1b80      	subs	r0, r0, r6
 8002d1c:	2802      	cmp	r0, #2
 8002d1e:	f63f af0e 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d22:	682b      	ldr	r3, [r5, #0]
 8002d24:	049f      	lsls	r7, r3, #18
 8002d26:	d4f6      	bmi.n	8002d16 <HAL_RCC_OscConfig+0x64a>
 8002d28:	e622      	b.n	8002970 <HAL_RCC_OscConfig+0x2a4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002d2a:	f022 021f 	bic.w	r2, r2, #31
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	e745      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002d34:	f022 021f 	bic.w	r2, r2, #31
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	60da      	str	r2, [r3, #12]
 8002d3c:	e743      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4fa>
      __HAL_RCC_SHSI_DISABLE();
 8002d3e:	682b      	ldr	r3, [r5, #0]
 8002d40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d44:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002d46:	f7fd fda5 	bl	8000894 <HAL_GetTick>
 8002d4a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002d4c:	e005      	b.n	8002d5a <HAL_RCC_OscConfig+0x68e>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002d4e:	f7fd fda1 	bl	8000894 <HAL_GetTick>
 8002d52:	1b80      	subs	r0, r0, r6
 8002d54:	2802      	cmp	r0, #2
 8002d56:	f63f aef2 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002d5a:	682b      	ldr	r3, [r5, #0]
 8002d5c:	0419      	lsls	r1, r3, #16
 8002d5e:	d4f6      	bmi.n	8002d4e <HAL_RCC_OscConfig+0x682>
 8002d60:	e623      	b.n	80029aa <HAL_RCC_OscConfig+0x2de>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d62:	4a57      	ldr	r2, [pc, #348]	@ (8002ec0 <HAL_RCC_OscConfig+0x7f4>)
 8002d64:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d70:	e5b3      	b.n	80028da <HAL_RCC_OscConfig+0x20e>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002d72:	4b53      	ldr	r3, [pc, #332]	@ (8002ec0 <HAL_RCC_OscConfig+0x7f4>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d8a:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d8c:	e74e      	b.n	8002c2c <HAL_RCC_OscConfig+0x560>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec0 <HAL_RCC_OscConfig+0x7f4>)
 8002d90:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d9c:	e56e      	b.n	800287c <HAL_RCC_OscConfig+0x1b0>
          __HAL_RCC_LSI_DISABLE();
 8002d9e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002da2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002da6:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
          tickstart = HAL_GetTick();
 8002daa:	f7fd fd73 	bl	8000894 <HAL_GetTick>
 8002dae:	4607      	mov	r7, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002db0:	e005      	b.n	8002dbe <HAL_RCC_OscConfig+0x6f2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fd fd6f 	bl	8000894 <HAL_GetTick>
 8002db6:	1bc0      	subs	r0, r0, r7
 8002db8:	2805      	cmp	r0, #5
 8002dba:	f63f aec0 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002dbe:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002dc2:	0119      	lsls	r1, r3, #4
 8002dc4:	d4f5      	bmi.n	8002db2 <HAL_RCC_OscConfig+0x6e6>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002dc6:	69a2      	ldr	r2, [r4, #24]
 8002dc8:	e538      	b.n	800283c <HAL_RCC_OscConfig+0x170>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002dca:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 8002dd2:	f7fd fd5f 	bl	8000894 <HAL_GetTick>
 8002dd6:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002dd8:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002dda:	07db      	lsls	r3, r3, #31
 8002ddc:	f53f ad69 	bmi.w	80028b2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de0:	f7fd fd58 	bl	8000894 <HAL_GetTick>
 8002de4:	1bc0      	subs	r0, r0, r7
 8002de6:	2802      	cmp	r0, #2
 8002de8:	d9f6      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x70c>
 8002dea:	e6a8      	b.n	8002b3e <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002dec:	4b34      	ldr	r3, [pc, #208]	@ (8002ec0 <HAL_RCC_OscConfig+0x7f4>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e04:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e06:	e711      	b.n	8002c2c <HAL_RCC_OscConfig+0x560>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e08:	f7ff fa0e 	bl	8002228 <RCC_SetFlashLatencyFromMSIRange>
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	f47f ae5c 	bne.w	8002aca <HAL_RCC_OscConfig+0x3fe>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002e12:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002e14:	e634      	b.n	8002a80 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e16:	2a00      	cmp	r2, #0
 8002e18:	f2c0 80a4 	blt.w	8002f64 <HAL_RCC_OscConfig+0x898>
 8002e1c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002e20:	bf2b      	itete	cs
 8002e22:	f423 43f8 	biccs.w	r3, r3, #31744	@ 0x7c00
 8002e26:	f423 2378 	biccc.w	r3, r3, #1015808	@ 0xf8000
 8002e2a:	ea43 2381 	orrcs.w	r3, r3, r1, lsl #10
 8002e2e:	ea43 33c1 	orrcc.w	r3, r3, r1, lsl #15
 8002e32:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	e48c      	b.n	8002752 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e38:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8002e3c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	e6bd      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4f4>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	f2c0 811e 	blt.w	8003086 <HAL_RCC_OscConfig+0x9ba>
 8002e4a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	bf2b      	itete	cs
 8002e52:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8002e56:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8002e5a:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8002e5e:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	e5be      	b.n	80029e4 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_MSIK_DISABLE();
 8002e66:	4d16      	ldr	r5, [pc, #88]	@ (8002ec0 <HAL_RCC_OscConfig+0x7f4>)
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	f023 0310 	bic.w	r3, r3, #16
 8002e6e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002e70:	f7fd fd10 	bl	8000894 <HAL_GetTick>
 8002e74:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002e76:	e005      	b.n	8002e84 <HAL_RCC_OscConfig+0x7b8>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002e78:	f7fd fd0c 	bl	8000894 <HAL_GetTick>
 8002e7c:	1b80      	subs	r0, r0, r6
 8002e7e:	2802      	cmp	r0, #2
 8002e80:	f63f ae5d 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	069f      	lsls	r7, r3, #26
 8002e88:	d4f6      	bmi.n	8002e78 <HAL_RCC_OscConfig+0x7ac>
 8002e8a:	e5bd      	b.n	8002a08 <HAL_RCC_OscConfig+0x33c>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e8c:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8002e90:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e696      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4fa>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ea4:	4f06      	ldr	r7, [pc, #24]	@ (8002ec0 <HAL_RCC_OscConfig+0x7f4>)
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCC_OscConfig+0x7e8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f7fd fcf4 	bl	8000894 <HAL_GetTick>
 8002eac:	1b80      	subs	r0, r0, r6
 8002eae:	4540      	cmp	r0, r8
 8002eb0:	f63f ae45 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002eb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002eb8:	051a      	lsls	r2, r3, #20
 8002eba:	d4f5      	bmi.n	8002ea8 <HAL_RCC_OscConfig+0x7dc>
 8002ebc:	e537      	b.n	800292e <HAL_RCC_OscConfig+0x262>
 8002ebe:	bf00      	nop
 8002ec0:	46020c00 	.word	0x46020c00
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec4:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002ec6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ec8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eca:	f43f adfe 	beq.w	8002aca <HAL_RCC_OscConfig+0x3fe>
 8002ece:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	f002 0103 	and.w	r1, r2, #3
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed4:	4299      	cmp	r1, r3
 8002ed6:	f47f adf8 	bne.w	8002aca <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002eda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002edc:	f3c2 2103 	ubfx	r1, r2, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002ee0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	4299      	cmp	r1, r3
 8002ee4:	f47f adf1 	bne.w	8002aca <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002ee8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002eea:	f402 4270 	and.w	r2, r2, #61440	@ 0xf000
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	f47f adeb 	bne.w	8002aca <HAL_RCC_OscConfig+0x3fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ef4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002ef6:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002efa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	f47f ade4 	bne.w	8002aca <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f02:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002f04:	f3c0 2246 	ubfx	r2, r0, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f08:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	f47f addd 	bne.w	8002aca <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f10:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002f12:	f3c0 4206 	ubfx	r2, r0, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f16:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	f47f add6 	bne.w	8002aca <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f1e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002f20:	f3c0 6006 	ubfx	r0, r0, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f24:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f26:	4298      	cmp	r0, r3
 8002f28:	f47f adcf 	bne.w	8002aca <HAL_RCC_OscConfig+0x3fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f2c:	4b59      	ldr	r3, [pc, #356]	@ (8003094 <HAL_RCC_OscConfig+0x9c8>)
 8002f2e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f32:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002f36:	428a      	cmp	r2, r1
 8002f38:	f43f ad89 	beq.w	8002a4e <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f3e:	f022 0210 	bic.w	r2, r2, #16
 8002f42:	629a      	str	r2, [r3, #40]	@ 0x28
        tickstart = HAL_GetTick();
 8002f44:	f7fd fca6 	bl	8000894 <HAL_GetTick>
 8002f48:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002f4a:	f7fd fca3 	bl	8000894 <HAL_GetTick>
 8002f4e:	42a8      	cmp	r0, r5
 8002f50:	d0fb      	beq.n	8002f4a <HAL_RCC_OscConfig+0x87e>
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002f52:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002f54:	4b4f      	ldr	r3, [pc, #316]	@ (8003094 <HAL_RCC_OscConfig+0x9c8>)
 8002f56:	00d2      	lsls	r2, r2, #3
 8002f58:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002f5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f5c:	f042 0210 	orr.w	r2, r2, #16
 8002f60:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f62:	e574      	b.n	8002a4e <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002f64:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8002f68:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8002f6c:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	f7ff bbef 	b.w	8002752 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002f74:	f7fd fc8e 	bl	8000894 <HAL_GetTick>
 8002f78:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f7a:	e005      	b.n	8002f88 <HAL_RCC_OscConfig+0x8bc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fd fc8a 	bl	8000894 <HAL_GetTick>
 8002f80:	1b80      	subs	r0, r0, r6
 8002f82:	2802      	cmp	r0, #2
 8002f84:	f63f addb 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8002f8e:	d1f5      	bne.n	8002f7c <HAL_RCC_OscConfig+0x8b0>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f90:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8002f94:	0756      	lsls	r6, r2, #29
 8002f96:	d40c      	bmi.n	8002fb2 <HAL_RCC_OscConfig+0x8e6>
          pwrclkchanged = SET;
 8002f98:	2301      	movs	r3, #1
          __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8002f9e:	f042 0204 	orr.w	r2, r2, #4
 8002fa2:	f8c5 2094 	str.w	r2, [r5, #148]	@ 0x94
 8002fa6:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8002faa:	f002 0204 	and.w	r2, r2, #4
 8002fae:	9203      	str	r2, [sp, #12]
 8002fb0:	9a03      	ldr	r2, [sp, #12]
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002fb2:	4d39      	ldr	r5, [pc, #228]	@ (8003098 <HAL_RCC_OscConfig+0x9cc>)
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002fb4:	4937      	ldr	r1, [pc, #220]	@ (8003094 <HAL_RCC_OscConfig+0x9c8>)
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002fb6:	68ee      	ldr	r6, [r5, #12]
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002fb8:	68ea      	ldr	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002fba:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 800309c <HAL_RCC_OscConfig+0x9d0>
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002fbe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fc2:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002fc4:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8002fc6:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8002fc8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002fca:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 8002fce:	f020 0003 	bic.w	r0, r0, #3
 8002fd2:	433a      	orrs	r2, r7
 8002fd4:	4302      	orrs	r2, r0
 8002fd6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002fd8:	3801      	subs	r0, #1
 8002fda:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002fde:	628a      	str	r2, [r1, #40]	@ 0x28
 8002fe0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002fe2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002fe4:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 8002fe8:	1e47      	subs	r7, r0, #1
 8002fea:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002fec:	3a01      	subs	r2, #1
 8002fee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff2:	027f      	lsls	r7, r7, #9
 8002ff4:	3801      	subs	r0, #1
 8002ff6:	ea0e 0c0c 	and.w	ip, lr, ip
 8002ffa:	b2bf      	uxth	r7, r7
 8002ffc:	0400      	lsls	r0, r0, #16
 8002ffe:	ea42 020c 	orr.w	r2, r2, ip
 8003002:	f400 00fe 	and.w	r0, r0, #8323072	@ 0x7f0000
 8003006:	433a      	orrs	r2, r7
 8003008:	4302      	orrs	r2, r0
 800300a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800300c:	3801      	subs	r0, #1
 800300e:	0600      	lsls	r0, r0, #24
 8003010:	f000 40fe 	and.w	r0, r0, #2130706432	@ 0x7f000000
 8003014:	4302      	orrs	r2, r0
 8003016:	634a      	str	r2, [r1, #52]	@ 0x34
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003018:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800301a:	f022 0210 	bic.w	r2, r2, #16
 800301e:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003020:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003022:	00d2      	lsls	r2, r2, #3
 8003024:	638a      	str	r2, [r1, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003026:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003028:	f042 0210 	orr.w	r2, r2, #16
 800302c:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800302e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003032:	f022 020c 	bic.w	r2, r2, #12
 8003036:	4302      	orrs	r2, r0
        if (pwrboosten == SET)
 8003038:	0374      	lsls	r4, r6, #13
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800303a:	628a      	str	r2, [r1, #40]	@ 0x28
        if (pwrboosten == SET)
 800303c:	d41e      	bmi.n	800307c <HAL_RCC_OscConfig+0x9b0>
        if (pwrclkchanged == SET)
 800303e:	b133      	cbz	r3, 800304e <HAL_RCC_OscConfig+0x982>
          __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4a14      	ldr	r2, [pc, #80]	@ (8003094 <HAL_RCC_OscConfig+0x9c8>)
 8003042:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8003046:	f023 0304 	bic.w	r3, r3, #4
 800304a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        __HAL_RCC_PLL_ENABLE();
 800304e:	4c11      	ldr	r4, [pc, #68]	@ (8003094 <HAL_RCC_OscConfig+0x9c8>)
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003056:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003058:	f7fd fc1c 	bl	8000894 <HAL_GetTick>
 800305c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800305e:	e005      	b.n	800306c <HAL_RCC_OscConfig+0x9a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003060:	f7fd fc18 	bl	8000894 <HAL_GetTick>
 8003064:	1b40      	subs	r0, r0, r5
 8003066:	2802      	cmp	r0, #2
 8003068:	f63f ad69 	bhi.w	8002b3e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	0198      	lsls	r0, r3, #6
 8003070:	d5f6      	bpl.n	8003060 <HAL_RCC_OscConfig+0x994>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003072:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003078:	62a3      	str	r3, [r4, #40]	@ 0x28
 800307a:	e4e8      	b.n	8002a4e <HAL_RCC_OscConfig+0x382>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800307c:	68ea      	ldr	r2, [r5, #12]
 800307e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003082:	60ea      	str	r2, [r5, #12]
 8003084:	e7db      	b.n	800303e <HAL_RCC_OscConfig+0x972>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 800308c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	e4a7      	b.n	80029e4 <HAL_RCC_OscConfig+0x318>
 8003094:	46020c00 	.word	0x46020c00
 8003098:	46020800 	.word	0x46020800
 800309c:	80800000 	.word	0x80800000

080030a0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80030a0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80030a2:	4c33      	ldr	r4, [pc, #204]	@ (8003170 <RCCEx_PLL3_Config+0xd0>)
{
 80030a4:	4606      	mov	r6, r0
  __HAL_RCC_PLL3_DISABLE();
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030ae:	f7fd fbf1 	bl	8000894 <HAL_GetTick>
 80030b2:	4605      	mov	r5, r0

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80030b4:	e004      	b.n	80030c0 <RCCEx_PLL3_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80030b6:	f7fd fbed 	bl	8000894 <HAL_GetTick>
 80030ba:	1b40      	subs	r0, r0, r5
 80030bc:	2802      	cmp	r0, #2
 80030be:	d854      	bhi.n	800316a <RCCEx_PLL3_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	009a      	lsls	r2, r3, #2
 80030c4:	d4f7      	bmi.n	80030b6 <RCCEx_PLL3_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80030c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80030c8:	e9d6 1200 	ldrd	r1, r2, [r6]
 80030cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030d0:	f023 0303 	bic.w	r3, r3, #3
 80030d4:	3a01      	subs	r2, #1
 80030d6:	430b      	orrs	r3, r1
 80030d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80030dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80030de:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80030e0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80030e4:	4d23      	ldr	r5, [pc, #140]	@ (8003174 <RCCEx_PLL3_Config+0xd4>)
 80030e6:	1e51      	subs	r1, r2, #1
 80030e8:	6932      	ldr	r2, [r6, #16]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	4005      	ands	r5, r0
 80030ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f2:	0249      	lsls	r1, r1, #9
 80030f4:	3a01      	subs	r2, #1
 80030f6:	b289      	uxth	r1, r1
 80030f8:	432b      	orrs	r3, r5
 80030fa:	0412      	lsls	r2, r2, #16
 80030fc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003100:	430b      	orrs	r3, r1
 8003102:	4313      	orrs	r3, r2
 8003104:	6972      	ldr	r2, [r6, #20]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003106:	4d1a      	ldr	r5, [pc, #104]	@ (8003170 <RCCEx_PLL3_Config+0xd0>)
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8003108:	3a01      	subs	r2, #1
 800310a:	0612      	lsls	r2, r2, #24
 800310c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003110:	4313      	orrs	r3, r2
 8003112:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8003114:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003116:	69b2      	ldr	r2, [r6, #24]
 8003118:	f023 030c 	bic.w	r3, r3, #12
 800311c:	4313      	orrs	r3, r2
 800311e:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003120:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003122:	6a32      	ldr	r2, [r6, #32]
 8003124:	4313      	orrs	r3, r2
 8003126:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_DISABLE();
 8003128:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800312a:	f023 0310 	bic.w	r3, r3, #16
 800312e:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003130:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003132:	69f2      	ldr	r2, [r6, #28]
 8003134:	f36f 03cf 	bfc	r3, #3, #13
 8003138:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800313c:	64a3      	str	r3, [r4, #72]	@ 0x48
  __HAL_RCC_PLL3FRACN_ENABLE();
 800313e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003140:	f043 0310 	orr.w	r3, r3, #16
 8003144:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_ENABLE();
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800314c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800314e:	f7fd fba1 	bl	8000894 <HAL_GetTick>
 8003152:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003154:	e004      	b.n	8003160 <RCCEx_PLL3_Config+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003156:	f7fd fb9d 	bl	8000894 <HAL_GetTick>
 800315a:	1b00      	subs	r0, r0, r4
 800315c:	2802      	cmp	r0, #2
 800315e:	d804      	bhi.n	800316a <RCCEx_PLL3_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	d5f7      	bpl.n	8003156 <RCCEx_PLL3_Config+0xb6>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003166:	2000      	movs	r0, #0
}
 8003168:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800316a:	2003      	movs	r0, #3
}
 800316c:	bd70      	pop	{r4, r5, r6, pc}
 800316e:	bf00      	nop
 8003170:	46020c00 	.word	0x46020c00
 8003174:	80800000 	.word	0x80800000

08003178 <RCCEx_PLL2_Config>:
{
 8003178:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLL2_DISABLE();
 800317a:	4c33      	ldr	r4, [pc, #204]	@ (8003248 <RCCEx_PLL2_Config+0xd0>)
{
 800317c:	4606      	mov	r6, r0
  __HAL_RCC_PLL2_DISABLE();
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003184:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003186:	f7fd fb85 	bl	8000894 <HAL_GetTick>
 800318a:	4605      	mov	r5, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800318c:	e004      	b.n	8003198 <RCCEx_PLL2_Config+0x20>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800318e:	f7fd fb81 	bl	8000894 <HAL_GetTick>
 8003192:	1b40      	subs	r0, r0, r5
 8003194:	2802      	cmp	r0, #2
 8003196:	d854      	bhi.n	8003242 <RCCEx_PLL2_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	011a      	lsls	r2, r3, #4
 800319c:	d4f7      	bmi.n	800318e <RCCEx_PLL2_Config+0x16>
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800319e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80031a0:	e9d6 1200 	ldrd	r1, r2, [r6]
 80031a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031a8:	f023 0303 	bic.w	r3, r3, #3
 80031ac:	3a01      	subs	r2, #1
 80031ae:	430b      	orrs	r3, r1
 80031b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80031b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80031b6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80031b8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80031bc:	4d23      	ldr	r5, [pc, #140]	@ (800324c <RCCEx_PLL2_Config+0xd4>)
 80031be:	1e51      	subs	r1, r2, #1
 80031c0:	6932      	ldr	r2, [r6, #16]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	4005      	ands	r5, r0
 80031c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ca:	0249      	lsls	r1, r1, #9
 80031cc:	3a01      	subs	r2, #1
 80031ce:	b289      	uxth	r1, r1
 80031d0:	432b      	orrs	r3, r5
 80031d2:	0412      	lsls	r2, r2, #16
 80031d4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80031d8:	430b      	orrs	r3, r1
 80031da:	4313      	orrs	r3, r2
 80031dc:	6972      	ldr	r2, [r6, #20]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80031de:	4d1a      	ldr	r5, [pc, #104]	@ (8003248 <RCCEx_PLL2_Config+0xd0>)
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80031e0:	3a01      	subs	r2, #1
 80031e2:	0612      	lsls	r2, r2, #24
 80031e4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80031e8:	4313      	orrs	r3, r2
 80031ea:	63e3      	str	r3, [r4, #60]	@ 0x3c
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80031ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80031ee:	69b2      	ldr	r2, [r6, #24]
 80031f0:	f023 030c 	bic.w	r3, r3, #12
 80031f4:	4313      	orrs	r3, r2
 80031f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80031f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80031fa:	6a32      	ldr	r2, [r6, #32]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_DISABLE();
 8003200:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003202:	f023 0310 	bic.w	r3, r3, #16
 8003206:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003208:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800320a:	69f2      	ldr	r2, [r6, #28]
 800320c:	f36f 03cf 	bfc	r3, #3, #13
 8003210:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003214:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_RCC_PLL2FRACN_ENABLE();
 8003216:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003218:	f043 0310 	orr.w	r3, r3, #16
 800321c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003224:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003226:	f7fd fb35 	bl	8000894 <HAL_GetTick>
 800322a:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800322c:	e004      	b.n	8003238 <RCCEx_PLL2_Config+0xc0>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800322e:	f7fd fb31 	bl	8000894 <HAL_GetTick>
 8003232:	1b00      	subs	r0, r0, r4
 8003234:	2802      	cmp	r0, #2
 8003236:	d804      	bhi.n	8003242 <RCCEx_PLL2_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003238:	682b      	ldr	r3, [r5, #0]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	d5f7      	bpl.n	800322e <RCCEx_PLL2_Config+0xb6>
  return HAL_OK;
 800323e:	2000      	movs	r0, #0
}
 8003240:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003242:	2003      	movs	r0, #3
}
 8003244:	bd70      	pop	{r4, r5, r6, pc}
 8003246:	bf00      	nop
 8003248:	46020c00 	.word	0x46020c00
 800324c:	80800000 	.word	0x80800000

08003250 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003254:	6803      	ldr	r3, [r0, #0]
{
 8003256:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003258:	07d8      	lsls	r0, r3, #31
{
 800325a:	b082      	sub	sp, #8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800325c:	d508      	bpl.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800325e:	499d      	ldr	r1, [pc, #628]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003260:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003262:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003266:	f022 0203 	bic.w	r2, r2, #3
 800326a:	4302      	orrs	r2, r0
 800326c:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003270:	0799      	lsls	r1, r3, #30
 8003272:	d508      	bpl.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003274:	4997      	ldr	r1, [pc, #604]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003276:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003278:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 800327c:	f022 020c 	bic.w	r2, r2, #12
 8003280:	4302      	orrs	r2, r0
 8003282:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003286:	075a      	lsls	r2, r3, #29
 8003288:	d508      	bpl.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800328a:	4992      	ldr	r1, [pc, #584]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800328c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800328e:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003292:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003296:	4302      	orrs	r2, r0
 8003298:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800329c:	071f      	lsls	r7, r3, #28
 800329e:	d508      	bpl.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80032a0:	498c      	ldr	r1, [pc, #560]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80032a2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80032a4:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80032a8:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80032ac:	4302      	orrs	r2, r0
 80032ae:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032b2:	06de      	lsls	r6, r3, #27
 80032b4:	d508      	bpl.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80032b6:	4987      	ldr	r1, [pc, #540]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80032b8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80032ba:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80032be:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80032c2:	4302      	orrs	r2, r0
 80032c4:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032c8:	069d      	lsls	r5, r3, #26
 80032ca:	d508      	bpl.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x8e>
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80032cc:	4981      	ldr	r1, [pc, #516]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80032ce:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80032d0:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80032d4:	f022 0207 	bic.w	r2, r2, #7
 80032d8:	4302      	orrs	r2, r0
 80032da:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032de:	0658      	lsls	r0, r3, #25
 80032e0:	d508      	bpl.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80032e2:	497c      	ldr	r1, [pc, #496]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80032e4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80032e6:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80032ea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80032ee:	4302      	orrs	r2, r0
 80032f0:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032f4:	0619      	lsls	r1, r3, #24
 80032f6:	d508      	bpl.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80032f8:	4976      	ldr	r1, [pc, #472]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80032fa:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80032fc:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003300:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003304:	4302      	orrs	r2, r0
 8003306:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800330a:	05da      	lsls	r2, r3, #23
 800330c:	d508      	bpl.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800330e:	4971      	ldr	r1, [pc, #452]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003310:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003312:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003316:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800331a:	4302      	orrs	r2, r0
 800331c:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003320:	025f      	lsls	r7, r3, #9
 8003322:	d508      	bpl.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003324:	496b      	ldr	r1, [pc, #428]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003326:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003328:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 800332c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003330:	4302      	orrs	r2, r0
 8003332:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003336:	059e      	lsls	r6, r3, #22
 8003338:	d508      	bpl.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800333a:	4966      	ldr	r1, [pc, #408]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800333c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800333e:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003342:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003346:	4302      	orrs	r2, r0
 8003348:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800334c:	055d      	lsls	r5, r3, #21
 800334e:	d508      	bpl.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003350:	4960      	ldr	r1, [pc, #384]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003352:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003354:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003358:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800335c:	4302      	orrs	r2, r0
 800335e:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003362:	0518      	lsls	r0, r3, #20
 8003364:	d509      	bpl.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003366:	495b      	ldr	r1, [pc, #364]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003368:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800336c:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003370:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003374:	4302      	orrs	r2, r0
 8003376:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800337a:	0499      	lsls	r1, r3, #18
 800337c:	f403 5600 	and.w	r6, r3, #8192	@ 0x2000
 8003380:	d51e      	bpl.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8003382:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8003386:	2a40      	cmp	r2, #64	@ 0x40
 8003388:	f000 8235 	beq.w	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800338c:	f200 8254 	bhi.w	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8003390:	2a00      	cmp	r2, #0
 8003392:	f000 8248 	beq.w	8003826 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8003396:	2a20      	cmp	r2, #32
 8003398:	f040 8254 	bne.w	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800339c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80033a0:	f7ff fe7e 	bl	80030a0 <RCCEx_PLL3_Config>
 80033a4:	4606      	mov	r6, r0
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033a6:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80033a8:	b956      	cbnz	r6, 80033c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80033aa:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033ae:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80033b0:	4848      	ldr	r0, [pc, #288]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80033b2:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 80033b6:	f021 01e0 	bic.w	r1, r1, #224	@ 0xe0
 80033ba:	430a      	orrs	r2, r1
 80033bc:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033c0:	045a      	lsls	r2, r3, #17
 80033c2:	d539      	bpl.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (pPeriphClkInit->Sai2ClockSelection)
 80033c4:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 80033c8:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80033cc:	f000 8219 	beq.w	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80033d0:	d829      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80033d2:	2a00      	cmp	r2, #0
 80033d4:	f000 8220 	beq.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80033d8:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80033dc:	d12b      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033de:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80033e2:	f7ff fe5d 	bl	80030a0 <RCCEx_PLL3_Config>
 80033e6:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80033e8:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80033ea:	2d00      	cmp	r5, #0
 80033ec:	f040 8212 	bne.w	8003814 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80033f0:	4938      	ldr	r1, [pc, #224]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80033f2:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80033f6:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80033fa:	041f      	lsls	r7, r3, #16
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80033fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003400:	ea42 0200 	orr.w	r2, r2, r0
 8003404:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003408:	d419      	bmi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800340a:	03d8      	lsls	r0, r3, #15
 800340c:	d52d      	bpl.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 800340e:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8003412:	2a04      	cmp	r2, #4
 8003414:	f200 822c 	bhi.w	8003870 <HAL_RCCEx_PeriphCLKConfig+0x620>
 8003418:	e8df f012 	tbh	[pc, r2, lsl #1]
 800341c:	0145014a 	.word	0x0145014a
 8003420:	014a01e4 	.word	0x014a01e4
 8003424:	014a      	.short	0x014a
    switch (pPeriphClkInit->Sai2ClockSelection)
 8003426:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800342a:	f000 81ef 	beq.w	800380c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800342e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003432:	f000 81eb 	beq.w	800380c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003436:	2601      	movs	r6, #1
 8003438:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800343a:	041f      	lsls	r7, r3, #16
 800343c:	d5e5      	bpl.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (pPeriphClkInit->AdcDacClockSelection)
 800343e:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8003442:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003446:	f000 8191 	beq.w	800376c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800344a:	f240 81a1 	bls.w	8003790 <HAL_RCCEx_PeriphCLKConfig+0x540>
 800344e:	f422 5180 	bic.w	r1, r2, #4096	@ 0x1000
 8003452:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8003456:	f000 818f 	beq.w	8003778 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800345a:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800345e:	f000 818b 	beq.w	8003778 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003462:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003464:	03d8      	lsls	r0, r3, #15
    switch (pPeriphClkInit->AdcDacClockSelection)
 8003466:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003468:	d4d1      	bmi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800346a:	0399      	lsls	r1, r3, #14
 800346c:	d51e      	bpl.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (pPeriphClkInit->Adf1ClockSelection)
 800346e:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8003472:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8003476:	f000 81a4 	beq.w	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800347a:	f200 81e5 	bhi.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800347e:	b142      	cbz	r2, 8003492 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003480:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003484:	f040 81e8 	bne.w	8003858 <HAL_RCCEx_PeriphCLKConfig+0x608>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003488:	4912      	ldr	r1, [pc, #72]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800348a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800348c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003490:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8003492:	2d00      	cmp	r5, #0
 8003494:	f040 8156 	bne.w	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003498:	490e      	ldr	r1, [pc, #56]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800349a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800349e:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80034a2:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80034a6:	4302      	orrs	r2, r0
 80034a8:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ac:	035a      	lsls	r2, r3, #13
 80034ae:	d560      	bpl.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x322>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b0:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80034b2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80034b6:	0757      	lsls	r7, r2, #29
 80034b8:	f140 8107 	bpl.w	80036ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
    FlagStatus       pwrclkchanged = RESET;
 80034bc:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80034c0:	4f05      	ldr	r7, [pc, #20]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80034c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    tickstart = HAL_GetTick();
 80034ca:	f7fd f9e3 	bl	8000894 <HAL_GetTick>
 80034ce:	4681      	mov	r9, r0
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034d0:	e00b      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80034d2:	bf00      	nop
 80034d4:	46020c00 	.word	0x46020c00
 80034d8:	46020800 	.word	0x46020800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034dc:	f7fd f9da 	bl	8000894 <HAL_GetTick>
 80034e0:	eba0 0309 	sub.w	r3, r0, r9
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	f200 811e 	bhi.w	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ec:	07d8      	lsls	r0, r3, #31
 80034ee:	d5f5      	bpl.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    if (ret == HAL_OK)
 80034f0:	2d00      	cmp	r5, #0
 80034f2:	f040 81bb 	bne.w	800386c <HAL_RCCEx_PeriphCLKConfig+0x61c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034f6:	f8df a33c 	ldr.w	sl, [pc, #828]	@ 8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80034fa:	f8d4 20bc 	ldr.w	r2, [r4, #188]	@ 0xbc
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034fe:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003502:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003506:	d027      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003508:	4293      	cmp	r3, r2
 800350a:	d025      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x308>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800350c:	f8da 10f0 	ldr.w	r1, [sl, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 8003510:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 8003514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003518:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800351c:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 8003520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003524:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003528:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800352c:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800352e:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003532:	d511      	bpl.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x308>
        tickstart = HAL_GetTick();
 8003534:	f7fd f9ae 	bl	8000894 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800353c:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353e:	e005      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fd f9a8 	bl	8000894 <HAL_GetTick>
 8003544:	1bc0      	subs	r0, r0, r7
 8003546:	4548      	cmp	r0, r9
 8003548:	f200 80ed 	bhi.w	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354c:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 8003550:	079b      	lsls	r3, r3, #30
 8003552:	d5f5      	bpl.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003554:	f8d4 20bc 	ldr.w	r2, [r4, #188]	@ 0xbc
 8003558:	49b6      	ldr	r1, [pc, #728]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800355a:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 800355e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003568:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 800356a:	f1b8 0f00 	cmp.w	r8, #0
 800356e:	f040 80e1 	bne.w	8003734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003572:	02df      	lsls	r7, r3, #11
 8003574:	d51f      	bpl.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
    switch (pPeriphClkInit->IclkClockSelection)
 8003576:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800357a:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 800357e:	f000 8116 	beq.w	80037ae <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003582:	f200 816c 	bhi.w	800385e <HAL_RCCEx_PeriphCLKConfig+0x60e>
 8003586:	b14a      	cbz	r2, 800359c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003588:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800358c:	f040 816b 	bne.w	8003866 <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003590:	f104 0008 	add.w	r0, r4, #8
 8003594:	f7ff fdf0 	bl	8003178 <RCCEx_PLL2_Config>
 8003598:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800359a:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 800359c:	2d00      	cmp	r5, #0
 800359e:	f040 80d3 	bne.w	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80035a2:	49a4      	ldr	r1, [pc, #656]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035a4:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80035a8:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80035ac:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80035b0:	4302      	orrs	r2, r0
 80035b2:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035b6:	0318      	lsls	r0, r3, #12
 80035b8:	d50b      	bpl.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch (pPeriphClkInit->RngClockSelection)
 80035ba:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80035be:	f432 5180 	bics.w	r1, r2, #4096	@ 0x1000
 80035c2:	f000 80a3 	beq.w	800370c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80035c6:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80035ca:	f000 809f 	beq.w	800370c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80035ce:	2601      	movs	r6, #1
 80035d0:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80035d2:	0299      	lsls	r1, r3, #10
 80035d4:	d50d      	bpl.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80035d6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80035da:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 80035de:	f000 80b9 	beq.w	8003754 <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80035e2:	4994      	ldr	r1, [pc, #592]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035e4:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 80035e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035ec:	4302      	orrs	r2, r0
 80035ee:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80035f2:	021a      	lsls	r2, r3, #8
 80035f4:	d509      	bpl.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80035f6:	498f      	ldr	r1, [pc, #572]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035f8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80035fc:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003600:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003604:	4302      	orrs	r2, r0
 8003606:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800360a:	01df      	lsls	r7, r3, #7
 800360c:	d509      	bpl.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800360e:	4989      	ldr	r1, [pc, #548]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003610:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8003614:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003618:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800361c:	4302      	orrs	r2, r0
 800361e:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003622:	0198      	lsls	r0, r3, #6
 8003624:	d509      	bpl.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003626:	4983      	ldr	r1, [pc, #524]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003628:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 800362c:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003630:	f022 0218 	bic.w	r2, r2, #24
 8003634:	4302      	orrs	r2, r0
 8003636:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800363a:	0159      	lsls	r1, r3, #5
 800363c:	d515      	bpl.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800363e:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 8003642:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8003646:	f000 808b 	beq.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800364a:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 800364e:	f000 80a7 	beq.w	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    if (ret == HAL_OK)
 8003652:	2d00      	cmp	r5, #0
 8003654:	d165      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003656:	4977      	ldr	r1, [pc, #476]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003658:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800365c:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 8003660:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003664:	4302      	orrs	r2, r0
 8003666:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800366a:	011a      	lsls	r2, r3, #4
 800366c:	d50b      	bpl.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x436>
    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800366e:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8003672:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8003676:	f000 80ad 	beq.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800367a:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800367e:	d033      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003680:	2a00      	cmp	r2, #0
 8003682:	d037      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003684:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	d509      	bpl.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800368a:	4a6a      	ldr	r2, [pc, #424]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800368c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8003690:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8003694:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003698:	430b      	orrs	r3, r1
 800369a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 800369e:	4630      	mov	r0, r6
 80036a0:	b002      	add	sp, #8
 80036a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036a6:	4963      	ldr	r1, [pc, #396]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036a8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80036aa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80036ae:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80036b0:	2d00      	cmp	r5, #0
 80036b2:	d14d      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x500>
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80036b4:	495f      	ldr	r1, [pc, #380]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036b6:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80036ba:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 80036be:	f022 0207 	bic.w	r2, r2, #7
 80036c2:	4302      	orrs	r2, r0
 80036c4:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
 80036c8:	e6cf      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
      pwrclkchanged = SET;
 80036ce:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	f042 0204 	orr.w	r2, r2, #4
 80036d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036e6:	e6eb      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036e8:	f104 0008 	add.w	r0, r4, #8
 80036ec:	f7ff fd44 	bl	8003178 <RCCEx_PLL2_Config>
 80036f0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80036f2:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80036f4:	bb55      	cbnz	r5, 800374c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80036f6:	494f      	ldr	r1, [pc, #316]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036f8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80036fc:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003700:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003704:	4302      	orrs	r2, r0
 8003706:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
 800370a:	e7bc      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x436>
    if (ret == HAL_OK)
 800370c:	2d00      	cmp	r5, #0
 800370e:	d156      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003710:	4848      	ldr	r0, [pc, #288]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003712:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 8003716:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800371a:	430a      	orrs	r2, r1
 800371c:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
 8003720:	e757      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      status = ret;
 8003722:	462e      	mov	r6, r5
 8003724:	e7a1      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x41a>
        ret = HAL_TIMEOUT;
 8003726:	2603      	movs	r6, #3
 8003728:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800372a:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 800372c:	f1b8 0f00 	cmp.w	r8, #0
 8003730:	f43f af1f 	beq.w	8003572 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	493f      	ldr	r1, [pc, #252]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003736:	f8d1 2094 	ldr.w	r2, [r1, #148]	@ 0x94
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	f8c1 2094 	str.w	r2, [r1, #148]	@ 0x94
 8003742:	e716      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x322>
      status = ret;
 8003744:	462e      	mov	r6, r5
 8003746:	e6b1      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
      status = ret;
 8003748:	462e      	mov	r6, r5
 800374a:	e734      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      status = ret;
 800374c:	462e      	mov	r6, r5
 800374e:	e79a      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x436>
      status = ret;
 8003750:	462e      	mov	r6, r5
 8003752:	e68a      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x21a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003754:	4937      	ldr	r1, [pc, #220]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003756:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003758:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800375c:	628a      	str	r2, [r1, #40]	@ 0x28
 800375e:	e740      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003760:	4934      	ldr	r1, [pc, #208]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003762:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003764:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003768:	628a      	str	r2, [r1, #40]	@ 0x28
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800376a:	e772      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x402>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800376c:	f104 0008 	add.w	r0, r4, #8
 8003770:	f7ff fd02 	bl	8003178 <RCCEx_PLL2_Config>
 8003774:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003776:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8003778:	b985      	cbnz	r5, 800379c <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800377a:	492e      	ldr	r1, [pc, #184]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800377c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8003780:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003784:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003788:	4302      	orrs	r2, r0
 800378a:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
 800378e:	e63c      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8003790:	f432 5280 	bics.w	r2, r2, #4096	@ 0x1000
 8003794:	f47f ae65 	bne.w	8003462 <HAL_RCCEx_PeriphCLKConfig+0x212>
    if (ret == HAL_OK)
 8003798:	2d00      	cmp	r5, #0
 800379a:	d0ee      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      status = ret;
 800379c:	462e      	mov	r6, r5
 800379e:	e634      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037a0:	f104 0008 	add.w	r0, r4, #8
 80037a4:	f7ff fce8 	bl	8003178 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80037a8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037aa:	4605      	mov	r5, r0
 80037ac:	e751      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x402>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ae:	4921      	ldr	r1, [pc, #132]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037b0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80037b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80037b6:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	d1c5      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80037bc:	e6f1      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
      status = ret;
 80037be:	462e      	mov	r6, r5
 80037c0:	e707      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037c2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80037c6:	f7ff fc6b 	bl	80030a0 <RCCEx_PLL3_Config>
 80037ca:	4605      	mov	r5, r0
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037cc:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	d1b8      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80037d2:	e661      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x248>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d4:	4917      	ldr	r1, [pc, #92]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037d6:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80037d8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80037dc:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80037de:	2d00      	cmp	r5, #0
 80037e0:	d1b4      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80037e2:	e788      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037e4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80037e8:	f7ff fc5a 	bl	80030a0 <RCCEx_PLL3_Config>
 80037ec:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80037ee:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	d1ad      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80037f4:	e75e      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037f6:	480f      	ldr	r0, [pc, #60]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037f8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80037fa:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80037fe:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8003800:	e5d5      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003802:	490c      	ldr	r1, [pc, #48]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003804:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003806:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800380a:	628a      	str	r2, [r1, #40]	@ 0x28
    switch (pPeriphClkInit->Sai1ClockSelection)
 800380c:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800380e:	2d00      	cmp	r5, #0
 8003810:	f43f adee 	beq.w	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      status = ret;
 8003814:	462e      	mov	r6, r5
 8003816:	e610      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003818:	f104 0008 	add.w	r0, r4, #8
 800381c:	f7ff fcac 	bl	8003178 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003820:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003822:	4605      	mov	r5, r0
        break;
 8003824:	e5e1      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003826:	f104 0008 	add.w	r0, r4, #8
 800382a:	f7ff fca5 	bl	8003178 <RCCEx_PLL2_Config>
 800382e:	4606      	mov	r6, r0
        break;
 8003830:	e5b9      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003832:	bf00      	nop
 8003834:	46020c00 	.word	0x46020c00
    switch (pPeriphClkInit->Sai1ClockSelection)
 8003838:	2a60      	cmp	r2, #96	@ 0x60
 800383a:	f43f adb8 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800383e:	2a80      	cmp	r2, #128	@ 0x80
 8003840:	f43f adb5 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003844:	2601      	movs	r6, #1
 8003846:	e5bb      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003848:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 800384c:	f43f ae21 	beq.w	8003492 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003850:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8003854:	f43f ae1d 	beq.w	8003492 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003858:	2601      	movs	r6, #1
 800385a:	4635      	mov	r5, r6
 800385c:	e626      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (pPeriphClkInit->IclkClockSelection)
 800385e:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8003862:	f43f ae9b 	beq.w	800359c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003866:	2601      	movs	r6, #1
 8003868:	4635      	mov	r5, r6
 800386a:	e6a4      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      status = ret;
 800386c:	462e      	mov	r6, r5
 800386e:	e75c      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x4da>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003870:	2601      	movs	r6, #1
 8003872:	4635      	mov	r5, r6
 8003874:	e5f9      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003876:	bf00      	nop

08003878 <_init>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr

08003884 <_fini>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr
