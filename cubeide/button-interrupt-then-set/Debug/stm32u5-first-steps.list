
stm32u5-first-steps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000107  08003e3c  08003e3c  00004e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f44  08003f44  00004f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08003f48  08003f48  00004f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000068  20000000  08003f4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001bc  20000068  08003fb4  00005068  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000224  08003fb4  00005224  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d970  00000000  00000000  0000509e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001da9  00000000  00000000  00012a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e78  00000000  00000000  000147b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000b12  00000000  00000000  00015630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031b3f  00000000  00000000  00016142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f2da  00000000  00000000  00047c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013a3d4  00000000  00000000  00056f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0019132f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000445c  00000000  00000000  00191374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000072  00000000  00000000  001957d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	08003e24 	.word	0x08003e24

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	08003e24 	.word	0x08003e24

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027e:	f000 fab1 	bl	80007e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000282:	f000 f827 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000286:	f000 f8e3 	bl	8000450 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800028a:	f000 f87f 	bl	800038c <MX_ICACHE_Init>
  MX_TIM2_Init();
 800028e:	f000 f891 	bl	80003b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000292:	480d      	ldr	r0, [pc, #52]	@ (80002c8 <main+0x50>)
 8000294:	f002 fa86 	bl	80027a4 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		int start = __HAL_TIM_GET_COUNTER(&htim2);
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <main+0x50>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800029e:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80002a0:	2180      	movs	r1, #128	@ 0x80
 80002a2:	480a      	ldr	r0, [pc, #40]	@ (80002cc <main+0x54>)
 80002a4:	f000 fee0 	bl	8001068 <HAL_GPIO_TogglePin>
		int diff = __HAL_TIM_GET_COUNTER(&htim2) - start;
 80002a8:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <main+0x50>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	1ad3      	subs	r3, r2, r3
 80002b2:	603b      	str	r3, [r7, #0]
		printf("%d", diff);
 80002b4:	6839      	ldr	r1, [r7, #0]
 80002b6:	4806      	ldr	r0, [pc, #24]	@ (80002d0 <main+0x58>)
 80002b8:	f002 ff34 	bl	8003124 <iprintf>

		HAL_Delay(1000);
 80002bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c0:	f000 fb56 	bl	8000970 <HAL_Delay>
	while (1) {
 80002c4:	bf00      	nop
 80002c6:	e7e7      	b.n	8000298 <main+0x20>
 80002c8:	20000084 	.word	0x20000084
 80002cc:	42020800 	.word	0x42020800
 80002d0:	08003e3c 	.word	0x08003e3c

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b09e      	sub	sp, #120	@ 0x78
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2260      	movs	r2, #96	@ 0x60
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 ff73 	bl	80031ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	463b      	mov	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002f8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80002fc:	f000 fefe 	bl	80010fc <HAL_PWREx_ControlVoltageScaling>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000306:	f000 f8f7 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800030a:	2310      	movs	r3, #16
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000312:	2310      	movs	r3, #16
 8000314:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000316:	2300      	movs	r3, #0
 8000318:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	2302      	movs	r3, #2
 800031c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800031e:	2301      	movs	r3, #1
 8000320:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000326:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000328:	2303      	movs	r3, #3
 800032a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800032c:	230a      	movs	r3, #10
 800032e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000330:	2302      	movs	r3, #2
 8000332:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000334:	2302      	movs	r3, #2
 8000336:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000338:	2301      	movs	r3, #1
 800033a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800033c:	230c      	movs	r3, #12
 800033e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000344:	f107 0318 	add.w	r3, r7, #24
 8000348:	4618      	mov	r0, r3
 800034a:	f000 ff63 	bl	8001214 <HAL_RCC_OscConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000354:	f000 f8d0 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	231f      	movs	r3, #31
 800035a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035c:	2303      	movs	r3, #3
 800035e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000370:	463b      	mov	r3, r7
 8000372:	2104      	movs	r1, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fe29 	bl	8001fcc <HAL_RCC_ClockConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000380:	f000 f8ba 	bl	80004f8 <Error_Handler>
  }
}
 8000384:	bf00      	nop
 8000386:	3778      	adds	r7, #120	@ 0x78
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000390:	2000      	movs	r0, #0
 8000392:	f000 fe83 	bl	800109c <HAL_ICACHE_ConfigAssociativityMode>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800039c:	f000 f8ac 	bl	80004f8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003a0:	f000 fe9c 	bl	80010dc <HAL_ICACHE_Enable>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003aa:	f000 f8a5 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d2:	4b1e      	ldr	r3, [pc, #120]	@ (800044c <MX_TIM2_Init+0x98>)
 80003d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003da:	4b1c      	ldr	r3, [pc, #112]	@ (800044c <MX_TIM2_Init+0x98>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <MX_TIM2_Init+0x98>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80003e6:	4b19      	ldr	r3, [pc, #100]	@ (800044c <MX_TIM2_Init+0x98>)
 80003e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80003ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b17      	ldr	r3, [pc, #92]	@ (800044c <MX_TIM2_Init+0x98>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f4:	4b15      	ldr	r3, [pc, #84]	@ (800044c <MX_TIM2_Init+0x98>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003fa:	4814      	ldr	r0, [pc, #80]	@ (800044c <MX_TIM2_Init+0x98>)
 80003fc:	f002 f97a 	bl	80026f4 <HAL_TIM_Base_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000406:	f000 f877 	bl	80004f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800040e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	480d      	ldr	r0, [pc, #52]	@ (800044c <MX_TIM2_Init+0x98>)
 8000418:	f002 fa5c 	bl	80028d4 <HAL_TIM_ConfigClockSource>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000422:	f000 f869 	bl	80004f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	4806      	ldr	r0, [pc, #24]	@ (800044c <MX_TIM2_Init+0x98>)
 8000434:	f002 fcf2 	bl	8002e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800043e:	f000 f85b 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000084 	.word	0x20000084

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	f107 030c 	add.w	r3, r7, #12
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <MX_GPIO_Init+0xa0>)
 8000468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800046c:	4a20      	ldr	r2, [pc, #128]	@ (80004f0 <MX_GPIO_Init+0xa0>)
 800046e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000472:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000476:	4b1e      	ldr	r3, [pc, #120]	@ (80004f0 <MX_GPIO_Init+0xa0>)
 8000478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800047c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000484:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <MX_GPIO_Init+0xa0>)
 8000486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800048a:	4a19      	ldr	r2, [pc, #100]	@ (80004f0 <MX_GPIO_Init+0xa0>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000494:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <MX_GPIO_Init+0xa0>)
 8000496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_GPIO_Init+0xa0>)
 80004a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004a8:	4a11      	ldr	r2, [pc, #68]	@ (80004f0 <MX_GPIO_Init+0xa0>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <MX_GPIO_Init+0xa0>)
 80004b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	603b      	str	r3, [r7, #0]
 80004be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2180      	movs	r1, #128	@ 0x80
 80004c4:	480b      	ldr	r0, [pc, #44]	@ (80004f4 <MX_GPIO_Init+0xa4>)
 80004c6:	f000 fdb7 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004ca:	2380      	movs	r3, #128	@ 0x80
 80004cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	4619      	mov	r1, r3
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <MX_GPIO_Init+0xa4>)
 80004e2:	f000 fbd1 	bl	8000c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e6:	bf00      	nop
 80004e8:	3720      	adds	r7, #32
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	46020c00 	.word	0x46020c00
 80004f4:	42020800 	.word	0x42020800

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <Error_Handler+0x8>

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <HAL_MspInit+0x34>)
 800050c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000510:	4a09      	ldr	r2, [pc, #36]	@ (8000538 <HAL_MspInit+0x34>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <HAL_MspInit+0x34>)
 800051c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000528:	2004      	movs	r0, #4
 800052a:	f000 fad4 	bl	8000ad6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	46020c00 	.word	0x46020c00

0800053c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800054c:	d10e      	bne.n	800056c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <HAL_TIM_Base_MspInit+0x3c>)
 8000550:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000554:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <HAL_TIM_Base_MspInit+0x3c>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <HAL_TIM_Base_MspInit+0x3c>)
 8000560:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	46020c00 	.word	0x46020c00

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <MemManage_Handler+0x4>

08000594 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f9ad 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}

080005da <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	e00a      	b.n	8000602 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ec:	f3af 8000 	nop.w
 80005f0:	4601      	mov	r1, r0
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	60ba      	str	r2, [r7, #8]
 80005f8:	b2ca      	uxtb	r2, r1
 80005fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	3301      	adds	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	429a      	cmp	r2, r3
 8000608:	dbf0      	blt.n	80005ec <_read+0x12>
  }

  return len;
 800060a:	687b      	ldr	r3, [r7, #4]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	e009      	b.n	800063a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	60ba      	str	r2, [r7, #8]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbf1      	blt.n	8000626 <_write+0x12>
  }
  return len;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_close>:

int _close(int file)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000674:	605a      	str	r2, [r3, #4]
  return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <_isatty>:

int _isatty(int file)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800068c:	2301      	movs	r3, #1
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006bc:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <_sbrk+0x5c>)
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <_sbrk+0x60>)
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <_sbrk+0x64>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <_sbrk+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d207      	bcs.n	80006f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e4:	f002 fdc2 	bl	800326c <__errno>
 80006e8:	4603      	mov	r3, r0
 80006ea:	220c      	movs	r2, #12
 80006ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006f2:	e009      	b.n	8000708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fa:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <_sbrk+0x64>)
 8000704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200c0000 	.word	0x200c0000
 8000714:	00000400 	.word	0x00000400
 8000718:	200000d0 	.word	0x200000d0
 800071c:	20000228 	.word	0x20000228

08000720 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <SystemInit+0x68>)
 8000726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800072a:	4a17      	ldr	r2, [pc, #92]	@ (8000788 <SystemInit+0x68>)
 800072c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <SystemInit+0x6c>)
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <SystemInit+0x6c>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <SystemInit+0x6c>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x6c>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <SystemInit+0x6c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0e      	ldr	r2, [pc, #56]	@ (800078c <SystemInit+0x6c>)
 8000752:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000756:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800075a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800075c:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <SystemInit+0x6c>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <SystemInit+0x6c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a09      	ldr	r2, [pc, #36]	@ (800078c <SystemInit+0x6c>)
 8000768:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800076e:	4b07      	ldr	r3, [pc, #28]	@ (800078c <SystemInit+0x6c>)
 8000770:	2200      	movs	r2, #0
 8000772:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <SystemInit+0x68>)
 8000776:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800077a:	609a      	str	r2, [r3, #8]
  #endif
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	46020c00 	.word	0x46020c00

08000790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000790:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007c8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000794:	f7ff ffc4 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000798:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800079a:	e003      	b.n	80007a4 <LoopCopyDataInit>

0800079c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800079c:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800079e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007a2:	3104      	adds	r1, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007a4:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007ac:	d3f6      	bcc.n	800079c <CopyDataInit>
	ldr	r2, =_sbss
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007b0:	e002      	b.n	80007b8 <LoopFillZerobss>

080007b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007b4:	f842 3b04 	str.w	r3, [r2], #4

080007b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <LoopForever+0x16>)
	cmp	r2, r3
 80007ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007bc:	d3f9      	bcc.n	80007b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007be:	f002 fd5b 	bl	8003278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007c2:	f7ff fd59 	bl	8000278 <main>

080007c6 <LoopForever>:

LoopForever:
    b LoopForever
 80007c6:	e7fe      	b.n	80007c6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80007c8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80007cc:	08003f4c 	.word	0x08003f4c
	ldr	r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007d4:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80007d8:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80007dc:	20000224 	.word	0x20000224

080007e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC1_IRQHandler>
	...

080007e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_Init+0x50>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <HAL_Init+0x50>)
 80007ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f96e 	bl	8000ad6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80007fa:	f001 fdd9 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 80007fe:	4602      	mov	r2, r0
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <HAL_Init+0x54>)
 8000802:	6a1b      	ldr	r3, [r3, #32]
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	490c      	ldr	r1, [pc, #48]	@ (800083c <HAL_Init+0x58>)
 800080a:	5ccb      	ldrb	r3, [r1, r3]
 800080c:	fa22 f303 	lsr.w	r3, r2, r3
 8000810:	4a0b      	ldr	r2, [pc, #44]	@ (8000840 <HAL_Init+0x5c>)
 8000812:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000814:	2004      	movs	r0, #4
 8000816:	f000 f9a5 	bl	8000b64 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f812 	bl	8000844 <HAL_InitTick>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e002      	b.n	8000830 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800082a:	f7ff fe6b 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40022000 	.word	0x40022000
 8000838:	46020c00 	.word	0x46020c00
 800083c:	08003e40 	.word	0x08003e40
 8000840:	20000000 	.word	0x20000000

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000850:	4b33      	ldr	r3, [pc, #204]	@ (8000920 <HAL_InitTick+0xdc>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e05c      	b.n	8000916 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800085c:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <HAL_InitTick+0xe0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	2b04      	cmp	r3, #4
 8000866:	d10c      	bne.n	8000882 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000868:	4b2f      	ldr	r3, [pc, #188]	@ (8000928 <HAL_InitTick+0xe4>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <HAL_InitTick+0xdc>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000876:	fbb3 f3f1 	udiv	r3, r3, r1
 800087a:	fbb2 f3f3 	udiv	r3, r2, r3
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e037      	b.n	80008f2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000882:	f000 f9c7 	bl	8000c14 <HAL_SYSTICK_GetCLKSourceConfig>
 8000886:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d023      	beq.n	80008d6 <HAL_InitTick+0x92>
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2b02      	cmp	r3, #2
 8000892:	d82d      	bhi.n	80008f0 <HAL_InitTick+0xac>
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d003      	beq.n	80008a2 <HAL_InitTick+0x5e>
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d00d      	beq.n	80008bc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80008a0:	e026      	b.n	80008f0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <HAL_InitTick+0xe4>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <HAL_InitTick+0xdc>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80008b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b8:	60fb      	str	r3, [r7, #12]
        break;
 80008ba:	e01a      	b.n	80008f2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <HAL_InitTick+0xdc>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80008ca:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	60fb      	str	r3, [r7, #12]
        break;
 80008d4:	e00d      	b.n	80008f2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_InitTick+0xdc>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80008e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ec:	60fb      	str	r3, [r7, #12]
        break;
 80008ee:	e000      	b.n	80008f2 <HAL_InitTick+0xae>
        break;
 80008f0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f000 f914 	bl	8000b20 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e009      	b.n	8000916 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000902:	2200      	movs	r2, #0
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800090a:	f000 f8ef 	bl	8000aec <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800090e:	4a07      	ldr	r2, [pc, #28]	@ (800092c <HAL_InitTick+0xe8>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008
 8000924:	e000e010 	.word	0xe000e010
 8000928:	20000000 	.word	0x20000000
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	200000d4 	.word	0x200000d4

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200000d4 	.word	0x200000d4

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff ffee 	bl	8000958 <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <HAL_Delay+0x44>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffde 	bl	8000958 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	@ (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	@ (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	@ 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	@ 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff6a 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000afa:	f7ff ff81 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000afe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	6978      	ldr	r0, [r7, #20]
 8000b06:	f7ff ffb3 	bl	8000a70 <NVIC_EncodePriority>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff82 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b18:	bf00      	nop
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00d      	b.n	8000b52 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_SYSTICK_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <HAL_SYSTICK_Config+0x40>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_SYSTICK_Config+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <HAL_SYSTICK_Config+0x40>)
 8000b4a:	f043 0303 	orr.w	r3, r3, #3
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d844      	bhi.n	8000bfc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000b72:	a201      	add	r2, pc, #4	@ (adr r2, 8000b78 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b78:	08000b9b 	.word	0x08000b9b
 8000b7c:	08000bb9 	.word	0x08000bb9
 8000b80:	08000bdb 	.word	0x08000bdb
 8000b84:	08000bfd 	.word	0x08000bfd
 8000b88:	08000b8d 	.word	0x08000b8d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1e      	ldr	r2, [pc, #120]	@ (8000c0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6013      	str	r3, [r2, #0]
      break;
 8000b98:	e031      	b.n	8000bfe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ba0:	f023 0304 	bic.w	r3, r3, #4
 8000ba4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	4a18      	ldr	r2, [pc, #96]	@ (8000c10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000bb6:	e022      	b.n	8000bfe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bbe:	f023 0304 	bic.w	r3, r3, #4
 8000bc2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bce:	4a10      	ldr	r2, [pc, #64]	@ (8000c10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000bd8:	e011      	b.n	8000bfe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000be0:	f023 0304 	bic.w	r3, r3, #4
 8000be4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bec:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bf0:	4a07      	ldr	r2, [pc, #28]	@ (8000c10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bf2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000bfa:	e000      	b.n	8000bfe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000bfc:	bf00      	nop
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010
 8000c10:	46020c00 	.word	0x46020c00

08000c14 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000c26:	2304      	movs	r3, #4
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	e021      	b.n	8000c70 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000c36:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000c3e:	d011      	beq.n	8000c64 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000c46:	d810      	bhi.n	8000c6a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d004      	beq.n	8000c58 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000c54:	d003      	beq.n	8000c5e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000c56:	e008      	b.n	8000c6a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
        break;
 8000c5c:	e008      	b.n	8000c70 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
        break;
 8000c62:	e005      	b.n	8000c70 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000c64:	2302      	movs	r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
        break;
 8000c68:	e002      	b.n	8000c70 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
        break;
 8000c6e:	bf00      	nop
    }
  }
  return systick_source;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010
 8000c84:	46020c00 	.word	0x46020c00

08000c88 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	@ 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c9a:	e1ba      	b.n	8001012 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 81aa 	beq.w	800100c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a55      	ldr	r2, [pc, #340]	@ (8000e10 <HAL_GPIO_Init+0x188>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d15d      	bne.n	8000d7c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0201 	and.w	r2, r3, #1
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000cf0:	4a48      	ldr	r2, [pc, #288]	@ (8000e14 <HAL_GPIO_Init+0x18c>)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cf8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000cfa:	4a46      	ldr	r2, [pc, #280]	@ (8000e14 <HAL_GPIO_Init+0x18c>)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	4413      	add	r3, r2
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d12:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220b      	movs	r2, #11
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	3208      	adds	r2, #8
 8000d46:	69f9      	ldr	r1, [r7, #28]
 8000d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2202      	movs	r2, #2
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	69fa      	ldr	r2, [r7, #28]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e067      	b.n	8000e4c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x104>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b12      	cmp	r3, #18
 8000d8a:	d145      	bne.n	8000e18 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	f003 020f 	and.w	r2, r3, #15
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	69f9      	ldr	r1, [r7, #28]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e01e      	b.n	8000e4c <HAL_GPIO_Init+0x1c4>
 8000e0e:	bf00      	nop
 8000e10:	46020000 	.word	0x46020000
 8000e14:	08003e90 	.word	0x08003e90
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69fa      	ldr	r2, [r7, #28]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0203 	and.w	r2, r3, #3
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d00b      	beq.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e60:	2b11      	cmp	r3, #17
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b12      	cmp	r3, #18
 8000e6a:	d130      	bne.n	8000ece <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69fa      	ldr	r2, [r7, #28]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69fa      	ldr	r2, [r7, #28]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 0201 	and.w	r2, r3, #1
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d017      	beq.n	8000f06 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d07c      	beq.n	800100c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000f12:	4a47      	ldr	r2, [pc, #284]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3318      	adds	r3, #24
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	0a9a      	lsrs	r2, r3, #10
 8000f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001034 <HAL_GPIO_Init+0x3ac>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	00d2      	lsls	r2, r2, #3
 8000f46:	4093      	lsls	r3, r2
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000f4e:	4938      	ldr	r1, [pc, #224]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3318      	adds	r3, #24
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f5c:	4b34      	ldr	r3, [pc, #208]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000f80:	4a2b      	ldr	r2, [pc, #172]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000f86:	4b2a      	ldr	r3, [pc, #168]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000faa:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8000fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000fb6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000fd6:	4a16      	ldr	r2, [pc, #88]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8000fde:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8000fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001004:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_GPIO_Init+0x3a8>)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	f47f ae3d 	bne.w	8000c9c <HAL_GPIO_Init+0x14>
  }
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3724      	adds	r7, #36	@ 0x24
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	46022000 	.word	0x46022000
 8001034:	002f7f7f 	.word	0x002f7f7f

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001054:	e002      	b.n	800105c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4013      	ands	r3, r2
 8001080:	041a      	lsls	r2, r3, #16
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43d9      	mvns	r1, r3
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	400b      	ands	r3, r1
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e007      	b.n	80010ca <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 0204 	bic.w	r2, r3, #4
 80010c2:	4905      	ldr	r1, [pc, #20]	@ (80010d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40030400 	.word	0x40030400

080010dc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <HAL_ICACHE_Enable+0x1c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_ICACHE_Enable+0x1c>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40030400 	.word	0x40030400

080010fc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001104:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800110c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d10b      	bne.n	800112e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800111c:	d905      	bls.n	800112a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800111e:	4b33      	ldr	r3, [pc, #204]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	4a32      	ldr	r2, [pc, #200]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001128:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e057      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001134:	d90a      	bls.n	800114c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001136:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	4a2a      	ldr	r2, [pc, #168]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001148:	60d3      	str	r3, [r2, #12]
 800114a:	e007      	b.n	800115c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001154:	4925      	ldr	r1, [pc, #148]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4313      	orrs	r3, r2
 800115a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800115c:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a24      	ldr	r2, [pc, #144]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	099b      	lsrs	r3, r3, #6
 8001168:	2232      	movs	r2, #50	@ 0x32
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	099b      	lsrs	r3, r3, #6
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800117a:	e002      	b.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3b01      	subs	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x98>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f3      	bne.n	800117c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d01b      	beq.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a15      	ldr	r2, [pc, #84]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	099b      	lsrs	r3, r3, #6
 80011a6:	2232      	movs	r2, #50	@ 0x32
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	4a11      	ldr	r2, [pc, #68]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	099b      	lsrs	r3, r3, #6
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80011b8:	e002      	b.n	80011c0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3b01      	subs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80011c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f3      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e000      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	46020800 	.word	0x46020800
 80011f0:	20000000 	.word	0x20000000
 80011f4:	10624dd3 	.word	0x10624dd3

080011f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <HAL_PWREx_GetVoltageRange+0x18>)
 80011fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	46020800 	.word	0x46020800

08001214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	@ 0x38
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	f000 bec8 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122e:	4b99      	ldr	r3, [pc, #612]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001238:	4b96      	ldr	r3, [pc, #600]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 800123a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 816c 	beq.w	8001528 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001252:	2b00      	cmp	r3, #0
 8001254:	d007      	beq.n	8001266 <HAL_RCC_OscConfig+0x52>
 8001256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001258:	2b0c      	cmp	r3, #12
 800125a:	f040 80de 	bne.w	800141a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800125e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001260:	2b01      	cmp	r3, #1
 8001262:	f040 80da 	bne.w	800141a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	f000 bea5 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001278:	4b86      	ldr	r3, [pc, #536]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_RCC_OscConfig+0x7a>
 8001284:	4b83      	ldr	r3, [pc, #524]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800128c:	e005      	b.n	800129a <HAL_RCC_OscConfig+0x86>
 800128e:	4b81      	ldr	r3, [pc, #516]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001294:	041b      	lsls	r3, r3, #16
 8001296:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800129a:	4293      	cmp	r3, r2
 800129c:	d255      	bcs.n	800134a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800129e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10a      	bne.n	80012ba <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 f99d 	bl	80025e8 <RCC_SetFlashLatencyFromMSIRange>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	f000 be82 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80012ba:	4b76      	ldr	r3, [pc, #472]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4a75      	ldr	r2, [pc, #468]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80012c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012c4:	6093      	str	r3, [r2, #8]
 80012c6:	4b73      	ldr	r3, [pc, #460]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	4970      	ldr	r1, [pc, #448]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80012e0:	d309      	bcc.n	80012f6 <HAL_RCC_OscConfig+0xe2>
 80012e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	f023 021f 	bic.w	r2, r3, #31
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4969      	ldr	r1, [pc, #420]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60cb      	str	r3, [r1, #12]
 80012f4:	e07e      	b.n	80013f4 <HAL_RCC_OscConfig+0x1e0>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da0a      	bge.n	8001314 <HAL_RCC_OscConfig+0x100>
 80012fe:	4b65      	ldr	r3, [pc, #404]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	015b      	lsls	r3, r3, #5
 800130c:	4961      	ldr	r1, [pc, #388]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 800130e:	4313      	orrs	r3, r2
 8001310:	60cb      	str	r3, [r1, #12]
 8001312:	e06f      	b.n	80013f4 <HAL_RCC_OscConfig+0x1e0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800131c:	d30a      	bcc.n	8001334 <HAL_RCC_OscConfig+0x120>
 800131e:	4b5d      	ldr	r3, [pc, #372]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	4959      	ldr	r1, [pc, #356]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 800132e:	4313      	orrs	r3, r2
 8001330:	60cb      	str	r3, [r1, #12]
 8001332:	e05f      	b.n	80013f4 <HAL_RCC_OscConfig+0x1e0>
 8001334:	4b57      	ldr	r3, [pc, #348]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	03db      	lsls	r3, r3, #15
 8001342:	4954      	ldr	r1, [pc, #336]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001344:	4313      	orrs	r3, r2
 8001346:	60cb      	str	r3, [r1, #12]
 8001348:	e054      	b.n	80013f4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800134a:	4b52      	ldr	r3, [pc, #328]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	4a51      	ldr	r2, [pc, #324]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001350:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001354:	6093      	str	r3, [r2, #8]
 8001356:	4b4f      	ldr	r3, [pc, #316]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	494c      	ldr	r1, [pc, #304]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001364:	4313      	orrs	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001370:	d309      	bcc.n	8001386 <HAL_RCC_OscConfig+0x172>
 8001372:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f023 021f 	bic.w	r2, r3, #31
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4945      	ldr	r1, [pc, #276]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001380:	4313      	orrs	r3, r2
 8001382:	60cb      	str	r3, [r1, #12]
 8001384:	e028      	b.n	80013d8 <HAL_RCC_OscConfig+0x1c4>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	2b00      	cmp	r3, #0
 800138c:	da0a      	bge.n	80013a4 <HAL_RCC_OscConfig+0x190>
 800138e:	4b41      	ldr	r3, [pc, #260]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	493d      	ldr	r1, [pc, #244]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	60cb      	str	r3, [r1, #12]
 80013a2:	e019      	b.n	80013d8 <HAL_RCC_OscConfig+0x1c4>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ac:	d30a      	bcc.n	80013c4 <HAL_RCC_OscConfig+0x1b0>
 80013ae:	4b39      	ldr	r3, [pc, #228]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	4935      	ldr	r1, [pc, #212]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	60cb      	str	r3, [r1, #12]
 80013c2:	e009      	b.n	80013d8 <HAL_RCC_OscConfig+0x1c4>
 80013c4:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	03db      	lsls	r3, r3, #15
 80013d2:	4930      	ldr	r1, [pc, #192]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80013d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10a      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 f900 	bl	80025e8 <RCC_SetFlashLatencyFromMSIRange>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f000 bde5 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80013f4:	f001 f8de 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <HAL_RCC_OscConfig+0x284>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fa21 	bl	8000844 <HAL_InitTick>
 8001402:	4603      	mov	r3, r0
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 808a 	beq.w	8001526 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001416:	f000 bdd2 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d066      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1b      	ldr	r2, [pc, #108]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800142e:	f7ff fa93 	bl	8000958 <HAL_GetTick>
 8001432:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001434:	e009      	b.n	800144a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001436:	f7ff fa8f 	bl	8000958 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d902      	bls.n	800144a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	f000 bdba 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0ef      	beq.n	8001436 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	4a0e      	ldr	r2, [pc, #56]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 800145c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001460:	6093      	str	r3, [r2, #8]
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	4909      	ldr	r1, [pc, #36]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800147c:	d30e      	bcc.n	800149c <HAL_RCC_OscConfig+0x288>
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f023 021f 	bic.w	r2, r3, #31
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4902      	ldr	r1, [pc, #8]	@ (8001494 <HAL_RCC_OscConfig+0x280>)
 800148c:	4313      	orrs	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
 8001490:	e04a      	b.n	8001528 <HAL_RCC_OscConfig+0x314>
 8001492:	bf00      	nop
 8001494:	46020c00 	.word	0x46020c00
 8001498:	20000004 	.word	0x20000004
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	da0a      	bge.n	80014ba <HAL_RCC_OscConfig+0x2a6>
 80014a4:	4b98      	ldr	r3, [pc, #608]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	4995      	ldr	r1, [pc, #596]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
 80014b8:	e036      	b.n	8001528 <HAL_RCC_OscConfig+0x314>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014c2:	d30a      	bcc.n	80014da <HAL_RCC_OscConfig+0x2c6>
 80014c4:	4b90      	ldr	r3, [pc, #576]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	029b      	lsls	r3, r3, #10
 80014d2:	498d      	ldr	r1, [pc, #564]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
 80014d8:	e026      	b.n	8001528 <HAL_RCC_OscConfig+0x314>
 80014da:	4b8b      	ldr	r3, [pc, #556]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	03db      	lsls	r3, r3, #15
 80014e8:	4987      	ldr	r1, [pc, #540]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60cb      	str	r3, [r1, #12]
 80014ee:	e01b      	b.n	8001528 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80014f0:	4b85      	ldr	r3, [pc, #532]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a84      	ldr	r2, [pc, #528]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80014fc:	f7ff fa2c 	bl	8000958 <HAL_GetTick>
 8001500:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001502:	e009      	b.n	8001518 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001504:	f7ff fa28 	bl	8000958 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d902      	bls.n	8001518 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	f000 bd53 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001518:	4b7b      	ldr	r3, [pc, #492]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ef      	bne.n	8001504 <HAL_RCC_OscConfig+0x2f0>
 8001524:	e000      	b.n	8001528 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001526:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 808b 	beq.w	800164c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001538:	2b08      	cmp	r3, #8
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x334>
 800153c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d109      	bne.n	8001556 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001544:	2b03      	cmp	r3, #3
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d17d      	bne.n	800164c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	f000 bd34 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x35a>
 8001560:	4b69      	ldr	r3, [pc, #420]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a68      	ldr	r2, [pc, #416]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e041      	b.n	80015f2 <HAL_RCC_OscConfig+0x3de>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001576:	d112      	bne.n	800159e <HAL_RCC_OscConfig+0x38a>
 8001578:	4b63      	ldr	r3, [pc, #396]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a62      	ldr	r2, [pc, #392]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800157e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b60      	ldr	r3, [pc, #384]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a5f      	ldr	r2, [pc, #380]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800158a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a5c      	ldr	r2, [pc, #368]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e029      	b.n	80015f2 <HAL_RCC_OscConfig+0x3de>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80015a6:	d112      	bne.n	80015ce <HAL_RCC_OscConfig+0x3ba>
 80015a8:	4b57      	ldr	r3, [pc, #348]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a56      	ldr	r2, [pc, #344]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b54      	ldr	r3, [pc, #336]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a53      	ldr	r2, [pc, #332]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b51      	ldr	r3, [pc, #324]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a50      	ldr	r2, [pc, #320]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e011      	b.n	80015f2 <HAL_RCC_OscConfig+0x3de>
 80015ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b4b      	ldr	r3, [pc, #300]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a4a      	ldr	r2, [pc, #296]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b48      	ldr	r3, [pc, #288]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a47      	ldr	r2, [pc, #284]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80015f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d014      	beq.n	8001624 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80015fa:	f7ff f9ad 	bl	8000958 <HAL_GetTick>
 80015fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001600:	e009      	b.n	8001616 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001602:	f7ff f9a9 	bl	8000958 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b64      	cmp	r3, #100	@ 0x64
 800160e:	d902      	bls.n	8001616 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	f000 bcd4 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001616:	4b3c      	ldr	r3, [pc, #240]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0ef      	beq.n	8001602 <HAL_RCC_OscConfig+0x3ee>
 8001622:	e013      	b.n	800164c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001624:	f7ff f998 	bl	8000958 <HAL_GetTick>
 8001628:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162a:	e009      	b.n	8001640 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff f994 	bl	8000958 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d902      	bls.n	8001640 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	f000 bcbf 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001640:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ef      	bne.n	800162c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d05f      	beq.n	8001718 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800165a:	2b04      	cmp	r3, #4
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x456>
 800165e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001660:	2b0c      	cmp	r3, #12
 8001662:	d114      	bne.n	800168e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001666:	2b02      	cmp	r3, #2
 8001668:	d111      	bne.n	800168e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	f000 bca3 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001678:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	4920      	ldr	r1, [pc, #128]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	4313      	orrs	r3, r2
 800168a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800168c:	e044      	b.n	8001718 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d024      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a1b      	ldr	r2, [pc, #108]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80016a2:	f7ff f959 	bl	8000958 <HAL_GetTick>
 80016a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a8:	e009      	b.n	80016be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff f955 	bl	8000958 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d902      	bls.n	80016be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	f000 bc80 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0ef      	beq.n	80016aa <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	490b      	ldr	r1, [pc, #44]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	610b      	str	r3, [r1, #16]
 80016de:	e01b      	b.n	8001718 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80016ec:	f7ff f934 	bl	8000958 <HAL_GetTick>
 80016f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f4:	f7ff f930 	bl	8000958 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d904      	bls.n	800170c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	f000 bc5b 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
 8001708:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800170c:	4baf      	ldr	r3, [pc, #700]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ed      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80c8 	beq.w	80018b6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172c:	4ba7      	ldr	r3, [pc, #668]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d111      	bne.n	800175e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4ba4      	ldr	r3, [pc, #656]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001740:	4aa2      	ldr	r2, [pc, #648]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800174a:	4ba0      	ldr	r3, [pc, #640]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800174c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001758:	2301      	movs	r3, #1
 800175a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800175e:	4b9c      	ldr	r3, [pc, #624]	@ (80019d0 <HAL_RCC_OscConfig+0x7bc>)
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800176a:	4b99      	ldr	r3, [pc, #612]	@ (80019d0 <HAL_RCC_OscConfig+0x7bc>)
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	4a98      	ldr	r2, [pc, #608]	@ (80019d0 <HAL_RCC_OscConfig+0x7bc>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff f8ef 	bl	8000958 <HAL_GetTick>
 800177a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800177c:	e009      	b.n	8001792 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff f8eb 	bl	8000958 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d902      	bls.n	8001792 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	f000 bc16 	b.w	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001792:	4b8f      	ldr	r3, [pc, #572]	@ (80019d0 <HAL_RCC_OscConfig+0x7bc>)
 8001794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0ef      	beq.n	800177e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d05f      	beq.n	8001866 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80017a6:	4b89      	ldr	r3, [pc, #548]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 80017a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ac:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699a      	ldr	r2, [r3, #24]
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d037      	beq.n	800182c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d006      	beq.n	80017d4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e3f4      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01b      	beq.n	8001816 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80017de:	4b7b      	ldr	r3, [pc, #492]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 80017e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017e4:	4a79      	ldr	r2, [pc, #484]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 80017e6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80017ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80017ee:	f7ff f8b3 	bl	8000958 <HAL_GetTick>
 80017f2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff f8af 	bl	8000958 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b05      	cmp	r3, #5
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e3da      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001808:	4b70      	ldr	r3, [pc, #448]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800180a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800180e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ef      	bne.n	80017f6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001816:	4b6d      	ldr	r3, [pc, #436]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800181c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4969      	ldr	r1, [pc, #420]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001826:	4313      	orrs	r3, r2
 8001828:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800182c:	4b67      	ldr	r3, [pc, #412]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800182e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001832:	4a66      	ldr	r2, [pc, #408]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001834:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001838:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800183c:	f7ff f88c 	bl	8000958 <HAL_GetTick>
 8001840:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff f888 	bl	8000958 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b05      	cmp	r3, #5
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e3b3      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001856:	4b5d      	ldr	r3, [pc, #372]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800185c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ef      	beq.n	8001844 <HAL_RCC_OscConfig+0x630>
 8001864:	e01b      	b.n	800189e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001866:	4b59      	ldr	r3, [pc, #356]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800186c:	4a57      	ldr	r2, [pc, #348]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800186e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001872:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001876:	f7ff f86f 	bl	8000958 <HAL_GetTick>
 800187a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff f86b 	bl	8000958 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b05      	cmp	r3, #5
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e396      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001890:	4b4e      	ldr	r3, [pc, #312]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ef      	bne.n	800187e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800189e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a6:	4b49      	ldr	r3, [pc, #292]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 80018a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ac:	4a47      	ldr	r2, [pc, #284]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 80018ae:	f023 0304 	bic.w	r3, r3, #4
 80018b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8111 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ca:	4b40      	ldr	r3, [pc, #256]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 80018cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d111      	bne.n	80018fc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	4b3c      	ldr	r3, [pc, #240]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 80018da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018de:	4a3b      	ldr	r2, [pc, #236]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80018e8:	4b38      	ldr	r3, [pc, #224]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 80018ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018fc:	4b34      	ldr	r3, [pc, #208]	@ (80019d0 <HAL_RCC_OscConfig+0x7bc>)
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d118      	bne.n	800193a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001908:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <HAL_RCC_OscConfig+0x7bc>)
 800190a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190c:	4a30      	ldr	r2, [pc, #192]	@ (80019d0 <HAL_RCC_OscConfig+0x7bc>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001914:	f7ff f820 	bl	8000958 <HAL_GetTick>
 8001918:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191c:	f7ff f81c 	bl	8000958 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e347      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800192e:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <HAL_RCC_OscConfig+0x7bc>)
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01f      	beq.n	8001986 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	d010      	beq.n	8001974 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001958:	4a1c      	ldr	r2, [pc, #112]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001962:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001968:	4a18      	ldr	r2, [pc, #96]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001972:	e018      	b.n	80019a6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800197a:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001984:	e00f      	b.n	80019a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800198c:	4a0f      	ldr	r2, [pc, #60]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001996:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 8001998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800199c:	4a0b      	ldr	r2, [pc, #44]	@ (80019cc <HAL_RCC_OscConfig+0x7b8>)
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d057      	beq.n	8001a5e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80019ae:	f7fe ffd3 	bl	8000958 <HAL_GetTick>
 80019b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b4:	e00e      	b.n	80019d4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7fe ffcf 	bl	8000958 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d905      	bls.n	80019d4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e2f8      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
 80019cc:	46020c00 	.word	0x46020c00
 80019d0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d4:	4b9c      	ldr	r3, [pc, #624]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 80019d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0e9      	beq.n	80019b6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01b      	beq.n	8001a26 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019ee:	4b96      	ldr	r3, [pc, #600]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 80019f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019f4:	4a94      	ldr	r2, [pc, #592]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 80019f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7fe ffaa 	bl	8000958 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e2d3      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a16:	4b8c      	ldr	r3, [pc, #560]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ed      	beq.n	8001a00 <HAL_RCC_OscConfig+0x7ec>
 8001a24:	e053      	b.n	8001ace <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a26:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a2c:	4a86      	ldr	r2, [pc, #536]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7fe ff8e 	bl	8000958 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e2b7      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ed      	bne.n	8001a38 <HAL_RCC_OscConfig+0x824>
 8001a5c:	e037      	b.n	8001ace <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001a5e:	f7fe ff7b 	bl	8000958 <HAL_GetTick>
 8001a62:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7fe ff77 	bl	8000958 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e2a0      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a7c:	4b72      	ldr	r3, [pc, #456]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ed      	bne.n	8001a66 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01a      	beq.n	8001ace <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a98:	4b6b      	ldr	r3, [pc, #428]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a9e:	4a6a      	ldr	r2, [pc, #424]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7fe ff55 	bl	8000958 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e27e      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ac0:	4b61      	ldr	r3, [pc, #388]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ed      	bne.n	8001aaa <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ace:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001adc:	4a5a      	ldr	r2, [pc, #360]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d036      	beq.n	8001b60 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d019      	beq.n	8001b2e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001afa:	4b53      	ldr	r3, [pc, #332]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a52      	ldr	r2, [pc, #328]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b04:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b06:	f7fe ff27 	bl	8000958 <HAL_GetTick>
 8001b0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b0e:	f7fe ff23 	bl	8000958 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e24e      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b20:	4b49      	ldr	r3, [pc, #292]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x8fa>
 8001b2c:	e018      	b.n	8001b60 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001b2e:	4b46      	ldr	r3, [pc, #280]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a45      	ldr	r2, [pc, #276]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001b34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b38:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b3a:	f7fe ff0d 	bl	8000958 <HAL_GetTick>
 8001b3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b42:	f7fe ff09 	bl	8000958 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e234      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b54:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d036      	beq.n	8001bda <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d019      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001b74:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a33      	ldr	r2, [pc, #204]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b7e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b80:	f7fe feea 	bl	8000958 <HAL_GetTick>
 8001b84:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b88:	f7fe fee6 	bl	8000958 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e211      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x974>
 8001ba6:	e018      	b.n	8001bda <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a26      	ldr	r2, [pc, #152]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001bb4:	f7fe fed0 	bl	8000958 <HAL_GetTick>
 8001bb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001bbc:	f7fe fecc 	bl	8000958 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1f7      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001bce:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d07f      	beq.n	8001ce6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d062      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001bee:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4a15      	ldr	r2, [pc, #84]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001bf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bf8:	6093      	str	r3, [r2, #8]
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c06:	4910      	ldr	r1, [pc, #64]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001c14:	d309      	bcc.n	8001c2a <HAL_RCC_OscConfig+0xa16>
 8001c16:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f023 021f 	bic.w	r2, r3, #31
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4909      	ldr	r1, [pc, #36]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60cb      	str	r3, [r1, #12]
 8001c28:	e02a      	b.n	8001c80 <HAL_RCC_OscConfig+0xa6c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da0c      	bge.n	8001c4c <HAL_RCC_OscConfig+0xa38>
 8001c32:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	4901      	ldr	r1, [pc, #4]	@ (8001c48 <HAL_RCC_OscConfig+0xa34>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60cb      	str	r3, [r1, #12]
 8001c46:	e01b      	b.n	8001c80 <HAL_RCC_OscConfig+0xa6c>
 8001c48:	46020c00 	.word	0x46020c00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c54:	d30a      	bcc.n	8001c6c <HAL_RCC_OscConfig+0xa58>
 8001c56:	4ba1      	ldr	r3, [pc, #644]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	029b      	lsls	r3, r3, #10
 8001c64:	499d      	ldr	r1, [pc, #628]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60cb      	str	r3, [r1, #12]
 8001c6a:	e009      	b.n	8001c80 <HAL_RCC_OscConfig+0xa6c>
 8001c6c:	4b9b      	ldr	r3, [pc, #620]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	03db      	lsls	r3, r3, #15
 8001c7a:	4998      	ldr	r1, [pc, #608]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001c80:	4b96      	ldr	r3, [pc, #600]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a95      	ldr	r2, [pc, #596]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c8c:	f7fe fe64 	bl	8000958 <HAL_GetTick>
 8001c90:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001c94:	f7fe fe60 	bl	8000958 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e18b      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001ca6:	4b8d      	ldr	r3, [pc, #564]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0xa80>
 8001cb2:	e018      	b.n	8001ce6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001cb4:	4b89      	ldr	r3, [pc, #548]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a88      	ldr	r2, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001cba:	f023 0310 	bic.w	r3, r3, #16
 8001cbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001cc0:	f7fe fe4a 	bl	8000958 <HAL_GetTick>
 8001cc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001cc8:	f7fe fe46 	bl	8000958 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e171      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001cda:	4b80      	ldr	r3, [pc, #512]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8166 	beq.w	8001fbc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf6:	4b79      	ldr	r3, [pc, #484]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	f000 80f2 	beq.w	8001ee8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	f040 80c5 	bne.w	8001e98 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b73      	ldr	r3, [pc, #460]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a72      	ldr	r2, [pc, #456]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001d14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d1a:	f7fe fe1d 	bl	8000958 <HAL_GetTick>
 8001d1e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7fe fe19 	bl	8000958 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e144      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d34:	4b69      	ldr	r3, [pc, #420]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d40:	4b66      	ldr	r3, [pc, #408]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d111      	bne.n	8001d72 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b63      	ldr	r3, [pc, #396]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d54:	4a61      	ldr	r2, [pc, #388]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001d72:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee0 <HAL_RCC_OscConfig+0xccc>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d7e:	d102      	bne.n	8001d86 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001d86:	4b56      	ldr	r3, [pc, #344]	@ (8001ee0 <HAL_RCC_OscConfig+0xccc>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a55      	ldr	r2, [pc, #340]	@ (8001ee0 <HAL_RCC_OscConfig+0xccc>)
 8001d8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d90:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001d92:	4b52      	ldr	r3, [pc, #328]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d9a:	f023 0303 	bic.w	r3, r3, #3
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001da6:	3a01      	subs	r2, #1
 8001da8:	0212      	lsls	r2, r2, #8
 8001daa:	4311      	orrs	r1, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001db0:	430a      	orrs	r2, r1
 8001db2:	494a      	ldr	r1, [pc, #296]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001db8:	4b48      	ldr	r3, [pc, #288]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dbc:	4b49      	ldr	r3, [pc, #292]	@ (8001ee4 <HAL_RCC_OscConfig+0xcd0>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dc4:	3a01      	subs	r2, #1
 8001dc6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001dce:	3a01      	subs	r2, #1
 8001dd0:	0252      	lsls	r2, r2, #9
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	0412      	lsls	r2, r2, #16
 8001dde:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001de8:	3a01      	subs	r2, #1
 8001dea:	0612      	lsls	r2, r2, #24
 8001dec:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8001df0:	430a      	orrs	r2, r1
 8001df2:	493a      	ldr	r1, [pc, #232]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001df8:	4b38      	ldr	r3, [pc, #224]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	4a37      	ldr	r2, [pc, #220]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001dfe:	f023 0310 	bic.w	r3, r3, #16
 8001e02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	4a34      	ldr	r2, [pc, #208]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001e0e:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	4a32      	ldr	r2, [pc, #200]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e14:	f043 0310 	orr.w	r3, r3, #16
 8001e18:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001e1a:	4b30      	ldr	r3, [pc, #192]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1e:	f023 020c 	bic.w	r2, r3, #12
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	492d      	ldr	r1, [pc, #180]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8001e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001e34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <HAL_RCC_OscConfig+0xccc>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a29      	ldr	r2, [pc, #164]	@ (8001ee0 <HAL_RCC_OscConfig+0xccc>)
 8001e3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e3e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001e40:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e4e:	4a23      	ldr	r2, [pc, #140]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001e58:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e64:	f7fe fd78 	bl	8000958 <HAL_GetTick>
 8001e68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe fd74 	bl	8000958 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e09f      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e7e:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e8a:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8e:	4a13      	ldr	r2, [pc, #76]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e94:	6293      	str	r3, [r2, #40]	@ 0x28
 8001e96:	e091      	b.n	8001fbc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001e98:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ea2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ea4:	f7fe fd58 	bl	8000958 <HAL_GetTick>
 8001ea8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7fe fd54 	bl	8000958 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e07f      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ece:	4a03      	ldr	r2, [pc, #12]	@ (8001edc <HAL_RCC_OscConfig+0xcc8>)
 8001ed0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001ed4:	f023 0303 	bic.w	r3, r3, #3
 8001ed8:	6293      	str	r3, [r2, #40]	@ 0x28
 8001eda:	e06f      	b.n	8001fbc <HAL_RCC_OscConfig+0xda8>
 8001edc:	46020c00 	.word	0x46020c00
 8001ee0:	46020800 	.word	0x46020800
 8001ee4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001ee8:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <HAL_RCC_OscConfig+0xdb4>)
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001eee:	4b36      	ldr	r3, [pc, #216]	@ (8001fc8 <HAL_RCC_OscConfig+0xdb4>)
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d039      	beq.n	8001f70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0203 	and.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d132      	bne.n	8001f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d129      	bne.n	8001f70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d122      	bne.n	8001f70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f34:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d11a      	bne.n	8001f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	0a5b      	lsrs	r3, r3, #9
 8001f3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d111      	bne.n	8001f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	0c1b      	lsrs	r3, r3, #16
 8001f50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f58:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d108      	bne.n	8001f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	0e1b      	lsrs	r3, r3, #24
 8001f62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e024      	b.n	8001fbe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f74:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <HAL_RCC_OscConfig+0xdb4>)
 8001f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d01a      	beq.n	8001fbc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_RCC_OscConfig+0xdb4>)
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc8 <HAL_RCC_OscConfig+0xdb4>)
 8001f8c:	f023 0310 	bic.w	r3, r3, #16
 8001f90:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7fe fce1 	bl	8000958 <HAL_GetTick>
 8001f96:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001f98:	bf00      	nop
 8001f9a:	f7fe fcdd 	bl	8000958 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d0f9      	beq.n	8001f9a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	4a07      	ldr	r2, [pc, #28]	@ (8001fc8 <HAL_RCC_OscConfig+0xdb4>)
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_RCC_OscConfig+0xdb4>)
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_RCC_OscConfig+0xdb4>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3738      	adds	r7, #56	@ 0x38
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	46020c00 	.word	0x46020c00

08001fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e1d9      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b9b      	ldr	r3, [pc, #620]	@ (8002250 <HAL_RCC_ClockConfig+0x284>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b98      	ldr	r3, [pc, #608]	@ (8002250 <HAL_RCC_ClockConfig+0x284>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 020f 	bic.w	r2, r3, #15
 8001ff6:	4996      	ldr	r1, [pc, #600]	@ (8002250 <HAL_RCC_ClockConfig+0x284>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b94      	ldr	r3, [pc, #592]	@ (8002250 <HAL_RCC_ClockConfig+0x284>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e1c1      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	4b8c      	ldr	r3, [pc, #560]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002028:	429a      	cmp	r2, r3
 800202a:	d908      	bls.n	800203e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800202c:	4b89      	ldr	r3, [pc, #548]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 800202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002030:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	4986      	ldr	r1, [pc, #536]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 800203a:	4313      	orrs	r3, r2
 800203c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	4b81      	ldr	r3, [pc, #516]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002058:	429a      	cmp	r2, r3
 800205a:	d909      	bls.n	8002070 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800205c:	4b7d      	ldr	r3, [pc, #500]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	497a      	ldr	r1, [pc, #488]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 800206c:	4313      	orrs	r3, r2
 800206e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4b74      	ldr	r3, [pc, #464]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002088:	429a      	cmp	r2, r3
 800208a:	d908      	bls.n	800209e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800208c:	4b71      	ldr	r3, [pc, #452]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	496e      	ldr	r1, [pc, #440]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 800209a:	4313      	orrs	r3, r2
 800209c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	4b69      	ldr	r3, [pc, #420]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d908      	bls.n	80020cc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80020ba:	4b66      	ldr	r3, [pc, #408]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 020f 	bic.w	r2, r3, #15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4963      	ldr	r1, [pc, #396]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80d2 	beq.w	800227e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d143      	bne.n	800216e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80020e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d110      	bne.n	8002116 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	4b57      	ldr	r3, [pc, #348]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fa:	4a56      	ldr	r2, [pc, #344]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002104:	4b53      	ldr	r3, [pc, #332]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002116:	f7fe fc1f 	bl	8000958 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800211c:	4b4e      	ldr	r3, [pc, #312]	@ (8002258 <HAL_RCC_ClockConfig+0x28c>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00f      	beq.n	8002148 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800212a:	f7fe fc15 	bl	8000958 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e12b      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800213c:	4b46      	ldr	r3, [pc, #280]	@ (8002258 <HAL_RCC_ClockConfig+0x28c>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002154:	4a3f      	ldr	r2, [pc, #252]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800215e:	4b3d      	ldr	r3, [pc, #244]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d121      	bne.n	80021ae <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e112      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002176:	4b37      	ldr	r3, [pc, #220]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e106      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800218e:	4b31      	ldr	r3, [pc, #196]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0fa      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219e:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0f2      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b29      	ldr	r3, [pc, #164]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4926      	ldr	r1, [pc, #152]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80021c0:	f7fe fbca 	bl	8000958 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d112      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fbc2 	bl	8000958 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0d6      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d1ee      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x204>
 80021f2:	e044      	b.n	800227e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d112      	bne.n	8002222 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fe:	f7fe fbab 	bl	8000958 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0bf      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002214:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d1ee      	bne.n	80021fe <HAL_RCC_ClockConfig+0x232>
 8002220:	e02d      	b.n	800227e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d123      	bne.n	8002272 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7fe fb94 	bl	8000958 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e0a8      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <HAL_RCC_ClockConfig+0x288>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ee      	bne.n	800222c <HAL_RCC_ClockConfig+0x260>
 800224e:	e016      	b.n	800227e <HAL_RCC_ClockConfig+0x2b2>
 8002250:	40022000 	.word	0x40022000
 8002254:	46020c00 	.word	0x46020c00
 8002258:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225c:	f7fe fb7c 	bl	8000958 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e090      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002272:	4b4a      	ldr	r3, [pc, #296]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d1ee      	bne.n	800225c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	4b43      	ldr	r3, [pc, #268]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	429a      	cmp	r2, r3
 8002298:	d208      	bcs.n	80022ac <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800229a:	4b40      	ldr	r3, [pc, #256]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f023 020f 	bic.w	r2, r3, #15
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	493d      	ldr	r1, [pc, #244]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	4b3c      	ldr	r3, [pc, #240]	@ (80023a0 <HAL_RCC_ClockConfig+0x3d4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d210      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b39      	ldr	r3, [pc, #228]	@ (80023a0 <HAL_RCC_ClockConfig+0x3d4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 020f 	bic.w	r2, r3, #15
 80022c2:	4937      	ldr	r1, [pc, #220]	@ (80023a0 <HAL_RCC_ClockConfig+0x3d4>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b35      	ldr	r3, [pc, #212]	@ (80023a0 <HAL_RCC_ClockConfig+0x3d4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e05b      	b.n	8002394 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d010      	beq.n	800230a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4b2b      	ldr	r3, [pc, #172]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d208      	bcs.n	800230a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	4b28      	ldr	r3, [pc, #160]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4925      	ldr	r1, [pc, #148]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 8002306:	4313      	orrs	r3, r2
 8002308:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002324:	429a      	cmp	r2, r3
 8002326:	d209      	bcs.n	800233c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002328:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	4919      	ldr	r1, [pc, #100]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	d010      	beq.n	800236a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002354:	429a      	cmp	r2, r3
 8002356:	d208      	bcs.n	800236a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002358:	4b10      	ldr	r3, [pc, #64]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	490d      	ldr	r1, [pc, #52]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 8002366:	4313      	orrs	r3, r2
 8002368:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800236a:	f000 f821 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_RCC_ClockConfig+0x3d0>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	490a      	ldr	r1, [pc, #40]	@ (80023a4 <HAL_RCC_ClockConfig+0x3d8>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
 8002380:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <HAL_RCC_ClockConfig+0x3dc>)
 8002382:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002384:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <HAL_RCC_ClockConfig+0x3e0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fa5b 	bl	8000844 <HAL_InitTick>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]

  return status;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	46020c00 	.word	0x46020c00
 80023a0:	40022000 	.word	0x40022000
 80023a4:	08003e40 	.word	0x08003e40
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b08b      	sub	sp, #44	@ 0x2c
 80023b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023be:	4b78      	ldr	r3, [pc, #480]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c8:	4b75      	ldr	r3, [pc, #468]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x34>
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d121      	bne.n	8002422 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d11e      	bne.n	8002422 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80023e4:	4b6e      	ldr	r3, [pc, #440]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80023f0:	4b6b      	ldr	r3, [pc, #428]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023f6:	0b1b      	lsrs	r3, r3, #12
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fe:	e005      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002400:	4b67      	ldr	r3, [pc, #412]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	0f1b      	lsrs	r3, r3, #28
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800240c:	4a65      	ldr	r2, [pc, #404]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d110      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002420:	e00d      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002422:	4b5f      	ldr	r3, [pc, #380]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b04      	cmp	r3, #4
 800242c:	d102      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800242e:	4b5e      	ldr	r3, [pc, #376]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	e004      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b08      	cmp	r3, #8
 8002438:	d101      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800243a:	4b5b      	ldr	r3, [pc, #364]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800243c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b0c      	cmp	r3, #12
 8002442:	f040 80a5 	bne.w	8002590 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002446:	4b56      	ldr	r3, [pc, #344]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002450:	4b53      	ldr	r3, [pc, #332]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3301      	adds	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800245e:	4b50      	ldr	r3, [pc, #320]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800246a:	4b4d      	ldr	r3, [pc, #308]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800246c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002482:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d003      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0xe4>
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d022      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x128>
 8002492:	e043      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80025ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80024a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a6:	4b3e      	ldr	r3, [pc, #248]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80024a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80024ba:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80025b0 <HAL_RCC_GetSysClockFreq+0x200>
 80024be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024d6:	e046      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80025ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80024e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ea:	4b2d      	ldr	r3, [pc, #180]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80024ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80024fe:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80025b0 <HAL_RCC_GetSysClockFreq+0x200>
 8002502:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002506:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800250a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800250e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800251a:	e024      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002534:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253c:	ee07 3a90 	vmov	s15, r3
 8002540:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002544:	ed97 6a01 	vldr	s12, [r7, #4]
 8002548:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80025b0 <HAL_RCC_GetSysClockFreq+0x200>
 800254c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002550:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002558:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800255c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002560:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002564:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256a:	0e1b      	lsrs	r3, r3, #24
 800256c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002570:	3301      	adds	r3, #1
 8002572:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800257e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258a:	ee17 3a90 	vmov	r3, s15
 800258e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002590:	6a3b      	ldr	r3, [r7, #32]
}
 8002592:	4618      	mov	r0, r3
 8002594:	372c      	adds	r7, #44	@ 0x2c
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	46020c00 	.word	0x46020c00
 80025a4:	08003e50 	.word	0x08003e50
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	4b742400 	.word	0x4b742400
 80025b0:	46000000 	.word	0x46000000

080025b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80025b8:	f7ff fefa 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <HAL_RCC_GetHCLKFreq+0x28>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4906      	ldr	r1, [pc, #24]	@ (80025e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80025c8:	5ccb      	ldrb	r3, [r1, r3]
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80025d0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80025d2:	4b04      	ldr	r3, [pc, #16]	@ (80025e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80025d4:	681b      	ldr	r3, [r3, #0]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	46020c00 	.word	0x46020c00
 80025e0:	08003e40 	.word	0x08003e40
 80025e4:	20000000 	.word	0x20000000

080025e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025f0:	4b3e      	ldr	r3, [pc, #248]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025fe:	f7fe fdfb 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8002602:	6178      	str	r0, [r7, #20]
 8002604:	e019      	b.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b39      	ldr	r3, [pc, #228]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260c:	4a37      	ldr	r2, [pc, #220]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002616:	4b35      	ldr	r3, [pc, #212]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002624:	f7fe fde8 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8002628:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b30      	ldr	r3, [pc, #192]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002630:	4a2e      	ldr	r2, [pc, #184]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002640:	d003      	beq.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002648:	d109      	bne.n	800265e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002650:	d202      	bcs.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002652:	2301      	movs	r3, #1
 8002654:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002656:	e033      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800265c:	e030      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002664:	d208      	bcs.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266c:	d102      	bne.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800266e:	2303      	movs	r3, #3
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	e025      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e035      	b.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800267e:	d90f      	bls.n	80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800268c:	d902      	bls.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	e015      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002694:	2301      	movs	r3, #1
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e012      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	e00f      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026a6:	d109      	bne.n	80026bc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ae:	d102      	bne.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80026b0:	2301      	movs	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e004      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80026b6:	2302      	movs	r3, #2
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	e001      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80026bc:	2301      	movs	r3, #1
 80026be:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 020f 	bic.w	r2, r3, #15
 80026c8:	4909      	ldr	r1, [pc, #36]	@ (80026f0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80026d0:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	46020c00 	.word	0x46020c00
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e049      	b.n	800279a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fd ff0e 	bl	800053c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f000 f9d0 	bl	8002ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d001      	beq.n	80027bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e06a      	b.n	8002892 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a35      	ldr	r2, [pc, #212]	@ (80028a0 <HAL_TIM_Base_Start+0xfc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d040      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a34      	ldr	r2, [pc, #208]	@ (80028a4 <HAL_TIM_Base_Start+0x100>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d03b      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e0:	d036      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027ea:	d031      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a2d      	ldr	r2, [pc, #180]	@ (80028a8 <HAL_TIM_Base_Start+0x104>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d02c      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2c      	ldr	r2, [pc, #176]	@ (80028ac <HAL_TIM_Base_Start+0x108>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d027      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2a      	ldr	r2, [pc, #168]	@ (80028b0 <HAL_TIM_Base_Start+0x10c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d022      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a29      	ldr	r2, [pc, #164]	@ (80028b4 <HAL_TIM_Base_Start+0x110>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d01d      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a27      	ldr	r2, [pc, #156]	@ (80028b8 <HAL_TIM_Base_Start+0x114>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d018      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a26      	ldr	r2, [pc, #152]	@ (80028bc <HAL_TIM_Base_Start+0x118>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a24      	ldr	r2, [pc, #144]	@ (80028c0 <HAL_TIM_Base_Start+0x11c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00e      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a23      	ldr	r2, [pc, #140]	@ (80028c4 <HAL_TIM_Base_Start+0x120>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a21      	ldr	r2, [pc, #132]	@ (80028c8 <HAL_TIM_Base_Start+0x124>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d004      	beq.n	8002850 <HAL_TIM_Base_Start+0xac>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a20      	ldr	r2, [pc, #128]	@ (80028cc <HAL_TIM_Base_Start+0x128>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d115      	bne.n	800287c <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <HAL_TIM_Base_Start+0x12c>)
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b06      	cmp	r3, #6
 8002860:	d015      	beq.n	800288e <HAL_TIM_Base_Start+0xea>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002868:	d011      	beq.n	800288e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287a:	e008      	b.n	800288e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e000      	b.n	8002890 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	50012c00 	.word	0x50012c00
 80028a8:	40000400 	.word	0x40000400
 80028ac:	50000400 	.word	0x50000400
 80028b0:	40000800 	.word	0x40000800
 80028b4:	50000800 	.word	0x50000800
 80028b8:	40000c00 	.word	0x40000c00
 80028bc:	50000c00 	.word	0x50000c00
 80028c0:	40013400 	.word	0x40013400
 80028c4:	50013400 	.word	0x50013400
 80028c8:	40014000 	.word	0x40014000
 80028cc:	50014000 	.word	0x50014000
 80028d0:	00010007 	.word	0x00010007

080028d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_TIM_ConfigClockSource+0x1c>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e0e6      	b.n	8002abe <HAL_TIM_ConfigClockSource+0x1ea>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800290e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800291a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a67      	ldr	r2, [pc, #412]	@ (8002ac8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	f000 80b1 	beq.w	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 8002930:	4a65      	ldr	r2, [pc, #404]	@ (8002ac8 <HAL_TIM_ConfigClockSource+0x1f4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f200 80b6 	bhi.w	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 8002938:	4a64      	ldr	r2, [pc, #400]	@ (8002acc <HAL_TIM_ConfigClockSource+0x1f8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	f000 80a9 	beq.w	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 8002940:	4a62      	ldr	r2, [pc, #392]	@ (8002acc <HAL_TIM_ConfigClockSource+0x1f8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	f200 80ae 	bhi.w	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 8002948:	4a61      	ldr	r2, [pc, #388]	@ (8002ad0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	f000 80a1 	beq.w	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 8002950:	4a5f      	ldr	r2, [pc, #380]	@ (8002ad0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	f200 80a6 	bhi.w	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 8002958:	4a5e      	ldr	r2, [pc, #376]	@ (8002ad4 <HAL_TIM_ConfigClockSource+0x200>)
 800295a:	4293      	cmp	r3, r2
 800295c:	f000 8099 	beq.w	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 8002960:	4a5c      	ldr	r2, [pc, #368]	@ (8002ad4 <HAL_TIM_ConfigClockSource+0x200>)
 8002962:	4293      	cmp	r3, r2
 8002964:	f200 809e 	bhi.w	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 8002968:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800296c:	f000 8091 	beq.w	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 8002970:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002974:	f200 8096 	bhi.w	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 8002978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800297c:	f000 8089 	beq.w	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 8002980:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002984:	f200 808e 	bhi.w	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 8002988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800298c:	d03e      	beq.n	8002a0c <HAL_TIM_ConfigClockSource+0x138>
 800298e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002992:	f200 8087 	bhi.w	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800299a:	f000 8086 	beq.w	8002aaa <HAL_TIM_ConfigClockSource+0x1d6>
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a2:	d87f      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 80029a4:	2b70      	cmp	r3, #112	@ 0x70
 80029a6:	d01a      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x10a>
 80029a8:	2b70      	cmp	r3, #112	@ 0x70
 80029aa:	d87b      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 80029ac:	2b60      	cmp	r3, #96	@ 0x60
 80029ae:	d050      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0x17e>
 80029b0:	2b60      	cmp	r3, #96	@ 0x60
 80029b2:	d877      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 80029b4:	2b50      	cmp	r3, #80	@ 0x50
 80029b6:	d03c      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x15e>
 80029b8:	2b50      	cmp	r3, #80	@ 0x50
 80029ba:	d873      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 80029bc:	2b40      	cmp	r3, #64	@ 0x40
 80029be:	d058      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x19e>
 80029c0:	2b40      	cmp	r3, #64	@ 0x40
 80029c2:	d86f      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 80029c4:	2b30      	cmp	r3, #48	@ 0x30
 80029c6:	d064      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 80029c8:	2b30      	cmp	r3, #48	@ 0x30
 80029ca:	d86b      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d060      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d867      	bhi.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05c      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d05a      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x1be>
 80029dc:	e062      	b.n	8002aa4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ee:	f000 f9f5 	bl	8002ddc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	609a      	str	r2, [r3, #8]
      break;
 8002a0a:	e04f      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a1c:	f000 f9de 	bl	8002ddc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a2e:	609a      	str	r2, [r3, #8]
      break;
 8002a30:	e03c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f000 f950 	bl	8002ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2150      	movs	r1, #80	@ 0x50
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f9a9 	bl	8002da2 <TIM_ITRx_SetConfig>
      break;
 8002a50:	e02c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f000 f96f 	bl	8002d42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2160      	movs	r1, #96	@ 0x60
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f999 	bl	8002da2 <TIM_ITRx_SetConfig>
      break;
 8002a70:	e01c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f000 f930 	bl	8002ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2140      	movs	r1, #64	@ 0x40
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f989 	bl	8002da2 <TIM_ITRx_SetConfig>
      break;
 8002a90:	e00c      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	f000 f980 	bl	8002da2 <TIM_ITRx_SetConfig>
      break;
 8002aa2:	e003      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e000      	b.n	8002aac <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8002aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	00100070 	.word	0x00100070
 8002acc:	00100040 	.word	0x00100040
 8002ad0:	00100030 	.word	0x00100030
 8002ad4:	00100020 	.word	0x00100020

08002ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca4 <TIM_Base_SetConfig+0x1cc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d02b      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a6d      	ldr	r2, [pc, #436]	@ (8002ca8 <TIM_Base_SetConfig+0x1d0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d027      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afe:	d023      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b06:	d01f      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a68      	ldr	r2, [pc, #416]	@ (8002cac <TIM_Base_SetConfig+0x1d4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d01b      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a67      	ldr	r2, [pc, #412]	@ (8002cb0 <TIM_Base_SetConfig+0x1d8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d017      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a66      	ldr	r2, [pc, #408]	@ (8002cb4 <TIM_Base_SetConfig+0x1dc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d013      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a65      	ldr	r2, [pc, #404]	@ (8002cb8 <TIM_Base_SetConfig+0x1e0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00f      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a64      	ldr	r2, [pc, #400]	@ (8002cbc <TIM_Base_SetConfig+0x1e4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00b      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a63      	ldr	r2, [pc, #396]	@ (8002cc0 <TIM_Base_SetConfig+0x1e8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a62      	ldr	r2, [pc, #392]	@ (8002cc4 <TIM_Base_SetConfig+0x1ec>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d003      	beq.n	8002b48 <TIM_Base_SetConfig+0x70>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a61      	ldr	r2, [pc, #388]	@ (8002cc8 <TIM_Base_SetConfig+0x1f0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d108      	bne.n	8002b5a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a51      	ldr	r2, [pc, #324]	@ (8002ca4 <TIM_Base_SetConfig+0x1cc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d043      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a50      	ldr	r2, [pc, #320]	@ (8002ca8 <TIM_Base_SetConfig+0x1d0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d03f      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b70:	d03b      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b78:	d037      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002cac <TIM_Base_SetConfig+0x1d4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d033      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb0 <TIM_Base_SetConfig+0x1d8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d02f      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a49      	ldr	r2, [pc, #292]	@ (8002cb4 <TIM_Base_SetConfig+0x1dc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02b      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a48      	ldr	r2, [pc, #288]	@ (8002cb8 <TIM_Base_SetConfig+0x1e0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d027      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a47      	ldr	r2, [pc, #284]	@ (8002cbc <TIM_Base_SetConfig+0x1e4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d023      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a46      	ldr	r2, [pc, #280]	@ (8002cc0 <TIM_Base_SetConfig+0x1e8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a45      	ldr	r2, [pc, #276]	@ (8002cc4 <TIM_Base_SetConfig+0x1ec>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d01b      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a44      	ldr	r2, [pc, #272]	@ (8002cc8 <TIM_Base_SetConfig+0x1f0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d017      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a43      	ldr	r2, [pc, #268]	@ (8002ccc <TIM_Base_SetConfig+0x1f4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a42      	ldr	r2, [pc, #264]	@ (8002cd0 <TIM_Base_SetConfig+0x1f8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00f      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a41      	ldr	r2, [pc, #260]	@ (8002cd4 <TIM_Base_SetConfig+0x1fc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a40      	ldr	r2, [pc, #256]	@ (8002cd8 <TIM_Base_SetConfig+0x200>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8002cdc <TIM_Base_SetConfig+0x204>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <TIM_Base_SetConfig+0x112>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a3e      	ldr	r2, [pc, #248]	@ (8002ce0 <TIM_Base_SetConfig+0x208>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d108      	bne.n	8002bfc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a20      	ldr	r2, [pc, #128]	@ (8002ca4 <TIM_Base_SetConfig+0x1cc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d023      	beq.n	8002c70 <TIM_Base_SetConfig+0x198>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca8 <TIM_Base_SetConfig+0x1d0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d01f      	beq.n	8002c70 <TIM_Base_SetConfig+0x198>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a24      	ldr	r2, [pc, #144]	@ (8002cc4 <TIM_Base_SetConfig+0x1ec>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d01b      	beq.n	8002c70 <TIM_Base_SetConfig+0x198>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a23      	ldr	r2, [pc, #140]	@ (8002cc8 <TIM_Base_SetConfig+0x1f0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d017      	beq.n	8002c70 <TIM_Base_SetConfig+0x198>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a22      	ldr	r2, [pc, #136]	@ (8002ccc <TIM_Base_SetConfig+0x1f4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d013      	beq.n	8002c70 <TIM_Base_SetConfig+0x198>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a21      	ldr	r2, [pc, #132]	@ (8002cd0 <TIM_Base_SetConfig+0x1f8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00f      	beq.n	8002c70 <TIM_Base_SetConfig+0x198>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a20      	ldr	r2, [pc, #128]	@ (8002cd4 <TIM_Base_SetConfig+0x1fc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00b      	beq.n	8002c70 <TIM_Base_SetConfig+0x198>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002cd8 <TIM_Base_SetConfig+0x200>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <TIM_Base_SetConfig+0x198>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a1e      	ldr	r2, [pc, #120]	@ (8002cdc <TIM_Base_SetConfig+0x204>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_Base_SetConfig+0x198>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce0 <TIM_Base_SetConfig+0x208>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d103      	bne.n	8002c78 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f023 0201 	bic.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	611a      	str	r2, [r3, #16]
  }
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	50012c00 	.word	0x50012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	50000400 	.word	0x50000400
 8002cb4:	40000800 	.word	0x40000800
 8002cb8:	50000800 	.word	0x50000800
 8002cbc:	40000c00 	.word	0x40000c00
 8002cc0:	50000c00 	.word	0x50000c00
 8002cc4:	40013400 	.word	0x40013400
 8002cc8:	50013400 	.word	0x50013400
 8002ccc:	40014000 	.word	0x40014000
 8002cd0:	50014000 	.word	0x50014000
 8002cd4:	40014400 	.word	0x40014400
 8002cd8:	50014400 	.word	0x50014400
 8002cdc:	40014800 	.word	0x40014800
 8002ce0:	50014800 	.word	0x50014800

08002ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f023 0201 	bic.w	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f023 030a 	bic.w	r3, r3, #10
 8002d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b087      	sub	sp, #28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f023 0210 	bic.w	r2, r3, #16
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	031b      	lsls	r3, r3, #12
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f043 0307 	orr.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	021a      	lsls	r2, r3, #8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e097      	b.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a45      	ldr	r2, [pc, #276]	@ (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00e      	beq.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a44      	ldr	r2, [pc, #272]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a42      	ldr	r2, [pc, #264]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a41      	ldr	r2, [pc, #260]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d108      	bne.n	8002e8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002e82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d040      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2e      	ldr	r2, [pc, #184]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d03b      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec8:	d036      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ed2:	d031      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a29      	ldr	r2, [pc, #164]	@ (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d02c      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a28      	ldr	r2, [pc, #160]	@ (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d027      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a26      	ldr	r2, [pc, #152]	@ (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a25      	ldr	r2, [pc, #148]	@ (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01d      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a23      	ldr	r2, [pc, #140]	@ (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a22      	ldr	r2, [pc, #136]	@ (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a17      	ldr	r2, [pc, #92]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1b      	ldr	r2, [pc, #108]	@ (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1a      	ldr	r2, [pc, #104]	@ (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d10c      	bne.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	50012c00 	.word	0x50012c00
 8002f78:	40013400 	.word	0x40013400
 8002f7c:	50013400 	.word	0x50013400
 8002f80:	40000400 	.word	0x40000400
 8002f84:	50000400 	.word	0x50000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	50000800 	.word	0x50000800
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	50000c00 	.word	0x50000c00
 8002f98:	40014000 	.word	0x40014000
 8002f9c:	50014000 	.word	0x50014000

08002fa0 <std>:
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	b510      	push	{r4, lr}
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	6083      	str	r3, [r0, #8]
 8002fa8:	8181      	strh	r1, [r0, #12]
 8002faa:	4619      	mov	r1, r3
 8002fac:	6643      	str	r3, [r0, #100]	@ 0x64
 8002fae:	81c2      	strh	r2, [r0, #14]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	6183      	str	r3, [r0, #24]
 8002fb4:	e9c0 3300 	strd	r3, r3, [r0]
 8002fb8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fbc:	305c      	adds	r0, #92	@ 0x5c
 8002fbe:	f000 f906 	bl	80031ce <memset>
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <std+0x58>)
 8002fc4:	6224      	str	r4, [r4, #32]
 8002fc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <std+0x5c>)
 8002fca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003000 <std+0x60>)
 8002fce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <std+0x64>)
 8002fd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003008 <std+0x68>)
 8002fd6:	429c      	cmp	r4, r3
 8002fd8:	d006      	beq.n	8002fe8 <std+0x48>
 8002fda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002fde:	4294      	cmp	r4, r2
 8002fe0:	d002      	beq.n	8002fe8 <std+0x48>
 8002fe2:	33d0      	adds	r3, #208	@ 0xd0
 8002fe4:	429c      	cmp	r4, r3
 8002fe6:	d105      	bne.n	8002ff4 <std+0x54>
 8002fe8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff0:	f000 b966 	b.w	80032c0 <__retarget_lock_init_recursive>
 8002ff4:	bd10      	pop	{r4, pc}
 8002ff6:	bf00      	nop
 8002ff8:	08003149 	.word	0x08003149
 8002ffc:	0800316b 	.word	0x0800316b
 8003000:	080031a3 	.word	0x080031a3
 8003004:	080031c7 	.word	0x080031c7
 8003008:	200000d8 	.word	0x200000d8

0800300c <stdio_exit_handler>:
 800300c:	4a02      	ldr	r2, [pc, #8]	@ (8003018 <stdio_exit_handler+0xc>)
 800300e:	4903      	ldr	r1, [pc, #12]	@ (800301c <stdio_exit_handler+0x10>)
 8003010:	4803      	ldr	r0, [pc, #12]	@ (8003020 <stdio_exit_handler+0x14>)
 8003012:	f000 b869 	b.w	80030e8 <_fwalk_sglue>
 8003016:	bf00      	nop
 8003018:	2000000c 	.word	0x2000000c
 800301c:	08003b69 	.word	0x08003b69
 8003020:	2000001c 	.word	0x2000001c

08003024 <cleanup_stdio>:
 8003024:	6841      	ldr	r1, [r0, #4]
 8003026:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <cleanup_stdio+0x34>)
 8003028:	4299      	cmp	r1, r3
 800302a:	b510      	push	{r4, lr}
 800302c:	4604      	mov	r4, r0
 800302e:	d001      	beq.n	8003034 <cleanup_stdio+0x10>
 8003030:	f000 fd9a 	bl	8003b68 <_fflush_r>
 8003034:	68a1      	ldr	r1, [r4, #8]
 8003036:	4b09      	ldr	r3, [pc, #36]	@ (800305c <cleanup_stdio+0x38>)
 8003038:	4299      	cmp	r1, r3
 800303a:	d002      	beq.n	8003042 <cleanup_stdio+0x1e>
 800303c:	4620      	mov	r0, r4
 800303e:	f000 fd93 	bl	8003b68 <_fflush_r>
 8003042:	68e1      	ldr	r1, [r4, #12]
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <cleanup_stdio+0x3c>)
 8003046:	4299      	cmp	r1, r3
 8003048:	d004      	beq.n	8003054 <cleanup_stdio+0x30>
 800304a:	4620      	mov	r0, r4
 800304c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003050:	f000 bd8a 	b.w	8003b68 <_fflush_r>
 8003054:	bd10      	pop	{r4, pc}
 8003056:	bf00      	nop
 8003058:	200000d8 	.word	0x200000d8
 800305c:	20000140 	.word	0x20000140
 8003060:	200001a8 	.word	0x200001a8

08003064 <global_stdio_init.part.0>:
 8003064:	b510      	push	{r4, lr}
 8003066:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <global_stdio_init.part.0+0x30>)
 8003068:	2104      	movs	r1, #4
 800306a:	4c0b      	ldr	r4, [pc, #44]	@ (8003098 <global_stdio_init.part.0+0x34>)
 800306c:	4a0b      	ldr	r2, [pc, #44]	@ (800309c <global_stdio_init.part.0+0x38>)
 800306e:	4620      	mov	r0, r4
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	f7ff ff94 	bl	8002fa0 <std>
 8003078:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800307c:	2201      	movs	r2, #1
 800307e:	2109      	movs	r1, #9
 8003080:	f7ff ff8e 	bl	8002fa0 <std>
 8003084:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003088:	2202      	movs	r2, #2
 800308a:	2112      	movs	r1, #18
 800308c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003090:	f7ff bf86 	b.w	8002fa0 <std>
 8003094:	20000210 	.word	0x20000210
 8003098:	200000d8 	.word	0x200000d8
 800309c:	0800300d 	.word	0x0800300d

080030a0 <__sfp_lock_acquire>:
 80030a0:	4801      	ldr	r0, [pc, #4]	@ (80030a8 <__sfp_lock_acquire+0x8>)
 80030a2:	f000 b90e 	b.w	80032c2 <__retarget_lock_acquire_recursive>
 80030a6:	bf00      	nop
 80030a8:	20000219 	.word	0x20000219

080030ac <__sfp_lock_release>:
 80030ac:	4801      	ldr	r0, [pc, #4]	@ (80030b4 <__sfp_lock_release+0x8>)
 80030ae:	f000 b909 	b.w	80032c4 <__retarget_lock_release_recursive>
 80030b2:	bf00      	nop
 80030b4:	20000219 	.word	0x20000219

080030b8 <__sinit>:
 80030b8:	b510      	push	{r4, lr}
 80030ba:	4604      	mov	r4, r0
 80030bc:	f7ff fff0 	bl	80030a0 <__sfp_lock_acquire>
 80030c0:	6a23      	ldr	r3, [r4, #32]
 80030c2:	b11b      	cbz	r3, 80030cc <__sinit+0x14>
 80030c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030c8:	f7ff bff0 	b.w	80030ac <__sfp_lock_release>
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <__sinit+0x28>)
 80030ce:	6223      	str	r3, [r4, #32]
 80030d0:	4b04      	ldr	r3, [pc, #16]	@ (80030e4 <__sinit+0x2c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f5      	bne.n	80030c4 <__sinit+0xc>
 80030d8:	f7ff ffc4 	bl	8003064 <global_stdio_init.part.0>
 80030dc:	e7f2      	b.n	80030c4 <__sinit+0xc>
 80030de:	bf00      	nop
 80030e0:	08003025 	.word	0x08003025
 80030e4:	20000210 	.word	0x20000210

080030e8 <_fwalk_sglue>:
 80030e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030ec:	4607      	mov	r7, r0
 80030ee:	4688      	mov	r8, r1
 80030f0:	4614      	mov	r4, r2
 80030f2:	2600      	movs	r6, #0
 80030f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030f8:	f1b9 0901 	subs.w	r9, r9, #1
 80030fc:	d505      	bpl.n	800310a <_fwalk_sglue+0x22>
 80030fe:	6824      	ldr	r4, [r4, #0]
 8003100:	2c00      	cmp	r4, #0
 8003102:	d1f7      	bne.n	80030f4 <_fwalk_sglue+0xc>
 8003104:	4630      	mov	r0, r6
 8003106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800310a:	89ab      	ldrh	r3, [r5, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d907      	bls.n	8003120 <_fwalk_sglue+0x38>
 8003110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003114:	3301      	adds	r3, #1
 8003116:	d003      	beq.n	8003120 <_fwalk_sglue+0x38>
 8003118:	4629      	mov	r1, r5
 800311a:	4638      	mov	r0, r7
 800311c:	47c0      	blx	r8
 800311e:	4306      	orrs	r6, r0
 8003120:	3568      	adds	r5, #104	@ 0x68
 8003122:	e7e9      	b.n	80030f8 <_fwalk_sglue+0x10>

08003124 <iprintf>:
 8003124:	b40f      	push	{r0, r1, r2, r3}
 8003126:	b507      	push	{r0, r1, r2, lr}
 8003128:	4906      	ldr	r1, [pc, #24]	@ (8003144 <iprintf+0x20>)
 800312a:	ab04      	add	r3, sp, #16
 800312c:	6808      	ldr	r0, [r1, #0]
 800312e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003132:	6881      	ldr	r1, [r0, #8]
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	f000 f9e9 	bl	800350c <_vfiprintf_r>
 800313a:	b003      	add	sp, #12
 800313c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003140:	b004      	add	sp, #16
 8003142:	4770      	bx	lr
 8003144:	20000018 	.word	0x20000018

08003148 <__sread>:
 8003148:	b510      	push	{r4, lr}
 800314a:	460c      	mov	r4, r1
 800314c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003150:	f000 f868 	bl	8003224 <_read_r>
 8003154:	2800      	cmp	r0, #0
 8003156:	bfab      	itete	ge
 8003158:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800315a:	89a3      	ldrhlt	r3, [r4, #12]
 800315c:	181b      	addge	r3, r3, r0
 800315e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003162:	bfac      	ite	ge
 8003164:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003166:	81a3      	strhlt	r3, [r4, #12]
 8003168:	bd10      	pop	{r4, pc}

0800316a <__swrite>:
 800316a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800316e:	461f      	mov	r7, r3
 8003170:	898b      	ldrh	r3, [r1, #12]
 8003172:	4605      	mov	r5, r0
 8003174:	460c      	mov	r4, r1
 8003176:	05db      	lsls	r3, r3, #23
 8003178:	4616      	mov	r6, r2
 800317a:	d505      	bpl.n	8003188 <__swrite+0x1e>
 800317c:	2302      	movs	r3, #2
 800317e:	2200      	movs	r2, #0
 8003180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003184:	f000 f83c 	bl	8003200 <_lseek_r>
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	4632      	mov	r2, r6
 800318c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003190:	4628      	mov	r0, r5
 8003192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003196:	81a3      	strh	r3, [r4, #12]
 8003198:	463b      	mov	r3, r7
 800319a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800319e:	f000 b853 	b.w	8003248 <_write_r>

080031a2 <__sseek>:
 80031a2:	b510      	push	{r4, lr}
 80031a4:	460c      	mov	r4, r1
 80031a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031aa:	f000 f829 	bl	8003200 <_lseek_r>
 80031ae:	1c43      	adds	r3, r0, #1
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	bf15      	itete	ne
 80031b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031be:	81a3      	strheq	r3, [r4, #12]
 80031c0:	bf18      	it	ne
 80031c2:	81a3      	strhne	r3, [r4, #12]
 80031c4:	bd10      	pop	{r4, pc}

080031c6 <__sclose>:
 80031c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ca:	f000 b809 	b.w	80031e0 <_close_r>

080031ce <memset>:
 80031ce:	4402      	add	r2, r0
 80031d0:	4603      	mov	r3, r0
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d100      	bne.n	80031d8 <memset+0xa>
 80031d6:	4770      	bx	lr
 80031d8:	f803 1b01 	strb.w	r1, [r3], #1
 80031dc:	e7f9      	b.n	80031d2 <memset+0x4>
	...

080031e0 <_close_r>:
 80031e0:	b538      	push	{r3, r4, r5, lr}
 80031e2:	2300      	movs	r3, #0
 80031e4:	4d05      	ldr	r5, [pc, #20]	@ (80031fc <_close_r+0x1c>)
 80031e6:	4604      	mov	r4, r0
 80031e8:	4608      	mov	r0, r1
 80031ea:	602b      	str	r3, [r5, #0]
 80031ec:	f7fd fa2e 	bl	800064c <_close>
 80031f0:	1c43      	adds	r3, r0, #1
 80031f2:	d102      	bne.n	80031fa <_close_r+0x1a>
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	b103      	cbz	r3, 80031fa <_close_r+0x1a>
 80031f8:	6023      	str	r3, [r4, #0]
 80031fa:	bd38      	pop	{r3, r4, r5, pc}
 80031fc:	20000214 	.word	0x20000214

08003200 <_lseek_r>:
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4604      	mov	r4, r0
 8003204:	4d06      	ldr	r5, [pc, #24]	@ (8003220 <_lseek_r+0x20>)
 8003206:	4608      	mov	r0, r1
 8003208:	4611      	mov	r1, r2
 800320a:	2200      	movs	r2, #0
 800320c:	602a      	str	r2, [r5, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	f7fd fa43 	bl	800069a <_lseek>
 8003214:	1c43      	adds	r3, r0, #1
 8003216:	d102      	bne.n	800321e <_lseek_r+0x1e>
 8003218:	682b      	ldr	r3, [r5, #0]
 800321a:	b103      	cbz	r3, 800321e <_lseek_r+0x1e>
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	bd38      	pop	{r3, r4, r5, pc}
 8003220:	20000214 	.word	0x20000214

08003224 <_read_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4604      	mov	r4, r0
 8003228:	4d06      	ldr	r5, [pc, #24]	@ (8003244 <_read_r+0x20>)
 800322a:	4608      	mov	r0, r1
 800322c:	4611      	mov	r1, r2
 800322e:	2200      	movs	r2, #0
 8003230:	602a      	str	r2, [r5, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	f7fd f9d1 	bl	80005da <_read>
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	d102      	bne.n	8003242 <_read_r+0x1e>
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	b103      	cbz	r3, 8003242 <_read_r+0x1e>
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	bd38      	pop	{r3, r4, r5, pc}
 8003244:	20000214 	.word	0x20000214

08003248 <_write_r>:
 8003248:	b538      	push	{r3, r4, r5, lr}
 800324a:	4604      	mov	r4, r0
 800324c:	4d06      	ldr	r5, [pc, #24]	@ (8003268 <_write_r+0x20>)
 800324e:	4608      	mov	r0, r1
 8003250:	4611      	mov	r1, r2
 8003252:	2200      	movs	r2, #0
 8003254:	602a      	str	r2, [r5, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	f7fd f9dc 	bl	8000614 <_write>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d102      	bne.n	8003266 <_write_r+0x1e>
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	b103      	cbz	r3, 8003266 <_write_r+0x1e>
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	bd38      	pop	{r3, r4, r5, pc}
 8003268:	20000214 	.word	0x20000214

0800326c <__errno>:
 800326c:	4b01      	ldr	r3, [pc, #4]	@ (8003274 <__errno+0x8>)
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000018 	.word	0x20000018

08003278 <__libc_init_array>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	4d0d      	ldr	r5, [pc, #52]	@ (80032b0 <__libc_init_array+0x38>)
 800327c:	2600      	movs	r6, #0
 800327e:	4c0d      	ldr	r4, [pc, #52]	@ (80032b4 <__libc_init_array+0x3c>)
 8003280:	1b64      	subs	r4, r4, r5
 8003282:	10a4      	asrs	r4, r4, #2
 8003284:	42a6      	cmp	r6, r4
 8003286:	d109      	bne.n	800329c <__libc_init_array+0x24>
 8003288:	4d0b      	ldr	r5, [pc, #44]	@ (80032b8 <__libc_init_array+0x40>)
 800328a:	2600      	movs	r6, #0
 800328c:	4c0b      	ldr	r4, [pc, #44]	@ (80032bc <__libc_init_array+0x44>)
 800328e:	f000 fdc9 	bl	8003e24 <_init>
 8003292:	1b64      	subs	r4, r4, r5
 8003294:	10a4      	asrs	r4, r4, #2
 8003296:	42a6      	cmp	r6, r4
 8003298:	d105      	bne.n	80032a6 <__libc_init_array+0x2e>
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a0:	3601      	adds	r6, #1
 80032a2:	4798      	blx	r3
 80032a4:	e7ee      	b.n	8003284 <__libc_init_array+0xc>
 80032a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032aa:	3601      	adds	r6, #1
 80032ac:	4798      	blx	r3
 80032ae:	e7f2      	b.n	8003296 <__libc_init_array+0x1e>
 80032b0:	08003f43 	.word	0x08003f43
 80032b4:	08003f43 	.word	0x08003f43
 80032b8:	08003f44 	.word	0x08003f44
 80032bc:	08003f48 	.word	0x08003f48

080032c0 <__retarget_lock_init_recursive>:
 80032c0:	4770      	bx	lr

080032c2 <__retarget_lock_acquire_recursive>:
 80032c2:	4770      	bx	lr

080032c4 <__retarget_lock_release_recursive>:
 80032c4:	4770      	bx	lr
	...

080032c8 <_free_r>:
 80032c8:	b538      	push	{r3, r4, r5, lr}
 80032ca:	4605      	mov	r5, r0
 80032cc:	2900      	cmp	r1, #0
 80032ce:	d041      	beq.n	8003354 <_free_r+0x8c>
 80032d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032d4:	1f0c      	subs	r4, r1, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bfb8      	it	lt
 80032da:	18e4      	addlt	r4, r4, r3
 80032dc:	f000 f8e0 	bl	80034a0 <__malloc_lock>
 80032e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003358 <_free_r+0x90>)
 80032e2:	6813      	ldr	r3, [r2, #0]
 80032e4:	b933      	cbnz	r3, 80032f4 <_free_r+0x2c>
 80032e6:	6063      	str	r3, [r4, #4]
 80032e8:	6014      	str	r4, [r2, #0]
 80032ea:	4628      	mov	r0, r5
 80032ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032f0:	f000 b8dc 	b.w	80034ac <__malloc_unlock>
 80032f4:	42a3      	cmp	r3, r4
 80032f6:	d908      	bls.n	800330a <_free_r+0x42>
 80032f8:	6820      	ldr	r0, [r4, #0]
 80032fa:	1821      	adds	r1, r4, r0
 80032fc:	428b      	cmp	r3, r1
 80032fe:	bf01      	itttt	eq
 8003300:	6819      	ldreq	r1, [r3, #0]
 8003302:	685b      	ldreq	r3, [r3, #4]
 8003304:	1809      	addeq	r1, r1, r0
 8003306:	6021      	streq	r1, [r4, #0]
 8003308:	e7ed      	b.n	80032e6 <_free_r+0x1e>
 800330a:	461a      	mov	r2, r3
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	b10b      	cbz	r3, 8003314 <_free_r+0x4c>
 8003310:	42a3      	cmp	r3, r4
 8003312:	d9fa      	bls.n	800330a <_free_r+0x42>
 8003314:	6811      	ldr	r1, [r2, #0]
 8003316:	1850      	adds	r0, r2, r1
 8003318:	42a0      	cmp	r0, r4
 800331a:	d10b      	bne.n	8003334 <_free_r+0x6c>
 800331c:	6820      	ldr	r0, [r4, #0]
 800331e:	4401      	add	r1, r0
 8003320:	1850      	adds	r0, r2, r1
 8003322:	6011      	str	r1, [r2, #0]
 8003324:	4283      	cmp	r3, r0
 8003326:	d1e0      	bne.n	80032ea <_free_r+0x22>
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4408      	add	r0, r1
 800332e:	6053      	str	r3, [r2, #4]
 8003330:	6010      	str	r0, [r2, #0]
 8003332:	e7da      	b.n	80032ea <_free_r+0x22>
 8003334:	d902      	bls.n	800333c <_free_r+0x74>
 8003336:	230c      	movs	r3, #12
 8003338:	602b      	str	r3, [r5, #0]
 800333a:	e7d6      	b.n	80032ea <_free_r+0x22>
 800333c:	6820      	ldr	r0, [r4, #0]
 800333e:	1821      	adds	r1, r4, r0
 8003340:	428b      	cmp	r3, r1
 8003342:	bf02      	ittt	eq
 8003344:	6819      	ldreq	r1, [r3, #0]
 8003346:	685b      	ldreq	r3, [r3, #4]
 8003348:	1809      	addeq	r1, r1, r0
 800334a:	6063      	str	r3, [r4, #4]
 800334c:	bf08      	it	eq
 800334e:	6021      	streq	r1, [r4, #0]
 8003350:	6054      	str	r4, [r2, #4]
 8003352:	e7ca      	b.n	80032ea <_free_r+0x22>
 8003354:	bd38      	pop	{r3, r4, r5, pc}
 8003356:	bf00      	nop
 8003358:	20000220 	.word	0x20000220

0800335c <sbrk_aligned>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	4e0f      	ldr	r6, [pc, #60]	@ (800339c <sbrk_aligned+0x40>)
 8003360:	460c      	mov	r4, r1
 8003362:	4605      	mov	r5, r0
 8003364:	6831      	ldr	r1, [r6, #0]
 8003366:	b911      	cbnz	r1, 800336e <sbrk_aligned+0x12>
 8003368:	f000 fcba 	bl	8003ce0 <_sbrk_r>
 800336c:	6030      	str	r0, [r6, #0]
 800336e:	4621      	mov	r1, r4
 8003370:	4628      	mov	r0, r5
 8003372:	f000 fcb5 	bl	8003ce0 <_sbrk_r>
 8003376:	1c43      	adds	r3, r0, #1
 8003378:	d103      	bne.n	8003382 <sbrk_aligned+0x26>
 800337a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800337e:	4620      	mov	r0, r4
 8003380:	bd70      	pop	{r4, r5, r6, pc}
 8003382:	1cc4      	adds	r4, r0, #3
 8003384:	f024 0403 	bic.w	r4, r4, #3
 8003388:	42a0      	cmp	r0, r4
 800338a:	d0f8      	beq.n	800337e <sbrk_aligned+0x22>
 800338c:	1a21      	subs	r1, r4, r0
 800338e:	4628      	mov	r0, r5
 8003390:	f000 fca6 	bl	8003ce0 <_sbrk_r>
 8003394:	3001      	adds	r0, #1
 8003396:	d1f2      	bne.n	800337e <sbrk_aligned+0x22>
 8003398:	e7ef      	b.n	800337a <sbrk_aligned+0x1e>
 800339a:	bf00      	nop
 800339c:	2000021c 	.word	0x2000021c

080033a0 <_malloc_r>:
 80033a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033a4:	1ccd      	adds	r5, r1, #3
 80033a6:	4606      	mov	r6, r0
 80033a8:	f025 0503 	bic.w	r5, r5, #3
 80033ac:	3508      	adds	r5, #8
 80033ae:	2d0c      	cmp	r5, #12
 80033b0:	bf38      	it	cc
 80033b2:	250c      	movcc	r5, #12
 80033b4:	2d00      	cmp	r5, #0
 80033b6:	db01      	blt.n	80033bc <_malloc_r+0x1c>
 80033b8:	42a9      	cmp	r1, r5
 80033ba:	d904      	bls.n	80033c6 <_malloc_r+0x26>
 80033bc:	230c      	movs	r3, #12
 80033be:	6033      	str	r3, [r6, #0]
 80033c0:	2000      	movs	r0, #0
 80033c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800349c <_malloc_r+0xfc>
 80033ca:	f000 f869 	bl	80034a0 <__malloc_lock>
 80033ce:	f8d8 3000 	ldr.w	r3, [r8]
 80033d2:	461c      	mov	r4, r3
 80033d4:	bb44      	cbnz	r4, 8003428 <_malloc_r+0x88>
 80033d6:	4629      	mov	r1, r5
 80033d8:	4630      	mov	r0, r6
 80033da:	f7ff ffbf 	bl	800335c <sbrk_aligned>
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	4604      	mov	r4, r0
 80033e2:	d158      	bne.n	8003496 <_malloc_r+0xf6>
 80033e4:	f8d8 4000 	ldr.w	r4, [r8]
 80033e8:	4627      	mov	r7, r4
 80033ea:	2f00      	cmp	r7, #0
 80033ec:	d143      	bne.n	8003476 <_malloc_r+0xd6>
 80033ee:	2c00      	cmp	r4, #0
 80033f0:	d04b      	beq.n	800348a <_malloc_r+0xea>
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	4639      	mov	r1, r7
 80033f6:	4630      	mov	r0, r6
 80033f8:	eb04 0903 	add.w	r9, r4, r3
 80033fc:	f000 fc70 	bl	8003ce0 <_sbrk_r>
 8003400:	4581      	cmp	r9, r0
 8003402:	d142      	bne.n	800348a <_malloc_r+0xea>
 8003404:	6821      	ldr	r1, [r4, #0]
 8003406:	4630      	mov	r0, r6
 8003408:	1a6d      	subs	r5, r5, r1
 800340a:	4629      	mov	r1, r5
 800340c:	f7ff ffa6 	bl	800335c <sbrk_aligned>
 8003410:	3001      	adds	r0, #1
 8003412:	d03a      	beq.n	800348a <_malloc_r+0xea>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	442b      	add	r3, r5
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	f8d8 3000 	ldr.w	r3, [r8]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	bb62      	cbnz	r2, 800347c <_malloc_r+0xdc>
 8003422:	f8c8 7000 	str.w	r7, [r8]
 8003426:	e00f      	b.n	8003448 <_malloc_r+0xa8>
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	1b52      	subs	r2, r2, r5
 800342c:	d420      	bmi.n	8003470 <_malloc_r+0xd0>
 800342e:	2a0b      	cmp	r2, #11
 8003430:	d917      	bls.n	8003462 <_malloc_r+0xc2>
 8003432:	1961      	adds	r1, r4, r5
 8003434:	42a3      	cmp	r3, r4
 8003436:	6025      	str	r5, [r4, #0]
 8003438:	bf18      	it	ne
 800343a:	6059      	strne	r1, [r3, #4]
 800343c:	6863      	ldr	r3, [r4, #4]
 800343e:	bf08      	it	eq
 8003440:	f8c8 1000 	streq.w	r1, [r8]
 8003444:	5162      	str	r2, [r4, r5]
 8003446:	604b      	str	r3, [r1, #4]
 8003448:	4630      	mov	r0, r6
 800344a:	f000 f82f 	bl	80034ac <__malloc_unlock>
 800344e:	f104 000b 	add.w	r0, r4, #11
 8003452:	1d23      	adds	r3, r4, #4
 8003454:	f020 0007 	bic.w	r0, r0, #7
 8003458:	1ac2      	subs	r2, r0, r3
 800345a:	bf1c      	itt	ne
 800345c:	1a1b      	subne	r3, r3, r0
 800345e:	50a3      	strne	r3, [r4, r2]
 8003460:	e7af      	b.n	80033c2 <_malloc_r+0x22>
 8003462:	6862      	ldr	r2, [r4, #4]
 8003464:	42a3      	cmp	r3, r4
 8003466:	bf0c      	ite	eq
 8003468:	f8c8 2000 	streq.w	r2, [r8]
 800346c:	605a      	strne	r2, [r3, #4]
 800346e:	e7eb      	b.n	8003448 <_malloc_r+0xa8>
 8003470:	4623      	mov	r3, r4
 8003472:	6864      	ldr	r4, [r4, #4]
 8003474:	e7ae      	b.n	80033d4 <_malloc_r+0x34>
 8003476:	463c      	mov	r4, r7
 8003478:	687f      	ldr	r7, [r7, #4]
 800347a:	e7b6      	b.n	80033ea <_malloc_r+0x4a>
 800347c:	461a      	mov	r2, r3
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	42a3      	cmp	r3, r4
 8003482:	d1fb      	bne.n	800347c <_malloc_r+0xdc>
 8003484:	2300      	movs	r3, #0
 8003486:	6053      	str	r3, [r2, #4]
 8003488:	e7de      	b.n	8003448 <_malloc_r+0xa8>
 800348a:	230c      	movs	r3, #12
 800348c:	4630      	mov	r0, r6
 800348e:	6033      	str	r3, [r6, #0]
 8003490:	f000 f80c 	bl	80034ac <__malloc_unlock>
 8003494:	e794      	b.n	80033c0 <_malloc_r+0x20>
 8003496:	6005      	str	r5, [r0, #0]
 8003498:	e7d6      	b.n	8003448 <_malloc_r+0xa8>
 800349a:	bf00      	nop
 800349c:	20000220 	.word	0x20000220

080034a0 <__malloc_lock>:
 80034a0:	4801      	ldr	r0, [pc, #4]	@ (80034a8 <__malloc_lock+0x8>)
 80034a2:	f7ff bf0e 	b.w	80032c2 <__retarget_lock_acquire_recursive>
 80034a6:	bf00      	nop
 80034a8:	20000218 	.word	0x20000218

080034ac <__malloc_unlock>:
 80034ac:	4801      	ldr	r0, [pc, #4]	@ (80034b4 <__malloc_unlock+0x8>)
 80034ae:	f7ff bf09 	b.w	80032c4 <__retarget_lock_release_recursive>
 80034b2:	bf00      	nop
 80034b4:	20000218 	.word	0x20000218

080034b8 <__sfputc_r>:
 80034b8:	6893      	ldr	r3, [r2, #8]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	6093      	str	r3, [r2, #8]
 80034c0:	b410      	push	{r4}
 80034c2:	da08      	bge.n	80034d6 <__sfputc_r+0x1e>
 80034c4:	6994      	ldr	r4, [r2, #24]
 80034c6:	42a3      	cmp	r3, r4
 80034c8:	db01      	blt.n	80034ce <__sfputc_r+0x16>
 80034ca:	290a      	cmp	r1, #10
 80034cc:	d103      	bne.n	80034d6 <__sfputc_r+0x1e>
 80034ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034d2:	f000 bb71 	b.w	8003bb8 <__swbuf_r>
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	1c58      	adds	r0, r3, #1
 80034da:	6010      	str	r0, [r2, #0]
 80034dc:	4608      	mov	r0, r1
 80034de:	7019      	strb	r1, [r3, #0]
 80034e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <__sfputs_r>:
 80034e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e8:	4606      	mov	r6, r0
 80034ea:	460f      	mov	r7, r1
 80034ec:	4614      	mov	r4, r2
 80034ee:	18d5      	adds	r5, r2, r3
 80034f0:	42ac      	cmp	r4, r5
 80034f2:	d101      	bne.n	80034f8 <__sfputs_r+0x12>
 80034f4:	2000      	movs	r0, #0
 80034f6:	e007      	b.n	8003508 <__sfputs_r+0x22>
 80034f8:	463a      	mov	r2, r7
 80034fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034fe:	4630      	mov	r0, r6
 8003500:	f7ff ffda 	bl	80034b8 <__sfputc_r>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d1f3      	bne.n	80034f0 <__sfputs_r+0xa>
 8003508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800350c <_vfiprintf_r>:
 800350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003510:	460d      	mov	r5, r1
 8003512:	b09d      	sub	sp, #116	@ 0x74
 8003514:	4614      	mov	r4, r2
 8003516:	4698      	mov	r8, r3
 8003518:	4606      	mov	r6, r0
 800351a:	b118      	cbz	r0, 8003524 <_vfiprintf_r+0x18>
 800351c:	6a03      	ldr	r3, [r0, #32]
 800351e:	b90b      	cbnz	r3, 8003524 <_vfiprintf_r+0x18>
 8003520:	f7ff fdca 	bl	80030b8 <__sinit>
 8003524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003526:	07d9      	lsls	r1, r3, #31
 8003528:	d405      	bmi.n	8003536 <_vfiprintf_r+0x2a>
 800352a:	89ab      	ldrh	r3, [r5, #12]
 800352c:	059a      	lsls	r2, r3, #22
 800352e:	d402      	bmi.n	8003536 <_vfiprintf_r+0x2a>
 8003530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003532:	f7ff fec6 	bl	80032c2 <__retarget_lock_acquire_recursive>
 8003536:	89ab      	ldrh	r3, [r5, #12]
 8003538:	071b      	lsls	r3, r3, #28
 800353a:	d501      	bpl.n	8003540 <_vfiprintf_r+0x34>
 800353c:	692b      	ldr	r3, [r5, #16]
 800353e:	b99b      	cbnz	r3, 8003568 <_vfiprintf_r+0x5c>
 8003540:	4629      	mov	r1, r5
 8003542:	4630      	mov	r0, r6
 8003544:	f000 fb76 	bl	8003c34 <__swsetup_r>
 8003548:	b170      	cbz	r0, 8003568 <_vfiprintf_r+0x5c>
 800354a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800354c:	07dc      	lsls	r4, r3, #31
 800354e:	d504      	bpl.n	800355a <_vfiprintf_r+0x4e>
 8003550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003554:	b01d      	add	sp, #116	@ 0x74
 8003556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355a:	89ab      	ldrh	r3, [r5, #12]
 800355c:	0598      	lsls	r0, r3, #22
 800355e:	d4f7      	bmi.n	8003550 <_vfiprintf_r+0x44>
 8003560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003562:	f7ff feaf 	bl	80032c4 <__retarget_lock_release_recursive>
 8003566:	e7f3      	b.n	8003550 <_vfiprintf_r+0x44>
 8003568:	2300      	movs	r3, #0
 800356a:	f8cd 800c 	str.w	r8, [sp, #12]
 800356e:	f04f 0901 	mov.w	r9, #1
 8003572:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8003728 <_vfiprintf_r+0x21c>
 8003576:	9309      	str	r3, [sp, #36]	@ 0x24
 8003578:	2320      	movs	r3, #32
 800357a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800357e:	2330      	movs	r3, #48	@ 0x30
 8003580:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003584:	4623      	mov	r3, r4
 8003586:	469a      	mov	sl, r3
 8003588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800358c:	b10a      	cbz	r2, 8003592 <_vfiprintf_r+0x86>
 800358e:	2a25      	cmp	r2, #37	@ 0x25
 8003590:	d1f9      	bne.n	8003586 <_vfiprintf_r+0x7a>
 8003592:	ebba 0b04 	subs.w	fp, sl, r4
 8003596:	d00b      	beq.n	80035b0 <_vfiprintf_r+0xa4>
 8003598:	465b      	mov	r3, fp
 800359a:	4622      	mov	r2, r4
 800359c:	4629      	mov	r1, r5
 800359e:	4630      	mov	r0, r6
 80035a0:	f7ff ffa1 	bl	80034e6 <__sfputs_r>
 80035a4:	3001      	adds	r0, #1
 80035a6:	f000 80a7 	beq.w	80036f8 <_vfiprintf_r+0x1ec>
 80035aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035ac:	445a      	add	r2, fp
 80035ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80035b0:	f89a 3000 	ldrb.w	r3, [sl]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 809f 	beq.w	80036f8 <_vfiprintf_r+0x1ec>
 80035ba:	2300      	movs	r3, #0
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035c0:	f10a 0a01 	add.w	sl, sl, #1
 80035c4:	9304      	str	r3, [sp, #16]
 80035c6:	9307      	str	r3, [sp, #28]
 80035c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80035cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80035ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035d2:	4654      	mov	r4, sl
 80035d4:	2205      	movs	r2, #5
 80035d6:	4854      	ldr	r0, [pc, #336]	@ (8003728 <_vfiprintf_r+0x21c>)
 80035d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035dc:	f000 fb90 	bl	8003d00 <memchr>
 80035e0:	9a04      	ldr	r2, [sp, #16]
 80035e2:	b9d8      	cbnz	r0, 800361c <_vfiprintf_r+0x110>
 80035e4:	06d1      	lsls	r1, r2, #27
 80035e6:	bf44      	itt	mi
 80035e8:	2320      	movmi	r3, #32
 80035ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035ee:	0713      	lsls	r3, r2, #28
 80035f0:	bf44      	itt	mi
 80035f2:	232b      	movmi	r3, #43	@ 0x2b
 80035f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035f8:	f89a 3000 	ldrb.w	r3, [sl]
 80035fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80035fe:	d015      	beq.n	800362c <_vfiprintf_r+0x120>
 8003600:	9a07      	ldr	r2, [sp, #28]
 8003602:	4654      	mov	r4, sl
 8003604:	2000      	movs	r0, #0
 8003606:	f04f 0c0a 	mov.w	ip, #10
 800360a:	4621      	mov	r1, r4
 800360c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003610:	3b30      	subs	r3, #48	@ 0x30
 8003612:	2b09      	cmp	r3, #9
 8003614:	d94b      	bls.n	80036ae <_vfiprintf_r+0x1a2>
 8003616:	b1b0      	cbz	r0, 8003646 <_vfiprintf_r+0x13a>
 8003618:	9207      	str	r2, [sp, #28]
 800361a:	e014      	b.n	8003646 <_vfiprintf_r+0x13a>
 800361c:	eba0 0308 	sub.w	r3, r0, r8
 8003620:	46a2      	mov	sl, r4
 8003622:	fa09 f303 	lsl.w	r3, r9, r3
 8003626:	4313      	orrs	r3, r2
 8003628:	9304      	str	r3, [sp, #16]
 800362a:	e7d2      	b.n	80035d2 <_vfiprintf_r+0xc6>
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	1d19      	adds	r1, r3, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	9103      	str	r1, [sp, #12]
 8003636:	bfbb      	ittet	lt
 8003638:	425b      	neglt	r3, r3
 800363a:	f042 0202 	orrlt.w	r2, r2, #2
 800363e:	9307      	strge	r3, [sp, #28]
 8003640:	9307      	strlt	r3, [sp, #28]
 8003642:	bfb8      	it	lt
 8003644:	9204      	strlt	r2, [sp, #16]
 8003646:	7823      	ldrb	r3, [r4, #0]
 8003648:	2b2e      	cmp	r3, #46	@ 0x2e
 800364a:	d10a      	bne.n	8003662 <_vfiprintf_r+0x156>
 800364c:	7863      	ldrb	r3, [r4, #1]
 800364e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003650:	d132      	bne.n	80036b8 <_vfiprintf_r+0x1ac>
 8003652:	9b03      	ldr	r3, [sp, #12]
 8003654:	3402      	adds	r4, #2
 8003656:	1d1a      	adds	r2, r3, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800365e:	9203      	str	r2, [sp, #12]
 8003660:	9305      	str	r3, [sp, #20]
 8003662:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003738 <_vfiprintf_r+0x22c>
 8003666:	2203      	movs	r2, #3
 8003668:	7821      	ldrb	r1, [r4, #0]
 800366a:	4650      	mov	r0, sl
 800366c:	f000 fb48 	bl	8003d00 <memchr>
 8003670:	b138      	cbz	r0, 8003682 <_vfiprintf_r+0x176>
 8003672:	eba0 000a 	sub.w	r0, r0, sl
 8003676:	2240      	movs	r2, #64	@ 0x40
 8003678:	9b04      	ldr	r3, [sp, #16]
 800367a:	3401      	adds	r4, #1
 800367c:	4082      	lsls	r2, r0
 800367e:	4313      	orrs	r3, r2
 8003680:	9304      	str	r3, [sp, #16]
 8003682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003686:	2206      	movs	r2, #6
 8003688:	4828      	ldr	r0, [pc, #160]	@ (800372c <_vfiprintf_r+0x220>)
 800368a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800368e:	f000 fb37 	bl	8003d00 <memchr>
 8003692:	2800      	cmp	r0, #0
 8003694:	d03f      	beq.n	8003716 <_vfiprintf_r+0x20a>
 8003696:	4b26      	ldr	r3, [pc, #152]	@ (8003730 <_vfiprintf_r+0x224>)
 8003698:	bb1b      	cbnz	r3, 80036e2 <_vfiprintf_r+0x1d6>
 800369a:	9b03      	ldr	r3, [sp, #12]
 800369c:	3307      	adds	r3, #7
 800369e:	f023 0307 	bic.w	r3, r3, #7
 80036a2:	3308      	adds	r3, #8
 80036a4:	9303      	str	r3, [sp, #12]
 80036a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036a8:	443b      	add	r3, r7
 80036aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80036ac:	e76a      	b.n	8003584 <_vfiprintf_r+0x78>
 80036ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80036b2:	460c      	mov	r4, r1
 80036b4:	2001      	movs	r0, #1
 80036b6:	e7a8      	b.n	800360a <_vfiprintf_r+0xfe>
 80036b8:	2300      	movs	r3, #0
 80036ba:	3401      	adds	r4, #1
 80036bc:	f04f 0c0a 	mov.w	ip, #10
 80036c0:	4619      	mov	r1, r3
 80036c2:	9305      	str	r3, [sp, #20]
 80036c4:	4620      	mov	r0, r4
 80036c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036ca:	3a30      	subs	r2, #48	@ 0x30
 80036cc:	2a09      	cmp	r2, #9
 80036ce:	d903      	bls.n	80036d8 <_vfiprintf_r+0x1cc>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0c6      	beq.n	8003662 <_vfiprintf_r+0x156>
 80036d4:	9105      	str	r1, [sp, #20]
 80036d6:	e7c4      	b.n	8003662 <_vfiprintf_r+0x156>
 80036d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80036dc:	4604      	mov	r4, r0
 80036de:	2301      	movs	r3, #1
 80036e0:	e7f0      	b.n	80036c4 <_vfiprintf_r+0x1b8>
 80036e2:	ab03      	add	r3, sp, #12
 80036e4:	462a      	mov	r2, r5
 80036e6:	a904      	add	r1, sp, #16
 80036e8:	4630      	mov	r0, r6
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <_vfiprintf_r+0x228>)
 80036ee:	f3af 8000 	nop.w
 80036f2:	4607      	mov	r7, r0
 80036f4:	1c78      	adds	r0, r7, #1
 80036f6:	d1d6      	bne.n	80036a6 <_vfiprintf_r+0x19a>
 80036f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036fa:	07d9      	lsls	r1, r3, #31
 80036fc:	d405      	bmi.n	800370a <_vfiprintf_r+0x1fe>
 80036fe:	89ab      	ldrh	r3, [r5, #12]
 8003700:	059a      	lsls	r2, r3, #22
 8003702:	d402      	bmi.n	800370a <_vfiprintf_r+0x1fe>
 8003704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003706:	f7ff fddd 	bl	80032c4 <__retarget_lock_release_recursive>
 800370a:	89ab      	ldrh	r3, [r5, #12]
 800370c:	065b      	lsls	r3, r3, #25
 800370e:	f53f af1f 	bmi.w	8003550 <_vfiprintf_r+0x44>
 8003712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003714:	e71e      	b.n	8003554 <_vfiprintf_r+0x48>
 8003716:	ab03      	add	r3, sp, #12
 8003718:	462a      	mov	r2, r5
 800371a:	a904      	add	r1, sp, #16
 800371c:	4630      	mov	r0, r6
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <_vfiprintf_r+0x228>)
 8003722:	f000 f87d 	bl	8003820 <_printf_i>
 8003726:	e7e4      	b.n	80036f2 <_vfiprintf_r+0x1e6>
 8003728:	08003f10 	.word	0x08003f10
 800372c:	08003f1a 	.word	0x08003f1a
 8003730:	00000000 	.word	0x00000000
 8003734:	080034e7 	.word	0x080034e7
 8003738:	08003f16 	.word	0x08003f16

0800373c <_printf_common>:
 800373c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003740:	4616      	mov	r6, r2
 8003742:	4698      	mov	r8, r3
 8003744:	688a      	ldr	r2, [r1, #8]
 8003746:	4607      	mov	r7, r0
 8003748:	690b      	ldr	r3, [r1, #16]
 800374a:	460c      	mov	r4, r1
 800374c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003750:	4293      	cmp	r3, r2
 8003752:	bfb8      	it	lt
 8003754:	4613      	movlt	r3, r2
 8003756:	6033      	str	r3, [r6, #0]
 8003758:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800375c:	b10a      	cbz	r2, 8003762 <_printf_common+0x26>
 800375e:	3301      	adds	r3, #1
 8003760:	6033      	str	r3, [r6, #0]
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	0699      	lsls	r1, r3, #26
 8003766:	bf42      	ittt	mi
 8003768:	6833      	ldrmi	r3, [r6, #0]
 800376a:	3302      	addmi	r3, #2
 800376c:	6033      	strmi	r3, [r6, #0]
 800376e:	6825      	ldr	r5, [r4, #0]
 8003770:	f015 0506 	ands.w	r5, r5, #6
 8003774:	d106      	bne.n	8003784 <_printf_common+0x48>
 8003776:	f104 0a19 	add.w	sl, r4, #25
 800377a:	68e3      	ldr	r3, [r4, #12]
 800377c:	6832      	ldr	r2, [r6, #0]
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	42ab      	cmp	r3, r5
 8003782:	dc2b      	bgt.n	80037dc <_printf_common+0xa0>
 8003784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	3b00      	subs	r3, #0
 800378c:	bf18      	it	ne
 800378e:	2301      	movne	r3, #1
 8003790:	0692      	lsls	r2, r2, #26
 8003792:	d430      	bmi.n	80037f6 <_printf_common+0xba>
 8003794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003798:	4641      	mov	r1, r8
 800379a:	4638      	mov	r0, r7
 800379c:	47c8      	blx	r9
 800379e:	3001      	adds	r0, #1
 80037a0:	d023      	beq.n	80037ea <_printf_common+0xae>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	341a      	adds	r4, #26
 80037a6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80037aa:	f003 0306 	and.w	r3, r3, #6
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	bf0a      	itet	eq
 80037b2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80037b6:	2500      	movne	r5, #0
 80037b8:	6833      	ldreq	r3, [r6, #0]
 80037ba:	f04f 0600 	mov.w	r6, #0
 80037be:	bf08      	it	eq
 80037c0:	1aed      	subeq	r5, r5, r3
 80037c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037c6:	bf08      	it	eq
 80037c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bfc4      	itt	gt
 80037d0:	1a9b      	subgt	r3, r3, r2
 80037d2:	18ed      	addgt	r5, r5, r3
 80037d4:	42b5      	cmp	r5, r6
 80037d6:	d11a      	bne.n	800380e <_printf_common+0xd2>
 80037d8:	2000      	movs	r0, #0
 80037da:	e008      	b.n	80037ee <_printf_common+0xb2>
 80037dc:	2301      	movs	r3, #1
 80037de:	4652      	mov	r2, sl
 80037e0:	4641      	mov	r1, r8
 80037e2:	4638      	mov	r0, r7
 80037e4:	47c8      	blx	r9
 80037e6:	3001      	adds	r0, #1
 80037e8:	d103      	bne.n	80037f2 <_printf_common+0xb6>
 80037ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f2:	3501      	adds	r5, #1
 80037f4:	e7c1      	b.n	800377a <_printf_common+0x3e>
 80037f6:	18e1      	adds	r1, r4, r3
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	2030      	movs	r0, #48	@ 0x30
 80037fc:	3302      	adds	r3, #2
 80037fe:	4422      	add	r2, r4
 8003800:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003804:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003808:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800380c:	e7c2      	b.n	8003794 <_printf_common+0x58>
 800380e:	2301      	movs	r3, #1
 8003810:	4622      	mov	r2, r4
 8003812:	4641      	mov	r1, r8
 8003814:	4638      	mov	r0, r7
 8003816:	47c8      	blx	r9
 8003818:	3001      	adds	r0, #1
 800381a:	d0e6      	beq.n	80037ea <_printf_common+0xae>
 800381c:	3601      	adds	r6, #1
 800381e:	e7d9      	b.n	80037d4 <_printf_common+0x98>

08003820 <_printf_i>:
 8003820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003824:	7e0f      	ldrb	r7, [r1, #24]
 8003826:	4691      	mov	r9, r2
 8003828:	4680      	mov	r8, r0
 800382a:	460c      	mov	r4, r1
 800382c:	2f78      	cmp	r7, #120	@ 0x78
 800382e:	469a      	mov	sl, r3
 8003830:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003836:	d807      	bhi.n	8003848 <_printf_i+0x28>
 8003838:	2f62      	cmp	r7, #98	@ 0x62
 800383a:	d80a      	bhi.n	8003852 <_printf_i+0x32>
 800383c:	2f00      	cmp	r7, #0
 800383e:	f000 80d2 	beq.w	80039e6 <_printf_i+0x1c6>
 8003842:	2f58      	cmp	r7, #88	@ 0x58
 8003844:	f000 80b9 	beq.w	80039ba <_printf_i+0x19a>
 8003848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800384c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003850:	e03a      	b.n	80038c8 <_printf_i+0xa8>
 8003852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003856:	2b15      	cmp	r3, #21
 8003858:	d8f6      	bhi.n	8003848 <_printf_i+0x28>
 800385a:	a101      	add	r1, pc, #4	@ (adr r1, 8003860 <_printf_i+0x40>)
 800385c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003860:	080038b9 	.word	0x080038b9
 8003864:	080038cd 	.word	0x080038cd
 8003868:	08003849 	.word	0x08003849
 800386c:	08003849 	.word	0x08003849
 8003870:	08003849 	.word	0x08003849
 8003874:	08003849 	.word	0x08003849
 8003878:	080038cd 	.word	0x080038cd
 800387c:	08003849 	.word	0x08003849
 8003880:	08003849 	.word	0x08003849
 8003884:	08003849 	.word	0x08003849
 8003888:	08003849 	.word	0x08003849
 800388c:	080039cd 	.word	0x080039cd
 8003890:	080038f7 	.word	0x080038f7
 8003894:	08003987 	.word	0x08003987
 8003898:	08003849 	.word	0x08003849
 800389c:	08003849 	.word	0x08003849
 80038a0:	080039ef 	.word	0x080039ef
 80038a4:	08003849 	.word	0x08003849
 80038a8:	080038f7 	.word	0x080038f7
 80038ac:	08003849 	.word	0x08003849
 80038b0:	08003849 	.word	0x08003849
 80038b4:	0800398f 	.word	0x0800398f
 80038b8:	6833      	ldr	r3, [r6, #0]
 80038ba:	1d1a      	adds	r2, r3, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6032      	str	r2, [r6, #0]
 80038c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038c8:	2301      	movs	r3, #1
 80038ca:	e09d      	b.n	8003a08 <_printf_i+0x1e8>
 80038cc:	6833      	ldr	r3, [r6, #0]
 80038ce:	6820      	ldr	r0, [r4, #0]
 80038d0:	1d19      	adds	r1, r3, #4
 80038d2:	6031      	str	r1, [r6, #0]
 80038d4:	0606      	lsls	r6, r0, #24
 80038d6:	d501      	bpl.n	80038dc <_printf_i+0xbc>
 80038d8:	681d      	ldr	r5, [r3, #0]
 80038da:	e003      	b.n	80038e4 <_printf_i+0xc4>
 80038dc:	0645      	lsls	r5, r0, #25
 80038de:	d5fb      	bpl.n	80038d8 <_printf_i+0xb8>
 80038e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80038e4:	2d00      	cmp	r5, #0
 80038e6:	da03      	bge.n	80038f0 <_printf_i+0xd0>
 80038e8:	232d      	movs	r3, #45	@ 0x2d
 80038ea:	426d      	negs	r5, r5
 80038ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038f0:	4859      	ldr	r0, [pc, #356]	@ (8003a58 <_printf_i+0x238>)
 80038f2:	230a      	movs	r3, #10
 80038f4:	e011      	b.n	800391a <_printf_i+0xfa>
 80038f6:	6821      	ldr	r1, [r4, #0]
 80038f8:	6833      	ldr	r3, [r6, #0]
 80038fa:	0608      	lsls	r0, r1, #24
 80038fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003900:	d402      	bmi.n	8003908 <_printf_i+0xe8>
 8003902:	0649      	lsls	r1, r1, #25
 8003904:	bf48      	it	mi
 8003906:	b2ad      	uxthmi	r5, r5
 8003908:	2f6f      	cmp	r7, #111	@ 0x6f
 800390a:	6033      	str	r3, [r6, #0]
 800390c:	4852      	ldr	r0, [pc, #328]	@ (8003a58 <_printf_i+0x238>)
 800390e:	bf14      	ite	ne
 8003910:	230a      	movne	r3, #10
 8003912:	2308      	moveq	r3, #8
 8003914:	2100      	movs	r1, #0
 8003916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800391a:	6866      	ldr	r6, [r4, #4]
 800391c:	2e00      	cmp	r6, #0
 800391e:	60a6      	str	r6, [r4, #8]
 8003920:	bfa2      	ittt	ge
 8003922:	6821      	ldrge	r1, [r4, #0]
 8003924:	f021 0104 	bicge.w	r1, r1, #4
 8003928:	6021      	strge	r1, [r4, #0]
 800392a:	b90d      	cbnz	r5, 8003930 <_printf_i+0x110>
 800392c:	2e00      	cmp	r6, #0
 800392e:	d04b      	beq.n	80039c8 <_printf_i+0x1a8>
 8003930:	4616      	mov	r6, r2
 8003932:	fbb5 f1f3 	udiv	r1, r5, r3
 8003936:	fb03 5711 	mls	r7, r3, r1, r5
 800393a:	5dc7      	ldrb	r7, [r0, r7]
 800393c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003940:	462f      	mov	r7, r5
 8003942:	460d      	mov	r5, r1
 8003944:	42bb      	cmp	r3, r7
 8003946:	d9f4      	bls.n	8003932 <_printf_i+0x112>
 8003948:	2b08      	cmp	r3, #8
 800394a:	d10b      	bne.n	8003964 <_printf_i+0x144>
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	07df      	lsls	r7, r3, #31
 8003950:	d508      	bpl.n	8003964 <_printf_i+0x144>
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	6861      	ldr	r1, [r4, #4]
 8003956:	4299      	cmp	r1, r3
 8003958:	bfde      	ittt	le
 800395a:	2330      	movle	r3, #48	@ 0x30
 800395c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003960:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003964:	1b92      	subs	r2, r2, r6
 8003966:	6122      	str	r2, [r4, #16]
 8003968:	464b      	mov	r3, r9
 800396a:	aa03      	add	r2, sp, #12
 800396c:	4621      	mov	r1, r4
 800396e:	4640      	mov	r0, r8
 8003970:	f8cd a000 	str.w	sl, [sp]
 8003974:	f7ff fee2 	bl	800373c <_printf_common>
 8003978:	3001      	adds	r0, #1
 800397a:	d14a      	bne.n	8003a12 <_printf_i+0x1f2>
 800397c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003980:	b004      	add	sp, #16
 8003982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	f043 0320 	orr.w	r3, r3, #32
 800398c:	6023      	str	r3, [r4, #0]
 800398e:	2778      	movs	r7, #120	@ 0x78
 8003990:	4832      	ldr	r0, [pc, #200]	@ (8003a5c <_printf_i+0x23c>)
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003998:	061f      	lsls	r7, r3, #24
 800399a:	6831      	ldr	r1, [r6, #0]
 800399c:	f851 5b04 	ldr.w	r5, [r1], #4
 80039a0:	d402      	bmi.n	80039a8 <_printf_i+0x188>
 80039a2:	065f      	lsls	r7, r3, #25
 80039a4:	bf48      	it	mi
 80039a6:	b2ad      	uxthmi	r5, r5
 80039a8:	6031      	str	r1, [r6, #0]
 80039aa:	07d9      	lsls	r1, r3, #31
 80039ac:	bf44      	itt	mi
 80039ae:	f043 0320 	orrmi.w	r3, r3, #32
 80039b2:	6023      	strmi	r3, [r4, #0]
 80039b4:	b11d      	cbz	r5, 80039be <_printf_i+0x19e>
 80039b6:	2310      	movs	r3, #16
 80039b8:	e7ac      	b.n	8003914 <_printf_i+0xf4>
 80039ba:	4827      	ldr	r0, [pc, #156]	@ (8003a58 <_printf_i+0x238>)
 80039bc:	e7e9      	b.n	8003992 <_printf_i+0x172>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	f023 0320 	bic.w	r3, r3, #32
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	e7f6      	b.n	80039b6 <_printf_i+0x196>
 80039c8:	4616      	mov	r6, r2
 80039ca:	e7bd      	b.n	8003948 <_printf_i+0x128>
 80039cc:	6833      	ldr	r3, [r6, #0]
 80039ce:	6825      	ldr	r5, [r4, #0]
 80039d0:	1d18      	adds	r0, r3, #4
 80039d2:	6961      	ldr	r1, [r4, #20]
 80039d4:	6030      	str	r0, [r6, #0]
 80039d6:	062e      	lsls	r6, r5, #24
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	d501      	bpl.n	80039e0 <_printf_i+0x1c0>
 80039dc:	6019      	str	r1, [r3, #0]
 80039de:	e002      	b.n	80039e6 <_printf_i+0x1c6>
 80039e0:	0668      	lsls	r0, r5, #25
 80039e2:	d5fb      	bpl.n	80039dc <_printf_i+0x1bc>
 80039e4:	8019      	strh	r1, [r3, #0]
 80039e6:	2300      	movs	r3, #0
 80039e8:	4616      	mov	r6, r2
 80039ea:	6123      	str	r3, [r4, #16]
 80039ec:	e7bc      	b.n	8003968 <_printf_i+0x148>
 80039ee:	6833      	ldr	r3, [r6, #0]
 80039f0:	2100      	movs	r1, #0
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	6032      	str	r2, [r6, #0]
 80039f6:	681e      	ldr	r6, [r3, #0]
 80039f8:	6862      	ldr	r2, [r4, #4]
 80039fa:	4630      	mov	r0, r6
 80039fc:	f000 f980 	bl	8003d00 <memchr>
 8003a00:	b108      	cbz	r0, 8003a06 <_printf_i+0x1e6>
 8003a02:	1b80      	subs	r0, r0, r6
 8003a04:	6060      	str	r0, [r4, #4]
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	6123      	str	r3, [r4, #16]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a10:	e7aa      	b.n	8003968 <_printf_i+0x148>
 8003a12:	6923      	ldr	r3, [r4, #16]
 8003a14:	4632      	mov	r2, r6
 8003a16:	4649      	mov	r1, r9
 8003a18:	4640      	mov	r0, r8
 8003a1a:	47d0      	blx	sl
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d0ad      	beq.n	800397c <_printf_i+0x15c>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	079b      	lsls	r3, r3, #30
 8003a24:	d413      	bmi.n	8003a4e <_printf_i+0x22e>
 8003a26:	68e0      	ldr	r0, [r4, #12]
 8003a28:	9b03      	ldr	r3, [sp, #12]
 8003a2a:	4298      	cmp	r0, r3
 8003a2c:	bfb8      	it	lt
 8003a2e:	4618      	movlt	r0, r3
 8003a30:	e7a6      	b.n	8003980 <_printf_i+0x160>
 8003a32:	2301      	movs	r3, #1
 8003a34:	4632      	mov	r2, r6
 8003a36:	4649      	mov	r1, r9
 8003a38:	4640      	mov	r0, r8
 8003a3a:	47d0      	blx	sl
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d09d      	beq.n	800397c <_printf_i+0x15c>
 8003a40:	3501      	adds	r5, #1
 8003a42:	68e3      	ldr	r3, [r4, #12]
 8003a44:	9903      	ldr	r1, [sp, #12]
 8003a46:	1a5b      	subs	r3, r3, r1
 8003a48:	42ab      	cmp	r3, r5
 8003a4a:	dcf2      	bgt.n	8003a32 <_printf_i+0x212>
 8003a4c:	e7eb      	b.n	8003a26 <_printf_i+0x206>
 8003a4e:	2500      	movs	r5, #0
 8003a50:	f104 0619 	add.w	r6, r4, #25
 8003a54:	e7f5      	b.n	8003a42 <_printf_i+0x222>
 8003a56:	bf00      	nop
 8003a58:	08003f21 	.word	0x08003f21
 8003a5c:	08003f32 	.word	0x08003f32

08003a60 <__sflush_r>:
 8003a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a68:	0716      	lsls	r6, r2, #28
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	d454      	bmi.n	8003b1a <__sflush_r+0xba>
 8003a70:	684b      	ldr	r3, [r1, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	dc02      	bgt.n	8003a7c <__sflush_r+0x1c>
 8003a76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	dd48      	ble.n	8003b0e <__sflush_r+0xae>
 8003a7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a7e:	2e00      	cmp	r6, #0
 8003a80:	d045      	beq.n	8003b0e <__sflush_r+0xae>
 8003a82:	2300      	movs	r3, #0
 8003a84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a88:	682f      	ldr	r7, [r5, #0]
 8003a8a:	6a21      	ldr	r1, [r4, #32]
 8003a8c:	602b      	str	r3, [r5, #0]
 8003a8e:	d030      	beq.n	8003af2 <__sflush_r+0x92>
 8003a90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	0759      	lsls	r1, r3, #29
 8003a96:	d505      	bpl.n	8003aa4 <__sflush_r+0x44>
 8003a98:	6863      	ldr	r3, [r4, #4]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a9e:	b10b      	cbz	r3, 8003aa4 <__sflush_r+0x44>
 8003aa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003aa8:	6a21      	ldr	r1, [r4, #32]
 8003aaa:	4628      	mov	r0, r5
 8003aac:	47b0      	blx	r6
 8003aae:	1c43      	adds	r3, r0, #1
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	d106      	bne.n	8003ac2 <__sflush_r+0x62>
 8003ab4:	6829      	ldr	r1, [r5, #0]
 8003ab6:	291d      	cmp	r1, #29
 8003ab8:	d82b      	bhi.n	8003b12 <__sflush_r+0xb2>
 8003aba:	4a2a      	ldr	r2, [pc, #168]	@ (8003b64 <__sflush_r+0x104>)
 8003abc:	410a      	asrs	r2, r1
 8003abe:	07d6      	lsls	r6, r2, #31
 8003ac0:	d427      	bmi.n	8003b12 <__sflush_r+0xb2>
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	04d9      	lsls	r1, r3, #19
 8003ac6:	6062      	str	r2, [r4, #4]
 8003ac8:	6922      	ldr	r2, [r4, #16]
 8003aca:	6022      	str	r2, [r4, #0]
 8003acc:	d504      	bpl.n	8003ad8 <__sflush_r+0x78>
 8003ace:	1c42      	adds	r2, r0, #1
 8003ad0:	d101      	bne.n	8003ad6 <__sflush_r+0x76>
 8003ad2:	682b      	ldr	r3, [r5, #0]
 8003ad4:	b903      	cbnz	r3, 8003ad8 <__sflush_r+0x78>
 8003ad6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ad8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ada:	602f      	str	r7, [r5, #0]
 8003adc:	b1b9      	cbz	r1, 8003b0e <__sflush_r+0xae>
 8003ade:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ae2:	4299      	cmp	r1, r3
 8003ae4:	d002      	beq.n	8003aec <__sflush_r+0x8c>
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f7ff fbee 	bl	80032c8 <_free_r>
 8003aec:	2300      	movs	r3, #0
 8003aee:	6363      	str	r3, [r4, #52]	@ 0x34
 8003af0:	e00d      	b.n	8003b0e <__sflush_r+0xae>
 8003af2:	2301      	movs	r3, #1
 8003af4:	4628      	mov	r0, r5
 8003af6:	47b0      	blx	r6
 8003af8:	4602      	mov	r2, r0
 8003afa:	1c50      	adds	r0, r2, #1
 8003afc:	d1c9      	bne.n	8003a92 <__sflush_r+0x32>
 8003afe:	682b      	ldr	r3, [r5, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0c6      	beq.n	8003a92 <__sflush_r+0x32>
 8003b04:	2b1d      	cmp	r3, #29
 8003b06:	d001      	beq.n	8003b0c <__sflush_r+0xac>
 8003b08:	2b16      	cmp	r3, #22
 8003b0a:	d11d      	bne.n	8003b48 <__sflush_r+0xe8>
 8003b0c:	602f      	str	r7, [r5, #0]
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e021      	b.n	8003b56 <__sflush_r+0xf6>
 8003b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b16:	b21b      	sxth	r3, r3
 8003b18:	e01a      	b.n	8003b50 <__sflush_r+0xf0>
 8003b1a:	690f      	ldr	r7, [r1, #16]
 8003b1c:	2f00      	cmp	r7, #0
 8003b1e:	d0f6      	beq.n	8003b0e <__sflush_r+0xae>
 8003b20:	0793      	lsls	r3, r2, #30
 8003b22:	680e      	ldr	r6, [r1, #0]
 8003b24:	600f      	str	r7, [r1, #0]
 8003b26:	bf0c      	ite	eq
 8003b28:	694b      	ldreq	r3, [r1, #20]
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	eba6 0807 	sub.w	r8, r6, r7
 8003b30:	608b      	str	r3, [r1, #8]
 8003b32:	f1b8 0f00 	cmp.w	r8, #0
 8003b36:	ddea      	ble.n	8003b0e <__sflush_r+0xae>
 8003b38:	4643      	mov	r3, r8
 8003b3a:	463a      	mov	r2, r7
 8003b3c:	6a21      	ldr	r1, [r4, #32]
 8003b3e:	4628      	mov	r0, r5
 8003b40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003b42:	47b0      	blx	r6
 8003b44:	2800      	cmp	r0, #0
 8003b46:	dc08      	bgt.n	8003b5a <__sflush_r+0xfa>
 8003b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b54:	81a3      	strh	r3, [r4, #12]
 8003b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b5a:	4407      	add	r7, r0
 8003b5c:	eba8 0800 	sub.w	r8, r8, r0
 8003b60:	e7e7      	b.n	8003b32 <__sflush_r+0xd2>
 8003b62:	bf00      	nop
 8003b64:	dfbffffe 	.word	0xdfbffffe

08003b68 <_fflush_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	690b      	ldr	r3, [r1, #16]
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	460c      	mov	r4, r1
 8003b70:	b913      	cbnz	r3, 8003b78 <_fflush_r+0x10>
 8003b72:	2500      	movs	r5, #0
 8003b74:	4628      	mov	r0, r5
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	b118      	cbz	r0, 8003b82 <_fflush_r+0x1a>
 8003b7a:	6a03      	ldr	r3, [r0, #32]
 8003b7c:	b90b      	cbnz	r3, 8003b82 <_fflush_r+0x1a>
 8003b7e:	f7ff fa9b 	bl	80030b8 <__sinit>
 8003b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f3      	beq.n	8003b72 <_fflush_r+0xa>
 8003b8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b8c:	07d0      	lsls	r0, r2, #31
 8003b8e:	d404      	bmi.n	8003b9a <_fflush_r+0x32>
 8003b90:	0599      	lsls	r1, r3, #22
 8003b92:	d402      	bmi.n	8003b9a <_fflush_r+0x32>
 8003b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b96:	f7ff fb94 	bl	80032c2 <__retarget_lock_acquire_recursive>
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	f7ff ff5f 	bl	8003a60 <__sflush_r>
 8003ba2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	07da      	lsls	r2, r3, #31
 8003ba8:	d4e4      	bmi.n	8003b74 <_fflush_r+0xc>
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	059b      	lsls	r3, r3, #22
 8003bae:	d4e1      	bmi.n	8003b74 <_fflush_r+0xc>
 8003bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bb2:	f7ff fb87 	bl	80032c4 <__retarget_lock_release_recursive>
 8003bb6:	e7dd      	b.n	8003b74 <_fflush_r+0xc>

08003bb8 <__swbuf_r>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	460e      	mov	r6, r1
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	4605      	mov	r5, r0
 8003bc0:	b118      	cbz	r0, 8003bca <__swbuf_r+0x12>
 8003bc2:	6a03      	ldr	r3, [r0, #32]
 8003bc4:	b90b      	cbnz	r3, 8003bca <__swbuf_r+0x12>
 8003bc6:	f7ff fa77 	bl	80030b8 <__sinit>
 8003bca:	69a3      	ldr	r3, [r4, #24]
 8003bcc:	60a3      	str	r3, [r4, #8]
 8003bce:	89a3      	ldrh	r3, [r4, #12]
 8003bd0:	071a      	lsls	r2, r3, #28
 8003bd2:	d501      	bpl.n	8003bd8 <__swbuf_r+0x20>
 8003bd4:	6923      	ldr	r3, [r4, #16]
 8003bd6:	b943      	cbnz	r3, 8003bea <__swbuf_r+0x32>
 8003bd8:	4621      	mov	r1, r4
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f000 f82a 	bl	8003c34 <__swsetup_r>
 8003be0:	b118      	cbz	r0, 8003bea <__swbuf_r+0x32>
 8003be2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003be6:	4638      	mov	r0, r7
 8003be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	b2f6      	uxtb	r6, r6
 8003bee:	6922      	ldr	r2, [r4, #16]
 8003bf0:	4637      	mov	r7, r6
 8003bf2:	1a98      	subs	r0, r3, r2
 8003bf4:	6963      	ldr	r3, [r4, #20]
 8003bf6:	4283      	cmp	r3, r0
 8003bf8:	dc05      	bgt.n	8003c06 <__swbuf_r+0x4e>
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f7ff ffb3 	bl	8003b68 <_fflush_r>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d1ed      	bne.n	8003be2 <__swbuf_r+0x2a>
 8003c06:	68a3      	ldr	r3, [r4, #8]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	60a3      	str	r3, [r4, #8]
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	6022      	str	r2, [r4, #0]
 8003c12:	701e      	strb	r6, [r3, #0]
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	6962      	ldr	r2, [r4, #20]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d004      	beq.n	8003c26 <__swbuf_r+0x6e>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	07db      	lsls	r3, r3, #31
 8003c20:	d5e1      	bpl.n	8003be6 <__swbuf_r+0x2e>
 8003c22:	2e0a      	cmp	r6, #10
 8003c24:	d1df      	bne.n	8003be6 <__swbuf_r+0x2e>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f7ff ff9d 	bl	8003b68 <_fflush_r>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d0d9      	beq.n	8003be6 <__swbuf_r+0x2e>
 8003c32:	e7d6      	b.n	8003be2 <__swbuf_r+0x2a>

08003c34 <__swsetup_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4b29      	ldr	r3, [pc, #164]	@ (8003cdc <__swsetup_r+0xa8>)
 8003c38:	4605      	mov	r5, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	b118      	cbz	r0, 8003c48 <__swsetup_r+0x14>
 8003c40:	6a03      	ldr	r3, [r0, #32]
 8003c42:	b90b      	cbnz	r3, 8003c48 <__swsetup_r+0x14>
 8003c44:	f7ff fa38 	bl	80030b8 <__sinit>
 8003c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c4c:	0719      	lsls	r1, r3, #28
 8003c4e:	d422      	bmi.n	8003c96 <__swsetup_r+0x62>
 8003c50:	06da      	lsls	r2, r3, #27
 8003c52:	d407      	bmi.n	8003c64 <__swsetup_r+0x30>
 8003c54:	2209      	movs	r2, #9
 8003c56:	602a      	str	r2, [r5, #0]
 8003c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c60:	81a3      	strh	r3, [r4, #12]
 8003c62:	e033      	b.n	8003ccc <__swsetup_r+0x98>
 8003c64:	0758      	lsls	r0, r3, #29
 8003c66:	d512      	bpl.n	8003c8e <__swsetup_r+0x5a>
 8003c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c6a:	b141      	cbz	r1, 8003c7e <__swsetup_r+0x4a>
 8003c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c70:	4299      	cmp	r1, r3
 8003c72:	d002      	beq.n	8003c7a <__swsetup_r+0x46>
 8003c74:	4628      	mov	r0, r5
 8003c76:	f7ff fb27 	bl	80032c8 <_free_r>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	2300      	movs	r3, #0
 8003c88:	6063      	str	r3, [r4, #4]
 8003c8a:	6923      	ldr	r3, [r4, #16]
 8003c8c:	6023      	str	r3, [r4, #0]
 8003c8e:	89a3      	ldrh	r3, [r4, #12]
 8003c90:	f043 0308 	orr.w	r3, r3, #8
 8003c94:	81a3      	strh	r3, [r4, #12]
 8003c96:	6923      	ldr	r3, [r4, #16]
 8003c98:	b94b      	cbnz	r3, 8003cae <__swsetup_r+0x7a>
 8003c9a:	89a3      	ldrh	r3, [r4, #12]
 8003c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca4:	d003      	beq.n	8003cae <__swsetup_r+0x7a>
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f000 f85c 	bl	8003d66 <__smakebuf_r>
 8003cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cb2:	f013 0201 	ands.w	r2, r3, #1
 8003cb6:	d00a      	beq.n	8003cce <__swsetup_r+0x9a>
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60a2      	str	r2, [r4, #8]
 8003cbc:	6962      	ldr	r2, [r4, #20]
 8003cbe:	4252      	negs	r2, r2
 8003cc0:	61a2      	str	r2, [r4, #24]
 8003cc2:	6922      	ldr	r2, [r4, #16]
 8003cc4:	b942      	cbnz	r2, 8003cd8 <__swsetup_r+0xa4>
 8003cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003cca:	d1c5      	bne.n	8003c58 <__swsetup_r+0x24>
 8003ccc:	bd38      	pop	{r3, r4, r5, pc}
 8003cce:	0799      	lsls	r1, r3, #30
 8003cd0:	bf58      	it	pl
 8003cd2:	6962      	ldrpl	r2, [r4, #20]
 8003cd4:	60a2      	str	r2, [r4, #8]
 8003cd6:	e7f4      	b.n	8003cc2 <__swsetup_r+0x8e>
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e7f7      	b.n	8003ccc <__swsetup_r+0x98>
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <_sbrk_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	4d05      	ldr	r5, [pc, #20]	@ (8003cfc <_sbrk_r+0x1c>)
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	4608      	mov	r0, r1
 8003cea:	602b      	str	r3, [r5, #0]
 8003cec:	f7fc fce2 	bl	80006b4 <_sbrk>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d102      	bne.n	8003cfa <_sbrk_r+0x1a>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	b103      	cbz	r3, 8003cfa <_sbrk_r+0x1a>
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	20000214 	.word	0x20000214

08003d00 <memchr>:
 8003d00:	b2c9      	uxtb	r1, r1
 8003d02:	4603      	mov	r3, r0
 8003d04:	4402      	add	r2, r0
 8003d06:	b510      	push	{r4, lr}
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	d101      	bne.n	8003d12 <memchr+0x12>
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e003      	b.n	8003d1a <memchr+0x1a>
 8003d12:	7804      	ldrb	r4, [r0, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	428c      	cmp	r4, r1
 8003d18:	d1f6      	bne.n	8003d08 <memchr+0x8>
 8003d1a:	bd10      	pop	{r4, pc}

08003d1c <__swhatbuf_r>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	460c      	mov	r4, r1
 8003d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d24:	b096      	sub	sp, #88	@ 0x58
 8003d26:	4615      	mov	r5, r2
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	461e      	mov	r6, r3
 8003d2c:	da0c      	bge.n	8003d48 <__swhatbuf_r+0x2c>
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	2100      	movs	r1, #0
 8003d32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d36:	bf14      	ite	ne
 8003d38:	2340      	movne	r3, #64	@ 0x40
 8003d3a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d3e:	2000      	movs	r0, #0
 8003d40:	6031      	str	r1, [r6, #0]
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	b016      	add	sp, #88	@ 0x58
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	466a      	mov	r2, sp
 8003d4a:	f000 f849 	bl	8003de0 <_fstat_r>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	dbed      	blt.n	8003d2e <__swhatbuf_r+0x12>
 8003d52:	9901      	ldr	r1, [sp, #4]
 8003d54:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d58:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d5c:	4259      	negs	r1, r3
 8003d5e:	4159      	adcs	r1, r3
 8003d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d64:	e7eb      	b.n	8003d3e <__swhatbuf_r+0x22>

08003d66 <__smakebuf_r>:
 8003d66:	898b      	ldrh	r3, [r1, #12]
 8003d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d6a:	079d      	lsls	r5, r3, #30
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	d507      	bpl.n	8003d82 <__smakebuf_r+0x1c>
 8003d72:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d76:	6023      	str	r3, [r4, #0]
 8003d78:	6123      	str	r3, [r4, #16]
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	6163      	str	r3, [r4, #20]
 8003d7e:	b003      	add	sp, #12
 8003d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d82:	ab01      	add	r3, sp, #4
 8003d84:	466a      	mov	r2, sp
 8003d86:	f7ff ffc9 	bl	8003d1c <__swhatbuf_r>
 8003d8a:	9f00      	ldr	r7, [sp, #0]
 8003d8c:	4605      	mov	r5, r0
 8003d8e:	4630      	mov	r0, r6
 8003d90:	4639      	mov	r1, r7
 8003d92:	f7ff fb05 	bl	80033a0 <_malloc_r>
 8003d96:	b948      	cbnz	r0, 8003dac <__smakebuf_r+0x46>
 8003d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d9c:	059a      	lsls	r2, r3, #22
 8003d9e:	d4ee      	bmi.n	8003d7e <__smakebuf_r+0x18>
 8003da0:	f023 0303 	bic.w	r3, r3, #3
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	e7e2      	b.n	8003d72 <__smakebuf_r+0xc>
 8003dac:	89a3      	ldrh	r3, [r4, #12]
 8003dae:	6020      	str	r0, [r4, #0]
 8003db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003db4:	81a3      	strh	r3, [r4, #12]
 8003db6:	9b01      	ldr	r3, [sp, #4]
 8003db8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003dbc:	b15b      	cbz	r3, 8003dd6 <__smakebuf_r+0x70>
 8003dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f000 f81e 	bl	8003e04 <_isatty_r>
 8003dc8:	b128      	cbz	r0, 8003dd6 <__smakebuf_r+0x70>
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	f023 0303 	bic.w	r3, r3, #3
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	81a3      	strh	r3, [r4, #12]
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	431d      	orrs	r5, r3
 8003dda:	81a5      	strh	r5, [r4, #12]
 8003ddc:	e7cf      	b.n	8003d7e <__smakebuf_r+0x18>
	...

08003de0 <_fstat_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	2300      	movs	r3, #0
 8003de4:	4d06      	ldr	r5, [pc, #24]	@ (8003e00 <_fstat_r+0x20>)
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	602b      	str	r3, [r5, #0]
 8003dee:	f7fc fc39 	bl	8000664 <_fstat>
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	d102      	bne.n	8003dfc <_fstat_r+0x1c>
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	b103      	cbz	r3, 8003dfc <_fstat_r+0x1c>
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000214 	.word	0x20000214

08003e04 <_isatty_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	2300      	movs	r3, #0
 8003e08:	4d05      	ldr	r5, [pc, #20]	@ (8003e20 <_isatty_r+0x1c>)
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fc fc38 	bl	8000684 <_isatty>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_isatty_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_isatty_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	20000214 	.word	0x20000214

08003e24 <_init>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	bf00      	nop
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr

08003e30 <_fini>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr
