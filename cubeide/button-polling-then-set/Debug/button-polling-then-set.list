
button-polling-then-set.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e0  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003318  08003318  00004318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003428  08003428  00004428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003430  08003430  00004430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08003434  08003434  00004434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000000  08003438  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000178  20000068  080034a0  00005068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e0  080034a0  000051e0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 10 .comment      00000026  00000000  00000000  0000509e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001818b  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000553e  00000000  00000000  0001d24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000555f  00000000  00000000  0002278d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00027cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009de  00000000  00000000  00028870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003030f  00000000  00000000  0002924e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3f2  00000000  00000000  0005955d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b0ae  00000000  00000000  0006694f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000019d8  00000000  00000000  00191a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000010d  00000000  00000000  001933d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <deregister_tm_clones>:
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <deregister_tm_clones+0x10>)
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <deregister_tm_clones+0x14>)
 800023c:	4283      	cmp	r3, r0
 800023e:	d002      	beq.n	8000246 <deregister_tm_clones+0xe>
 8000240:	4b03      	ldr	r3, [pc, #12]	@ (8000250 <deregister_tm_clones+0x18>)
 8000242:	b103      	cbz	r3, 8000246 <deregister_tm_clones+0xe>
 8000244:	4718      	bx	r3
 8000246:	4770      	bx	lr
 8000248:	20000068 	.word	0x20000068
 800024c:	20000068 	.word	0x20000068
 8000250:	00000000 	.word	0x00000000

08000254 <register_tm_clones>:
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <register_tm_clones+0x1c>)
 8000256:	4907      	ldr	r1, [pc, #28]	@ (8000274 <register_tm_clones+0x20>)
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	1089      	asrs	r1, r1, #2
 800025c:	bf48      	it	mi
 800025e:	3101      	addmi	r1, #1
 8000260:	1049      	asrs	r1, r1, #1
 8000262:	d003      	beq.n	800026c <register_tm_clones+0x18>
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <register_tm_clones+0x24>)
 8000266:	b10b      	cbz	r3, 800026c <register_tm_clones+0x18>
 8000268:	4801      	ldr	r0, [pc, #4]	@ (8000270 <register_tm_clones+0x1c>)
 800026a:	4718      	bx	r3
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	20000068 	.word	0x20000068
 8000274:	20000068 	.word	0x20000068
 8000278:	00000000 	.word	0x00000000

0800027c <__do_global_dtors_aux>:
 800027c:	b510      	push	{r4, lr}
 800027e:	4c06      	ldr	r4, [pc, #24]	@ (8000298 <__do_global_dtors_aux+0x1c>)
 8000280:	7823      	ldrb	r3, [r4, #0]
 8000282:	b943      	cbnz	r3, 8000296 <__do_global_dtors_aux+0x1a>
 8000284:	f7ff ffd8 	bl	8000238 <deregister_tm_clones>
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <__do_global_dtors_aux+0x20>)
 800028a:	b113      	cbz	r3, 8000292 <__do_global_dtors_aux+0x16>
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x24>)
 800028e:	f3af 8000 	nop.w
 8000292:	2301      	movs	r3, #1
 8000294:	7023      	strb	r3, [r4, #0]
 8000296:	bd10      	pop	{r4, pc}
 8000298:	20000068 	.word	0x20000068
 800029c:	00000000 	.word	0x00000000
 80002a0:	08003300 	.word	0x08003300

080002a4 <frame_dummy>:
 80002a4:	b508      	push	{r3, lr}
 80002a6:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <frame_dummy+0x14>)
 80002a8:	b11b      	cbz	r3, 80002b2 <frame_dummy+0xe>
 80002aa:	4904      	ldr	r1, [pc, #16]	@ (80002bc <frame_dummy+0x18>)
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <frame_dummy+0x1c>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002b6:	e7cd      	b.n	8000254 <register_tm_clones>
 80002b8:	00000000 	.word	0x00000000
 80002bc:	2000006c 	.word	0x2000006c
 80002c0:	08003300 	.word	0x08003300

080002c4 <__libc_init_array>:
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <__libc_init_array+0x40>)
 80002c6:	b570      	push	{r4, r5, r6, lr}
 80002c8:	4d0f      	ldr	r5, [pc, #60]	@ (8000308 <__libc_init_array+0x44>)
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	eba3 0605 	sub.w	r6, r3, r5
 80002d0:	d007      	beq.n	80002e2 <__libc_init_array+0x1e>
 80002d2:	10b6      	asrs	r6, r6, #2
 80002d4:	2400      	movs	r4, #0
 80002d6:	3401      	adds	r4, #1
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d8f9      	bhi.n	80002d6 <__libc_init_array+0x12>
 80002e2:	4d0a      	ldr	r5, [pc, #40]	@ (800030c <__libc_init_array+0x48>)
 80002e4:	f003 f80c 	bl	8003300 <_init>
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <__libc_init_array+0x4c>)
 80002ea:	1b5e      	subs	r6, r3, r5
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80002f2:	d006      	beq.n	8000302 <__libc_init_array+0x3e>
 80002f4:	2400      	movs	r4, #0
 80002f6:	3401      	adds	r4, #1
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d8f9      	bhi.n	80002f6 <__libc_init_array+0x32>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	08003430 	.word	0x08003430
 8000308:	08003430 	.word	0x08003430
 800030c:	08003430 	.word	0x08003430
 8000310:	08003434 	.word	0x08003434

08000314 <memset>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	0786      	lsls	r6, r0, #30
 8000318:	d047      	beq.n	80003aa <memset+0x96>
 800031a:	1e54      	subs	r4, r2, #1
 800031c:	2a00      	cmp	r2, #0
 800031e:	d03e      	beq.n	800039e <memset+0x8a>
 8000320:	b2ca      	uxtb	r2, r1
 8000322:	4603      	mov	r3, r0
 8000324:	e001      	b.n	800032a <memset+0x16>
 8000326:	3c01      	subs	r4, #1
 8000328:	d339      	bcc.n	800039e <memset+0x8a>
 800032a:	f803 2b01 	strb.w	r2, [r3], #1
 800032e:	079d      	lsls	r5, r3, #30
 8000330:	d1f9      	bne.n	8000326 <memset+0x12>
 8000332:	2c03      	cmp	r4, #3
 8000334:	d92c      	bls.n	8000390 <memset+0x7c>
 8000336:	b2cd      	uxtb	r5, r1
 8000338:	2c0f      	cmp	r4, #15
 800033a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800033e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8000342:	d935      	bls.n	80003b0 <memset+0x9c>
 8000344:	f1a4 0c10 	sub.w	ip, r4, #16
 8000348:	f103 0e10 	add.w	lr, r3, #16
 800034c:	461a      	mov	r2, r3
 800034e:	f02c 060f 	bic.w	r6, ip, #15
 8000352:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8000356:	44b6      	add	lr, r6
 8000358:	e9c2 5500 	strd	r5, r5, [r2]
 800035c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000360:	3210      	adds	r2, #16
 8000362:	4572      	cmp	r2, lr
 8000364:	d1f8      	bne.n	8000358 <memset+0x44>
 8000366:	f10c 0201 	add.w	r2, ip, #1
 800036a:	f014 0f0c 	tst.w	r4, #12
 800036e:	f004 0c0f 	and.w	ip, r4, #15
 8000372:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000376:	d013      	beq.n	80003a0 <memset+0x8c>
 8000378:	f1ac 0304 	sub.w	r3, ip, #4
 800037c:	f023 0303 	bic.w	r3, r3, #3
 8000380:	3304      	adds	r3, #4
 8000382:	4413      	add	r3, r2
 8000384:	f842 5b04 	str.w	r5, [r2], #4
 8000388:	4293      	cmp	r3, r2
 800038a:	d1fb      	bne.n	8000384 <memset+0x70>
 800038c:	f00c 0403 	and.w	r4, ip, #3
 8000390:	b12c      	cbz	r4, 800039e <memset+0x8a>
 8000392:	b2c9      	uxtb	r1, r1
 8000394:	441c      	add	r4, r3
 8000396:	f803 1b01 	strb.w	r1, [r3], #1
 800039a:	42a3      	cmp	r3, r4
 800039c:	d1fb      	bne.n	8000396 <memset+0x82>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	4664      	mov	r4, ip
 80003a2:	4613      	mov	r3, r2
 80003a4:	2c00      	cmp	r4, #0
 80003a6:	d1f4      	bne.n	8000392 <memset+0x7e>
 80003a8:	e7f9      	b.n	800039e <memset+0x8a>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4614      	mov	r4, r2
 80003ae:	e7c0      	b.n	8000332 <memset+0x1e>
 80003b0:	461a      	mov	r2, r3
 80003b2:	46a4      	mov	ip, r4
 80003b4:	e7e0      	b.n	8000378 <memset+0x64>
 80003b6:	bf00      	nop

080003b8 <__errno>:
 80003b8:	4b01      	ldr	r3, [pc, #4]	@ (80003c0 <__errno+0x8>)
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000000 	.word	0x20000000

080003c4 <memmove>:
 80003c4:	4288      	cmp	r0, r1
 80003c6:	d90e      	bls.n	80003e6 <memmove+0x22>
 80003c8:	188b      	adds	r3, r1, r2
 80003ca:	4283      	cmp	r3, r0
 80003cc:	d90b      	bls.n	80003e6 <memmove+0x22>
 80003ce:	eb00 0c02 	add.w	ip, r0, r2
 80003d2:	2a00      	cmp	r2, #0
 80003d4:	d06e      	beq.n	80004b4 <memmove+0xf0>
 80003d6:	4662      	mov	r2, ip
 80003d8:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80003dc:	4299      	cmp	r1, r3
 80003de:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80003e2:	d1f9      	bne.n	80003d8 <memmove+0x14>
 80003e4:	4770      	bx	lr
 80003e6:	2a0f      	cmp	r2, #15
 80003e8:	d80f      	bhi.n	800040a <memmove+0x46>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d05f      	beq.n	80004b4 <memmove+0xf0>
 80003f4:	f10c 0c01 	add.w	ip, ip, #1
 80003f8:	3b01      	subs	r3, #1
 80003fa:	448c      	add	ip, r1
 80003fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000400:	4561      	cmp	r1, ip
 8000402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000406:	d1f9      	bne.n	80003fc <memmove+0x38>
 8000408:	4770      	bx	lr
 800040a:	ea40 0301 	orr.w	r3, r0, r1
 800040e:	079b      	lsls	r3, r3, #30
 8000410:	d151      	bne.n	80004b6 <memmove+0xf2>
 8000412:	f1a2 0310 	sub.w	r3, r2, #16
 8000416:	f101 0c20 	add.w	ip, r1, #32
 800041a:	b570      	push	{r4, r5, r6, lr}
 800041c:	f023 050f 	bic.w	r5, r3, #15
 8000420:	f101 0e10 	add.w	lr, r1, #16
 8000424:	f100 0410 	add.w	r4, r0, #16
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	44ac      	add	ip, r5
 800042c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8000430:	f10e 0e10 	add.w	lr, lr, #16
 8000434:	3410      	adds	r4, #16
 8000436:	f844 5c20 	str.w	r5, [r4, #-32]
 800043a:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
 800043e:	f844 5c1c 	str.w	r5, [r4, #-28]
 8000442:	f85e 5c18 	ldr.w	r5, [lr, #-24]
 8000446:	f844 5c18 	str.w	r5, [r4, #-24]
 800044a:	f85e 5c14 	ldr.w	r5, [lr, #-20]
 800044e:	45e6      	cmp	lr, ip
 8000450:	f844 5c14 	str.w	r5, [r4, #-20]
 8000454:	d1ea      	bne.n	800042c <memmove+0x68>
 8000456:	3301      	adds	r3, #1
 8000458:	f012 0f0c 	tst.w	r2, #12
 800045c:	f002 0c0f 	and.w	ip, r2, #15
 8000460:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8000464:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8000468:	d029      	beq.n	80004be <memmove+0xfa>
 800046a:	f1ac 0c04 	sub.w	ip, ip, #4
 800046e:	1f1c      	subs	r4, r3, #4
 8000470:	468e      	mov	lr, r1
 8000472:	f02c 0603 	bic.w	r6, ip, #3
 8000476:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800047a:	441e      	add	r6, r3
 800047c:	f85e 5b04 	ldr.w	r5, [lr], #4
 8000480:	f844 5f04 	str.w	r5, [r4, #4]!
 8000484:	42b4      	cmp	r4, r6
 8000486:	d1f9      	bne.n	800047c <memmove+0xb8>
 8000488:	f10c 0401 	add.w	r4, ip, #1
 800048c:	f002 0203 	and.w	r2, r2, #3
 8000490:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8000498:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 800049c:	b14a      	cbz	r2, 80004b2 <memmove+0xee>
 800049e:	f10c 0c01 	add.w	ip, ip, #1
 80004a2:	3b01      	subs	r3, #1
 80004a4:	448c      	add	ip, r1
 80004a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80004aa:	4561      	cmp	r1, ip
 80004ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80004b0:	d1f9      	bne.n	80004a6 <memmove+0xe2>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	4770      	bx	lr
 80004b6:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80004ba:	4603      	mov	r3, r0
 80004bc:	e79a      	b.n	80003f4 <memmove+0x30>
 80004be:	4662      	mov	r2, ip
 80004c0:	e7ea      	b.n	8000498 <memmove+0xd4>
 80004c2:	bf00      	nop

080004c4 <_iprintf_r>:
 80004c4:	b40e      	push	{r1, r2, r3}
 80004c6:	b500      	push	{lr}
 80004c8:	b082      	sub	sp, #8
 80004ca:	6881      	ldr	r1, [r0, #8]
 80004cc:	ab03      	add	r3, sp, #12
 80004ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	f000 f860 	bl	8000598 <_vfiprintf_r>
 80004d8:	b002      	add	sp, #8
 80004da:	f85d eb04 	ldr.w	lr, [sp], #4
 80004de:	b003      	add	sp, #12
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <iprintf>:
 80004e4:	b40f      	push	{r0, r1, r2, r3}
 80004e6:	4908      	ldr	r1, [pc, #32]	@ (8000508 <iprintf+0x24>)
 80004e8:	b500      	push	{lr}
 80004ea:	b083      	sub	sp, #12
 80004ec:	6808      	ldr	r0, [r1, #0]
 80004ee:	ab04      	add	r3, sp, #16
 80004f0:	6881      	ldr	r1, [r0, #8]
 80004f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	f000 f84e 	bl	8000598 <_vfiprintf_r>
 80004fc:	b003      	add	sp, #12
 80004fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8000502:	b004      	add	sp, #16
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000

0800050c <__sfputc_r>:
 800050c:	6893      	ldr	r3, [r2, #8]
 800050e:	3b01      	subs	r3, #1
 8000510:	2b00      	cmp	r3, #0
 8000512:	6093      	str	r3, [r2, #8]
 8000514:	da11      	bge.n	800053a <__sfputc_r+0x2e>
 8000516:	b410      	push	{r4}
 8000518:	6994      	ldr	r4, [r2, #24]
 800051a:	42a3      	cmp	r3, r4
 800051c:	db09      	blt.n	8000532 <__sfputc_r+0x26>
 800051e:	290a      	cmp	r1, #10
 8000520:	d007      	beq.n	8000532 <__sfputc_r+0x26>
 8000522:	6813      	ldr	r3, [r2, #0]
 8000524:	1c58      	adds	r0, r3, #1
 8000526:	6010      	str	r0, [r2, #0]
 8000528:	4608      	mov	r0, r1
 800052a:	7019      	strb	r1, [r3, #0]
 800052c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000536:	f000 b957 	b.w	80007e8 <__swbuf_r>
 800053a:	6813      	ldr	r3, [r2, #0]
 800053c:	1c58      	adds	r0, r3, #1
 800053e:	6010      	str	r0, [r2, #0]
 8000540:	4608      	mov	r0, r1
 8000542:	7019      	strb	r1, [r3, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <__sfputs_r>:
 8000548:	b19b      	cbz	r3, 8000572 <__sfputs_r+0x2a>
 800054a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054c:	4413      	add	r3, r2
 800054e:	4606      	mov	r6, r0
 8000550:	460f      	mov	r7, r1
 8000552:	1e54      	subs	r4, r2, #1
 8000554:	1e5d      	subs	r5, r3, #1
 8000556:	e001      	b.n	800055c <__sfputs_r+0x14>
 8000558:	42ac      	cmp	r4, r5
 800055a:	d008      	beq.n	800056e <__sfputs_r+0x26>
 800055c:	463a      	mov	r2, r7
 800055e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000562:	4630      	mov	r0, r6
 8000564:	f7ff ffd2 	bl	800050c <__sfputc_r>
 8000568:	1c43      	adds	r3, r0, #1
 800056a:	d1f5      	bne.n	8000558 <__sfputs_r+0x10>
 800056c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800056e:	2000      	movs	r0, #0
 8000570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000572:	2000      	movs	r0, #0
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__sprint_r>:
 8000578:	6893      	ldr	r3, [r2, #8]
 800057a:	b510      	push	{r4, lr}
 800057c:	4614      	mov	r4, r2
 800057e:	b91b      	cbnz	r3, 8000588 <__sprint_r+0x10>
 8000580:	4618      	mov	r0, r3
 8000582:	2300      	movs	r3, #0
 8000584:	6063      	str	r3, [r4, #4]
 8000586:	bd10      	pop	{r4, pc}
 8000588:	f000 f97a 	bl	8000880 <__sfvwrite_r>
 800058c:	2300      	movs	r3, #0
 800058e:	60a3      	str	r3, [r4, #8]
 8000590:	2300      	movs	r3, #0
 8000592:	6063      	str	r3, [r4, #4]
 8000594:	bd10      	pop	{r4, pc}
 8000596:	bf00      	nop

08000598 <_vfiprintf_r>:
 8000598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800059c:	468b      	mov	fp, r1
 800059e:	b09f      	sub	sp, #124	@ 0x7c
 80005a0:	4616      	mov	r6, r2
 80005a2:	461c      	mov	r4, r3
 80005a4:	4682      	mov	sl, r0
 80005a6:	b118      	cbz	r0, 80005b0 <_vfiprintf_r+0x18>
 80005a8:	6a03      	ldr	r3, [r0, #32]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f000 8103 	beq.w	80007b6 <_vfiprintf_r+0x21e>
 80005b0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80005b4:	0718      	lsls	r0, r3, #28
 80005b6:	f140 8098 	bpl.w	80006ea <_vfiprintf_r+0x152>
 80005ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f000 8093 	beq.w	80006ea <_vfiprintf_r+0x152>
 80005c4:	2300      	movs	r3, #0
 80005c6:	4f7d      	ldr	r7, [pc, #500]	@ (80007bc <_vfiprintf_r+0x224>)
 80005c8:	f04f 0801 	mov.w	r8, #1
 80005cc:	9405      	str	r4, [sp, #20]
 80005ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80005d0:	f243 0320 	movw	r3, #12320	@ 0x3020
 80005d4:	f8ad 3031 	strh.w	r3, [sp, #49]	@ 0x31
 80005d8:	7833      	ldrb	r3, [r6, #0]
 80005da:	4635      	mov	r5, r6
 80005dc:	b14b      	cbz	r3, 80005f2 <_vfiprintf_r+0x5a>
 80005de:	2b25      	cmp	r3, #37	@ 0x25
 80005e0:	d007      	beq.n	80005f2 <_vfiprintf_r+0x5a>
 80005e2:	462a      	mov	r2, r5
 80005e4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80005e8:	b10b      	cbz	r3, 80005ee <_vfiprintf_r+0x56>
 80005ea:	2b25      	cmp	r3, #37	@ 0x25
 80005ec:	d1f9      	bne.n	80005e2 <_vfiprintf_r+0x4a>
 80005ee:	1ba9      	subs	r1, r5, r6
 80005f0:	d160      	bne.n	80006b4 <_vfiprintf_r+0x11c>
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d071      	beq.n	80006da <_vfiprintf_r+0x142>
 80005f6:	2300      	movs	r3, #0
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005fc:	3501      	adds	r5, #1
 80005fe:	9306      	str	r3, [sp, #24]
 8000600:	9309      	str	r3, [sp, #36]	@ 0x24
 8000602:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8000606:	931c      	str	r3, [sp, #112]	@ 0x70
 8000608:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800060c:	e005      	b.n	800061a <_vfiprintf_r+0x82>
 800060e:	1bc0      	subs	r0, r0, r7
 8000610:	4625      	mov	r5, r4
 8000612:	fa08 f000 	lsl.w	r0, r8, r0
 8000616:	4303      	orrs	r3, r0
 8000618:	9306      	str	r3, [sp, #24]
 800061a:	462c      	mov	r4, r5
 800061c:	2205      	movs	r2, #5
 800061e:	4638      	mov	r0, r7
 8000620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000624:	f001 f912 	bl	800184c <memchr>
 8000628:	9b06      	ldr	r3, [sp, #24]
 800062a:	4626      	mov	r6, r4
 800062c:	2800      	cmp	r0, #0
 800062e:	d1ee      	bne.n	800060e <_vfiprintf_r+0x76>
 8000630:	06d9      	lsls	r1, r3, #27
 8000632:	d502      	bpl.n	800063a <_vfiprintf_r+0xa2>
 8000634:	2220      	movs	r2, #32
 8000636:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800063a:	071a      	lsls	r2, r3, #28
 800063c:	d502      	bpl.n	8000644 <_vfiprintf_r+0xac>
 800063e:	222b      	movs	r2, #43	@ 0x2b
 8000640:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8000644:	7829      	ldrb	r1, [r5, #0]
 8000646:	292a      	cmp	r1, #42	@ 0x2a
 8000648:	d159      	bne.n	80006fe <_vfiprintf_r+0x166>
 800064a:	9a05      	ldr	r2, [sp, #20]
 800064c:	1d11      	adds	r1, r2, #4
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	2a00      	cmp	r2, #0
 8000652:	9105      	str	r1, [sp, #20]
 8000654:	f2c0 8089 	blt.w	800076a <_vfiprintf_r+0x1d2>
 8000658:	9209      	str	r2, [sp, #36]	@ 0x24
 800065a:	7869      	ldrb	r1, [r5, #1]
 800065c:	292e      	cmp	r1, #46	@ 0x2e
 800065e:	d062      	beq.n	8000726 <_vfiprintf_r+0x18e>
 8000660:	4c57      	ldr	r4, [pc, #348]	@ (80007c0 <_vfiprintf_r+0x228>)
 8000662:	2203      	movs	r2, #3
 8000664:	4620      	mov	r0, r4
 8000666:	f001 f8f1 	bl	800184c <memchr>
 800066a:	b130      	cbz	r0, 800067a <_vfiprintf_r+0xe2>
 800066c:	1b00      	subs	r0, r0, r4
 800066e:	2240      	movs	r2, #64	@ 0x40
 8000670:	9b06      	ldr	r3, [sp, #24]
 8000672:	3601      	adds	r6, #1
 8000674:	4082      	lsls	r2, r0
 8000676:	4313      	orrs	r3, r2
 8000678:	9306      	str	r3, [sp, #24]
 800067a:	f816 1b01 	ldrb.w	r1, [r6], #1
 800067e:	2206      	movs	r2, #6
 8000680:	4850      	ldr	r0, [pc, #320]	@ (80007c4 <_vfiprintf_r+0x22c>)
 8000682:	f88d 1030 	strb.w	r1, [sp, #48]	@ 0x30
 8000686:	f001 f8e1 	bl	800184c <memchr>
 800068a:	2800      	cmp	r0, #0
 800068c:	d073      	beq.n	8000776 <_vfiprintf_r+0x1de>
 800068e:	4b4e      	ldr	r3, [pc, #312]	@ (80007c8 <_vfiprintf_r+0x230>)
 8000690:	2b00      	cmp	r3, #0
 8000692:	d05a      	beq.n	800074a <_vfiprintf_r+0x1b2>
 8000694:	ac05      	add	r4, sp, #20
 8000696:	4b4d      	ldr	r3, [pc, #308]	@ (80007cc <_vfiprintf_r+0x234>)
 8000698:	465a      	mov	r2, fp
 800069a:	a906      	add	r1, sp, #24
 800069c:	4650      	mov	r0, sl
 800069e:	9400      	str	r4, [sp, #0]
 80006a0:	f3af 8000 	nop.w
 80006a4:	4681      	mov	r9, r0
 80006a6:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80006aa:	d016      	beq.n	80006da <_vfiprintf_r+0x142>
 80006ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80006ae:	444b      	add	r3, r9
 80006b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80006b2:	e791      	b.n	80005d8 <_vfiprintf_r+0x40>
 80006b4:	3e01      	subs	r6, #1
 80006b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80006ba:	9503      	str	r5, [sp, #12]
 80006bc:	4689      	mov	r9, r1
 80006be:	1874      	adds	r4, r6, r1
 80006c0:	4635      	mov	r5, r6
 80006c2:	4616      	mov	r6, r2
 80006c4:	e001      	b.n	80006ca <_vfiprintf_r+0x132>
 80006c6:	42a5      	cmp	r5, r4
 80006c8:	d046      	beq.n	8000758 <_vfiprintf_r+0x1c0>
 80006ca:	465a      	mov	r2, fp
 80006cc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80006d0:	4650      	mov	r0, sl
 80006d2:	f7ff ff1b 	bl	800050c <__sfputc_r>
 80006d6:	3001      	adds	r0, #1
 80006d8:	d1f5      	bne.n	80006c6 <_vfiprintf_r+0x12e>
 80006da:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80006de:	065b      	lsls	r3, r3, #25
 80006e0:	d40a      	bmi.n	80006f8 <_vfiprintf_r+0x160>
 80006e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80006e4:	b01f      	add	sp, #124	@ 0x7c
 80006e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ea:	4659      	mov	r1, fp
 80006ec:	4650      	mov	r0, sl
 80006ee:	f000 fd45 	bl	800117c <__swsetup_r>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	f43f af66 	beq.w	80005c4 <_vfiprintf_r+0x2c>
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006fc:	e7f2      	b.n	80006e4 <_vfiprintf_r+0x14c>
 80006fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000702:	2a09      	cmp	r2, #9
 8000704:	d855      	bhi.n	80007b2 <_vfiprintf_r+0x21a>
 8000706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000708:	e000      	b.n	800070c <_vfiprintf_r+0x174>
 800070a:	3401      	adds	r4, #1
 800070c:	7821      	ldrb	r1, [r4, #0]
 800070e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000712:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000716:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800071a:	2a09      	cmp	r2, #9
 800071c:	d9f5      	bls.n	800070a <_vfiprintf_r+0x172>
 800071e:	292e      	cmp	r1, #46	@ 0x2e
 8000720:	4626      	mov	r6, r4
 8000722:	9309      	str	r3, [sp, #36]	@ 0x24
 8000724:	d19c      	bne.n	8000660 <_vfiprintf_r+0xc8>
 8000726:	7871      	ldrb	r1, [r6, #1]
 8000728:	292a      	cmp	r1, #42	@ 0x2a
 800072a:	d12e      	bne.n	800078a <_vfiprintf_r+0x1f2>
 800072c:	9b05      	ldr	r3, [sp, #20]
 800072e:	1cb2      	adds	r2, r6, #2
 8000730:	1d19      	adds	r1, r3, #4
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	9307      	str	r3, [sp, #28]
 8000738:	9105      	str	r1, [sp, #20]
 800073a:	bfb8      	it	lt
 800073c:	f04f 33ff 	movlt.w	r3, #4294967295	@ 0xffffffff
 8000740:	78b1      	ldrb	r1, [r6, #2]
 8000742:	4616      	mov	r6, r2
 8000744:	bfb8      	it	lt
 8000746:	9307      	strlt	r3, [sp, #28]
 8000748:	e78a      	b.n	8000660 <_vfiprintf_r+0xc8>
 800074a:	9b05      	ldr	r3, [sp, #20]
 800074c:	3307      	adds	r3, #7
 800074e:	f023 0307 	bic.w	r3, r3, #7
 8000752:	3308      	adds	r3, #8
 8000754:	9305      	str	r3, [sp, #20]
 8000756:	e7a9      	b.n	80006ac <_vfiprintf_r+0x114>
 8000758:	4649      	mov	r1, r9
 800075a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800075c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8000760:	440b      	add	r3, r1
 8000762:	9d03      	ldr	r5, [sp, #12]
 8000764:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000766:	7873      	ldrb	r3, [r6, #1]
 8000768:	e743      	b.n	80005f2 <_vfiprintf_r+0x5a>
 800076a:	4252      	negs	r2, r2
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	9209      	str	r2, [sp, #36]	@ 0x24
 8000772:	9306      	str	r3, [sp, #24]
 8000774:	e771      	b.n	800065a <_vfiprintf_r+0xc2>
 8000776:	a805      	add	r0, sp, #20
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <_vfiprintf_r+0x234>)
 800077a:	465a      	mov	r2, fp
 800077c:	a906      	add	r1, sp, #24
 800077e:	9000      	str	r0, [sp, #0]
 8000780:	4650      	mov	r0, sl
 8000782:	f000 fe93 	bl	80014ac <_printf_i>
 8000786:	4681      	mov	r9, r0
 8000788:	e78d      	b.n	80006a6 <_vfiprintf_r+0x10e>
 800078a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800078e:	2300      	movs	r3, #0
 8000790:	3601      	adds	r6, #1
 8000792:	2a09      	cmp	r2, #9
 8000794:	9307      	str	r3, [sp, #28]
 8000796:	f63f af63 	bhi.w	8000660 <_vfiprintf_r+0xc8>
 800079a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800079e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80007a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80007aa:	2a09      	cmp	r2, #9
 80007ac:	d9f5      	bls.n	800079a <_vfiprintf_r+0x202>
 80007ae:	9307      	str	r3, [sp, #28]
 80007b0:	e756      	b.n	8000660 <_vfiprintf_r+0xc8>
 80007b2:	462e      	mov	r6, r5
 80007b4:	e752      	b.n	800065c <_vfiprintf_r+0xc4>
 80007b6:	f000 facd 	bl	8000d54 <__sinit>
 80007ba:	e6f9      	b.n	80005b0 <_vfiprintf_r+0x18>
 80007bc:	0800331c 	.word	0x0800331c
 80007c0:	08003324 	.word	0x08003324
 80007c4:	08003328 	.word	0x08003328
 80007c8:	00000000 	.word	0x00000000
 80007cc:	08000549 	.word	0x08000549

080007d0 <vfiprintf>:
 80007d0:	b410      	push	{r4}
 80007d2:	4c04      	ldr	r4, [pc, #16]	@ (80007e4 <vfiprintf+0x14>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	460a      	mov	r2, r1
 80007d8:	4601      	mov	r1, r0
 80007da:	6820      	ldr	r0, [r4, #0]
 80007dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007e0:	f7ff beda 	b.w	8000598 <_vfiprintf_r>
 80007e4:	20000000 	.word	0x20000000

080007e8 <__swbuf_r>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	460d      	mov	r5, r1
 80007ec:	4606      	mov	r6, r0
 80007ee:	4614      	mov	r4, r2
 80007f0:	b110      	cbz	r0, 80007f8 <__swbuf_r+0x10>
 80007f2:	6a03      	ldr	r3, [r0, #32]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d037      	beq.n	8000868 <__swbuf_r+0x80>
 80007f8:	69a2      	ldr	r2, [r4, #24]
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	60a2      	str	r2, [r4, #8]
 80007fe:	071a      	lsls	r2, r3, #28
 8000800:	d519      	bpl.n	8000836 <__swbuf_r+0x4e>
 8000802:	6923      	ldr	r3, [r4, #16]
 8000804:	b1bb      	cbz	r3, 8000836 <__swbuf_r+0x4e>
 8000806:	6822      	ldr	r2, [r4, #0]
 8000808:	b2ed      	uxtb	r5, r5
 800080a:	6961      	ldr	r1, [r4, #20]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	462f      	mov	r7, r5
 8000810:	4299      	cmp	r1, r3
 8000812:	dd20      	ble.n	8000856 <__swbuf_r+0x6e>
 8000814:	3301      	adds	r3, #1
 8000816:	68a1      	ldr	r1, [r4, #8]
 8000818:	3901      	subs	r1, #1
 800081a:	60a1      	str	r1, [r4, #8]
 800081c:	1c51      	adds	r1, r2, #1
 800081e:	6021      	str	r1, [r4, #0]
 8000820:	7015      	strb	r5, [r2, #0]
 8000822:	6962      	ldr	r2, [r4, #20]
 8000824:	429a      	cmp	r2, r3
 8000826:	d00d      	beq.n	8000844 <__swbuf_r+0x5c>
 8000828:	89a3      	ldrh	r3, [r4, #12]
 800082a:	07db      	lsls	r3, r3, #31
 800082c:	d501      	bpl.n	8000832 <__swbuf_r+0x4a>
 800082e:	2d0a      	cmp	r5, #10
 8000830:	d008      	beq.n	8000844 <__swbuf_r+0x5c>
 8000832:	4638      	mov	r0, r7
 8000834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000836:	4621      	mov	r1, r4
 8000838:	4630      	mov	r0, r6
 800083a:	f000 fc9f 	bl	800117c <__swsetup_r>
 800083e:	b938      	cbnz	r0, 8000850 <__swbuf_r+0x68>
 8000840:	6923      	ldr	r3, [r4, #16]
 8000842:	e7e0      	b.n	8000806 <__swbuf_r+0x1e>
 8000844:	4621      	mov	r1, r4
 8000846:	4630      	mov	r0, r6
 8000848:	f000 fb3c 	bl	8000ec4 <_fflush_r>
 800084c:	2800      	cmp	r0, #0
 800084e:	d0f0      	beq.n	8000832 <__swbuf_r+0x4a>
 8000850:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000854:	e7ed      	b.n	8000832 <__swbuf_r+0x4a>
 8000856:	4621      	mov	r1, r4
 8000858:	4630      	mov	r0, r6
 800085a:	f000 fb33 	bl	8000ec4 <_fflush_r>
 800085e:	2800      	cmp	r0, #0
 8000860:	d1f6      	bne.n	8000850 <__swbuf_r+0x68>
 8000862:	6822      	ldr	r2, [r4, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	e7d6      	b.n	8000816 <__swbuf_r+0x2e>
 8000868:	f000 fa74 	bl	8000d54 <__sinit>
 800086c:	e7c4      	b.n	80007f8 <__swbuf_r+0x10>
 800086e:	bf00      	nop

08000870 <__swbuf>:
 8000870:	4b02      	ldr	r3, [pc, #8]	@ (800087c <__swbuf+0xc>)
 8000872:	460a      	mov	r2, r1
 8000874:	4601      	mov	r1, r0
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	f7ff bfb6 	b.w	80007e8 <__swbuf_r>
 800087c:	20000000 	.word	0x20000000

08000880 <__sfvwrite_r>:
 8000880:	6893      	ldr	r3, [r2, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f000 80f9 	beq.w	8000a7a <__sfvwrite_r+0x1fa>
 8000888:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 800088c:	f01c 0f08 	tst.w	ip, #8
 8000890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000894:	4690      	mov	r8, r2
 8000896:	b083      	sub	sp, #12
 8000898:	4681      	mov	r9, r0
 800089a:	460c      	mov	r4, r1
 800089c:	d031      	beq.n	8000902 <__sfvwrite_r+0x82>
 800089e:	690b      	ldr	r3, [r1, #16]
 80008a0:	b37b      	cbz	r3, 8000902 <__sfvwrite_r+0x82>
 80008a2:	f01c 0702 	ands.w	r7, ip, #2
 80008a6:	f8d8 6000 	ldr.w	r6, [r8]
 80008aa:	d038      	beq.n	800091e <__sfvwrite_r+0x9e>
 80008ac:	2700      	movs	r7, #0
 80008ae:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80008b2:	6a21      	ldr	r1, [r4, #32]
 80008b4:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 8000b7c <__sfvwrite_r+0x2fc>
 80008b8:	463d      	mov	r5, r7
 80008ba:	4555      	cmp	r5, sl
 80008bc:	462b      	mov	r3, r5
 80008be:	463a      	mov	r2, r7
 80008c0:	4648      	mov	r0, r9
 80008c2:	bf28      	it	cs
 80008c4:	4653      	movcs	r3, sl
 80008c6:	b1c5      	cbz	r5, 80008fa <__sfvwrite_r+0x7a>
 80008c8:	47d8      	blx	fp
 80008ca:	2800      	cmp	r0, #0
 80008cc:	f340 80cb 	ble.w	8000a66 <__sfvwrite_r+0x1e6>
 80008d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80008d4:	4407      	add	r7, r0
 80008d6:	1a2d      	subs	r5, r5, r0
 80008d8:	1a1b      	subs	r3, r3, r0
 80008da:	f8c8 3008 	str.w	r3, [r8, #8]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 80b7 	beq.w	8000a52 <__sfvwrite_r+0x1d2>
 80008e4:	4555      	cmp	r5, sl
 80008e6:	462b      	mov	r3, r5
 80008e8:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80008ec:	463a      	mov	r2, r7
 80008ee:	6a21      	ldr	r1, [r4, #32]
 80008f0:	bf28      	it	cs
 80008f2:	4653      	movcs	r3, sl
 80008f4:	4648      	mov	r0, r9
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d1e6      	bne.n	80008c8 <__sfvwrite_r+0x48>
 80008fa:	e9d6 7500 	ldrd	r7, r5, [r6]
 80008fe:	3608      	adds	r6, #8
 8000900:	e7db      	b.n	80008ba <__sfvwrite_r+0x3a>
 8000902:	4621      	mov	r1, r4
 8000904:	4648      	mov	r0, r9
 8000906:	f000 fc39 	bl	800117c <__swsetup_r>
 800090a:	2800      	cmp	r0, #0
 800090c:	f040 80b0 	bne.w	8000a70 <__sfvwrite_r+0x1f0>
 8000910:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000914:	f8d8 6000 	ldr.w	r6, [r8]
 8000918:	f01c 0702 	ands.w	r7, ip, #2
 800091c:	d1c6      	bne.n	80008ac <__sfvwrite_r+0x2c>
 800091e:	f01c 0a01 	ands.w	sl, ip, #1
 8000922:	d164      	bne.n	80009ee <__sfvwrite_r+0x16e>
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	4657      	mov	r7, sl
 8000928:	68a1      	ldr	r1, [r4, #8]
 800092a:	4618      	mov	r0, r3
 800092c:	468b      	mov	fp, r1
 800092e:	2f00      	cmp	r7, #0
 8000930:	d059      	beq.n	80009e6 <__sfvwrite_r+0x166>
 8000932:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 8000936:	f000 80b6 	beq.w	8000aa6 <__sfvwrite_r+0x226>
 800093a:	42b9      	cmp	r1, r7
 800093c:	460a      	mov	r2, r1
 800093e:	f200 80e2 	bhi.w	8000b06 <__sfvwrite_r+0x286>
 8000942:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 8000946:	d030      	beq.n	80009aa <__sfvwrite_r+0x12a>
 8000948:	6921      	ldr	r1, [r4, #16]
 800094a:	1a5d      	subs	r5, r3, r1
 800094c:	6963      	ldr	r3, [r4, #20]
 800094e:	eb13 0343 	adds.w	r3, r3, r3, lsl #1
 8000952:	bf48      	it	mi
 8000954:	3301      	addmi	r3, #1
 8000956:	ea4f 0b63 	mov.w	fp, r3, asr #1
 800095a:	1c6b      	adds	r3, r5, #1
 800095c:	443b      	add	r3, r7
 800095e:	465a      	mov	r2, fp
 8000960:	455b      	cmp	r3, fp
 8000962:	d901      	bls.n	8000968 <__sfvwrite_r+0xe8>
 8000964:	469b      	mov	fp, r3
 8000966:	461a      	mov	r2, r3
 8000968:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 800096c:	f000 80ea 	beq.w	8000b44 <__sfvwrite_r+0x2c4>
 8000970:	4611      	mov	r1, r2
 8000972:	4648      	mov	r0, r9
 8000974:	f000 fb0c 	bl	8000f90 <_malloc_r>
 8000978:	2800      	cmp	r0, #0
 800097a:	f000 80f9 	beq.w	8000b70 <__sfvwrite_r+0x2f0>
 800097e:	462a      	mov	r2, r5
 8000980:	6921      	ldr	r1, [r4, #16]
 8000982:	9000      	str	r0, [sp, #0]
 8000984:	f000 fc5c 	bl	8001240 <memcpy>
 8000988:	89a2      	ldrh	r2, [r4, #12]
 800098a:	9b00      	ldr	r3, [sp, #0]
 800098c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8000990:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000994:	81a2      	strh	r2, [r4, #12]
 8000996:	1958      	adds	r0, r3, r5
 8000998:	f8c4 b014 	str.w	fp, [r4, #20]
 800099c:	ebab 0505 	sub.w	r5, fp, r5
 80009a0:	463a      	mov	r2, r7
 80009a2:	46bb      	mov	fp, r7
 80009a4:	6123      	str	r3, [r4, #16]
 80009a6:	60a5      	str	r5, [r4, #8]
 80009a8:	6020      	str	r0, [r4, #0]
 80009aa:	4651      	mov	r1, sl
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	f7ff fd09 	bl	80003c4 <memmove>
 80009b2:	68a1      	ldr	r1, [r4, #8]
 80009b4:	6823      	ldr	r3, [r4, #0]
 80009b6:	463d      	mov	r5, r7
 80009b8:	9a00      	ldr	r2, [sp, #0]
 80009ba:	eba1 010b 	sub.w	r1, r1, fp
 80009be:	2700      	movs	r7, #0
 80009c0:	441a      	add	r2, r3
 80009c2:	60a1      	str	r1, [r4, #8]
 80009c4:	6022      	str	r2, [r4, #0]
 80009c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80009ca:	44aa      	add	sl, r5
 80009cc:	1b5b      	subs	r3, r3, r5
 80009ce:	f8c8 3008 	str.w	r3, [r8, #8]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d03d      	beq.n	8000a52 <__sfvwrite_r+0x1d2>
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	68a1      	ldr	r1, [r4, #8]
 80009da:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80009de:	4618      	mov	r0, r3
 80009e0:	468b      	mov	fp, r1
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d1a5      	bne.n	8000932 <__sfvwrite_r+0xb2>
 80009e6:	e9d6 a700 	ldrd	sl, r7, [r6]
 80009ea:	3608      	adds	r6, #8
 80009ec:	e79d      	b.n	800092a <__sfvwrite_r+0xaa>
 80009ee:	4638      	mov	r0, r7
 80009f0:	46bb      	mov	fp, r7
 80009f2:	463d      	mov	r5, r7
 80009f4:	9700      	str	r7, [sp, #0]
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d041      	beq.n	8000a7e <__sfvwrite_r+0x1fe>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d046      	beq.n	8000a8c <__sfvwrite_r+0x20c>
 80009fe:	9a00      	ldr	r2, [sp, #0]
 8000a00:	68a1      	ldr	r1, [r4, #8]
 8000a02:	42aa      	cmp	r2, r5
 8000a04:	6963      	ldr	r3, [r4, #20]
 8000a06:	6820      	ldr	r0, [r4, #0]
 8000a08:	bf28      	it	cs
 8000a0a:	462a      	movcs	r2, r5
 8000a0c:	eb03 0a01 	add.w	sl, r3, r1
 8000a10:	6921      	ldr	r1, [r4, #16]
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d902      	bls.n	8000a1c <__sfvwrite_r+0x19c>
 8000a16:	4552      	cmp	r2, sl
 8000a18:	f300 8085 	bgt.w	8000b26 <__sfvwrite_r+0x2a6>
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	dc75      	bgt.n	8000b0c <__sfvwrite_r+0x28c>
 8000a20:	465a      	mov	r2, fp
 8000a22:	6a21      	ldr	r1, [r4, #32]
 8000a24:	4648      	mov	r0, r9
 8000a26:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8000a28:	47b8      	blx	r7
 8000a2a:	f1b0 0a00 	subs.w	sl, r0, #0
 8000a2e:	dd1a      	ble.n	8000a66 <__sfvwrite_r+0x1e6>
 8000a30:	9b00      	ldr	r3, [sp, #0]
 8000a32:	ebb3 030a 	subs.w	r3, r3, sl
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	d00f      	beq.n	8000a5a <__sfvwrite_r+0x1da>
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000a40:	44d3      	add	fp, sl
 8000a42:	eba5 050a 	sub.w	r5, r5, sl
 8000a46:	eba3 030a 	sub.w	r3, r3, sl
 8000a4a:	f8c8 3008 	str.w	r3, [r8, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1d1      	bne.n	80009f6 <__sfvwrite_r+0x176>
 8000a52:	2000      	movs	r0, #0
 8000a54:	b003      	add	sp, #12
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5a:	4621      	mov	r1, r4
 8000a5c:	4648      	mov	r0, r9
 8000a5e:	f000 fa31 	bl	8000ec4 <_fflush_r>
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d0ea      	beq.n	8000a3c <__sfvwrite_r+0x1bc>
 8000a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a6e:	81a3      	strh	r3, [r4, #12]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a74:	b003      	add	sp, #12
 8000a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	6875      	ldr	r5, [r6, #4]
 8000a80:	4633      	mov	r3, r6
 8000a82:	3608      	adds	r6, #8
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d0fa      	beq.n	8000a7e <__sfvwrite_r+0x1fe>
 8000a88:	f8d3 b000 	ldr.w	fp, [r3]
 8000a8c:	462a      	mov	r2, r5
 8000a8e:	210a      	movs	r1, #10
 8000a90:	4658      	mov	r0, fp
 8000a92:	f000 fedb 	bl	800184c <memchr>
 8000a96:	2800      	cmp	r0, #0
 8000a98:	d067      	beq.n	8000b6a <__sfvwrite_r+0x2ea>
 8000a9a:	3001      	adds	r0, #1
 8000a9c:	eba0 030b 	sub.w	r3, r0, fp
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	e7ac      	b.n	8000a00 <__sfvwrite_r+0x180>
 8000aa6:	6922      	ldr	r2, [r4, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d314      	bcc.n	8000ad6 <__sfvwrite_r+0x256>
 8000aac:	6962      	ldr	r2, [r4, #20]
 8000aae:	42ba      	cmp	r2, r7
 8000ab0:	d811      	bhi.n	8000ad6 <__sfvwrite_r+0x256>
 8000ab2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000ab6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8000ab8:	6a21      	ldr	r1, [r4, #32]
 8000aba:	4648      	mov	r0, r9
 8000abc:	42bb      	cmp	r3, r7
 8000abe:	bf28      	it	cs
 8000ac0:	463b      	movcs	r3, r7
 8000ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ac6:	fb02 f303 	mul.w	r3, r2, r3
 8000aca:	4652      	mov	r2, sl
 8000acc:	47a8      	blx	r5
 8000ace:	1e05      	subs	r5, r0, #0
 8000ad0:	ddc9      	ble.n	8000a66 <__sfvwrite_r+0x1e6>
 8000ad2:	1b7f      	subs	r7, r7, r5
 8000ad4:	e777      	b.n	80009c6 <__sfvwrite_r+0x146>
 8000ad6:	42b9      	cmp	r1, r7
 8000ad8:	4618      	mov	r0, r3
 8000ada:	bf28      	it	cs
 8000adc:	4639      	movcs	r1, r7
 8000ade:	460d      	mov	r5, r1
 8000ae0:	4651      	mov	r1, sl
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	f7ff fc6e 	bl	80003c4 <memmove>
 8000ae8:	68a1      	ldr	r1, [r4, #8]
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	1b49      	subs	r1, r1, r5
 8000aee:	442b      	add	r3, r5
 8000af0:	60a1      	str	r1, [r4, #8]
 8000af2:	6023      	str	r3, [r4, #0]
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d1ec      	bne.n	8000ad2 <__sfvwrite_r+0x252>
 8000af8:	4621      	mov	r1, r4
 8000afa:	4648      	mov	r0, r9
 8000afc:	f000 f9e2 	bl	8000ec4 <_fflush_r>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d0e6      	beq.n	8000ad2 <__sfvwrite_r+0x252>
 8000b04:	e7af      	b.n	8000a66 <__sfvwrite_r+0x1e6>
 8000b06:	46bb      	mov	fp, r7
 8000b08:	463a      	mov	r2, r7
 8000b0a:	e74e      	b.n	80009aa <__sfvwrite_r+0x12a>
 8000b0c:	4659      	mov	r1, fp
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	f7ff fc58 	bl	80003c4 <memmove>
 8000b14:	9a01      	ldr	r2, [sp, #4]
 8000b16:	68a3      	ldr	r3, [r4, #8]
 8000b18:	4692      	mov	sl, r2
 8000b1a:	1a9b      	subs	r3, r3, r2
 8000b1c:	60a3      	str	r3, [r4, #8]
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	6023      	str	r3, [r4, #0]
 8000b24:	e784      	b.n	8000a30 <__sfvwrite_r+0x1b0>
 8000b26:	4659      	mov	r1, fp
 8000b28:	4652      	mov	r2, sl
 8000b2a:	f7ff fc4b 	bl	80003c4 <memmove>
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	4621      	mov	r1, r4
 8000b32:	4648      	mov	r0, r9
 8000b34:	4453      	add	r3, sl
 8000b36:	6023      	str	r3, [r4, #0]
 8000b38:	f000 f9c4 	bl	8000ec4 <_fflush_r>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	f43f af77 	beq.w	8000a30 <__sfvwrite_r+0x1b0>
 8000b42:	e790      	b.n	8000a66 <__sfvwrite_r+0x1e6>
 8000b44:	4648      	mov	r0, r9
 8000b46:	f000 fbf1 	bl	800132c <_realloc_r>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	f47f af22 	bne.w	8000996 <__sfvwrite_r+0x116>
 8000b52:	6921      	ldr	r1, [r4, #16]
 8000b54:	4648      	mov	r0, r9
 8000b56:	f000 fa9b 	bl	8001090 <_free_r>
 8000b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b5e:	220c      	movs	r2, #12
 8000b60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b64:	f8c9 2000 	str.w	r2, [r9]
 8000b68:	e77f      	b.n	8000a6a <__sfvwrite_r+0x1ea>
 8000b6a:	1c6a      	adds	r2, r5, #1
 8000b6c:	9200      	str	r2, [sp, #0]
 8000b6e:	e747      	b.n	8000a00 <__sfvwrite_r+0x180>
 8000b70:	220c      	movs	r2, #12
 8000b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b76:	f8c9 2000 	str.w	r2, [r9]
 8000b7a:	e776      	b.n	8000a6a <__sfvwrite_r+0x1ea>
 8000b7c:	7ffffc00 	.word	0x7ffffc00

08000b80 <__fp_lock>:
 8000b80:	2000      	movs	r0, #0
 8000b82:	4770      	bx	lr

08000b84 <stdio_exit_handler>:
 8000b84:	4a02      	ldr	r2, [pc, #8]	@ (8000b90 <stdio_exit_handler+0xc>)
 8000b86:	4903      	ldr	r1, [pc, #12]	@ (8000b94 <stdio_exit_handler+0x10>)
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <stdio_exit_handler+0x14>)
 8000b8a:	f000 bad5 	b.w	8001138 <_fwalk_sglue>
 8000b8e:	bf00      	nop
 8000b90:	20000050 	.word	0x20000050
 8000b94:	08000ec5 	.word	0x08000ec5
 8000b98:	20000004 	.word	0x20000004

08000b9c <cleanup_stdio>:
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <cleanup_stdio+0x34>)
 8000b9e:	6841      	ldr	r1, [r0, #4]
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	b510      	push	{r4, lr}
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	d001      	beq.n	8000bac <cleanup_stdio+0x10>
 8000ba8:	f000 f98c 	bl	8000ec4 <_fflush_r>
 8000bac:	68a1      	ldr	r1, [r4, #8]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <cleanup_stdio+0x38>)
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	d002      	beq.n	8000bba <cleanup_stdio+0x1e>
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f000 f985 	bl	8000ec4 <_fflush_r>
 8000bba:	68e1      	ldr	r1, [r4, #12]
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <cleanup_stdio+0x3c>)
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d004      	beq.n	8000bcc <cleanup_stdio+0x30>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc8:	f000 b97c 	b.w	8000ec4 <_fflush_r>
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000084 	.word	0x20000084
 8000bd4:	200000ec 	.word	0x200000ec
 8000bd8:	20000154 	.word	0x20000154

08000bdc <__fp_unlock>:
 8000bdc:	2000      	movs	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <global_stdio_init.part.0>:
 8000be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be4:	492a      	ldr	r1, [pc, #168]	@ (8000c90 <global_stdio_init.part.0+0xb0>)
 8000be6:	2500      	movs	r5, #0
 8000be8:	4c2a      	ldr	r4, [pc, #168]	@ (8000c94 <global_stdio_init.part.0+0xb4>)
 8000bea:	2304      	movs	r3, #4
 8000bec:	2208      	movs	r2, #8
 8000bee:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 8000ca8 <global_stdio_init.part.0+0xc8>
 8000bf2:	f8c4 1138 	str.w	r1, [r4, #312]	@ 0x138
 8000bf6:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8000cac <global_stdio_init.part.0+0xcc>
 8000c00:	4f25      	ldr	r7, [pc, #148]	@ (8000c98 <global_stdio_init.part.0+0xb8>)
 8000c02:	4e26      	ldr	r6, [pc, #152]	@ (8000c9c <global_stdio_init.part.0+0xbc>)
 8000c04:	60e3      	str	r3, [r4, #12]
 8000c06:	6025      	str	r5, [r4, #0]
 8000c08:	6665      	str	r5, [r4, #100]	@ 0x64
 8000c0a:	61a5      	str	r5, [r4, #24]
 8000c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c14:	f7ff fb7e 	bl	8000314 <memset>
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <global_stdio_init.part.0+0xc0>)
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 8000c22:	6763      	str	r3, [r4, #116]	@ 0x74
 8000c24:	6725      	str	r5, [r4, #112]	@ 0x70
 8000c26:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8000c2a:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000c2e:	6326      	str	r6, [r4, #48]	@ 0x30
 8000c30:	e9c4 4908 	strd	r4, r9, [r4, #32]
 8000c34:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 8000c38:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8000c3c:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 8000c40:	f7ff fb68 	bl	8000314 <memset>
 8000c44:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8000c48:	4629      	mov	r1, r5
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8000c50:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <global_stdio_init.part.0+0xc4>)
 8000c56:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 8000c5a:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8000c5e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8000c62:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8000c66:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8000c6a:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 8000c6e:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 8000c72:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8000c76:	f7ff fb4d 	bl	8000314 <memset>
 8000c7a:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8000c7e:	e9c4 983d 	strd	r9, r8, [r4, #244]	@ 0xf4
 8000c82:	e9c4 763f 	strd	r7, r6, [r4, #252]	@ 0xfc
 8000c86:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8000c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c8e:	bf00      	nop
 8000c90:	08000b85 	.word	0x08000b85
 8000c94:	20000084 	.word	0x20000084
 8000c98:	08001995 	.word	0x08001995
 8000c9c:	080019bd 	.word	0x080019bd
 8000ca0:	00010009 	.word	0x00010009
 8000ca4:	00020012 	.word	0x00020012
 8000ca8:	0800192d 	.word	0x0800192d
 8000cac:	08001955 	.word	0x08001955

08000cb0 <__sfp>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <__sfp+0x98>)
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d03d      	beq.n	8000d3a <__sfp+0x8a>
 8000cbe:	4f23      	ldr	r7, [pc, #140]	@ (8000d4c <__sfp+0x9c>)
 8000cc0:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	d504      	bpl.n	8000cd2 <__sfp+0x22>
 8000cc8:	e01d      	b.n	8000d06 <__sfp+0x56>
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8000cd0:	d019      	beq.n	8000d06 <__sfp+0x56>
 8000cd2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d1f6      	bne.n	8000cca <__sfp+0x1a>
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <__sfp+0xa0>)
 8000cde:	2208      	movs	r2, #8
 8000ce0:	4629      	mov	r1, r5
 8000ce2:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000ce6:	6665      	str	r5, [r4, #100]	@ 0x64
 8000ce8:	60e3      	str	r3, [r4, #12]
 8000cea:	6025      	str	r5, [r4, #0]
 8000cec:	61a5      	str	r5, [r4, #24]
 8000cee:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000cf2:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000cf6:	f7ff fb0d 	bl	8000314 <memset>
 8000cfa:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8000cfe:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8000d02:	4620      	mov	r0, r4
 8000d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d06:	683d      	ldr	r5, [r7, #0]
 8000d08:	b10d      	cbz	r5, 8000d0e <__sfp+0x5e>
 8000d0a:	462f      	mov	r7, r5
 8000d0c:	e7d8      	b.n	8000cc0 <__sfp+0x10>
 8000d0e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8000d12:	4630      	mov	r0, r6
 8000d14:	f000 f93c 	bl	8000f90 <_malloc_r>
 8000d18:	4604      	mov	r4, r0
 8000d1a:	b188      	cbz	r0, 8000d40 <__sfp+0x90>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	6005      	str	r5, [r0, #0]
 8000d20:	300c      	adds	r0, #12
 8000d22:	4629      	mov	r1, r5
 8000d24:	4625      	mov	r5, r4
 8000d26:	f840 3c08 	str.w	r3, [r0, #-8]
 8000d2a:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000d2e:	60a0      	str	r0, [r4, #8]
 8000d30:	f7ff faf0 	bl	8000314 <memset>
 8000d34:	603c      	str	r4, [r7, #0]
 8000d36:	462f      	mov	r7, r5
 8000d38:	e7c2      	b.n	8000cc0 <__sfp+0x10>
 8000d3a:	f7ff ff51 	bl	8000be0 <global_stdio_init.part.0>
 8000d3e:	e7be      	b.n	8000cbe <__sfp+0xe>
 8000d40:	230c      	movs	r3, #12
 8000d42:	6038      	str	r0, [r7, #0]
 8000d44:	6033      	str	r3, [r6, #0]
 8000d46:	e7dc      	b.n	8000d02 <__sfp+0x52>
 8000d48:	20000084 	.word	0x20000084
 8000d4c:	20000050 	.word	0x20000050
 8000d50:	ffff0001 	.word	0xffff0001

08000d54 <__sinit>:
 8000d54:	6a03      	ldr	r3, [r0, #32]
 8000d56:	b103      	cbz	r3, 8000d5a <__sinit+0x6>
 8000d58:	4770      	bx	lr
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__sinit+0x18>)
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__sinit+0x1c>)
 8000d5e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d62:	6202      	str	r2, [r0, #32]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f7      	bne.n	8000d58 <__sinit+0x4>
 8000d68:	e73a      	b.n	8000be0 <global_stdio_init.part.0>
 8000d6a:	bf00      	nop
 8000d6c:	20000084 	.word	0x20000084
 8000d70:	08000b9d 	.word	0x08000b9d

08000d74 <__sfp_lock_acquire>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__sfp_lock_release>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <__fp_lock_all>:
 8000d7c:	4a02      	ldr	r2, [pc, #8]	@ (8000d88 <__fp_lock_all+0xc>)
 8000d7e:	2000      	movs	r0, #0
 8000d80:	4902      	ldr	r1, [pc, #8]	@ (8000d8c <__fp_lock_all+0x10>)
 8000d82:	f000 b9d9 	b.w	8001138 <_fwalk_sglue>
 8000d86:	bf00      	nop
 8000d88:	20000050 	.word	0x20000050
 8000d8c:	08000b81 	.word	0x08000b81

08000d90 <__fp_unlock_all>:
 8000d90:	4a02      	ldr	r2, [pc, #8]	@ (8000d9c <__fp_unlock_all+0xc>)
 8000d92:	2000      	movs	r0, #0
 8000d94:	4902      	ldr	r1, [pc, #8]	@ (8000da0 <__fp_unlock_all+0x10>)
 8000d96:	f000 b9cf 	b.w	8001138 <_fwalk_sglue>
 8000d9a:	bf00      	nop
 8000d9c:	20000050 	.word	0x20000050
 8000da0:	08000bdd 	.word	0x08000bdd

08000da4 <__sflush_r>:
 8000da4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8000da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dac:	071e      	lsls	r6, r3, #28
 8000dae:	460c      	mov	r4, r1
 8000db0:	4680      	mov	r8, r0
 8000db2:	d43d      	bmi.n	8000e30 <__sflush_r+0x8c>
 8000db4:	684a      	ldr	r2, [r1, #4]
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	dd55      	ble.n	8000e66 <__sflush_r+0xc2>
 8000dba:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d034      	beq.n	8000e2a <__sflush_r+0x86>
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f8d8 6000 	ldr.w	r6, [r8]
 8000dc6:	6a21      	ldr	r1, [r4, #32]
 8000dc8:	f8c8 2000 	str.w	r2, [r8]
 8000dcc:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 8000dd0:	d156      	bne.n	8000e80 <__sflush_r+0xdc>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	47a8      	blx	r5
 8000dd8:	1c45      	adds	r5, r0, #1
 8000dda:	4602      	mov	r2, r0
 8000ddc:	d065      	beq.n	8000eaa <__sflush_r+0x106>
 8000dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000de2:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8000de4:	6a21      	ldr	r1, [r4, #32]
 8000de6:	0758      	lsls	r0, r3, #29
 8000de8:	d505      	bpl.n	8000df6 <__sflush_r+0x52>
 8000dea:	6863      	ldr	r3, [r4, #4]
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000df0:	b10b      	cbz	r3, 8000df6 <__sflush_r+0x52>
 8000df2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	2300      	movs	r3, #0
 8000df8:	4640      	mov	r0, r8
 8000dfa:	47a8      	blx	r5
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d041      	beq.n	8000e84 <__sflush_r+0xe0>
 8000e00:	2300      	movs	r3, #0
 8000e02:	6063      	str	r3, [r4, #4]
 8000e04:	6923      	ldr	r3, [r4, #16]
 8000e06:	6023      	str	r3, [r4, #0]
 8000e08:	89a3      	ldrh	r3, [r4, #12]
 8000e0a:	04df      	lsls	r7, r3, #19
 8000e0c:	d500      	bpl.n	8000e10 <__sflush_r+0x6c>
 8000e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8000e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e12:	f8c8 6000 	str.w	r6, [r8]
 8000e16:	b141      	cbz	r1, 8000e2a <__sflush_r+0x86>
 8000e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d002      	beq.n	8000e26 <__sflush_r+0x82>
 8000e20:	4640      	mov	r0, r8
 8000e22:	f000 f935 	bl	8001090 <_free_r>
 8000e26:	2300      	movs	r3, #0
 8000e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e30:	690e      	ldr	r6, [r1, #16]
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0f9      	beq.n	8000e2a <__sflush_r+0x86>
 8000e36:	079b      	lsls	r3, r3, #30
 8000e38:	680d      	ldr	r5, [r1, #0]
 8000e3a:	600e      	str	r6, [r1, #0]
 8000e3c:	bf0c      	ite	eq
 8000e3e:	694b      	ldreq	r3, [r1, #20]
 8000e40:	2300      	movne	r3, #0
 8000e42:	1bad      	subs	r5, r5, r6
 8000e44:	608b      	str	r3, [r1, #8]
 8000e46:	e00b      	b.n	8000e60 <__sflush_r+0xbc>
 8000e48:	462b      	mov	r3, r5
 8000e4a:	4632      	mov	r2, r6
 8000e4c:	6a21      	ldr	r1, [r4, #32]
 8000e4e:	4640      	mov	r0, r8
 8000e50:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8000e52:	47b8      	blx	r7
 8000e54:	f1b0 0c00 	subs.w	ip, r0, #0
 8000e58:	eba5 050c 	sub.w	r5, r5, ip
 8000e5c:	4466      	add	r6, ip
 8000e5e:	dd06      	ble.n	8000e6e <__sflush_r+0xca>
 8000e60:	2d00      	cmp	r5, #0
 8000e62:	dcf1      	bgt.n	8000e48 <__sflush_r+0xa4>
 8000e64:	e7e1      	b.n	8000e2a <__sflush_r+0x86>
 8000e66:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	dca6      	bgt.n	8000dba <__sflush_r+0x16>
 8000e6c:	e7dd      	b.n	8000e2a <__sflush_r+0x86>
 8000e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e7a:	81a3      	strh	r3, [r4, #12]
 8000e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000e82:	e7b0      	b.n	8000de6 <__sflush_r+0x42>
 8000e84:	f8d8 1000 	ldr.w	r1, [r8]
 8000e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8c:	291d      	cmp	r1, #29
 8000e8e:	d8f0      	bhi.n	8000e72 <__sflush_r+0xce>
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <__sflush_r+0x11c>)
 8000e92:	40ca      	lsrs	r2, r1
 8000e94:	07d5      	lsls	r5, r2, #31
 8000e96:	d5ec      	bpl.n	8000e72 <__sflush_r+0xce>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6062      	str	r2, [r4, #4]
 8000e9c:	6922      	ldr	r2, [r4, #16]
 8000e9e:	6022      	str	r2, [r4, #0]
 8000ea0:	04da      	lsls	r2, r3, #19
 8000ea2:	d5b5      	bpl.n	8000e10 <__sflush_r+0x6c>
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	d0b2      	beq.n	8000e0e <__sflush_r+0x6a>
 8000ea8:	e7b2      	b.n	8000e10 <__sflush_r+0x6c>
 8000eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d095      	beq.n	8000dde <__sflush_r+0x3a>
 8000eb2:	2b1d      	cmp	r3, #29
 8000eb4:	d001      	beq.n	8000eba <__sflush_r+0x116>
 8000eb6:	2b16      	cmp	r3, #22
 8000eb8:	d1d9      	bne.n	8000e6e <__sflush_r+0xca>
 8000eba:	f8c8 6000 	str.w	r6, [r8]
 8000ebe:	e7b4      	b.n	8000e2a <__sflush_r+0x86>
 8000ec0:	20400001 	.word	0x20400001

08000ec4 <_fflush_r>:
 8000ec4:	690b      	ldr	r3, [r1, #16]
 8000ec6:	b1b3      	cbz	r3, 8000ef6 <_fflush_r+0x32>
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
 8000ecc:	b082      	sub	sp, #8
 8000ece:	b108      	cbz	r0, 8000ed4 <_fflush_r+0x10>
 8000ed0:	6a03      	ldr	r3, [r0, #32]
 8000ed2:	b15b      	cbz	r3, 8000eec <_fflush_r+0x28>
 8000ed4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8000ed8:	b913      	cbnz	r3, 8000ee0 <_fflush_r+0x1c>
 8000eda:	2000      	movs	r0, #0
 8000edc:	b002      	add	sp, #8
 8000ede:	bd10      	pop	{r4, pc}
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	b002      	add	sp, #8
 8000ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ee8:	f7ff bf5c 	b.w	8000da4 <__sflush_r>
 8000eec:	9101      	str	r1, [sp, #4]
 8000eee:	f7ff ff31 	bl	8000d54 <__sinit>
 8000ef2:	9901      	ldr	r1, [sp, #4]
 8000ef4:	e7ee      	b.n	8000ed4 <_fflush_r+0x10>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <fflush>:
 8000efc:	b1b8      	cbz	r0, 8000f2e <fflush+0x32>
 8000efe:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <fflush+0x3c>)
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	6903      	ldr	r3, [r0, #16]
 8000f04:	4604      	mov	r4, r0
 8000f06:	6815      	ldr	r5, [r2, #0]
 8000f08:	b12b      	cbz	r3, 8000f16 <fflush+0x1a>
 8000f0a:	b10d      	cbz	r5, 8000f10 <fflush+0x14>
 8000f0c:	6a2b      	ldr	r3, [r5, #32]
 8000f0e:	b153      	cbz	r3, 8000f26 <fflush+0x2a>
 8000f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f14:	b90b      	cbnz	r3, 8000f1a <fflush+0x1e>
 8000f16:	2000      	movs	r0, #0
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f22:	f7ff bf3f 	b.w	8000da4 <__sflush_r>
 8000f26:	4628      	mov	r0, r5
 8000f28:	f7ff ff14 	bl	8000d54 <__sinit>
 8000f2c:	e7f0      	b.n	8000f10 <fflush+0x14>
 8000f2e:	4a03      	ldr	r2, [pc, #12]	@ (8000f3c <fflush+0x40>)
 8000f30:	4903      	ldr	r1, [pc, #12]	@ (8000f40 <fflush+0x44>)
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <fflush+0x48>)
 8000f34:	f000 b900 	b.w	8001138 <_fwalk_sglue>
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000050 	.word	0x20000050
 8000f40:	08000ec5 	.word	0x08000ec5
 8000f44:	20000004 	.word	0x20000004

08000f48 <sbrk_aligned>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	4e10      	ldr	r6, [pc, #64]	@ (8000f8c <sbrk_aligned+0x44>)
 8000f4c:	4605      	mov	r5, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	6833      	ldr	r3, [r6, #0]
 8000f52:	b1b3      	cbz	r3, 8000f82 <sbrk_aligned+0x3a>
 8000f54:	4621      	mov	r1, r4
 8000f56:	4628      	mov	r0, r5
 8000f58:	f000 fcd6 	bl	8001908 <_sbrk_r>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	d00c      	beq.n	8000f7a <sbrk_aligned+0x32>
 8000f60:	1cc4      	adds	r4, r0, #3
 8000f62:	f024 0403 	bic.w	r4, r4, #3
 8000f66:	42a0      	cmp	r0, r4
 8000f68:	d005      	beq.n	8000f76 <sbrk_aligned+0x2e>
 8000f6a:	1a21      	subs	r1, r4, r0
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	f000 fccb 	bl	8001908 <_sbrk_r>
 8000f72:	3001      	adds	r0, #1
 8000f74:	d001      	beq.n	8000f7a <sbrk_aligned+0x32>
 8000f76:	4620      	mov	r0, r4
 8000f78:	bd70      	pop	{r4, r5, r6, pc}
 8000f7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f7e:	4620      	mov	r0, r4
 8000f80:	bd70      	pop	{r4, r5, r6, pc}
 8000f82:	4619      	mov	r1, r3
 8000f84:	f000 fcc0 	bl	8001908 <_sbrk_r>
 8000f88:	6030      	str	r0, [r6, #0]
 8000f8a:	e7e3      	b.n	8000f54 <sbrk_aligned+0xc>
 8000f8c:	200001c0 	.word	0x200001c0

08000f90 <_malloc_r>:
 8000f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f94:	1ccd      	adds	r5, r1, #3
 8000f96:	4606      	mov	r6, r0
 8000f98:	f025 0503 	bic.w	r5, r5, #3
 8000f9c:	3508      	adds	r5, #8
 8000f9e:	2d0c      	cmp	r5, #12
 8000fa0:	bf38      	it	cc
 8000fa2:	250c      	movcc	r5, #12
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	db2e      	blt.n	8001006 <_malloc_r+0x76>
 8000fa8:	42a9      	cmp	r1, r5
 8000faa:	d82c      	bhi.n	8001006 <_malloc_r+0x76>
 8000fac:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 800108c <_malloc_r+0xfc>
 8000fb0:	f000 fbbe 	bl	8001730 <__malloc_lock>
 8000fb4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000fb8:	b17a      	cbz	r2, 8000fda <_malloc_r+0x4a>
 8000fba:	4614      	mov	r4, r2
 8000fbc:	e003      	b.n	8000fc6 <_malloc_r+0x36>
 8000fbe:	6863      	ldr	r3, [r4, #4]
 8000fc0:	4622      	mov	r2, r4
 8000fc2:	461c      	mov	r4, r3
 8000fc4:	b14b      	cbz	r3, 8000fda <_malloc_r+0x4a>
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	1b5b      	subs	r3, r3, r5
 8000fca:	d4f8      	bmi.n	8000fbe <_malloc_r+0x2e>
 8000fcc:	2b0b      	cmp	r3, #11
 8000fce:	d81e      	bhi.n	800100e <_malloc_r+0x7e>
 8000fd0:	4294      	cmp	r4, r2
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	d053      	beq.n	800107e <_malloc_r+0xee>
 8000fd6:	6053      	str	r3, [r2, #4]
 8000fd8:	e007      	b.n	8000fea <_malloc_r+0x5a>
 8000fda:	4629      	mov	r1, r5
 8000fdc:	4630      	mov	r0, r6
 8000fde:	f7ff ffb3 	bl	8000f48 <sbrk_aligned>
 8000fe2:	1c43      	adds	r3, r0, #1
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	d01d      	beq.n	8001024 <_malloc_r+0x94>
 8000fe8:	6005      	str	r5, [r0, #0]
 8000fea:	4630      	mov	r0, r6
 8000fec:	f000 fba2 	bl	8001734 <__malloc_unlock>
 8000ff0:	f104 000b 	add.w	r0, r4, #11
 8000ff4:	1d23      	adds	r3, r4, #4
 8000ff6:	f020 0007 	bic.w	r0, r0, #7
 8000ffa:	1ac2      	subs	r2, r0, r3
 8000ffc:	d001      	beq.n	8001002 <_malloc_r+0x72>
 8000ffe:	1a1b      	subs	r3, r3, r0
 8001000:	50a3      	str	r3, [r4, r2]
 8001002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001006:	230c      	movs	r3, #12
 8001008:	6033      	str	r3, [r6, #0]
 800100a:	2000      	movs	r0, #0
 800100c:	e7f9      	b.n	8001002 <_malloc_r+0x72>
 800100e:	1961      	adds	r1, r4, r5
 8001010:	4294      	cmp	r4, r2
 8001012:	6025      	str	r5, [r4, #0]
 8001014:	bf14      	ite	ne
 8001016:	6051      	strne	r1, [r2, #4]
 8001018:	f8c8 1004 	streq.w	r1, [r8, #4]
 800101c:	5163      	str	r3, [r4, r5]
 800101e:	6863      	ldr	r3, [r4, #4]
 8001020:	604b      	str	r3, [r1, #4]
 8001022:	e7e2      	b.n	8000fea <_malloc_r+0x5a>
 8001024:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8001028:	b31f      	cbz	r7, 8001072 <_malloc_r+0xe2>
 800102a:	463c      	mov	r4, r7
 800102c:	687f      	ldr	r7, [r7, #4]
 800102e:	2f00      	cmp	r7, #0
 8001030:	d1fb      	bne.n	800102a <_malloc_r+0x9a>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	4639      	mov	r1, r7
 8001036:	4630      	mov	r0, r6
 8001038:	eb04 0903 	add.w	r9, r4, r3
 800103c:	f000 fc64 	bl	8001908 <_sbrk_r>
 8001040:	4581      	cmp	r9, r0
 8001042:	d116      	bne.n	8001072 <_malloc_r+0xe2>
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	4630      	mov	r0, r6
 8001048:	1aed      	subs	r5, r5, r3
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff ff7c 	bl	8000f48 <sbrk_aligned>
 8001050:	3001      	adds	r0, #1
 8001052:	d00e      	beq.n	8001072 <_malloc_r+0xe2>
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800105a:	442b      	add	r3, r5
 800105c:	6023      	str	r3, [r4, #0]
 800105e:	6853      	ldr	r3, [r2, #4]
 8001060:	b183      	cbz	r3, 8001084 <_malloc_r+0xf4>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d003      	beq.n	800106e <_malloc_r+0xde>
 8001066:	461a      	mov	r2, r3
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	429c      	cmp	r4, r3
 800106c:	d1fb      	bne.n	8001066 <_malloc_r+0xd6>
 800106e:	2300      	movs	r3, #0
 8001070:	e7b1      	b.n	8000fd6 <_malloc_r+0x46>
 8001072:	230c      	movs	r3, #12
 8001074:	4630      	mov	r0, r6
 8001076:	6033      	str	r3, [r6, #0]
 8001078:	f000 fb5c 	bl	8001734 <__malloc_unlock>
 800107c:	e7c5      	b.n	800100a <_malloc_r+0x7a>
 800107e:	f8c8 3004 	str.w	r3, [r8, #4]
 8001082:	e7b2      	b.n	8000fea <_malloc_r+0x5a>
 8001084:	f8c8 7004 	str.w	r7, [r8, #4]
 8001088:	e7af      	b.n	8000fea <_malloc_r+0x5a>
 800108a:	bf00      	nop
 800108c:	200001c0 	.word	0x200001c0

08001090 <_free_r>:
 8001090:	2900      	cmp	r1, #0
 8001092:	d03a      	beq.n	800110a <_free_r+0x7a>
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800109a:	1f0c      	subs	r4, r1, #4
 800109c:	4605      	mov	r5, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bfb8      	it	lt
 80010a2:	18e4      	addlt	r4, r4, r3
 80010a4:	f000 fb44 	bl	8001730 <__malloc_lock>
 80010a8:	4a22      	ldr	r2, [pc, #136]	@ (8001134 <_free_r+0xa4>)
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	b1d3      	cbz	r3, 80010e4 <_free_r+0x54>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d814      	bhi.n	80010dc <_free_r+0x4c>
 80010b2:	461a      	mov	r2, r3
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	b10b      	cbz	r3, 80010bc <_free_r+0x2c>
 80010b8:	42a3      	cmp	r3, r4
 80010ba:	d9fa      	bls.n	80010b2 <_free_r+0x22>
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	1850      	adds	r0, r2, r1
 80010c0:	42a0      	cmp	r0, r4
 80010c2:	d023      	beq.n	800110c <_free_r+0x7c>
 80010c4:	d82e      	bhi.n	8001124 <_free_r+0x94>
 80010c6:	6821      	ldr	r1, [r4, #0]
 80010c8:	1860      	adds	r0, r4, r1
 80010ca:	4283      	cmp	r3, r0
 80010cc:	d011      	beq.n	80010f2 <_free_r+0x62>
 80010ce:	6063      	str	r3, [r4, #4]
 80010d0:	6054      	str	r4, [r2, #4]
 80010d2:	4628      	mov	r0, r5
 80010d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010d8:	f000 bb2c 	b.w	8001734 <__malloc_unlock>
 80010dc:	6821      	ldr	r1, [r4, #0]
 80010de:	1860      	adds	r0, r4, r1
 80010e0:	4283      	cmp	r3, r0
 80010e2:	d00d      	beq.n	8001100 <_free_r+0x70>
 80010e4:	4628      	mov	r0, r5
 80010e6:	6063      	str	r3, [r4, #4]
 80010e8:	6014      	str	r4, [r2, #0]
 80010ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ee:	f000 bb21 	b.w	8001734 <__malloc_unlock>
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4408      	add	r0, r1
 80010f8:	e9c4 0300 	strd	r0, r3, [r4]
 80010fc:	6054      	str	r4, [r2, #4]
 80010fe:	e7e8      	b.n	80010d2 <_free_r+0x42>
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4408      	add	r0, r1
 8001106:	6020      	str	r0, [r4, #0]
 8001108:	e7ec      	b.n	80010e4 <_free_r+0x54>
 800110a:	4770      	bx	lr
 800110c:	6820      	ldr	r0, [r4, #0]
 800110e:	4401      	add	r1, r0
 8001110:	1850      	adds	r0, r2, r1
 8001112:	6011      	str	r1, [r2, #0]
 8001114:	4283      	cmp	r3, r0
 8001116:	d1dc      	bne.n	80010d2 <_free_r+0x42>
 8001118:	e9d3 0400 	ldrd	r0, r4, [r3]
 800111c:	4401      	add	r1, r0
 800111e:	e9c2 1400 	strd	r1, r4, [r2]
 8001122:	e7d6      	b.n	80010d2 <_free_r+0x42>
 8001124:	230c      	movs	r3, #12
 8001126:	4628      	mov	r0, r5
 8001128:	602b      	str	r3, [r5, #0]
 800112a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112e:	f000 bb01 	b.w	8001734 <__malloc_unlock>
 8001132:	bf00      	nop
 8001134:	200001c4 	.word	0x200001c4

08001138 <_fwalk_sglue>:
 8001138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800113c:	f04f 0900 	mov.w	r9, #0
 8001140:	4607      	mov	r7, r0
 8001142:	4688      	mov	r8, r1
 8001144:	4616      	mov	r6, r2
 8001146:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800114a:	3d01      	subs	r5, #1
 800114c:	d40f      	bmi.n	800116e <_fwalk_sglue+0x36>
 800114e:	89a3      	ldrh	r3, [r4, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d908      	bls.n	8001166 <_fwalk_sglue+0x2e>
 8001154:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001158:	4621      	mov	r1, r4
 800115a:	4638      	mov	r0, r7
 800115c:	3301      	adds	r3, #1
 800115e:	d002      	beq.n	8001166 <_fwalk_sglue+0x2e>
 8001160:	47c0      	blx	r8
 8001162:	ea49 0900 	orr.w	r9, r9, r0
 8001166:	3d01      	subs	r5, #1
 8001168:	3468      	adds	r4, #104	@ 0x68
 800116a:	1c6b      	adds	r3, r5, #1
 800116c:	d1ef      	bne.n	800114e <_fwalk_sglue+0x16>
 800116e:	6836      	ldr	r6, [r6, #0]
 8001170:	2e00      	cmp	r6, #0
 8001172:	d1e8      	bne.n	8001146 <_fwalk_sglue+0xe>
 8001174:	4648      	mov	r0, r9
 8001176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800117a:	bf00      	nop

0800117c <__swsetup_r>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <__swsetup_r+0xc0>)
 8001180:	4605      	mov	r5, r0
 8001182:	460c      	mov	r4, r1
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b113      	cbz	r3, 800118e <__swsetup_r+0x12>
 8001188:	6a1a      	ldr	r2, [r3, #32]
 800118a:	2a00      	cmp	r2, #0
 800118c:	d045      	beq.n	800121a <__swsetup_r+0x9e>
 800118e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001192:	0718      	lsls	r0, r3, #28
 8001194:	d516      	bpl.n	80011c4 <__swsetup_r+0x48>
 8001196:	6922      	ldr	r2, [r4, #16]
 8001198:	b1f2      	cbz	r2, 80011d8 <__swsetup_r+0x5c>
 800119a:	f013 0101 	ands.w	r1, r3, #1
 800119e:	d007      	beq.n	80011b0 <__swsetup_r+0x34>
 80011a0:	6961      	ldr	r1, [r4, #20]
 80011a2:	2000      	movs	r0, #0
 80011a4:	4249      	negs	r1, r1
 80011a6:	60a0      	str	r0, [r4, #8]
 80011a8:	61a1      	str	r1, [r4, #24]
 80011aa:	b13a      	cbz	r2, 80011bc <__swsetup_r+0x40>
 80011ac:	2000      	movs	r0, #0
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
 80011b0:	0798      	lsls	r0, r3, #30
 80011b2:	bf58      	it	pl
 80011b4:	6961      	ldrpl	r1, [r4, #20]
 80011b6:	60a1      	str	r1, [r4, #8]
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	d1f7      	bne.n	80011ac <__swsetup_r+0x30>
 80011bc:	0619      	lsls	r1, r3, #24
 80011be:	d438      	bmi.n	8001232 <__swsetup_r+0xb6>
 80011c0:	4610      	mov	r0, r2
 80011c2:	bd38      	pop	{r3, r4, r5, pc}
 80011c4:	06d9      	lsls	r1, r3, #27
 80011c6:	d52c      	bpl.n	8001222 <__swsetup_r+0xa6>
 80011c8:	075a      	lsls	r2, r3, #29
 80011ca:	d412      	bmi.n	80011f2 <__swsetup_r+0x76>
 80011cc:	6922      	ldr	r2, [r4, #16]
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	81a3      	strh	r3, [r4, #12]
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d1e0      	bne.n	800119a <__swsetup_r+0x1e>
 80011d8:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 80011dc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80011e0:	d0db      	beq.n	800119a <__swsetup_r+0x1e>
 80011e2:	4621      	mov	r1, r4
 80011e4:	4628      	mov	r0, r5
 80011e6:	f000 faa7 	bl	8001738 <__smakebuf_r>
 80011ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ee:	6922      	ldr	r2, [r4, #16]
 80011f0:	e7d3      	b.n	800119a <__swsetup_r+0x1e>
 80011f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011f4:	b151      	cbz	r1, 800120c <__swsetup_r+0x90>
 80011f6:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80011fa:	4291      	cmp	r1, r2
 80011fc:	d004      	beq.n	8001208 <__swsetup_r+0x8c>
 80011fe:	4628      	mov	r0, r5
 8001200:	f7ff ff46 	bl	8001090 <_free_r>
 8001204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	6362      	str	r2, [r4, #52]	@ 0x34
 800120c:	2100      	movs	r1, #0
 800120e:	6922      	ldr	r2, [r4, #16]
 8001210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001214:	e9c4 2100 	strd	r2, r1, [r4]
 8001218:	e7d9      	b.n	80011ce <__swsetup_r+0x52>
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fd9a 	bl	8000d54 <__sinit>
 8001220:	e7b5      	b.n	800118e <__swsetup_r+0x12>
 8001222:	2209      	movs	r2, #9
 8001224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001228:	602a      	str	r2, [r5, #0]
 800122a:	81a3      	strh	r3, [r4, #12]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001230:	bd38      	pop	{r3, r4, r5, pc}
 8001232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001236:	81a3      	strh	r3, [r4, #12]
 8001238:	e7f8      	b.n	800122c <__swsetup_r+0xb0>
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000

08001240 <memcpy>:
 8001240:	4684      	mov	ip, r0
 8001242:	ea41 0300 	orr.w	r3, r1, r0
 8001246:	f013 0303 	ands.w	r3, r3, #3
 800124a:	d149      	bne.n	80012e0 <memcpy+0xa0>
 800124c:	3a40      	subs	r2, #64	@ 0x40
 800124e:	d323      	bcc.n	8001298 <memcpy+0x58>
 8001250:	680b      	ldr	r3, [r1, #0]
 8001252:	6003      	str	r3, [r0, #0]
 8001254:	684b      	ldr	r3, [r1, #4]
 8001256:	6043      	str	r3, [r0, #4]
 8001258:	688b      	ldr	r3, [r1, #8]
 800125a:	6083      	str	r3, [r0, #8]
 800125c:	68cb      	ldr	r3, [r1, #12]
 800125e:	60c3      	str	r3, [r0, #12]
 8001260:	690b      	ldr	r3, [r1, #16]
 8001262:	6103      	str	r3, [r0, #16]
 8001264:	694b      	ldr	r3, [r1, #20]
 8001266:	6143      	str	r3, [r0, #20]
 8001268:	698b      	ldr	r3, [r1, #24]
 800126a:	6183      	str	r3, [r0, #24]
 800126c:	69cb      	ldr	r3, [r1, #28]
 800126e:	61c3      	str	r3, [r0, #28]
 8001270:	6a0b      	ldr	r3, [r1, #32]
 8001272:	6203      	str	r3, [r0, #32]
 8001274:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8001276:	6243      	str	r3, [r0, #36]	@ 0x24
 8001278:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800127a:	6283      	str	r3, [r0, #40]	@ 0x28
 800127c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800127e:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001280:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001282:	6303      	str	r3, [r0, #48]	@ 0x30
 8001284:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8001286:	6343      	str	r3, [r0, #52]	@ 0x34
 8001288:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800128a:	6383      	str	r3, [r0, #56]	@ 0x38
 800128c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800128e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8001290:	3040      	adds	r0, #64	@ 0x40
 8001292:	3140      	adds	r1, #64	@ 0x40
 8001294:	3a40      	subs	r2, #64	@ 0x40
 8001296:	d2db      	bcs.n	8001250 <memcpy+0x10>
 8001298:	3230      	adds	r2, #48	@ 0x30
 800129a:	d30b      	bcc.n	80012b4 <memcpy+0x74>
 800129c:	680b      	ldr	r3, [r1, #0]
 800129e:	6003      	str	r3, [r0, #0]
 80012a0:	684b      	ldr	r3, [r1, #4]
 80012a2:	6043      	str	r3, [r0, #4]
 80012a4:	688b      	ldr	r3, [r1, #8]
 80012a6:	6083      	str	r3, [r0, #8]
 80012a8:	68cb      	ldr	r3, [r1, #12]
 80012aa:	60c3      	str	r3, [r0, #12]
 80012ac:	3010      	adds	r0, #16
 80012ae:	3110      	adds	r1, #16
 80012b0:	3a10      	subs	r2, #16
 80012b2:	d2f3      	bcs.n	800129c <memcpy+0x5c>
 80012b4:	320c      	adds	r2, #12
 80012b6:	d305      	bcc.n	80012c4 <memcpy+0x84>
 80012b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80012bc:	f840 3b04 	str.w	r3, [r0], #4
 80012c0:	3a04      	subs	r2, #4
 80012c2:	d2f9      	bcs.n	80012b8 <memcpy+0x78>
 80012c4:	3204      	adds	r2, #4
 80012c6:	d008      	beq.n	80012da <memcpy+0x9a>
 80012c8:	07d2      	lsls	r2, r2, #31
 80012ca:	bf1c      	itt	ne
 80012cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012d0:	f800 3b01 	strbne.w	r3, [r0], #1
 80012d4:	d301      	bcc.n	80012da <memcpy+0x9a>
 80012d6:	880b      	ldrh	r3, [r1, #0]
 80012d8:	8003      	strh	r3, [r0, #0]
 80012da:	4660      	mov	r0, ip
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2a08      	cmp	r2, #8
 80012e2:	d313      	bcc.n	800130c <memcpy+0xcc>
 80012e4:	078b      	lsls	r3, r1, #30
 80012e6:	d0b1      	beq.n	800124c <memcpy+0xc>
 80012e8:	f010 0303 	ands.w	r3, r0, #3
 80012ec:	d0ae      	beq.n	800124c <memcpy+0xc>
 80012ee:	f1c3 0304 	rsb	r3, r3, #4
 80012f2:	1ad2      	subs	r2, r2, r3
 80012f4:	07db      	lsls	r3, r3, #31
 80012f6:	bf1c      	itt	ne
 80012f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8001300:	d3a4      	bcc.n	800124c <memcpy+0xc>
 8001302:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001306:	f820 3b02 	strh.w	r3, [r0], #2
 800130a:	e79f      	b.n	800124c <memcpy+0xc>
 800130c:	3a04      	subs	r2, #4
 800130e:	d3d9      	bcc.n	80012c4 <memcpy+0x84>
 8001310:	3a01      	subs	r2, #1
 8001312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001316:	f800 3b01 	strb.w	r3, [r0], #1
 800131a:	d2f9      	bcs.n	8001310 <memcpy+0xd0>
 800131c:	780b      	ldrb	r3, [r1, #0]
 800131e:	7003      	strb	r3, [r0, #0]
 8001320:	784b      	ldrb	r3, [r1, #1]
 8001322:	7043      	strb	r3, [r0, #1]
 8001324:	788b      	ldrb	r3, [r1, #2]
 8001326:	7083      	strb	r3, [r0, #2]
 8001328:	4660      	mov	r0, ip
 800132a:	4770      	bx	lr

0800132c <_realloc_r>:
 800132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001330:	4614      	mov	r4, r2
 8001332:	b341      	cbz	r1, 8001386 <_realloc_r+0x5a>
 8001334:	b30a      	cbz	r2, 800137a <_realloc_r+0x4e>
 8001336:	4606      	mov	r6, r0
 8001338:	460d      	mov	r5, r1
 800133a:	f000 fb43 	bl	80019c4 <_malloc_usable_size_r>
 800133e:	4284      	cmp	r4, r0
 8001340:	4607      	mov	r7, r0
 8001342:	d802      	bhi.n	800134a <_realloc_r+0x1e>
 8001344:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001348:	d813      	bhi.n	8001372 <_realloc_r+0x46>
 800134a:	4621      	mov	r1, r4
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff fe1f 	bl	8000f90 <_malloc_r>
 8001352:	4680      	mov	r8, r0
 8001354:	b150      	cbz	r0, 800136c <_realloc_r+0x40>
 8001356:	42bc      	cmp	r4, r7
 8001358:	4622      	mov	r2, r4
 800135a:	4629      	mov	r1, r5
 800135c:	bf28      	it	cs
 800135e:	463a      	movcs	r2, r7
 8001360:	f7ff ff6e 	bl	8001240 <memcpy>
 8001364:	4629      	mov	r1, r5
 8001366:	4630      	mov	r0, r6
 8001368:	f7ff fe92 	bl	8001090 <_free_r>
 800136c:	4640      	mov	r0, r8
 800136e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001372:	46a8      	mov	r8, r5
 8001374:	4640      	mov	r0, r8
 8001376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800137a:	46a0      	mov	r8, r4
 800137c:	f7ff fe88 	bl	8001090 <_free_r>
 8001380:	4640      	mov	r0, r8
 8001382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001386:	4611      	mov	r1, r2
 8001388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800138c:	f7ff be00 	b.w	8000f90 <_malloc_r>

08001390 <_printf_common>:
 8001390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001394:	4692      	mov	sl, r2
 8001396:	461f      	mov	r7, r3
 8001398:	690a      	ldr	r2, [r1, #16]
 800139a:	460c      	mov	r4, r1
 800139c:	688b      	ldr	r3, [r1, #8]
 800139e:	4606      	mov	r6, r0
 80013a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80013a4:	429a      	cmp	r2, r3
 80013a6:	bfb8      	it	lt
 80013a8:	461a      	movlt	r2, r3
 80013aa:	f8ca 2000 	str.w	r2, [sl]
 80013ae:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 80013b2:	b113      	cbz	r3, 80013ba <_printf_common+0x2a>
 80013b4:	3201      	adds	r2, #1
 80013b6:	f8ca 2000 	str.w	r2, [sl]
 80013ba:	6822      	ldr	r2, [r4, #0]
 80013bc:	0691      	lsls	r1, r2, #26
 80013be:	d55d      	bpl.n	800147c <_printf_common+0xec>
 80013c0:	f8da 3000 	ldr.w	r3, [sl]
 80013c4:	3302      	adds	r3, #2
 80013c6:	f8ca 3000 	str.w	r3, [sl]
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	f012 0f06 	tst.w	r2, #6
 80013d0:	4611      	mov	r1, r2
 80013d2:	d11b      	bne.n	800140c <_printf_common+0x7c>
 80013d4:	68e1      	ldr	r1, [r4, #12]
 80013d6:	4299      	cmp	r1, r3
 80013d8:	dd66      	ble.n	80014a8 <_printf_common+0x118>
 80013da:	f04f 0800 	mov.w	r8, #0
 80013de:	f104 0b19 	add.w	fp, r4, #25
 80013e2:	e005      	b.n	80013f0 <_printf_common+0x60>
 80013e4:	68e5      	ldr	r5, [r4, #12]
 80013e6:	f8da 3000 	ldr.w	r3, [sl]
 80013ea:	1aed      	subs	r5, r5, r3
 80013ec:	4545      	cmp	r5, r8
 80013ee:	dd0c      	ble.n	800140a <_printf_common+0x7a>
 80013f0:	2301      	movs	r3, #1
 80013f2:	465a      	mov	r2, fp
 80013f4:	4639      	mov	r1, r7
 80013f6:	4630      	mov	r0, r6
 80013f8:	47c8      	blx	r9
 80013fa:	3001      	adds	r0, #1
 80013fc:	f108 0801 	add.w	r8, r8, #1
 8001400:	d1f0      	bne.n	80013e4 <_printf_common+0x54>
 8001402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800140a:	6821      	ldr	r1, [r4, #0]
 800140c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001410:	3b00      	subs	r3, #0
 8001412:	bf18      	it	ne
 8001414:	2301      	movne	r3, #1
 8001416:	068a      	lsls	r2, r1, #26
 8001418:	d50a      	bpl.n	8001430 <_printf_common+0xa0>
 800141a:	18e1      	adds	r1, r4, r3
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	2030      	movs	r0, #48	@ 0x30
 8001420:	3302      	adds	r3, #2
 8001422:	4422      	add	r2, r4
 8001424:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800142c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001430:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001434:	4639      	mov	r1, r7
 8001436:	4630      	mov	r0, r6
 8001438:	47c8      	blx	r9
 800143a:	3001      	adds	r0, #1
 800143c:	d0e1      	beq.n	8001402 <_printf_common+0x72>
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	f8da 5000 	ldr.w	r5, [sl]
 8001444:	f003 0306 	and.w	r3, r3, #6
 8001448:	6921      	ldr	r1, [r4, #16]
 800144a:	2b04      	cmp	r3, #4
 800144c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8001450:	d01b      	beq.n	800148a <_printf_common+0xfa>
 8001452:	428a      	cmp	r2, r1
 8001454:	dd20      	ble.n	8001498 <_printf_common+0x108>
 8001456:	f04f 0800 	mov.w	r8, #0
 800145a:	1a52      	subs	r2, r2, r1
 800145c:	4490      	add	r8, r2
 800145e:	341a      	adds	r4, #26
 8001460:	2500      	movs	r5, #0
 8001462:	e001      	b.n	8001468 <_printf_common+0xd8>
 8001464:	4545      	cmp	r5, r8
 8001466:	da17      	bge.n	8001498 <_printf_common+0x108>
 8001468:	2301      	movs	r3, #1
 800146a:	4622      	mov	r2, r4
 800146c:	4639      	mov	r1, r7
 800146e:	4630      	mov	r0, r6
 8001470:	47c8      	blx	r9
 8001472:	3001      	adds	r0, #1
 8001474:	f105 0501 	add.w	r5, r5, #1
 8001478:	d1f4      	bne.n	8001464 <_printf_common+0xd4>
 800147a:	e7c2      	b.n	8001402 <_printf_common+0x72>
 800147c:	f012 0f06 	tst.w	r2, #6
 8001480:	d00d      	beq.n	800149e <_printf_common+0x10e>
 8001482:	3b00      	subs	r3, #0
 8001484:	bf18      	it	ne
 8001486:	2301      	movne	r3, #1
 8001488:	e7d2      	b.n	8001430 <_printf_common+0xa0>
 800148a:	1b40      	subs	r0, r0, r5
 800148c:	428a      	cmp	r2, r1
 800148e:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 8001492:	dce2      	bgt.n	800145a <_printf_common+0xca>
 8001494:	2800      	cmp	r0, #0
 8001496:	dce2      	bgt.n	800145e <_printf_common+0xce>
 8001498:	2000      	movs	r0, #0
 800149a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800149e:	f8da 3000 	ldr.w	r3, [sl]
 80014a2:	68e1      	ldr	r1, [r4, #12]
 80014a4:	4299      	cmp	r1, r3
 80014a6:	dc98      	bgt.n	80013da <_printf_common+0x4a>
 80014a8:	4611      	mov	r1, r2
 80014aa:	e7af      	b.n	800140c <_printf_common+0x7c>

080014ac <_printf_i>:
 80014ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b0:	4617      	mov	r7, r2
 80014b2:	b084      	sub	sp, #16
 80014b4:	7e0a      	ldrb	r2, [r1, #24]
 80014b6:	460c      	mov	r4, r1
 80014b8:	4606      	mov	r6, r0
 80014ba:	4698      	mov	r8, r3
 80014bc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80014be:	f101 0c43 	add.w	ip, r1, #67	@ 0x43
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d035      	beq.n	8001532 <_printf_i+0x86>
 80014c6:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 80014ca:	b2d9      	uxtb	r1, r3
 80014cc:	2920      	cmp	r1, #32
 80014ce:	d869      	bhi.n	80015a4 <_printf_i+0xf8>
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	d867      	bhi.n	80015a4 <_printf_i+0xf8>
 80014d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80014d8:	006600e6 	.word	0x006600e6
 80014dc:	00660066 	.word	0x00660066
 80014e0:	00660066 	.word	0x00660066
 80014e4:	00660066 	.word	0x00660066
 80014e8:	00660066 	.word	0x00660066
 80014ec:	00ac0066 	.word	0x00ac0066
 80014f0:	00660070 	.word	0x00660070
 80014f4:	00660066 	.word	0x00660066
 80014f8:	00700066 	.word	0x00700066
 80014fc:	00660066 	.word	0x00660066
 8001500:	00660066 	.word	0x00660066
 8001504:	00830021 	.word	0x00830021
 8001508:	006600c6 	.word	0x006600c6
 800150c:	00b60066 	.word	0x00b60066
 8001510:	00830066 	.word	0x00830066
 8001514:	00660066 	.word	0x00660066
 8001518:	00ec      	.short	0x00ec
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	6822      	ldr	r2, [r4, #0]
 800151e:	1d18      	adds	r0, r3, #4
 8001520:	6961      	ldr	r1, [r4, #20]
 8001522:	6028      	str	r0, [r5, #0]
 8001524:	0610      	lsls	r0, r2, #24
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	d402      	bmi.n	8001530 <_printf_i+0x84>
 800152a:	0652      	lsls	r2, r2, #25
 800152c:	f100 80e0 	bmi.w	80016f0 <_printf_i+0x244>
 8001530:	6019      	str	r1, [r3, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	46e1      	mov	r9, ip
 8001536:	6123      	str	r3, [r4, #16]
 8001538:	463b      	mov	r3, r7
 800153a:	aa03      	add	r2, sp, #12
 800153c:	4621      	mov	r1, r4
 800153e:	4630      	mov	r0, r6
 8001540:	f8cd 8000 	str.w	r8, [sp]
 8001544:	f7ff ff24 	bl	8001390 <_printf_common>
 8001548:	3001      	adds	r0, #1
 800154a:	d020      	beq.n	800158e <_printf_i+0xe2>
 800154c:	464a      	mov	r2, r9
 800154e:	6923      	ldr	r3, [r4, #16]
 8001550:	4639      	mov	r1, r7
 8001552:	4630      	mov	r0, r6
 8001554:	47c0      	blx	r8
 8001556:	3001      	adds	r0, #1
 8001558:	d019      	beq.n	800158e <_printf_i+0xe2>
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	68e0      	ldr	r0, [r4, #12]
 800155e:	079b      	lsls	r3, r3, #30
 8001560:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001564:	d518      	bpl.n	8001598 <_printf_i+0xec>
 8001566:	4548      	cmp	r0, r9
 8001568:	dd16      	ble.n	8001598 <_printf_i+0xec>
 800156a:	2500      	movs	r5, #0
 800156c:	f104 0a19 	add.w	sl, r4, #25
 8001570:	e004      	b.n	800157c <_printf_i+0xd0>
 8001572:	68e0      	ldr	r0, [r4, #12]
 8001574:	eba0 0309 	sub.w	r3, r0, r9
 8001578:	42ab      	cmp	r3, r5
 800157a:	dd0d      	ble.n	8001598 <_printf_i+0xec>
 800157c:	2301      	movs	r3, #1
 800157e:	4652      	mov	r2, sl
 8001580:	4639      	mov	r1, r7
 8001582:	4630      	mov	r0, r6
 8001584:	47c0      	blx	r8
 8001586:	3001      	adds	r0, #1
 8001588:	f105 0501 	add.w	r5, r5, #1
 800158c:	d1f1      	bne.n	8001572 <_printf_i+0xc6>
 800158e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001592:	b004      	add	sp, #16
 8001594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001598:	4548      	cmp	r0, r9
 800159a:	bfb8      	it	lt
 800159c:	4648      	movlt	r0, r9
 800159e:	b004      	add	sp, #16
 80015a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a4:	2001      	movs	r0, #1
 80015a6:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80015aa:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80015ae:	2300      	movs	r3, #0
 80015b0:	6120      	str	r0, [r4, #16]
 80015b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015b6:	e7bf      	b.n	8001538 <_printf_i+0x8c>
 80015b8:	682a      	ldr	r2, [r5, #0]
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	1d11      	adds	r1, r2, #4
 80015be:	0618      	lsls	r0, r3, #24
 80015c0:	6029      	str	r1, [r5, #0]
 80015c2:	d402      	bmi.n	80015ca <_printf_i+0x11e>
 80015c4:	0659      	lsls	r1, r3, #25
 80015c6:	f100 8095 	bmi.w	80016f4 <_printf_i+0x248>
 80015ca:	6810      	ldr	r0, [r2, #0]
 80015cc:	4601      	mov	r1, r0
 80015ce:	2800      	cmp	r0, #0
 80015d0:	6862      	ldr	r2, [r4, #4]
 80015d2:	f2c0 8093 	blt.w	80016fc <_printf_i+0x250>
 80015d6:	4854      	ldr	r0, [pc, #336]	@ (8001728 <_printf_i+0x27c>)
 80015d8:	f04f 0e0a 	mov.w	lr, #10
 80015dc:	e015      	b.n	800160a <_printf_i+0x15e>
 80015de:	6820      	ldr	r0, [r4, #0]
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80015e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80015ea:	d102      	bne.n	80015f2 <_printf_i+0x146>
 80015ec:	0640      	lsls	r0, r0, #25
 80015ee:	bf48      	it	mi
 80015f0:	b289      	uxthmi	r1, r1
 80015f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80015f4:	484c      	ldr	r0, [pc, #304]	@ (8001728 <_printf_i+0x27c>)
 80015f6:	602b      	str	r3, [r5, #0]
 80015f8:	bf14      	ite	ne
 80015fa:	f04f 0e0a 	movne.w	lr, #10
 80015fe:	f04f 0e08 	moveq.w	lr, #8
 8001602:	2300      	movs	r3, #0
 8001604:	6862      	ldr	r2, [r4, #4]
 8001606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800160a:	2a00      	cmp	r2, #0
 800160c:	60a2      	str	r2, [r4, #8]
 800160e:	db51      	blt.n	80016b4 <_printf_i+0x208>
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6023      	str	r3, [r4, #0]
 8001618:	2900      	cmp	r1, #0
 800161a:	d14b      	bne.n	80016b4 <_printf_i+0x208>
 800161c:	2a00      	cmp	r2, #0
 800161e:	d17b      	bne.n	8001718 <_printf_i+0x26c>
 8001620:	46e1      	mov	r9, ip
 8001622:	f1be 0f08 	cmp.w	lr, #8
 8001626:	d056      	beq.n	80016d6 <_printf_i+0x22a>
 8001628:	ebac 0309 	sub.w	r3, ip, r9
 800162c:	6123      	str	r3, [r4, #16]
 800162e:	e783      	b.n	8001538 <_printf_i+0x8c>
 8001630:	682a      	ldr	r2, [r5, #0]
 8001632:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001636:	2001      	movs	r0, #1
 8001638:	1d11      	adds	r1, r2, #4
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	6029      	str	r1, [r5, #0]
 800163e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001642:	e7b4      	b.n	80015ae <_printf_i+0x102>
 8001644:	682b      	ldr	r3, [r5, #0]
 8001646:	2100      	movs	r1, #0
 8001648:	6862      	ldr	r2, [r4, #4]
 800164a:	1d18      	adds	r0, r3, #4
 800164c:	6028      	str	r0, [r5, #0]
 800164e:	f8d3 9000 	ldr.w	r9, [r3]
 8001652:	4648      	mov	r0, r9
 8001654:	f000 f8fa 	bl	800184c <memchr>
 8001658:	2800      	cmp	r0, #0
 800165a:	d063      	beq.n	8001724 <_printf_i+0x278>
 800165c:	eba0 0009 	sub.w	r0, r0, r9
 8001660:	6060      	str	r0, [r4, #4]
 8001662:	e7a4      	b.n	80015ae <_printf_i+0x102>
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	6023      	str	r3, [r4, #0]
 800166c:	2278      	movs	r2, #120	@ 0x78
 800166e:	482f      	ldr	r0, [pc, #188]	@ (800172c <_printf_i+0x280>)
 8001670:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8001674:	682a      	ldr	r2, [r5, #0]
 8001676:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800167a:	f852 1b04 	ldr.w	r1, [r2], #4
 800167e:	d103      	bne.n	8001688 <_printf_i+0x1dc>
 8001680:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001684:	bf18      	it	ne
 8001686:	b289      	uxthne	r1, r1
 8001688:	602a      	str	r2, [r5, #0]
 800168a:	07da      	lsls	r2, r3, #31
 800168c:	d502      	bpl.n	8001694 <_printf_i+0x1e8>
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	6023      	str	r3, [r4, #0]
 8001694:	b919      	cbnz	r1, 800169e <_printf_i+0x1f2>
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	f023 0320 	bic.w	r3, r3, #32
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	f04f 0e10 	mov.w	lr, #16
 80016a2:	e7ae      	b.n	8001602 <_printf_i+0x156>
 80016a4:	2358      	movs	r3, #88	@ 0x58
 80016a6:	4820      	ldr	r0, [pc, #128]	@ (8001728 <_printf_i+0x27c>)
 80016a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	e7e1      	b.n	8001674 <_printf_i+0x1c8>
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	e7db      	b.n	800166c <_printf_i+0x1c0>
 80016b4:	4675      	mov	r5, lr
 80016b6:	46e1      	mov	r9, ip
 80016b8:	460a      	mov	r2, r1
 80016ba:	fbb1 f3f5 	udiv	r3, r1, r5
 80016be:	fb05 1a13 	mls	sl, r5, r3, r1
 80016c2:	42aa      	cmp	r2, r5
 80016c4:	4619      	mov	r1, r3
 80016c6:	f810 300a 	ldrb.w	r3, [r0, sl]
 80016ca:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80016ce:	d2f3      	bcs.n	80016b8 <_printf_i+0x20c>
 80016d0:	f1be 0f08 	cmp.w	lr, #8
 80016d4:	d1a8      	bne.n	8001628 <_printf_i+0x17c>
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	07dd      	lsls	r5, r3, #31
 80016da:	d5a5      	bpl.n	8001628 <_printf_i+0x17c>
 80016dc:	6862      	ldr	r2, [r4, #4]
 80016de:	6923      	ldr	r3, [r4, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dca1      	bgt.n	8001628 <_printf_i+0x17c>
 80016e4:	2330      	movs	r3, #48	@ 0x30
 80016e6:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80016ea:	f889 3000 	strb.w	r3, [r9]
 80016ee:	e79b      	b.n	8001628 <_printf_i+0x17c>
 80016f0:	8019      	strh	r1, [r3, #0]
 80016f2:	e71e      	b.n	8001532 <_printf_i+0x86>
 80016f4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80016f8:	4608      	mov	r0, r1
 80016fa:	e768      	b.n	80015ce <_printf_i+0x122>
 80016fc:	202d      	movs	r0, #45	@ 0x2d
 80016fe:	2a00      	cmp	r2, #0
 8001700:	60a2      	str	r2, [r4, #8]
 8001702:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8001706:	db02      	blt.n	800170e <_printf_i+0x262>
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6023      	str	r3, [r4, #0]
 800170e:	250a      	movs	r5, #10
 8001710:	4249      	negs	r1, r1
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <_printf_i+0x27c>)
 8001714:	46ae      	mov	lr, r5
 8001716:	e7ce      	b.n	80016b6 <_printf_i+0x20a>
 8001718:	7803      	ldrb	r3, [r0, #0]
 800171a:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 800171e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001722:	e77e      	b.n	8001622 <_printf_i+0x176>
 8001724:	6860      	ldr	r0, [r4, #4]
 8001726:	e742      	b.n	80015ae <_printf_i+0x102>
 8001728:	08003330 	.word	0x08003330
 800172c:	08003344 	.word	0x08003344

08001730 <__malloc_lock>:
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <__malloc_unlock>:
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <__smakebuf_r>:
 8001738:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	460c      	mov	r4, r1
 8001740:	0799      	lsls	r1, r3, #30
 8001742:	b096      	sub	sp, #88	@ 0x58
 8001744:	d507      	bpl.n	8001756 <__smakebuf_r+0x1e>
 8001746:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800174a:	2201      	movs	r2, #1
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8001752:	b016      	add	sp, #88	@ 0x58
 8001754:	bd70      	pop	{r4, r5, r6, pc}
 8001756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800175a:	4605      	mov	r5, r0
 800175c:	2900      	cmp	r1, #0
 800175e:	db2a      	blt.n	80017b6 <__smakebuf_r+0x7e>
 8001760:	466a      	mov	r2, sp
 8001762:	f000 f961 	bl	8001a28 <_fstat_r>
 8001766:	2800      	cmp	r0, #0
 8001768:	db23      	blt.n	80017b2 <__smakebuf_r+0x7a>
 800176a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800176e:	4628      	mov	r0, r5
 8001770:	9e01      	ldr	r6, [sp, #4]
 8001772:	f7ff fc0d 	bl	8000f90 <_malloc_r>
 8001776:	2800      	cmp	r0, #0
 8001778:	d031      	beq.n	80017de <__smakebuf_r+0xa6>
 800177a:	89a3      	ldrh	r3, [r4, #12]
 800177c:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 8001780:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001784:	6020      	str	r0, [r4, #0]
 8001786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178a:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800178e:	6120      	str	r0, [r4, #16]
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	6162      	str	r2, [r4, #20]
 8001794:	d1dd      	bne.n	8001752 <__smakebuf_r+0x1a>
 8001796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800179a:	4628      	mov	r0, r5
 800179c:	f000 f8a2 	bl	80018e4 <_isatty_r>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d0d6      	beq.n	8001752 <__smakebuf_r+0x1a>
 80017a4:	89a3      	ldrh	r3, [r4, #12]
 80017a6:	f023 0303 	bic.w	r3, r3, #3
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	81a3      	strh	r3, [r4, #12]
 80017b0:	e7cf      	b.n	8001752 <__smakebuf_r+0x1a>
 80017b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80017ba:	4628      	mov	r0, r5
 80017bc:	bf14      	ite	ne
 80017be:	2540      	movne	r5, #64	@ 0x40
 80017c0:	f44f 6580 	moveq.w	r5, #1024	@ 0x400
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7ff fbe3 	bl	8000f90 <_malloc_r>
 80017ca:	b140      	cbz	r0, 80017de <__smakebuf_r+0xa6>
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	6020      	str	r0, [r4, #0]
 80017d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80017d8:	81a3      	strh	r3, [r4, #12]
 80017da:	b016      	add	sp, #88	@ 0x58
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e2:	059a      	lsls	r2, r3, #22
 80017e4:	d4b5      	bmi.n	8001752 <__smakebuf_r+0x1a>
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80017ee:	2101      	movs	r1, #1
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6022      	str	r2, [r4, #0]
 80017f6:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80017fa:	81a3      	strh	r3, [r4, #12]
 80017fc:	e7a9      	b.n	8001752 <__smakebuf_r+0x1a>
 80017fe:	bf00      	nop

08001800 <__swhatbuf_r>:
 8001800:	b570      	push	{r4, r5, r6, lr}
 8001802:	460c      	mov	r4, r1
 8001804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001808:	b096      	sub	sp, #88	@ 0x58
 800180a:	4615      	mov	r5, r2
 800180c:	2900      	cmp	r1, #0
 800180e:	461e      	mov	r6, r3
 8001810:	db0f      	blt.n	8001832 <__swhatbuf_r+0x32>
 8001812:	466a      	mov	r2, sp
 8001814:	f000 f908 	bl	8001a28 <_fstat_r>
 8001818:	2800      	cmp	r0, #0
 800181a:	db0a      	blt.n	8001832 <__swhatbuf_r+0x32>
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001822:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001826:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	e007      	b.n	8001842 <__swhatbuf_r+0x42>
 8001832:	89a2      	ldrh	r2, [r4, #12]
 8001834:	2300      	movs	r3, #0
 8001836:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800183a:	bf14      	ite	ne
 800183c:	2240      	movne	r2, #64	@ 0x40
 800183e:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 8001842:	2000      	movs	r0, #0
 8001844:	6033      	str	r3, [r6, #0]
 8001846:	602a      	str	r2, [r5, #0]
 8001848:	b016      	add	sp, #88	@ 0x58
 800184a:	bd70      	pop	{r4, r5, r6, pc}

0800184c <memchr>:
 800184c:	fa5f fc81 	uxtb.w	ip, r1
 8001850:	0781      	lsls	r1, r0, #30
 8001852:	d044      	beq.n	80018de <memchr+0x92>
 8001854:	4603      	mov	r3, r0
 8001856:	1e51      	subs	r1, r2, #1
 8001858:	b922      	cbnz	r2, 8001864 <memchr+0x18>
 800185a:	e009      	b.n	8001870 <memchr+0x24>
 800185c:	079a      	lsls	r2, r3, #30
 800185e:	d009      	beq.n	8001874 <memchr+0x28>
 8001860:	3901      	subs	r1, #1
 8001862:	d305      	bcc.n	8001870 <memchr+0x24>
 8001864:	4618      	mov	r0, r3
 8001866:	3301      	adds	r3, #1
 8001868:	7802      	ldrb	r2, [r0, #0]
 800186a:	4562      	cmp	r2, ip
 800186c:	d1f6      	bne.n	800185c <memchr+0x10>
 800186e:	4770      	bx	lr
 8001870:	2000      	movs	r0, #0
 8001872:	4770      	bx	lr
 8001874:	4618      	mov	r0, r3
 8001876:	2903      	cmp	r1, #3
 8001878:	d80c      	bhi.n	8001894 <memchr+0x48>
 800187a:	2900      	cmp	r1, #0
 800187c:	d0f8      	beq.n	8001870 <memchr+0x24>
 800187e:	4603      	mov	r3, r0
 8001880:	4401      	add	r1, r0
 8001882:	e001      	b.n	8001888 <memchr+0x3c>
 8001884:	428b      	cmp	r3, r1
 8001886:	d0f3      	beq.n	8001870 <memchr+0x24>
 8001888:	4618      	mov	r0, r3
 800188a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800188e:	4562      	cmp	r2, ip
 8001890:	d1f8      	bne.n	8001884 <memchr+0x38>
 8001892:	4770      	bx	lr
 8001894:	b510      	push	{r4, lr}
 8001896:	eb0c 240c 	add.w	r4, ip, ip, lsl #8
 800189a:	4602      	mov	r2, r0
 800189c:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 80018a0:	e002      	b.n	80018a8 <memchr+0x5c>
 80018a2:	3904      	subs	r1, #4
 80018a4:	2903      	cmp	r1, #3
 80018a6:	d915      	bls.n	80018d4 <memchr+0x88>
 80018a8:	4610      	mov	r0, r2
 80018aa:	f852 3b04 	ldr.w	r3, [r2], #4
 80018ae:	4063      	eors	r3, r4
 80018b0:	f1a3 3e01 	sub.w	lr, r3, #16843009	@ 0x1010101
 80018b4:	ea2e 0303 	bic.w	r3, lr, r3
 80018b8:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
 80018bc:	d0f1      	beq.n	80018a2 <memchr+0x56>
 80018be:	4603      	mov	r3, r0
 80018c0:	4401      	add	r1, r0
 80018c2:	e001      	b.n	80018c8 <memchr+0x7c>
 80018c4:	428b      	cmp	r3, r1
 80018c6:	d008      	beq.n	80018da <memchr+0x8e>
 80018c8:	4618      	mov	r0, r3
 80018ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018ce:	4562      	cmp	r2, ip
 80018d0:	d1f8      	bne.n	80018c4 <memchr+0x78>
 80018d2:	bd10      	pop	{r4, pc}
 80018d4:	4610      	mov	r0, r2
 80018d6:	2900      	cmp	r1, #0
 80018d8:	d1f1      	bne.n	80018be <memchr+0x72>
 80018da:	2000      	movs	r0, #0
 80018dc:	bd10      	pop	{r4, pc}
 80018de:	4611      	mov	r1, r2
 80018e0:	e7c9      	b.n	8001876 <memchr+0x2a>
 80018e2:	bf00      	nop

080018e4 <_isatty_r>:
 80018e4:	b538      	push	{r3, r4, r5, lr}
 80018e6:	2200      	movs	r2, #0
 80018e8:	4d06      	ldr	r5, [pc, #24]	@ (8001904 <_isatty_r+0x20>)
 80018ea:	4604      	mov	r4, r0
 80018ec:	4608      	mov	r0, r1
 80018ee:	602a      	str	r2, [r5, #0]
 80018f0:	f000 fa1c 	bl	8001d2c <_isatty>
 80018f4:	1c43      	adds	r3, r0, #1
 80018f6:	d000      	beq.n	80018fa <_isatty_r+0x16>
 80018f8:	bd38      	pop	{r3, r4, r5, pc}
 80018fa:	682b      	ldr	r3, [r5, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0fb      	beq.n	80018f8 <_isatty_r+0x14>
 8001900:	6023      	str	r3, [r4, #0]
 8001902:	bd38      	pop	{r3, r4, r5, pc}
 8001904:	200001c8 	.word	0x200001c8

08001908 <_sbrk_r>:
 8001908:	b538      	push	{r3, r4, r5, lr}
 800190a:	2200      	movs	r2, #0
 800190c:	4d06      	ldr	r5, [pc, #24]	@ (8001928 <_sbrk_r+0x20>)
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	602a      	str	r2, [r5, #0]
 8001914:	f000 fa0e 	bl	8001d34 <_sbrk>
 8001918:	1c43      	adds	r3, r0, #1
 800191a:	d000      	beq.n	800191e <_sbrk_r+0x16>
 800191c:	bd38      	pop	{r3, r4, r5, pc}
 800191e:	682b      	ldr	r3, [r5, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0fb      	beq.n	800191c <_sbrk_r+0x14>
 8001924:	6023      	str	r3, [r4, #0]
 8001926:	bd38      	pop	{r3, r4, r5, pc}
 8001928:	200001c8 	.word	0x200001c8

0800192c <__sread>:
 800192c:	b510      	push	{r4, lr}
 800192e:	460c      	mov	r4, r1
 8001930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001934:	f000 f862 	bl	80019fc <_read_r>
 8001938:	2800      	cmp	r0, #0
 800193a:	db03      	blt.n	8001944 <__sread+0x18>
 800193c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800193e:	4403      	add	r3, r0
 8001940:	6563      	str	r3, [r4, #84]	@ 0x54
 8001942:	bd10      	pop	{r4, pc}
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800194a:	81a3      	strh	r3, [r4, #12]
 800194c:	bd10      	pop	{r4, pc}
 800194e:	bf00      	nop

08001950 <__seofread>:
 8001950:	2000      	movs	r0, #0
 8001952:	4770      	bx	lr

08001954 <__swrite>:
 8001954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001958:	460c      	mov	r4, r1
 800195a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800195e:	461f      	mov	r7, r3
 8001960:	4605      	mov	r5, r0
 8001962:	05cb      	lsls	r3, r1, #23
 8001964:	4616      	mov	r6, r2
 8001966:	d40b      	bmi.n	8001980 <__swrite+0x2c>
 8001968:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800196c:	463b      	mov	r3, r7
 800196e:	4632      	mov	r2, r6
 8001970:	4628      	mov	r0, r5
 8001972:	81a1      	strh	r1, [r4, #12]
 8001974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800197c:	f000 b880 	b.w	8001a80 <_write_r>
 8001980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001984:	2302      	movs	r3, #2
 8001986:	2200      	movs	r2, #0
 8001988:	f000 f864 	bl	8001a54 <_lseek_r>
 800198c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001990:	e7ea      	b.n	8001968 <__swrite+0x14>
 8001992:	bf00      	nop

08001994 <__sseek>:
 8001994:	b510      	push	{r4, lr}
 8001996:	460c      	mov	r4, r1
 8001998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800199c:	f000 f85a 	bl	8001a54 <_lseek_r>
 80019a0:	1c42      	adds	r2, r0, #1
 80019a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019a6:	d004      	beq.n	80019b2 <__sseek+0x1e>
 80019a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019ac:	6560      	str	r0, [r4, #84]	@ 0x54
 80019ae:	81a3      	strh	r3, [r4, #12]
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b6:	81a3      	strh	r3, [r4, #12]
 80019b8:	bd10      	pop	{r4, pc}
 80019ba:	bf00      	nop

080019bc <__sclose>:
 80019bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c0:	f000 b80a 	b.w	80019d8 <_close_r>

080019c4 <_malloc_usable_size_r>:
 80019c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f1a3 0004 	sub.w	r0, r3, #4
 80019ce:	db00      	blt.n	80019d2 <_malloc_usable_size_r+0xe>
 80019d0:	4770      	bx	lr
 80019d2:	580b      	ldr	r3, [r1, r0]
 80019d4:	4418      	add	r0, r3
 80019d6:	4770      	bx	lr

080019d8 <_close_r>:
 80019d8:	b538      	push	{r3, r4, r5, lr}
 80019da:	2200      	movs	r2, #0
 80019dc:	4d06      	ldr	r5, [pc, #24]	@ (80019f8 <_close_r+0x20>)
 80019de:	4604      	mov	r4, r0
 80019e0:	4608      	mov	r0, r1
 80019e2:	602a      	str	r2, [r5, #0]
 80019e4:	f000 f998 	bl	8001d18 <_close>
 80019e8:	1c43      	adds	r3, r0, #1
 80019ea:	d000      	beq.n	80019ee <_close_r+0x16>
 80019ec:	bd38      	pop	{r3, r4, r5, pc}
 80019ee:	682b      	ldr	r3, [r5, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0fb      	beq.n	80019ec <_close_r+0x14>
 80019f4:	6023      	str	r3, [r4, #0]
 80019f6:	bd38      	pop	{r3, r4, r5, pc}
 80019f8:	200001c8 	.word	0x200001c8

080019fc <_read_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	460c      	mov	r4, r1
 8001a00:	4684      	mov	ip, r0
 8001a02:	4611      	mov	r1, r2
 8001a04:	4d07      	ldr	r5, [pc, #28]	@ (8001a24 <_read_r+0x28>)
 8001a06:	461a      	mov	r2, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4664      	mov	r4, ip
 8001a0e:	602b      	str	r3, [r5, #0]
 8001a10:	f000 f974 	bl	8001cfc <_read>
 8001a14:	1c43      	adds	r3, r0, #1
 8001a16:	d000      	beq.n	8001a1a <_read_r+0x1e>
 8001a18:	bd38      	pop	{r3, r4, r5, pc}
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0fb      	beq.n	8001a18 <_read_r+0x1c>
 8001a20:	6023      	str	r3, [r4, #0]
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	200001c8 	.word	0x200001c8

08001a28 <_fstat_r>:
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4d08      	ldr	r5, [pc, #32]	@ (8001a50 <_fstat_r+0x28>)
 8001a30:	2600      	movs	r6, #0
 8001a32:	4620      	mov	r0, r4
 8001a34:	4611      	mov	r1, r2
 8001a36:	461c      	mov	r4, r3
 8001a38:	602e      	str	r6, [r5, #0]
 8001a3a:	f000 f971 	bl	8001d20 <_fstat>
 8001a3e:	1c43      	adds	r3, r0, #1
 8001a40:	d000      	beq.n	8001a44 <_fstat_r+0x1c>
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	682b      	ldr	r3, [r5, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0fb      	beq.n	8001a42 <_fstat_r+0x1a>
 8001a4a:	6023      	str	r3, [r4, #0]
 8001a4c:	bd70      	pop	{r4, r5, r6, pc}
 8001a4e:	bf00      	nop
 8001a50:	200001c8 	.word	0x200001c8

08001a54 <_lseek_r>:
 8001a54:	b538      	push	{r3, r4, r5, lr}
 8001a56:	460c      	mov	r4, r1
 8001a58:	4684      	mov	ip, r0
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4d07      	ldr	r5, [pc, #28]	@ (8001a7c <_lseek_r+0x28>)
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	4620      	mov	r0, r4
 8001a64:	4664      	mov	r4, ip
 8001a66:	602b      	str	r3, [r5, #0]
 8001a68:	f000 f962 	bl	8001d30 <_lseek>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d000      	beq.n	8001a72 <_lseek_r+0x1e>
 8001a70:	bd38      	pop	{r3, r4, r5, pc}
 8001a72:	682b      	ldr	r3, [r5, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0fb      	beq.n	8001a70 <_lseek_r+0x1c>
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 8001a7c:	200001c8 	.word	0x200001c8

08001a80 <_write_r>:
 8001a80:	b538      	push	{r3, r4, r5, lr}
 8001a82:	460c      	mov	r4, r1
 8001a84:	4684      	mov	ip, r0
 8001a86:	4611      	mov	r1, r2
 8001a88:	4d07      	ldr	r5, [pc, #28]	@ (8001aa8 <_write_r+0x28>)
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4664      	mov	r4, ip
 8001a92:	602b      	str	r3, [r5, #0]
 8001a94:	f000 f80a 	bl	8001aac <_write>
 8001a98:	1c43      	adds	r3, r0, #1
 8001a9a:	d000      	beq.n	8001a9e <_write_r+0x1e>
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
 8001a9e:	682b      	ldr	r3, [r5, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0fb      	beq.n	8001a9c <_write_r+0x1c>
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	200001c8 	.word	0x200001c8

08001aac <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int le, char *ptr, int len) {
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001aac:	1e10      	subs	r0, r2, #0
 8001aae:	dd29      	ble.n	8001b04 <_write+0x58>
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ab0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001ab4:	eb01 0c00 	add.w	ip, r1, r0
 8001ab8:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
		ITM_SendChar(*ptr++);
 8001abc:	3101      	adds	r1, #1
 8001abe:	07d2      	lsls	r2, r2, #31
 8001ac0:	d51d      	bpl.n	8001afe <_write+0x52>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ac2:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ac6:	07d2      	lsls	r2, r2, #31
 8001ac8:	d519      	bpl.n	8001afe <_write+0x52>
int _write(int le, char *ptr, int len) {
 8001aca:	b500      	push	{lr}
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001acc:	681a      	ldr	r2, [r3, #0]
		ITM_SendChar(*ptr++);
 8001ace:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 8001ad2:	b91a      	cbnz	r2, 8001adc <_write+0x30>
    {
      __NOP();
 8001ad4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d0fb      	beq.n	8001ad4 <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001adc:	f883 e000 	strb.w	lr, [r3]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001ae0:	4561      	cmp	r1, ip
 8001ae2:	d00a      	beq.n	8001afa <_write+0x4e>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ae4:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
		ITM_SendChar(*ptr++);
 8001ae8:	3101      	adds	r1, #1
 8001aea:	07d2      	lsls	r2, r2, #31
 8001aec:	d5f8      	bpl.n	8001ae0 <_write+0x34>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001aee:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001af2:	07d2      	lsls	r2, r2, #31
 8001af4:	d4ea      	bmi.n	8001acc <_write+0x20>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001af6:	4561      	cmp	r1, ip
 8001af8:	d1f4      	bne.n	8001ae4 <_write+0x38>
	}

	return len;
}
 8001afa:	f85d fb04 	ldr.w	pc, [sp], #4
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001afe:	4561      	cmp	r1, ip
 8001b00:	d1da      	bne.n	8001ab8 <_write+0xc>
 8001b02:	4770      	bx	lr
}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b08:	b530      	push	{r4, r5, lr}
 8001b0a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0c:	2260      	movs	r2, #96	@ 0x60
 8001b0e:	2100      	movs	r1, #0
 8001b10:	a806      	add	r0, sp, #24
 8001b12:	f7fe fbff 	bl	8000314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b16:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b18:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b1c:	e9cd 3300 	strd	r3, r3, [sp]
 8001b20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001b24:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b28:	f000 fc5c 	bl	80023e4 <HAL_PWREx_ControlVoltageScaling>
 8001b2c:	b108      	cbz	r0, 8001b32 <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b30:	e7fe      	b.n	8001b30 <SystemClock_Config+0x28>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b32:	4603      	mov	r3, r0
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001b34:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b36:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b38:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001b3e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001b98 <SystemClock_Config+0x90>
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b42:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001b44:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b46:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b48:	230a      	movs	r3, #10
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b4c:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001b4e:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b52:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b56:	e9cd 2219 	strd	r2, r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b5a:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b5c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b5e:	9109      	str	r1, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b60:	f000 fee4 	bl	800292c <HAL_RCC_OscConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b108      	cbz	r0, 8001b6c <SystemClock_Config+0x64>
 8001b68:	b672      	cpsid	i
	while (1) {
 8001b6a:	e7fe      	b.n	8001b6a <SystemClock_Config+0x62>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6c:	251f      	movs	r5, #31
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6e:	2403      	movs	r4, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b70:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b72:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b78:	4668      	mov	r0, sp
 8001b7a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7c:	e9cd 5400 	strd	r5, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b80:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b84:	f000 fd6c 	bl	8002660 <HAL_RCC_ClockConfig>
 8001b88:	b108      	cbz	r0, 8001b8e <SystemClock_Config+0x86>
 8001b8a:	b672      	cpsid	i
	while (1) {
 8001b8c:	e7fe      	b.n	8001b8c <SystemClock_Config+0x84>
}
 8001b8e:	b01f      	add	sp, #124	@ 0x7c
 8001b90:	bd30      	pop	{r4, r5, pc}
 8001b92:	bf00      	nop
 8001b94:	f3af 8000 	nop.w
 8001b98:	0000000c 	.word	0x0000000c
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	2400      	movs	r4, #0
{
 8001ba2:	b500      	push	{lr}
	begin = DWT->CYCCNT;
 8001ba4:	4e3c      	ldr	r6, [pc, #240]	@ (8001c98 <main+0xf8>)
 8001ba6:	4d3d      	ldr	r5, [pc, #244]	@ (8001c9c <main+0xfc>)
 8001ba8:	6873      	ldr	r3, [r6, #4]
{
 8001baa:	b08b      	sub	sp, #44	@ 0x2c
	begin = DWT->CYCCNT;
 8001bac:	602b      	str	r3, [r5, #0]
  HAL_Init();
 8001bae:	f000 f985 	bl	8001ebc <HAL_Init>
  SystemClock_Config();
 8001bb2:	f7ff ffa9 	bl	8001b08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001bba:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b38      	ldr	r3, [pc, #224]	@ (8001ca0 <main+0x100>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001bc6:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	f042 0204 	orr.w	r2, r2, #4
 8001bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001bd2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001bd6:	4833      	ldr	r0, [pc, #204]	@ (8001ca4 <main+0x104>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd8:	f002 0204 	and.w	r2, r2, #4
 8001bdc:	9201      	str	r2, [sp, #4]
 8001bde:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001bec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001bf0:	f002 0201 	and.w	r2, r2, #1
 8001bf4:	9202      	str	r2, [sp, #8]
 8001bf6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001bfc:	f042 0202 	orr.w	r2, r2, #2
 8001c00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001c08:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	9303      	str	r3, [sp, #12]
 8001c10:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8001c12:	f000 fbd7 	bl	80023c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001c16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c1a:	2300      	movs	r3, #0
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	4821      	ldr	r0, [pc, #132]	@ (8001ca4 <main+0x104>)
 8001c1e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001c20:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f000 fa3d 	bl	80020a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_12;
 8001c2a:	f44f 5384 	mov.w	r3, #4224	@ 0x1080
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2201      	movs	r2, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c30:	481c      	ldr	r0, [pc, #112]	@ (8001ca4 <main+0x104>)
 8001c32:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_12;
 8001c36:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	f000 fa32 	bl	80020a4 <HAL_GPIO_Init>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001c40:	f000 fbc6 	bl	80023d0 <HAL_ICACHE_Enable>
 8001c44:	b108      	cbz	r0, 8001c4a <main+0xaa>
 8001c46:	b672      	cpsid	i
	while (1) {
 8001c48:	e7fe      	b.n	8001c48 <main+0xa8>
	end = DWT->CYCCNT;
 8001c4a:	6873      	ldr	r3, [r6, #4]
	diff = end - begin;
 8001c4c:	6829      	ldr	r1, [r5, #0]
	end = DWT->CYCCNT;
 8001c4e:	4816      	ldr	r0, [pc, #88]	@ (8001ca8 <main+0x108>)
	diff = end - begin;
 8001c50:	4a16      	ldr	r2, [pc, #88]	@ (8001cac <main+0x10c>)
 8001c52:	1a59      	subs	r1, r3, r1
	end = DWT->CYCCNT;
 8001c54:	6003      	str	r3, [r0, #0]
	printf("%u\n", diff);
 8001c56:	4816      	ldr	r0, [pc, #88]	@ (8001cb0 <main+0x110>)
	diff = end - begin;
 8001c58:	6011      	str	r1, [r2, #0]
	printf("%u\n", diff);
 8001c5a:	f7fe fc43 	bl	80004e4 <iprintf>
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)) {
 8001c5e:	4c11      	ldr	r4, [pc, #68]	@ (8001ca4 <main+0x104>)
 8001c60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c64:	480f      	ldr	r0, [pc, #60]	@ (8001ca4 <main+0x104>)
 8001c66:	f000 fba7 	bl	80023b8 <HAL_GPIO_ReadPin>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	b168      	cbz	r0, 8001c8a <main+0xea>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c74:	4620      	mov	r0, r4
 8001c76:	f000 fba5 	bl	80023c4 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)) {
 8001c7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c7e:	4809      	ldr	r0, [pc, #36]	@ (8001ca4 <main+0x104>)
 8001c80:	f000 fb9a 	bl	80023b8 <HAL_GPIO_ReadPin>
 8001c84:	4602      	mov	r2, r0
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d1f1      	bne.n	8001c6e <main+0xce>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8001c8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f000 fb98 	bl	80023c4 <HAL_GPIO_WritePin>
 8001c94:	e7e4      	b.n	8001c60 <main+0xc0>
 8001c96:	bf00      	nop
 8001c98:	e0001000 	.word	0xe0001000
 8001c9c:	200001d4 	.word	0x200001d4
 8001ca0:	46020c00 	.word	0x46020c00
 8001ca4:	42020800 	.word	0x42020800
 8001ca8:	200001d0 	.word	0x200001d0
 8001cac:	200001cc 	.word	0x200001cc
 8001cb0:	08003318 	.word	0x08003318

08001cb4 <HAL_MspInit>:

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001cb4:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <HAL_MspInit+0x20>)
{
 8001cb8:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8001cbe:	4302      	orrs	r2, r0
 8001cc0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc8:	4003      	ands	r3, r0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001cd0:	f000 b932 	b.w	8001f38 <HAL_NVIC_SetPriorityGrouping>
 8001cd4:	46020c00 	.word	0x46020c00

08001cd8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler>
 8001cda:	bf00      	nop

08001cdc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <HardFault_Handler>
 8001cde:	bf00      	nop

08001ce0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler>
 8001ce2:	bf00      	nop

08001ce4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <BusFault_Handler>
 8001ce6:	bf00      	nop

08001ce8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler>
 8001cea:	bf00      	nop

08001cec <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop

08001cf4 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop

08001cf8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 b90c 	b.w	8001f14 <HAL_IncTick>

08001cfc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cfc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	1e16      	subs	r6, r2, #0
 8001d00:	dd07      	ble.n	8001d12 <_read+0x16>
 8001d02:	460c      	mov	r4, r1
 8001d04:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001d06:	f3af 8000 	nop.w
 8001d0a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	42a5      	cmp	r5, r4
 8001d10:	d1f9      	bne.n	8001d06 <_read+0xa>
  }

  return len;
}
 8001d12:	4630      	mov	r0, r6
 8001d14:	bd70      	pop	{r4, r5, r6, pc}
 8001d16:	bf00      	nop

08001d18 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001d20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001d24:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001d26:	604b      	str	r3, [r1, #4]
}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop

08001d2c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	4770      	bx	lr

08001d30 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001d30:	2000      	movs	r0, #0
 8001d32:	4770      	bx	lr

08001d34 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d34:	490d      	ldr	r1, [pc, #52]	@ (8001d6c <_sbrk+0x38>)
{
 8001d36:	4603      	mov	r3, r0
 8001d38:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <_sbrk+0x3c>)
 8001d3c:	4c0d      	ldr	r4, [pc, #52]	@ (8001d74 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001d3e:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001d42:	b120      	cbz	r0, 8001d4e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d44:	4403      	add	r3, r0
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d807      	bhi.n	8001d5a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001d4a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001d4c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001d4e:	4c0a      	ldr	r4, [pc, #40]	@ (8001d78 <_sbrk+0x44>)
 8001d50:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4403      	add	r3, r0
 8001d54:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8001d56:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001d58:	d9f7      	bls.n	8001d4a <_sbrk+0x16>
    errno = ENOMEM;
 8001d5a:	f7fe fb2d 	bl	80003b8 <__errno>
 8001d5e:	220c      	movs	r2, #12
 8001d60:	4603      	mov	r3, r0
    return (void *)-1;
 8001d62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOMEM;
 8001d66:	601a      	str	r2, [r3, #0]
}
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200001d8 	.word	0x200001d8
 8001d70:	200c0000 	.word	0x200c0000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	200001e0 	.word	0x200001e0

08001d7c <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001d7c:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_MSISON;
 8001d7e:	2101      	movs	r1, #1
{
 8001d80:	b410      	push	{r4}

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d82:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d86:	480e      	ldr	r0, [pc, #56]	@ (8001dc0 <SystemInit+0x44>)
 8001d88:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d90:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  RCC->CR = RCC_CR_MSISON;
 8001d94:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <SystemInit+0x48>)
 8001d96:	6019      	str	r1, [r3, #0]
  RCC->CFGR1 = 0U;
 8001d98:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001d9a:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001d9e:	6819      	ldr	r1, [r3, #0]
 8001da0:	f021 51a8 	bic.w	r1, r1, #352321536	@ 0x15000000
 8001da4:	f421 2110 	bic.w	r1, r1, #589824	@ 0x90000
 8001da8:	6019      	str	r1, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8001db2:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0U;
 8001db4:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001db6:	6084      	str	r4, [r0, #8]
  #endif
}
 8001db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00
 8001dc4:	46020c00 	.word	0x46020c00

08001dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e00 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dcc:	f7ff ffd6 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001dd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dd2:	e003      	b.n	8001ddc <LoopCopyDataInit>

08001dd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001dd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dda:	3104      	adds	r1, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ddc:	480a      	ldr	r0, [pc, #40]	@ (8001e08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001de0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001de2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001de4:	d3f6      	bcc.n	8001dd4 <CopyDataInit>
	ldr	r2, =_sbss
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001de8:	e002      	b.n	8001df0 <LoopFillZerobss>

08001dea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001dec:	f842 3b04 	str.w	r3, [r2], #4

08001df0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <LoopForever+0x16>)
	cmp	r2, r3
 8001df2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001df4:	d3f9      	bcc.n	8001dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df6:	f7fe fa65 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dfa:	f7ff fed1 	bl	8001ba0 <main>

08001dfe <LoopForever>:

LoopForever:
    b LoopForever
 8001dfe:	e7fe      	b.n	8001dfe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001e00:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001e04:	08003438 	.word	0x08003438
	ldr	r0, =_sdata
 8001e08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e0c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001e10:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001e14:	200001e0 	.word	0x200001e0

08001e18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC1_IRQHandler>
	...

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001e1e:	4e24      	ldr	r6, [pc, #144]	@ (8001eb0 <HAL_InitTick+0x94>)
 8001e20:	7832      	ldrb	r2, [r6, #0]
 8001e22:	b1ea      	cbz	r2, 8001e60 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001e24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001e28:	691c      	ldr	r4, [r3, #16]
 8001e2a:	4605      	mov	r5, r0
 8001e2c:	f014 0404 	ands.w	r4, r4, #4
 8001e30:	d018      	beq.n	8001e64 <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001e32:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e36:	fbb1 f2f2 	udiv	r2, r1, r2
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_InitTick+0x98>)
 8001e3c:	681c      	ldr	r4, [r3, #0]
 8001e3e:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001e42:	4620      	mov	r0, r4
 8001e44:	f000 f8c6 	bl	8001fd4 <HAL_SYSTICK_Config>
 8001e48:	4604      	mov	r4, r0
 8001e4a:	b948      	cbnz	r0, 8001e60 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e54:	f000 f882 	bl	8001f5c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001e58:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <HAL_InitTick+0x9c>)
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001e60:	2001      	movs	r0, #1
}
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001e64:	f000 f904 	bl	8002070 <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 8001e68:	2801      	cmp	r0, #1
 8001e6a:	d00d      	beq.n	8001e88 <HAL_InitTick+0x6c>
 8001e6c:	2802      	cmp	r0, #2
 8001e6e:	d015      	beq.n	8001e9c <HAL_InitTick+0x80>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d1e6      	bne.n	8001e42 <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001e74:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001e78:	7831      	ldrb	r1, [r6, #0]
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_InitTick+0x98>)
 8001e7c:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e80:	681c      	ldr	r4, [r3, #0]
 8001e82:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 8001e86:	e7dc      	b.n	8001e42 <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e8c:	7831      	ldrb	r1, [r6, #0]
 8001e8e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8001e92:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e96:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8001e9a:	e7d2      	b.n	8001e42 <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001e9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ea0:	7831      	ldrb	r1, [r6, #0]
 8001ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ea6:	fbb2 f2f1 	udiv	r2, r2, r1
 8001eaa:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8001eae:	e7c8      	b.n	8001e42 <HAL_InitTick+0x26>
 8001eb0:	20000060 	.word	0x20000060
 8001eb4:	2000005c 	.word	0x2000005c
 8001eb8:	20000064 	.word	0x20000064

08001ebc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4a11      	ldr	r2, [pc, #68]	@ (8001f04 <HAL_Init+0x48>)
{
 8001ebe:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eca:	f000 f835 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ece:	f000 fb39 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <HAL_Init+0x4c>)
 8001ed6:	480d      	ldr	r0, [pc, #52]	@ (8001f0c <HAL_Init+0x50>)
 8001ed8:	6a12      	ldr	r2, [r2, #32]
 8001eda:	490d      	ldr	r1, [pc, #52]	@ (8001f10 <HAL_Init+0x54>)
 8001edc:	f002 020f 	and.w	r2, r2, #15
 8001ee0:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ee2:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ee4:	40d3      	lsrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ee8:	f000 f884 	bl	8001ff4 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff ff95 	bl	8001e1c <HAL_InitTick>
 8001ef2:	b110      	cbz	r0, 8001efa <HAL_Init+0x3e>
    return HAL_ERROR;
 8001ef4:	2401      	movs	r4, #1
}
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	bd10      	pop	{r4, pc}
 8001efa:	4604      	mov	r4, r0
  HAL_MspInit();
 8001efc:	f7ff feda 	bl	8001cb4 <HAL_MspInit>
}
 8001f00:	4620      	mov	r0, r4
 8001f02:	bd10      	pop	{r4, pc}
 8001f04:	40022000 	.word	0x40022000
 8001f08:	46020c00 	.word	0x46020c00
 8001f0c:	08003398 	.word	0x08003398
 8001f10:	2000005c 	.word	0x2000005c

08001f14 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001f14:	4a03      	ldr	r2, [pc, #12]	@ (8001f24 <HAL_IncTick+0x10>)
 8001f16:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <HAL_IncTick+0x14>)
 8001f18:	6811      	ldr	r1, [r2, #0]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	200001dc 	.word	0x200001dc
 8001f28:	20000060 	.word	0x20000060

08001f2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f2c:	4b01      	ldr	r3, [pc, #4]	@ (8001f34 <HAL_GetTick+0x8>)
 8001f2e:	6818      	ldr	r0, [r3, #0]
}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	200001dc 	.word	0x200001dc

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f38:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4906      	ldr	r1, [pc, #24]	@ (8001f58 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001f54:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5e:	b500      	push	{lr}
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f66:	f1c3 0e07 	rsb	lr, r3, #7
 8001f6a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f72:	bf28      	it	cs
 8001f74:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f78:	f1bc 0f06 	cmp.w	ip, #6
 8001f7c:	d91c      	bls.n	8001fb8 <HAL_NVIC_SetPriority+0x5c>
 8001f7e:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f86:	fa03 f30c 	lsl.w	r3, r3, ip
 8001f8a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f92:	fa03 f30e 	lsl.w	r3, r3, lr
 8001f96:	ea21 0303 	bic.w	r3, r1, r3
 8001f9a:	fa03 f30c 	lsl.w	r3, r3, ip
 8001f9e:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	db0a      	blt.n	8001fbe <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001fac:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001fb0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	4694      	mov	ip, r2
 8001fbc:	e7e7      	b.n	8001f8e <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <HAL_NVIC_SetPriority+0x74>)
 8001fc0:	f000 000f 	and.w	r0, r0, #15
 8001fc4:	4402      	add	r2, r0
 8001fc6:	7613      	strb	r3, [r2, #24]
 8001fc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fcc:	e000ed00 	.word	0xe000ed00
 8001fd0:	e000ecfc 	.word	0xe000ecfc

08001fd4 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	1e43      	subs	r3, r0, #1
 8001fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fda:	d209      	bcs.n	8001ff0 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001fdc:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001fe0:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001fe2:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 8001fe4:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001fe6:	6913      	ldr	r3, [r2, #16]
 8001fe8:	f043 0303 	orr.w	r3, r3, #3
 8001fec:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 8001fee:	4770      	bx	lr
    return (1UL);
 8001ff0:	2001      	movs	r0, #1
}
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001ff4:	2804      	cmp	r0, #4
 8001ff6:	d813      	bhi.n	8002020 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 8001ff8:	e8df f000 	tbb	[pc, r0]
 8001ffc:	12031a2a 	.word	0x12031a2a
 8002000:	13          	.byte	0x13
 8002001:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002002:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8002006:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002008:	4a18      	ldr	r2, [pc, #96]	@ (800206c <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002010:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8002014:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002018:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800201c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8002020:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002022:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002026:	6913      	ldr	r3, [r2, #16]
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6113      	str	r3, [r2, #16]
      break;
 800202e:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002030:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8002034:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002036:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800203e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8002042:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002046:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800204e:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002050:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8002054:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002056:	4a05      	ldr	r2, [pc, #20]	@ (800206c <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800205e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8002062:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800206a:	4770      	bx	lr
 800206c:	46020c00 	.word	0x46020c00

08002070 <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002070:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	075b      	lsls	r3, r3, #29
 8002078:	d410      	bmi.n	800209c <HAL_SYSTICK_GetCLKSourceConfig+0x2c>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 800207c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8002080:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000

    switch (systick_rcc_source)
 8002084:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8002088:	d006      	beq.n	8002098 <HAL_SYSTICK_GetCLKSourceConfig+0x28>
 800208a:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 800208e:	fab0 f080 	clz	r0, r0
 8002092:	0940      	lsrs	r0, r0, #5
 8002094:	0040      	lsls	r0, r0, #1
 8002096:	4770      	bx	lr
 8002098:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 800209a:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800209c:	2004      	movs	r0, #4
 800209e:	4770      	bx	lr
 80020a0:	46020c00 	.word	0x46020c00

080020a4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80020a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Save GPIO port address */
  p_gpio = GPIOx;

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020a8:	f8d1 b000 	ldr.w	fp, [r1]
{
 80020ac:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020ae:	f1bb 0f00 	cmp.w	fp, #0
 80020b2:	f000 80b4 	beq.w	800221e <HAL_GPIO_Init+0x17a>
 80020b6:	4bbb      	ldr	r3, [pc, #748]	@ (80023a4 <HAL_GPIO_Init+0x300>)
 80020b8:	468a      	mov	sl, r1
 80020ba:	4298      	cmp	r0, r3
 80020bc:	f000 80be 	beq.w	800223c <HAL_GPIO_Init+0x198>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80020c0:	4bb9      	ldr	r3, [pc, #740]	@ (80023a8 <HAL_GPIO_Init+0x304>)
  uint32_t position = 0U;
 80020c2:	2200      	movs	r2, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80020c4:	ea03 2390 	and.w	r3, r3, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80020c8:	f04f 0801 	mov.w	r8, #1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80020cc:	9303      	str	r3, [sp, #12]
 80020ce:	e029      	b.n	8002124 <HAL_GPIO_Init+0x80>
        tmp = p_gpio->MODER;
 80020d0:	6806      	ldr	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d2:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80020d6:	ea05 0c06 	and.w	ip, r5, r6
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80020da:	f003 0603 	and.w	r6, r3, #3
 80020de:	fa06 f607 	lsl.w	r6, r6, r7
 80020e2:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->MODER = tmp;
 80020e6:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e8:	d901      	bls.n	80020ee <HAL_GPIO_Init+0x4a>
 80020ea:	2b11      	cmp	r3, #17
 80020ec:	d153      	bne.n	8002196 <HAL_GPIO_Init+0xf2>
        tmp = p_gpio->OSPEEDR;
 80020ee:	6886      	ldr	r6, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80020f0:	091b      	lsrs	r3, r3, #4
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80020f2:	ea06 0c05 	and.w	ip, r6, r5
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80020f6:	f8da 600c 	ldr.w	r6, [sl, #12]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80020fa:	4093      	lsls	r3, r2
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80020fc:	40be      	lsls	r6, r7
 80020fe:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->OSPEEDR = tmp;
 8002102:	6086      	str	r6, [r0, #8]
        tmp = p_gpio->OTYPER;
 8002104:	6846      	ldr	r6, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002106:	ea26 0101 	bic.w	r1, r6, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800210a:	430b      	orrs	r3, r1
        p_gpio->OTYPER = tmp;
 800210c:	6043      	str	r3, [r0, #4]
        tmp = p_gpio->PUPDR;
 800210e:	68c1      	ldr	r1, [r0, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002110:	f8da 3008 	ldr.w	r3, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002114:	4029      	ands	r1, r5
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002116:	40bb      	lsls	r3, r7
 8002118:	430b      	orrs	r3, r1
        p_gpio->PUPDR = tmp;
 800211a:	60c3      	str	r3, [r0, #12]
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
      }
    }
    position++;
 800211c:	3201      	adds	r2, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800211e:	fa3b f302 	lsrs.w	r3, fp, r2
 8002122:	d07c      	beq.n	800221e <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002124:	fa08 f102 	lsl.w	r1, r8, r2
    if (iocurrent != 0U)
 8002128:	ea1b 0e01 	ands.w	lr, fp, r1
 800212c:	d0f6      	beq.n	800211c <HAL_GPIO_Init+0x78>
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800212e:	2403      	movs	r4, #3
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002130:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002134:	0057      	lsls	r7, r2, #1
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002136:	f023 0610 	bic.w	r6, r3, #16
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800213a:	fa04 f507 	lsl.w	r5, r4, r7
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800213e:	2e02      	cmp	r6, #2
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002140:	ea6f 0505 	mvn.w	r5, r5
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002144:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002148:	d1c2      	bne.n	80020d0 <HAL_GPIO_Init+0x2c>
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800214a:	fa06 f407 	lsl.w	r4, r6, r7
        tmp = GPIOx->AFR[position >> 3U];
 800214e:	08d6      	lsrs	r6, r2, #3
 8002150:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002154:	9402      	str	r4, [sp, #8]
 8002156:	4634      	mov	r4, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002158:	f8da 6010 	ldr.w	r6, [sl, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800215c:	f002 0c07 	and.w	ip, r2, #7
 8002160:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002164:	f006 060f 	and.w	r6, r6, #15
 8002168:	fa06 f60c 	lsl.w	r6, r6, ip
 800216c:	9601      	str	r6, [sp, #4]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800216e:	260f      	movs	r6, #15
 8002170:	fa06 fc0c 	lsl.w	ip, r6, ip
        tmp = GPIOx->AFR[position >> 3U];
 8002174:	6a26      	ldr	r6, [r4, #32]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002176:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800217a:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800217e:	9e01      	ldr	r6, [sp, #4]
 8002180:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8002184:	6226      	str	r6, [r4, #32]
        tmp = p_gpio->MODER;
 8002186:	6806      	ldr	r6, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002188:	9c02      	ldr	r4, [sp, #8]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800218a:	ea06 0605 	and.w	r6, r6, r5
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800218e:	ea46 0604 	orr.w	r6, r6, r4
        p_gpio->MODER = tmp;
 8002192:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002194:	d0ab      	beq.n	80020ee <HAL_GPIO_Init+0x4a>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002196:	2b12      	cmp	r3, #18
 8002198:	d0a9      	beq.n	80020ee <HAL_GPIO_Init+0x4a>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800219a:	2b03      	cmp	r3, #3
 800219c:	d0be      	beq.n	800211c <HAL_GPIO_Init+0x78>
        tmp = p_gpio->PUPDR;
 800219e:	68c1      	ldr	r1, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80021a0:	400d      	ands	r5, r1
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80021a2:	f8da 1008 	ldr.w	r1, [sl, #8]
 80021a6:	40b9      	lsls	r1, r7
 80021a8:	4329      	orrs	r1, r5
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021aa:	00dd      	lsls	r5, r3, #3
        p_gpio->PUPDR = tmp;
 80021ac:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ae:	d5b5      	bpl.n	800211c <HAL_GPIO_Init+0x78>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80021b0:	240f      	movs	r4, #15
 80021b2:	f022 0503 	bic.w	r5, r2, #3
 80021b6:	f105 458c 	add.w	r5, r5, #1174405120	@ 0x46000000
 80021ba:	f002 0103 	and.w	r1, r2, #3
 80021be:	f505 3508 	add.w	r5, r5, #139264	@ 0x22000
 80021c2:	00c9      	lsls	r1, r1, #3
        tmp = EXTI->EXTICR[position >> 2U];
 80021c4:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80021c6:	fa04 f701 	lsl.w	r7, r4, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80021ca:	9c03      	ldr	r4, [sp, #12]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80021cc:	ea26 0607 	bic.w	r6, r6, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80021d0:	fa04 f101 	lsl.w	r1, r4, r1
 80021d4:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2U] = tmp;
 80021d6:	6629      	str	r1, [r5, #96]	@ 0x60
        tmp = EXTI->RTSR1;
 80021d8:	4974      	ldr	r1, [pc, #464]	@ (80023ac <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021da:	02dc      	lsls	r4, r3, #11
        tmp &= ~((uint32_t)iocurrent);
 80021dc:	ea6f 050e 	mvn.w	r5, lr
        tmp = EXTI->RTSR1;
 80021e0:	6809      	ldr	r1, [r1, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e2:	d428      	bmi.n	8002236 <HAL_GPIO_Init+0x192>
        tmp &= ~((uint32_t)iocurrent);
 80021e4:	4029      	ands	r1, r5
        EXTI->RTSR1 = tmp;
 80021e6:	4c71      	ldr	r4, [pc, #452]	@ (80023ac <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e8:	029f      	lsls	r7, r3, #10
        EXTI->RTSR1 = tmp;
 80021ea:	6021      	str	r1, [r4, #0]
        tmp = EXTI->FTSR1;
 80021ec:	6861      	ldr	r1, [r4, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ee:	d41f      	bmi.n	8002230 <HAL_GPIO_Init+0x18c>
        tmp &= ~((uint32_t)iocurrent);
 80021f0:	4029      	ands	r1, r5
        EXTI->FTSR1 = tmp;
 80021f2:	4c6e      	ldr	r4, [pc, #440]	@ (80023ac <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021f4:	039e      	lsls	r6, r3, #14
        EXTI->FTSR1 = tmp;
 80021f6:	6061      	str	r1, [r4, #4]
        tmp = EXTI->EMR1;
 80021f8:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021fc:	d415      	bmi.n	800222a <HAL_GPIO_Init+0x186>
        tmp &= ~((uint32_t)iocurrent);
 80021fe:	4029      	ands	r1, r5
        EXTI->EMR1 = tmp;
 8002200:	4c6a      	ldr	r4, [pc, #424]	@ (80023ac <HAL_GPIO_Init+0x308>)
 8002202:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8002206:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800220a:	03dc      	lsls	r4, r3, #15
 800220c:	d40a      	bmi.n	8002224 <HAL_GPIO_Init+0x180>
        tmp &= ~((uint32_t)iocurrent);
 800220e:	4029      	ands	r1, r5
        EXTI->IMR1 = tmp;
 8002210:	4b66      	ldr	r3, [pc, #408]	@ (80023ac <HAL_GPIO_Init+0x308>)
    position++;
 8002212:	3201      	adds	r2, #1
        EXTI->IMR1 = tmp;
 8002214:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002218:	fa3b f302 	lsrs.w	r3, fp, r2
 800221c:	d182      	bne.n	8002124 <HAL_GPIO_Init+0x80>
  }
}
 800221e:	b005      	add	sp, #20
 8002220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          tmp |= iocurrent;
 8002224:	ea41 010e 	orr.w	r1, r1, lr
 8002228:	e7f2      	b.n	8002210 <HAL_GPIO_Init+0x16c>
          tmp |= iocurrent;
 800222a:	ea41 010e 	orr.w	r1, r1, lr
 800222e:	e7e7      	b.n	8002200 <HAL_GPIO_Init+0x15c>
          tmp |= iocurrent;
 8002230:	ea41 010e 	orr.w	r1, r1, lr
 8002234:	e7dd      	b.n	80021f2 <HAL_GPIO_Init+0x14e>
          tmp |= iocurrent;
 8002236:	ea4e 0101 	orr.w	r1, lr, r1
 800223a:	e7d4      	b.n	80021e6 <HAL_GPIO_Init+0x142>
  uint32_t position = 0U;
 800223c:	2300      	movs	r3, #0
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800223e:	2701      	movs	r7, #1
        tmp = EXTI->RTSR1;
 8002240:	4e5a      	ldr	r6, [pc, #360]	@ (80023ac <HAL_GPIO_Init+0x308>)
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002242:	fa07 f103 	lsl.w	r1, r7, r3
    if (iocurrent != 0U)
 8002246:	ea11 050b 	ands.w	r5, r1, fp
 800224a:	d059      	beq.n	8002300 <HAL_GPIO_Init+0x25c>
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800224c:	f04f 090f 	mov.w	r9, #15
        tmp = GPIOx->MODER;
 8002250:	6804      	ldr	r4, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002252:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002256:	ea24 0401 	bic.w	r4, r4, r1
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800225a:	4955      	ldr	r1, [pc, #340]	@ (80023b0 <HAL_GPIO_Init+0x30c>)
 800225c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002260:	f002 0101 	and.w	r1, r2, #1
 8002264:	4099      	lsls	r1, r3
 8002266:	4321      	orrs	r1, r4
        GPIOx->MODER = tmp;
 8002268:	6001      	str	r1, [r0, #0]
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800226a:	4952      	ldr	r1, [pc, #328]	@ (80023b4 <HAL_GPIO_Init+0x310>)
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800226c:	ea4f 0edc 	mov.w	lr, ip, lsr #3
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002270:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002274:	f00c 0407 	and.w	r4, ip, #7
 8002278:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800227c:	f8de 8020 	ldr.w	r8, [lr, #32]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002280:	00a4      	lsls	r4, r4, #2
 8002282:	fa09 f904 	lsl.w	r9, r9, r4
 8002286:	ea28 0809 	bic.w	r8, r8, r9
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800228a:	f04f 090b 	mov.w	r9, #11
 800228e:	fa09 f404 	lsl.w	r4, r9, r4
 8002292:	ea44 0408 	orr.w	r4, r4, r8
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002296:	f04f 0803 	mov.w	r8, #3
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800229a:	f8ce 4020 	str.w	r4, [lr, #32]
        tmp = p_gpio->MODER;
 800229e:	680c      	ldr	r4, [r1, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80022a0:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 80022a4:	fa08 f80e 	lsl.w	r8, r8, lr
 80022a8:	ea24 0908 	bic.w	r9, r4, r8
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80022ac:	2402      	movs	r4, #2
 80022ae:	fa04 f40e 	lsl.w	r4, r4, lr
 80022b2:	ea44 0409 	orr.w	r4, r4, r9
        p_gpio->MODER = tmp;
 80022b6:	600c      	str	r4, [r1, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b8:	1e54      	subs	r4, r2, #1
 80022ba:	2c01      	cmp	r4, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80022bc:	ea6f 0808 	mvn.w	r8, r8
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c0:	d901      	bls.n	80022c6 <HAL_GPIO_Init+0x222>
 80022c2:	2a11      	cmp	r2, #17
 80022c4:	d123      	bne.n	800230e <HAL_GPIO_Init+0x26a>
        tmp = p_gpio->OSPEEDR;
 80022c6:	688c      	ldr	r4, [r1, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80022c8:	0912      	lsrs	r2, r2, #4
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80022ca:	fa07 f50c 	lsl.w	r5, r7, ip
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80022ce:	fa02 f20c 	lsl.w	r2, r2, ip
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80022d2:	ea08 0c04 	and.w	ip, r8, r4
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80022d6:	f8da 400c 	ldr.w	r4, [sl, #12]
 80022da:	fa04 f40e 	lsl.w	r4, r4, lr
 80022de:	ea44 040c 	orr.w	r4, r4, ip
        p_gpio->OSPEEDR = tmp;
 80022e2:	608c      	str	r4, [r1, #8]
        tmp = p_gpio->OTYPER;
 80022e4:	684c      	ldr	r4, [r1, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80022e6:	ea24 0405 	bic.w	r4, r4, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80022ea:	4322      	orrs	r2, r4
        p_gpio->OTYPER = tmp;
 80022ec:	604a      	str	r2, [r1, #4]
        tmp = p_gpio->PUPDR;
 80022ee:	68cc      	ldr	r4, [r1, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80022f0:	f8da 2008 	ldr.w	r2, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80022f4:	ea08 0404 	and.w	r4, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80022f8:	fa02 f20e 	lsl.w	r2, r2, lr
 80022fc:	4322      	orrs	r2, r4
        p_gpio->PUPDR = tmp;
 80022fe:	60ca      	str	r2, [r1, #12]
    position++;
 8002300:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002302:	fa3b f203 	lsrs.w	r2, fp, r3
 8002306:	d19c      	bne.n	8002242 <HAL_GPIO_Init+0x19e>
}
 8002308:	b005      	add	sp, #20
 800230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230e:	2a12      	cmp	r2, #18
 8002310:	d0d9      	beq.n	80022c6 <HAL_GPIO_Init+0x222>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002312:	2a03      	cmp	r2, #3
 8002314:	d0f4      	beq.n	8002300 <HAL_GPIO_Init+0x25c>
        tmp = p_gpio->PUPDR;
 8002316:	68cc      	ldr	r4, [r1, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002318:	ea08 0804 	and.w	r8, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800231c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8002320:	fa04 f40e 	lsl.w	r4, r4, lr
 8002324:	ea44 0408 	orr.w	r4, r4, r8
        p_gpio->PUPDR = tmp;
 8002328:	60cc      	str	r4, [r1, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800232a:	00d1      	lsls	r1, r2, #3
 800232c:	d5e8      	bpl.n	8002300 <HAL_GPIO_Init+0x25c>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800232e:	f04f 080f 	mov.w	r8, #15
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002332:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8002336:	f023 0103 	bic.w	r1, r3, #3
 800233a:	f101 418c 	add.w	r1, r1, #1174405120	@ 0x46000000
 800233e:	f501 3108 	add.w	r1, r1, #139264	@ 0x22000
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002342:	f003 0c03 	and.w	ip, r3, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8002346:	f8d1 e060 	ldr.w	lr, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800234a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800234e:	fa08 f80c 	lsl.w	r8, r8, ip
 8002352:	ea2e 0e08 	bic.w	lr, lr, r8
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002356:	fa04 f40c 	lsl.w	r4, r4, ip
 800235a:	ea44 040e 	orr.w	r4, r4, lr
        EXTI->EXTICR[position >> 2U] = tmp;
 800235e:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 8002360:	43ec      	mvns	r4, r5
        tmp = EXTI->RTSR1;
 8002362:	6831      	ldr	r1, [r6, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002364:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
        tmp &= ~((uint32_t)iocurrent);
 8002368:	bf0c      	ite	eq
 800236a:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 800236c:	4329      	orrne	r1, r5
        EXTI->RTSR1 = tmp;
 800236e:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 8002370:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002372:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8002376:	bf0c      	ite	eq
 8002378:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 800237a:	4329      	orrne	r1, r5
        EXTI->FTSR1 = tmp;
 800237c:	6071      	str	r1, [r6, #4]
        tmp = EXTI->EMR1;
 800237e:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002382:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8002386:	bf0c      	ite	eq
 8002388:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 800238a:	4329      	orrne	r1, r5
        EXTI->EMR1 = tmp;
 800238c:	f8c6 1084 	str.w	r1, [r6, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8002390:	f8d6 1080 	ldr.w	r1, [r6, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002394:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 8002396:	bf54      	ite	pl
 8002398:	4021      	andpl	r1, r4
          tmp |= iocurrent;
 800239a:	4329      	orrmi	r1, r5
        EXTI->IMR1 = tmp;
 800239c:	f8c6 1080 	str.w	r1, [r6, #128]	@ 0x80
 80023a0:	e7ae      	b.n	8002300 <HAL_GPIO_Init+0x25c>
 80023a2:	bf00      	nop
 80023a4:	46020000 	.word	0x46020000
 80023a8:	002f7f7f 	.word	0x002f7f7f
 80023ac:	46022000 	.word	0x46022000
 80023b0:	080033ac 	.word	0x080033ac
 80023b4:	080033a8 	.word	0x080033a8

080023b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80023b8:	6903      	ldr	r3, [r0, #16]
 80023ba:	4219      	tst	r1, r3
  {
    bitstatus = GPIO_PIN_RESET;
  }

  return bitstatus;
}
 80023bc:	bf14      	ite	ne
 80023be:	2001      	movne	r0, #1
 80023c0:	2000      	moveq	r0, #0
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c4:	b10a      	cbz	r2, 80023ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c6:	6181      	str	r1, [r0, #24]
 80023c8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80023ca:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop

080023d0 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80023d0:	4a03      	ldr	r2, [pc, #12]	@ (80023e0 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 80023d2:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80023d4:	6813      	ldr	r3, [r2, #0]
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40030400 	.word	0x40030400

080023e4 <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80023e4:	4a21      	ldr	r2, [pc, #132]	@ (800246c <HAL_PWREx_ControlVoltageScaling+0x88>)
 80023e6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80023e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80023ec:	4283      	cmp	r3, r0
 80023ee:	d034      	beq.n	800245a <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80023f0:	f04f 0c32 	mov.w	ip, #50	@ 0x32
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80023f4:	68d3      	ldr	r3, [r2, #12]
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80023f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80023fa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80023fe:	ea43 0300 	orr.w	r3, r3, r0
 8002402:	bf88      	it	hi
 8002404:	f443 2380 	orrhi.w	r3, r3, #262144	@ 0x40000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002408:	60d3      	str	r3, [r2, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800240c:	4a19      	ldr	r2, [pc, #100]	@ (8002474 <HAL_PWREx_ControlVoltageScaling+0x90>)
 800240e:	681b      	ldr	r3, [r3, #0]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002410:	4816      	ldr	r0, [pc, #88]	@ (800246c <HAL_PWREx_ControlVoltageScaling+0x88>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002412:	fba2 1303 	umull	r1, r3, r2, r3
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	fb0c f303 	mul.w	r3, ip, r3
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002420:	68c1      	ldr	r1, [r0, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002422:	099b      	lsrs	r3, r3, #6
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002424:	040a      	lsls	r2, r1, #16
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002426:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800242a:	d407      	bmi.n	800243c <HAL_PWREx_ControlVoltageScaling+0x58>
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800242c:	461a      	mov	r2, r3
 800242e:	e000      	b.n	8002432 <HAL_PWREx_ControlVoltageScaling+0x4e>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002430:	b18a      	cbz	r2, 8002456 <HAL_PWREx_ControlVoltageScaling+0x72>
 8002432:	68c1      	ldr	r1, [r0, #12]
  {
    timeout--;
 8002434:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002436:	0409      	lsls	r1, r1, #16
 8002438:	d5fa      	bpl.n	8002430 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }

  /* Check time out */
  if (timeout != 0U)
 800243a:	b162      	cbz	r2, 8002456 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800243c:	490b      	ldr	r1, [pc, #44]	@ (800246c <HAL_PWREx_ControlVoltageScaling+0x88>)
 800243e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8002440:	0410      	lsls	r0, r2, #16
 8002442:	d406      	bmi.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002444:	e000      	b.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x64>
 8002446:	b133      	cbz	r3, 8002456 <HAL_PWREx_ControlVoltageScaling+0x72>
 8002448:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
    {
      timeout--;
 800244a:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800244c:	0412      	lsls	r2, r2, #16
 800244e:	d5fa      	bpl.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002450:	b10b      	cbz	r3, 8002456 <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 8002452:	2000      	movs	r0, #0
 8002454:	4770      	bx	lr
  {
    return HAL_TIMEOUT;
 8002456:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002458:	4770      	bx	lr
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800245e:	d9f8      	bls.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x6e>
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002460:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 8002462:	2000      	movs	r0, #0
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002468:	60d3      	str	r3, [r2, #12]
 800246a:	4770      	bx	lr
 800246c:	46020800 	.word	0x46020800
 8002470:	2000005c 	.word	0x2000005c
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002478:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <HAL_PWREx_GetVoltageRange+0xc>)
 800247a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
}
 800247c:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	46020800 	.word	0x46020800

08002488 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002488:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800248a:	4d2c      	ldr	r5, [pc, #176]	@ (800253c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
{
 800248c:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800248e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
{
 8002492:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002494:	075b      	lsls	r3, r3, #29
 8002496:	d52b      	bpl.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002498:	f7ff ffee 	bl	8002478 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800249c:	f420 3380 	bic.w	r3, r0, #65536	@ 0x10000
 80024a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024a4:	d007      	beq.n	80024b6 <RCC_SetFlashLatencyFromMSIRange+0x2e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80024a6:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 80024aa:	d217      	bcs.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80024ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80024b0:	d133      	bne.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80024b2:	2203      	movs	r2, #3
 80024b4:	e004      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x38>
    if (msirange < RCC_MSIRANGE_1)
 80024b6:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 80024ba:	bf2c      	ite	cs
 80024bc:	2200      	movcs	r2, #0
 80024be:	2201      	movcc	r2, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024c0:	491f      	ldr	r1, [pc, #124]	@ (8002540 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c2:	680b      	ldr	r3, [r1, #0]
 80024c4:	f023 030f 	bic.w	r3, r3, #15
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80024cc:	6808      	ldr	r0, [r1, #0]
 80024ce:	f000 000f 	and.w	r0, r0, #15
 80024d2:	1a80      	subs	r0, r0, r2
 80024d4:	bf18      	it	ne
 80024d6:	2001      	movne	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80024d8:	b003      	add	sp, #12
 80024da:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 80024dc:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 80024e0:	d91e      	bls.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x98>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80024e2:	bb10      	cbnz	r0, 800252a <RCC_SetFlashLatencyFromMSIRange+0xa2>
          if (msirange > RCC_MSIRANGE_3)
 80024e4:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
 80024e8:	bf8c      	ite	hi
 80024ea:	2200      	movhi	r2, #0
 80024ec:	2201      	movls	r2, #1
 80024ee:	e7e7      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x38>
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 80024fc:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002508:	f7ff ffb6 	bl	8002478 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8002518:	e7c0      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0x14>
        return HAL_ERROR;
 800251a:	2001      	movs	r0, #1
}
 800251c:	b003      	add	sp, #12
 800251e:	bd30      	pop	{r4, r5, pc}
        if (msirange == RCC_MSIRANGE_1)
 8002520:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8002524:	d003      	beq.n	800252e <RCC_SetFlashLatencyFromMSIRange+0xa6>
          latency = FLASH_LATENCY_1; /* 1WS */
 8002526:	2201      	movs	r2, #1
 8002528:	e7ca      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x38>
      latency = FLASH_LATENCY_0; /* 0WS */
 800252a:	2200      	movs	r2, #0
 800252c:	e7c8      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x38>
            latency = FLASH_LATENCY_2; /* 2WS */
 800252e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8002532:	bf0c      	ite	eq
 8002534:	2201      	moveq	r2, #1
 8002536:	2202      	movne	r2, #2
 8002538:	e7c2      	b.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x38>
 800253a:	bf00      	nop
 800253c:	46020c00 	.word	0x46020c00
 8002540:	40022000 	.word	0x40022000

08002544 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002544:	4a41      	ldr	r2, [pc, #260]	@ (800264c <HAL_RCC_GetSysClockFreq+0x108>)
 8002546:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002548:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800254a:	f013 030c 	ands.w	r3, r3, #12
 800254e:	d00b      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x24>
 8002550:	2b0c      	cmp	r3, #12
 8002552:	d05f      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0xd0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002554:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 8002556:	483e      	ldr	r0, [pc, #248]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x10c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002558:	f002 020c 	and.w	r2, r2, #12
 800255c:	2a04      	cmp	r2, #4
 800255e:	d072      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x102>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002560:	2b08      	cmp	r3, #8
 8002562:	bf18      	it	ne
 8002564:	2000      	movne	r0, #0
 8002566:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002568:	4a38      	ldr	r2, [pc, #224]	@ (800264c <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	6891      	ldr	r1, [r2, #8]
 800256c:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800256e:	bf54      	ite	pl
 8002570:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002574:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8002576:	4937      	ldr	r1, [pc, #220]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x110>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002578:	bf54      	ite	pl
 800257a:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800257e:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8002580:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002584:	2b00      	cmp	r3, #0
 8002586:	d05f      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x104>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002588:	4930      	ldr	r1, [pc, #192]	@ (800264c <HAL_RCC_GetSysClockFreq+0x108>)
{
 800258a:	b510      	push	{r4, lr}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800258c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800258e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002590:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002592:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002596:	3301      	adds	r3, #1
 8002598:	ee07 3a10 	vmov	s14, r3
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800259c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800259e:	f3c4 1e00 	ubfx	lr, r4, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80025a2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80025a6:	fb0e f303 	mul.w	r3, lr, r3
 80025aa:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80025ae:	f002 0c03 	and.w	ip, r2, #3
    switch (pllsource)
 80025b2:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80025b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 80025ba:	d002      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0x7e>
 80025bc:	f1bc 0f03 	cmp.w	ip, #3
 80025c0:	d12f      	bne.n	8002622 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025c2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80025c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025cc:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80025d0:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8002658 <HAL_RCC_GetSysClockFreq+0x114>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025d4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80025d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025dc:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 800265c <HAL_RCC_GetSysClockFreq+0x118>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80025e0:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025e4:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80025e8:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80025ec:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_RCC_GetSysClockFreq+0x108>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80025ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80025f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025f4:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80025f8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80025fc:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002606:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800260a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800260e:	ee17 0a90 	vmov	r0, s15
}
 8002612:	bd10      	pop	{r4, pc}
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002614:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002618:	2901      	cmp	r1, #1
 800261a:	d0a5      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U;
 800261c:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261e:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002620:	e7b2      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002622:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8002624:	ee05 0a90 	vmov	s11, r0
 8002628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262c:	ee06 3a10 	vmov	s12, r3
 8002630:	eeb8 5a65 	vcvt.f32.u32	s10, s11
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002634:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002638:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800263c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002640:	eddf 5a05 	vldr	s11, [pc, #20]	@ 8002658 <HAL_RCC_GetSysClockFreq+0x114>
 8002644:	e7cc      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x9c>
 8002646:	4770      	bx	lr
}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	46020c00 	.word	0x46020c00
 8002650:	00f42400 	.word	0x00f42400
 8002654:	08003358 	.word	0x08003358
 8002658:	39000000 	.word	0x39000000
 800265c:	4b742400 	.word	0x4b742400

08002660 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8002660:	2800      	cmp	r0, #0
 8002662:	f000 810e 	beq.w	8002882 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002666:	4a9f      	ldr	r2, [pc, #636]	@ (80028e4 <HAL_RCC_ClockConfig+0x284>)
{
 8002668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800266c:	6813      	ldr	r3, [r2, #0]
 800266e:	4604      	mov	r4, r0
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	428b      	cmp	r3, r1
 8002676:	460d      	mov	r5, r1
{
 8002678:	b082      	sub	sp, #8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267a:	d20d      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267c:	6813      	ldr	r3, [r2, #0]
 800267e:	f023 030f 	bic.w	r3, r3, #15
 8002682:	430b      	orrs	r3, r1
 8002684:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	6813      	ldr	r3, [r2, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	428b      	cmp	r3, r1
 800268e:	d003      	beq.n	8002698 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8002690:	2001      	movs	r0, #1
}
 8002692:	b002      	add	sp, #8
 8002694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	06df      	lsls	r7, r3, #27
 800269c:	d50b      	bpl.n	80026b6 <HAL_RCC_ClockConfig+0x56>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800269e:	4992      	ldr	r1, [pc, #584]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 80026a0:	6960      	ldr	r0, [r4, #20]
 80026a2:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80026a4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80026a8:	4290      	cmp	r0, r2
 80026aa:	d904      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80026ac:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80026ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80026b2:	4302      	orrs	r2, r0
 80026b4:	624a      	str	r2, [r1, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	071e      	lsls	r6, r3, #28
 80026b8:	d50d      	bpl.n	80026d6 <HAL_RCC_ClockConfig+0x76>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80026ba:	498b      	ldr	r1, [pc, #556]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 80026bc:	6920      	ldr	r0, [r4, #16]
 80026be:	6a0a      	ldr	r2, [r1, #32]
 80026c0:	0912      	lsrs	r2, r2, #4
 80026c2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80026c6:	4290      	cmp	r0, r2
 80026c8:	d905      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80026ca:	6a0a      	ldr	r2, [r1, #32]
 80026cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026d0:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 80026d4:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d6:	0758      	lsls	r0, r3, #29
 80026d8:	d50b      	bpl.n	80026f2 <HAL_RCC_ClockConfig+0x92>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80026da:	4983      	ldr	r1, [pc, #524]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 80026dc:	68e0      	ldr	r0, [r4, #12]
 80026de:	6a0a      	ldr	r2, [r1, #32]
 80026e0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80026e4:	4290      	cmp	r0, r2
 80026e6:	d904      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80026e8:	6a0a      	ldr	r2, [r1, #32]
 80026ea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80026ee:	4302      	orrs	r2, r0
 80026f0:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f2:	0799      	lsls	r1, r3, #30
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f4:	f003 0201 	and.w	r2, r3, #1
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	d530      	bpl.n	800275c <HAL_RCC_ClockConfig+0xfc>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80026fa:	4e7b      	ldr	r6, [pc, #492]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 80026fc:	68a0      	ldr	r0, [r4, #8]
 80026fe:	6a31      	ldr	r1, [r6, #32]
 8002700:	f001 010f 	and.w	r1, r1, #15
 8002704:	4288      	cmp	r0, r1
 8002706:	d904      	bls.n	8002712 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002708:	6a31      	ldr	r1, [r6, #32]
 800270a:	f021 010f 	bic.w	r1, r1, #15
 800270e:	4301      	orrs	r1, r0
 8002710:	6231      	str	r1, [r6, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	2a00      	cmp	r2, #0
 8002714:	f000 8081 	beq.w	800281a <HAL_RCC_ClockConfig+0x1ba>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002718:	6863      	ldr	r3, [r4, #4]
 800271a:	2b03      	cmp	r3, #3
 800271c:	f000 80b3 	beq.w	8002886 <HAL_RCC_ClockConfig+0x226>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002720:	4a71      	ldr	r2, [pc, #452]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	2b02      	cmp	r3, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002724:	6812      	ldr	r2, [r2, #0]
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	f000 8084 	beq.w	8002832 <HAL_RCC_ClockConfig+0x1d2>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 80be 	bne.w	80028ac <HAL_RCC_ClockConfig+0x24c>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002730:	0757      	lsls	r7, r2, #29
 8002732:	d5ad      	bpl.n	8002690 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002734:	4e6c      	ldr	r6, [pc, #432]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002736:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800273a:	69f2      	ldr	r2, [r6, #28]
 800273c:	f022 0203 	bic.w	r2, r2, #3
 8002740:	4313      	orrs	r3, r2
 8002742:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8002744:	f7ff fbf2 	bl	8001f2c <HAL_GetTick>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002748:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800274a:	4607      	mov	r7, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274c:	2b03      	cmp	r3, #3
 800274e:	d05b      	beq.n	8002808 <HAL_RCC_ClockConfig+0x1a8>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	2b02      	cmp	r3, #2
 8002752:	d077      	beq.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002754:	2b00      	cmp	r3, #0
 8002756:	f040 808a 	bne.w	800286e <HAL_RCC_ClockConfig+0x20e>
 800275a:	e07e      	b.n	800285a <HAL_RCC_ClockConfig+0x1fa>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275c:	2a00      	cmp	r2, #0
 800275e:	d1db      	bne.n	8002718 <HAL_RCC_ClockConfig+0xb8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4960      	ldr	r1, [pc, #384]	@ (80028e4 <HAL_RCC_ClockConfig+0x284>)
 8002762:	680a      	ldr	r2, [r1, #0]
 8002764:	f002 020f 	and.w	r2, r2, #15
 8002768:	42aa      	cmp	r2, r5
 800276a:	d909      	bls.n	8002780 <HAL_RCC_ClockConfig+0x120>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276c:	680a      	ldr	r2, [r1, #0]
 800276e:	f022 020f 	bic.w	r2, r2, #15
 8002772:	432a      	orrs	r2, r5
 8002774:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	680a      	ldr	r2, [r1, #0]
 8002778:	f002 020f 	and.w	r2, r2, #15
 800277c:	42aa      	cmp	r2, r5
 800277e:	d187      	bne.n	8002690 <HAL_RCC_ClockConfig+0x30>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	0759      	lsls	r1, r3, #29
 8002782:	d50b      	bpl.n	800279c <HAL_RCC_ClockConfig+0x13c>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002784:	4958      	ldr	r1, [pc, #352]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 8002786:	68e0      	ldr	r0, [r4, #12]
 8002788:	6a0a      	ldr	r2, [r1, #32]
 800278a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800278e:	4290      	cmp	r0, r2
 8002790:	d204      	bcs.n	800279c <HAL_RCC_ClockConfig+0x13c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002792:	6a0a      	ldr	r2, [r1, #32]
 8002794:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002798:	4302      	orrs	r2, r0
 800279a:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279c:	071a      	lsls	r2, r3, #28
 800279e:	d50d      	bpl.n	80027bc <HAL_RCC_ClockConfig+0x15c>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80027a0:	4951      	ldr	r1, [pc, #324]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 80027a2:	6920      	ldr	r0, [r4, #16]
 80027a4:	6a0a      	ldr	r2, [r1, #32]
 80027a6:	0912      	lsrs	r2, r2, #4
 80027a8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80027ac:	4290      	cmp	r0, r2
 80027ae:	d205      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x15c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80027b0:	6a0a      	ldr	r2, [r1, #32]
 80027b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027b6:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 80027ba:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80027bc:	06db      	lsls	r3, r3, #27
 80027be:	d50b      	bpl.n	80027d8 <HAL_RCC_ClockConfig+0x178>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80027c0:	4a49      	ldr	r2, [pc, #292]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 80027c2:	6961      	ldr	r1, [r4, #20]
 80027c4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80027c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027ca:	4299      	cmp	r1, r3
 80027cc:	d204      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80027ce:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80027d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6253      	str	r3, [r2, #36]	@ 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80027d8:	f7ff feb4 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 80027dc:	4603      	mov	r3, r0
 80027de:	4a42      	ldr	r2, [pc, #264]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 80027e0:	4942      	ldr	r1, [pc, #264]	@ (80028ec <HAL_RCC_ClockConfig+0x28c>)
 80027e2:	6a12      	ldr	r2, [r2, #32]
  status = HAL_InitTick(uwTickPrio);
 80027e4:	4842      	ldr	r0, [pc, #264]	@ (80028f0 <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80027e6:	f002 020f 	and.w	r2, r2, #15
 80027ea:	5c89      	ldrb	r1, [r1, r2]
  status = HAL_InitTick(uwTickPrio);
 80027ec:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80027ee:	4a41      	ldr	r2, [pc, #260]	@ (80028f4 <HAL_RCC_ClockConfig+0x294>)
 80027f0:	40cb      	lsrs	r3, r1
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	b002      	add	sp, #8
 80027f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80027fa:	f7ff bb0f 	b.w	8001e1c <HAL_InitTick>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fe:	f7ff fb95 	bl	8001f2c <HAL_GetTick>
 8002802:	1bc3      	subs	r3, r0, r7
 8002804:	4543      	cmp	r3, r8
 8002806:	d838      	bhi.n	800287a <HAL_RCC_ClockConfig+0x21a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002808:	69f3      	ldr	r3, [r6, #28]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d1f5      	bne.n	80027fe <HAL_RCC_ClockConfig+0x19e>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	0798      	lsls	r0, r3, #30
 8002816:	d5a3      	bpl.n	8002760 <HAL_RCC_ClockConfig+0x100>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002818:	68a0      	ldr	r0, [r4, #8]
 800281a:	4933      	ldr	r1, [pc, #204]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 800281c:	6a0a      	ldr	r2, [r1, #32]
 800281e:	f002 020f 	and.w	r2, r2, #15
 8002822:	4282      	cmp	r2, r0
 8002824:	d99c      	bls.n	8002760 <HAL_RCC_ClockConfig+0x100>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002826:	6a0a      	ldr	r2, [r1, #32]
 8002828:	f022 020f 	bic.w	r2, r2, #15
 800282c:	4302      	orrs	r2, r0
 800282e:	620a      	str	r2, [r1, #32]
 8002830:	e796      	b.n	8002760 <HAL_RCC_ClockConfig+0x100>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002832:	0392      	lsls	r2, r2, #14
 8002834:	f53f af7e 	bmi.w	8002734 <HAL_RCC_ClockConfig+0xd4>
 8002838:	e72a      	b.n	8002690 <HAL_RCC_ClockConfig+0x30>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283a:	f7ff fb77 	bl	8001f2c <HAL_GetTick>
 800283e:	1bc0      	subs	r0, r0, r7
 8002840:	4540      	cmp	r0, r8
 8002842:	d81a      	bhi.n	800287a <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002844:	69f3      	ldr	r3, [r6, #28]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b08      	cmp	r3, #8
 800284c:	d1f5      	bne.n	800283a <HAL_RCC_ClockConfig+0x1da>
 800284e:	e7e0      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7ff fb6c 	bl	8001f2c <HAL_GetTick>
 8002854:	1bc0      	subs	r0, r0, r7
 8002856:	4540      	cmp	r0, r8
 8002858:	d80f      	bhi.n	800287a <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800285a:	69f3      	ldr	r3, [r6, #28]
 800285c:	f013 0f0c 	tst.w	r3, #12
 8002860:	d1f6      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1f0>
 8002862:	e7d6      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7ff fb62 	bl	8001f2c <HAL_GetTick>
 8002868:	1bc0      	subs	r0, r0, r7
 800286a:	4540      	cmp	r0, r8
 800286c:	d805      	bhi.n	800287a <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800286e:	69f3      	ldr	r3, [r6, #28]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b04      	cmp	r3, #4
 8002876:	d1f5      	bne.n	8002864 <HAL_RCC_ClockConfig+0x204>
 8002878:	e7cb      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b2>
            return HAL_TIMEOUT;
 800287a:	2003      	movs	r0, #3
}
 800287c:	b002      	add	sp, #8
 800287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002882:	2001      	movs	r0, #1
}
 8002884:	4770      	bx	lr
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b18      	ldr	r3, [pc, #96]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 8002888:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800288c:	0752      	lsls	r2, r2, #29
 800288e:	d511      	bpl.n	80028b4 <HAL_RCC_ClockConfig+0x254>
      tickstart = HAL_GetTick();
 8002890:	f7ff fb4c 	bl	8001f2c <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002894:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 8002896:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	035b      	lsls	r3, r3, #13
 800289c:	d441      	bmi.n	8002922 <HAL_RCC_ClockConfig+0x2c2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_RCC_ClockConfig+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0199      	lsls	r1, r3, #6
 80028a4:	f57f aef4 	bpl.w	8002690 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80028a8:	6863      	ldr	r3, [r4, #4]
 80028aa:	e743      	b.n	8002734 <HAL_RCC_ClockConfig+0xd4>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ac:	0556      	lsls	r6, r2, #21
 80028ae:	f57f aeef 	bpl.w	8002690 <HAL_RCC_ClockConfig+0x30>
 80028b2:	e73f      	b.n	8002734 <HAL_RCC_ClockConfig+0xd4>
        __HAL_RCC_PWR_CLK_ENABLE();
 80028b4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80028b8:	f042 0204 	orr.w	r2, r2, #4
 80028bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80028c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	9b01      	ldr	r3, [sp, #4]
      tickstart = HAL_GetTick();
 80028cc:	f7ff fb2e 	bl	8001f2c <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80028d0:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 80028d2:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	035f      	lsls	r7, r3, #13
 80028d8:	d51b      	bpl.n	8002912 <HAL_RCC_ClockConfig+0x2b2>
        pwrclkchanged = SET;
 80028da:	f04f 0801 	mov.w	r8, #1
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80028de:	4f06      	ldr	r7, [pc, #24]	@ (80028f8 <HAL_RCC_ClockConfig+0x298>)
 80028e0:	e011      	b.n	8002906 <HAL_RCC_ClockConfig+0x2a6>
 80028e2:	bf00      	nop
 80028e4:	40022000 	.word	0x40022000
 80028e8:	46020c00 	.word	0x46020c00
 80028ec:	08003398 	.word	0x08003398
 80028f0:	20000064 	.word	0x20000064
 80028f4:	2000005c 	.word	0x2000005c
 80028f8:	46020800 	.word	0x46020800
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80028fc:	f7ff fb16 	bl	8001f2c <HAL_GetTick>
 8002900:	1b80      	subs	r0, r0, r6
 8002902:	2802      	cmp	r0, #2
 8002904:	d8b9      	bhi.n	800287a <HAL_RCC_ClockConfig+0x21a>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	0458      	lsls	r0, r3, #17
 800290a:	d5f7      	bpl.n	80028fc <HAL_RCC_ClockConfig+0x29c>
      if (pwrclkchanged == SET)
 800290c:	f1b8 0f00 	cmp.w	r8, #0
 8002910:	d0c5      	beq.n	800289e <HAL_RCC_ClockConfig+0x23e>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4a05      	ldr	r2, [pc, #20]	@ (8002928 <HAL_RCC_ClockConfig+0x2c8>)
 8002914:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002920:	e7bd      	b.n	800289e <HAL_RCC_ClockConfig+0x23e>
    FlagStatus  pwrclkchanged = RESET;
 8002922:	f04f 0800 	mov.w	r8, #0
 8002926:	e7da      	b.n	80028de <HAL_RCC_ClockConfig+0x27e>
 8002928:	46020c00 	.word	0x46020c00

0800292c <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 800292c:	2800      	cmp	r0, #0
 800292e:	f000 82a4 	beq.w	8002e7a <HAL_RCC_OscConfig+0x54e>
{
 8002932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002936:	4aae      	ldr	r2, [pc, #696]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002938:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293a:	69d5      	ldr	r5, [r2, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800293c:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800293e:	06da      	lsls	r2, r3, #27
 8002940:	4604      	mov	r4, r0
{
 8002942:	b084      	sub	sp, #16
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002944:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002948:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800294c:	d531      	bpl.n	80029b2 <HAL_RCC_OscConfig+0x86>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800294e:	2d00      	cmp	r5, #0
 8002950:	f000 81b2 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x38c>
 8002954:	2d0c      	cmp	r5, #12
 8002956:	f000 81ac 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x386>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800295a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 800295c:	4fa4      	ldr	r7, [pc, #656]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 822b 	beq.w	8002dba <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_MSI_ENABLE();
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800296c:	f7ff fade 	bl	8001f2c <HAL_GetTick>
 8002970:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002972:	e006      	b.n	8002982 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002974:	f7ff fada 	bl	8001f2c <HAL_GetTick>
 8002978:	eba0 0008 	sub.w	r0, r0, r8
 800297c:	2802      	cmp	r0, #2
 800297e:	f200 820e 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	075a      	lsls	r2, r3, #29
 8002986:	d5f5      	bpl.n	8002974 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002994:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002998:	4313      	orrs	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800299c:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 80029a0:	6a21      	ldr	r1, [r4, #32]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f0c0 8367 	bcc.w	8003076 <HAL_RCC_OscConfig+0x74a>
 80029a8:	f023 031f 	bic.w	r3, r3, #31
 80029ac:	430b      	orrs	r3, r1
 80029ae:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	07df      	lsls	r7, r3, #31
 80029b4:	d531      	bpl.n	8002a1a <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80029b6:	2d08      	cmp	r5, #8
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80029b8:	6862      	ldr	r2, [r4, #4]
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80029ba:	f000 81bd 	beq.w	8002d38 <HAL_RCC_OscConfig+0x40c>
 80029be:	2d0c      	cmp	r5, #12
 80029c0:	f000 81b7 	beq.w	8002d32 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80029c4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80029c8:	f000 825b 	beq.w	8002e82 <HAL_RCC_OscConfig+0x556>
 80029cc:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 80029d0:	f000 833c 	beq.w	800304c <HAL_RCC_OscConfig+0x720>
 80029d4:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 80029d8:	f000 82fb 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x6a6>
 80029dc:	4f84      	ldr	r7, [pc, #528]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80029f4:	603b      	str	r3, [r7, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	f040 8248 	bne.w	8002e8c <HAL_RCC_OscConfig+0x560>
        tickstart = HAL_GetTick();
 80029fc:	f7ff fa96 	bl	8001f2c <HAL_GetTick>
 8002a00:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a02:	e006      	b.n	8002a12 <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7ff fa92 	bl	8001f2c <HAL_GetTick>
 8002a08:	eba0 0008 	sub.w	r0, r0, r8
 8002a0c:	2864      	cmp	r0, #100	@ 0x64
 8002a0e:	f200 81c6 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	0399      	lsls	r1, r3, #14
 8002a16:	d4f5      	bmi.n	8002a04 <HAL_RCC_OscConfig+0xd8>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	079a      	lsls	r2, r3, #30
 8002a1c:	d50f      	bpl.n	8002a3e <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a1e:	2d04      	cmp	r5, #4
 8002a20:	f040 81c4 	bne.w	8002dac <HAL_RCC_OscConfig+0x480>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a24:	68e3      	ldr	r3, [r4, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 817f 	beq.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4a70      	ldr	r2, [pc, #448]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 8002a2e:	6921      	ldr	r1, [r4, #16]
 8002a30:	6913      	ldr	r3, [r2, #16]
 8002a32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002a3a:	6113      	str	r3, [r2, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	0718      	lsls	r0, r3, #28
 8002a40:	d54d      	bpl.n	8002ade <HAL_RCC_OscConfig+0x1b2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a42:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 8002a44:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002a48:	0751      	lsls	r1, r2, #29
 8002a4a:	f100 81b4 	bmi.w	8002db6 <HAL_RCC_OscConfig+0x48a>
      pwrclkchanged = SET;
 8002a4e:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002a54:	f042 0204 	orr.w	r2, r2, #4
 8002a58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a68:	4e62      	ldr	r6, [pc, #392]	@ (8002bf4 <HAL_RCC_OscConfig+0x2c8>)
 8002a6a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002a6c:	07da      	lsls	r2, r3, #31
 8002a6e:	f140 8186 	bpl.w	8002d7e <HAL_RCC_OscConfig+0x452>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a72:	6963      	ldr	r3, [r4, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 825d 	beq.w	8002f34 <HAL_RCC_OscConfig+0x608>
      uint32_t bdcr_temp = RCC->BDCR;
 8002a7a:	4e5d      	ldr	r6, [pc, #372]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002a7c:	69a2      	ldr	r2, [r4, #24]
      uint32_t bdcr_temp = RCC->BDCR;
 8002a7e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002a82:	f003 5180 	and.w	r1, r3, #268435456	@ 0x10000000
 8002a86:	428a      	cmp	r2, r1
 8002a88:	d010      	beq.n	8002aac <HAL_RCC_OscConfig+0x180>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a8a:	f003 6140 	and.w	r1, r3, #201326592	@ 0xc000000
 8002a8e:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8002a92:	f000 814a 	beq.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002a96:	0158      	lsls	r0, r3, #5
 8002a98:	f100 82b1 	bmi.w	8002ffe <HAL_RCC_OscConfig+0x6d2>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002a9c:	4954      	ldr	r1, [pc, #336]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 8002a9e:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      __HAL_RCC_LSI_ENABLE();
 8002aac:	4e50      	ldr	r6, [pc, #320]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 8002aae:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002ab2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ab6:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8002aba:	f7ff fa37 	bl	8001f2c <HAL_GetTick>
 8002abe:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002ac0:	e005      	b.n	8002ace <HAL_RCC_OscConfig+0x1a2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7ff fa33 	bl	8001f2c <HAL_GetTick>
 8002ac6:	1bc0      	subs	r0, r0, r7
 8002ac8:	2805      	cmp	r0, #5
 8002aca:	f200 8168 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002ace:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002ad2:	011a      	lsls	r2, r3, #4
 8002ad4:	d5f5      	bpl.n	8002ac2 <HAL_RCC_OscConfig+0x196>
    if (pwrclkchanged == SET)
 8002ad6:	2d00      	cmp	r5, #0
 8002ad8:	f040 8289 	bne.w	8002fee <HAL_RCC_OscConfig+0x6c2>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	075d      	lsls	r5, r3, #29
 8002ae0:	d55e      	bpl.n	8002ba0 <HAL_RCC_OscConfig+0x274>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b43      	ldr	r3, [pc, #268]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 8002ae4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002ae8:	0750      	lsls	r0, r2, #29
 8002aea:	f100 81c8 	bmi.w	8002e7e <HAL_RCC_OscConfig+0x552>
      pwrclkchanged = SET;
 8002aee:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002af4:	f042 0204 	orr.w	r2, r2, #4
 8002af8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	9302      	str	r3, [sp, #8]
 8002b06:	9b02      	ldr	r3, [sp, #8]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b08:	4e3a      	ldr	r6, [pc, #232]	@ (8002bf4 <HAL_RCC_OscConfig+0x2c8>)
 8002b0a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002b0c:	07d9      	lsls	r1, r3, #31
 8002b0e:	f140 828c 	bpl.w	800302a <HAL_RCC_OscConfig+0x6fe>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b12:	68a3      	ldr	r3, [r4, #8]
 8002b14:	07da      	lsls	r2, r3, #31
 8002b16:	f140 81d3 	bpl.w	8002ec0 <HAL_RCC_OscConfig+0x594>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002b1a:	075e      	lsls	r6, r3, #29
 8002b1c:	f140 8251 	bpl.w	8002fc2 <HAL_RCC_OscConfig+0x696>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b20:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 8002b22:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002b26:	f042 0204 	orr.w	r2, r2, #4
 8002b2a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b2e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8002b3a:	f7ff f9f7 	bl	8001f2c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002b42:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b44:	4f2a      	ldr	r7, [pc, #168]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 8002b46:	e005      	b.n	8002b54 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7ff f9f0 	bl	8001f2c <HAL_GetTick>
 8002b4c:	1b80      	subs	r0, r0, r6
 8002b4e:	4540      	cmp	r0, r8
 8002b50:	f200 8125 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002b58:	0798      	lsls	r0, r3, #30
 8002b5a:	d5f5      	bpl.n	8002b48 <HAL_RCC_OscConfig+0x21c>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002b5c:	68a3      	ldr	r3, [r4, #8]
 8002b5e:	f013 0f80 	tst.w	r3, #128	@ 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002b66:	f000 82c7 	beq.w	80030f8 <HAL_RCC_OscConfig+0x7cc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b76:	4f1e      	ldr	r7, [pc, #120]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 8002b78:	e005      	b.n	8002b86 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7ff f9d7 	bl	8001f2c <HAL_GetTick>
 8002b7e:	1b80      	subs	r0, r0, r6
 8002b80:	4540      	cmp	r0, r8
 8002b82:	f200 810c 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002b8a:	0519      	lsls	r1, r3, #20
 8002b8c:	d5f5      	bpl.n	8002b7a <HAL_RCC_OscConfig+0x24e>
    if (pwrclkchanged == SET)
 8002b8e:	b135      	cbz	r5, 8002b9e <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
 8002b92:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	069a      	lsls	r2, r3, #26
 8002ba2:	d516      	bpl.n	8002bd2 <HAL_RCC_OscConfig+0x2a6>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ba4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      __HAL_RCC_HSI48_ENABLE();
 8002ba6:	4d12      	ldr	r5, [pc, #72]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 81dc 	beq.w	8002f66 <HAL_RCC_OscConfig+0x63a>
      __HAL_RCC_HSI48_ENABLE();
 8002bae:	682b      	ldr	r3, [r5, #0]
 8002bb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bb4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f9b9 	bl	8001f2c <HAL_GetTick>
 8002bba:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002bbc:	e005      	b.n	8002bca <HAL_RCC_OscConfig+0x29e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bbe:	f7ff f9b5 	bl	8001f2c <HAL_GetTick>
 8002bc2:	1b80      	subs	r0, r0, r6
 8002bc4:	2802      	cmp	r0, #2
 8002bc6:	f200 80ea 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002bca:	682b      	ldr	r3, [r5, #0]
 8002bcc:	049b      	lsls	r3, r3, #18
 8002bce:	d5f6      	bpl.n	8002bbe <HAL_RCC_OscConfig+0x292>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	061d      	lsls	r5, r3, #24
 8002bd4:	d51a      	bpl.n	8002c0c <HAL_RCC_OscConfig+0x2e0>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002bd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      __HAL_RCC_SHSI_ENABLE();
 8002bd8:	4d05      	ldr	r5, [pc, #20]	@ (8002bf0 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 81df 	beq.w	8002f9e <HAL_RCC_OscConfig+0x672>
      __HAL_RCC_SHSI_ENABLE();
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002be8:	f7ff f9a0 	bl	8001f2c <HAL_GetTick>
 8002bec:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002bee:	e009      	b.n	8002c04 <HAL_RCC_OscConfig+0x2d8>
 8002bf0:	46020c00 	.word	0x46020c00
 8002bf4:	46020800 	.word	0x46020800
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002bf8:	f7ff f998 	bl	8001f2c <HAL_GetTick>
 8002bfc:	1b80      	subs	r0, r0, r6
 8002bfe:	2802      	cmp	r0, #2
 8002c00:	f200 80cd 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	0418      	lsls	r0, r3, #16
 8002c08:	d5f6      	bpl.n	8002bf8 <HAL_RCC_OscConfig+0x2cc>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	065a      	lsls	r2, r3, #25
 8002c0e:	d52b      	bpl.n	8002c68 <HAL_RCC_OscConfig+0x33c>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002c10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8257 	beq.w	80030c6 <HAL_RCC_OscConfig+0x79a>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002c18:	4ba5      	ldr	r3, [pc, #660]	@ (8002eb0 <HAL_RCC_OscConfig+0x584>)
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002c26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002c2e:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8002c32:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8002c36:	f0c0 8235 	bcc.w	80030a4 <HAL_RCC_OscConfig+0x778>
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	f022 021f 	bic.w	r2, r2, #31
 8002c40:	430a      	orrs	r2, r1
 8002c42:	60da      	str	r2, [r3, #12]
      __HAL_RCC_MSIK_ENABLE();
 8002c44:	4d9a      	ldr	r5, [pc, #616]	@ (8002eb0 <HAL_RCC_OscConfig+0x584>)
 8002c46:	682b      	ldr	r3, [r5, #0]
 8002c48:	f043 0310 	orr.w	r3, r3, #16
 8002c4c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c4e:	f7ff f96d 	bl	8001f2c <HAL_GetTick>
 8002c52:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002c54:	e005      	b.n	8002c62 <HAL_RCC_OscConfig+0x336>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002c56:	f7ff f969 	bl	8001f2c <HAL_GetTick>
 8002c5a:	1b80      	subs	r0, r0, r6
 8002c5c:	2802      	cmp	r0, #2
 8002c5e:	f200 809e 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002c62:	682b      	ldr	r3, [r5, #0]
 8002c64:	069b      	lsls	r3, r3, #26
 8002c66:	d5f6      	bpl.n	8002c56 <HAL_RCC_OscConfig+0x32a>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c68:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002c6a:	b303      	cbz	r3, 8002cae <HAL_RCC_OscConfig+0x382>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c6c:	4d90      	ldr	r5, [pc, #576]	@ (8002eb0 <HAL_RCC_OscConfig+0x584>)
 8002c6e:	69ea      	ldr	r2, [r5, #28]
 8002c70:	f002 020c 	and.w	r2, r2, #12
 8002c74:	2a0c      	cmp	r2, #12
 8002c76:	f000 8255 	beq.w	8003124 <HAL_RCC_OscConfig+0x7f8>
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7a:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	682b      	ldr	r3, [r5, #0]
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c82:	602b      	str	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c84:	f000 82a6 	beq.w	80031d4 <HAL_RCC_OscConfig+0x8a8>
        tickstart = HAL_GetTick();
 8002c88:	f7ff f950 	bl	8001f2c <HAL_GetTick>
 8002c8c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c8e:	e005      	b.n	8002c9c <HAL_RCC_OscConfig+0x370>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7ff f94c 	bl	8001f2c <HAL_GetTick>
 8002c94:	1b00      	subs	r0, r0, r4
 8002c96:	2802      	cmp	r0, #2
 8002c98:	f200 8081 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	0199      	lsls	r1, r3, #6
 8002ca0:	d4f6      	bmi.n	8002c90 <HAL_RCC_OscConfig+0x364>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002ca2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002ca4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002ca8:	f023 0303 	bic.w	r3, r3, #3
 8002cac:	62ab      	str	r3, [r5, #40]	@ 0x28
  return HAL_OK;
 8002cae:	2000      	movs	r0, #0
 8002cb0:	e03c      	b.n	8002d2c <HAL_RCC_OscConfig+0x400>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cb2:	2e01      	cmp	r6, #1
 8002cb4:	f47f ae51 	bne.w	800295a <HAL_RCC_OscConfig+0x2e>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002cb8:	69e3      	ldr	r3, [r4, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d035      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3fe>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8002eb0 <HAL_RCC_OscConfig+0x584>)
 8002cc0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	0217      	lsls	r7, r2, #8
 8002cc6:	bf56      	itet	pl
 8002cc8:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
 8002ccc:	689b      	ldrmi	r3, [r3, #8]
 8002cce:	041b      	lslpl	r3, r3, #16
 8002cd0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002cd4:	4298      	cmp	r0, r3
 8002cd6:	f240 8083 	bls.w	8002de0 <HAL_RCC_OscConfig+0x4b4>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cda:	2d00      	cmp	r5, #0
 8002cdc:	f000 81c4 	beq.w	8003068 <HAL_RCC_OscConfig+0x73c>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002ce0:	4b73      	ldr	r3, [pc, #460]	@ (8002eb0 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002ce2:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002cf4:	ea42 0200 	orr.w	r2, r2, r0
 8002cf8:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002cfa:	6a21      	ldr	r1, [r4, #32]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	f080 8149 	bcs.w	8002f94 <HAL_RCC_OscConfig+0x668>
 8002d02:	2800      	cmp	r0, #0
 8002d04:	f2c0 81f2 	blt.w	80030ec <HAL_RCC_OscConfig+0x7c0>
 8002d08:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002d0c:	bf2b      	itete	cs
 8002d0e:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8002d12:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8002d16:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8002d1a:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	e081      	b.n	8002e26 <HAL_RCC_OscConfig+0x4fa>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d22:	f7ff fbb1 	bl	8002488 <RCC_SetFlashLatencyFromMSIRange>
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d07d      	beq.n	8002e26 <HAL_RCC_OscConfig+0x4fa>
    return HAL_ERROR;
 8002d2a:	2001      	movs	r0, #1
}
 8002d2c:	b004      	add	sp, #16
 8002d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d32:	2e03      	cmp	r6, #3
 8002d34:	f47f ae46 	bne.w	80029c4 <HAL_RCC_OscConfig+0x98>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d38:	2a00      	cmp	r2, #0
 8002d3a:	d0f6      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3fe>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3c:	079d      	lsls	r5, r3, #30
 8002d3e:	f57f ae7e 	bpl.w	8002a3e <HAL_RCC_OscConfig+0x112>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d42:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002d44:	4d5a      	ldr	r5, [pc, #360]	@ (8002eb0 <HAL_RCC_OscConfig+0x584>)
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8085 	beq.w	8002e56 <HAL_RCC_OscConfig+0x52a>
        __HAL_RCC_HSI_ENABLE();
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d54:	f7ff f8ea 	bl	8001f2c <HAL_GetTick>
 8002d58:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d5a:	e004      	b.n	8002d66 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7ff f8e6 	bl	8001f2c <HAL_GetTick>
 8002d60:	1b80      	subs	r0, r0, r6
 8002d62:	2802      	cmp	r0, #2
 8002d64:	d81b      	bhi.n	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d66:	682b      	ldr	r3, [r5, #0]
 8002d68:	055b      	lsls	r3, r3, #21
 8002d6a:	d5f7      	bpl.n	8002d5c <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	692b      	ldr	r3, [r5, #16]
 8002d6e:	6922      	ldr	r2, [r4, #16]
 8002d70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d78:	612b      	str	r3, [r5, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	e65f      	b.n	8002a3e <HAL_RCC_OscConfig+0x112>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002d7e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 8002d86:	f7ff f8d1 	bl	8001f2c <HAL_GetTick>
 8002d8a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d8c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002d8e:	07db      	lsls	r3, r3, #31
 8002d90:	f53f ae6f 	bmi.w	8002a72 <HAL_RCC_OscConfig+0x146>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d94:	f7ff f8ca 	bl	8001f2c <HAL_GetTick>
 8002d98:	1bc0      	subs	r0, r0, r7
 8002d9a:	2802      	cmp	r0, #2
 8002d9c:	d9f6      	bls.n	8002d8c <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8002d9e:	2003      	movs	r0, #3
}
 8002da0:	b004      	add	sp, #16
 8002da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	079a      	lsls	r2, r3, #30
 8002da8:	f57f ae49 	bpl.w	8002a3e <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002dac:	2d0c      	cmp	r5, #12
 8002dae:	d1c8      	bne.n	8002d42 <HAL_RCC_OscConfig+0x416>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002db0:	2e02      	cmp	r6, #2
 8002db2:	d1c6      	bne.n	8002d42 <HAL_RCC_OscConfig+0x416>
 8002db4:	e636      	b.n	8002a24 <HAL_RCC_OscConfig+0xf8>
    FlagStatus  pwrclkchanged = RESET;
 8002db6:	2500      	movs	r5, #0
 8002db8:	e656      	b.n	8002a68 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_DISABLE();
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002dc2:	f7ff f8b3 	bl	8001f2c <HAL_GetTick>
 8002dc6:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002dc8:	e005      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dca:	f7ff f8af 	bl	8001f2c <HAL_GetTick>
 8002dce:	eba0 0008 	sub.w	r0, r0, r8
 8002dd2:	2802      	cmp	r0, #2
 8002dd4:	d8e3      	bhi.n	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	075b      	lsls	r3, r3, #29
 8002dda:	d4f6      	bmi.n	8002dca <HAL_RCC_OscConfig+0x49e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	e5e8      	b.n	80029b2 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002de0:	4b33      	ldr	r3, [pc, #204]	@ (8002eb0 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002de2:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002df4:	ea42 0200 	orr.w	r2, r2, r0
 8002df8:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002dfa:	6a21      	ldr	r1, [r4, #32]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	f080 80c4 	bcs.w	8002f8a <HAL_RCC_OscConfig+0x65e>
 8002e02:	2800      	cmp	r0, #0
 8002e04:	f2c0 8148 	blt.w	8003098 <HAL_RCC_OscConfig+0x76c>
 8002e08:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002e0c:	bf2b      	itete	cs
 8002e0e:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8002e12:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8002e16:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8002e1a:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8002e1e:	60da      	str	r2, [r3, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e20:	2d00      	cmp	r5, #0
 8002e22:	f43f af7e 	beq.w	8002d22 <HAL_RCC_OscConfig+0x3f6>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e26:	f7ff fb8d 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <HAL_RCC_OscConfig+0x584>)
 8002e2e:	4921      	ldr	r1, [pc, #132]	@ (8002eb4 <HAL_RCC_OscConfig+0x588>)
 8002e30:	6a12      	ldr	r2, [r2, #32]
 8002e32:	f002 020f 	and.w	r2, r2, #15
 8002e36:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 8002e38:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb8 <HAL_RCC_OscConfig+0x58c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e3a:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 8002e3c:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ebc <HAL_RCC_OscConfig+0x590>)
 8002e40:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002e42:	f7fe ffeb 	bl	8001e1c <HAL_InitTick>
        if (status != HAL_OK)
 8002e46:	2800      	cmp	r0, #0
 8002e48:	f47f af70 	bne.w	8002d2c <HAL_RCC_OscConfig+0x400>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	07d9      	lsls	r1, r3, #31
 8002e50:	d5a9      	bpl.n	8002da6 <HAL_RCC_OscConfig+0x47a>
 8002e52:	6862      	ldr	r2, [r4, #4]
 8002e54:	e5b3      	b.n	80029be <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_DISABLE();
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e5e:	f7ff f865 	bl	8001f2c <HAL_GetTick>
 8002e62:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e64:	e004      	b.n	8002e70 <HAL_RCC_OscConfig+0x544>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7ff f861 	bl	8001f2c <HAL_GetTick>
 8002e6a:	1b80      	subs	r0, r0, r6
 8002e6c:	2802      	cmp	r0, #2
 8002e6e:	d896      	bhi.n	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	055f      	lsls	r7, r3, #21
 8002e74:	d4f7      	bmi.n	8002e66 <HAL_RCC_OscConfig+0x53a>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	e5e1      	b.n	8002a3e <HAL_RCC_OscConfig+0x112>
    return HAL_ERROR;
 8002e7a:	2001      	movs	r0, #1
}
 8002e7c:	4770      	bx	lr
    FlagStatus pwrclkchanged = RESET;
 8002e7e:	2500      	movs	r5, #0
 8002e80:	e642      	b.n	8002b08 <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002e82:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb0 <HAL_RCC_OscConfig+0x584>)
 8002e84:	6813      	ldr	r3, [r2, #0]
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f84e 	bl	8001f2c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e90:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8002eb0 <HAL_RCC_OscConfig+0x584>
        tickstart = HAL_GetTick();
 8002e94:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e96:	e005      	b.n	8002ea4 <HAL_RCC_OscConfig+0x578>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e98:	f7ff f848 	bl	8001f2c <HAL_GetTick>
 8002e9c:	1bc0      	subs	r0, r0, r7
 8002e9e:	2864      	cmp	r0, #100	@ 0x64
 8002ea0:	f63f af7d 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ea8:	0398      	lsls	r0, r3, #14
 8002eaa:	d5f5      	bpl.n	8002e98 <HAL_RCC_OscConfig+0x56c>
 8002eac:	e5b4      	b.n	8002a18 <HAL_RCC_OscConfig+0xec>
 8002eae:	bf00      	nop
 8002eb0:	46020c00 	.word	0x46020c00
 8002eb4:	08003398 	.word	0x08003398
 8002eb8:	20000064 	.word	0x20000064
 8002ebc:	2000005c 	.word	0x2000005c
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ec0:	4e97      	ldr	r6, [pc, #604]	@ (8003120 <HAL_RCC_OscConfig+0x7f4>)
 8002ec2:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ece:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8002ed2:	f022 0204 	bic.w	r2, r2, #4
 8002ed6:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f47f ae2d 	bne.w	8002b3a <HAL_RCC_OscConfig+0x20e>
      tickstart = HAL_GetTick();
 8002ee0:	f7ff f824 	bl	8001f2c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002ee8:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_OscConfig+0x5cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7ff f81e 	bl	8001f2c <HAL_GetTick>
 8002ef0:	1bc0      	subs	r0, r0, r7
 8002ef2:	4540      	cmp	r0, r8
 8002ef4:	f63f af53 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef8:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002efc:	079b      	lsls	r3, r3, #30
 8002efe:	d4f5      	bmi.n	8002eec <HAL_RCC_OscConfig+0x5c0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002f00:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002f04:	0618      	lsls	r0, r3, #24
 8002f06:	f57f ae42 	bpl.w	8002b8e <HAL_RCC_OscConfig+0x262>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f0a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f241 3888 	movw	r8, #5000	@ 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f16:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f1a:	4e81      	ldr	r6, [pc, #516]	@ (8003120 <HAL_RCC_OscConfig+0x7f4>)
 8002f1c:	e005      	b.n	8002f2a <HAL_RCC_OscConfig+0x5fe>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7ff f805 	bl	8001f2c <HAL_GetTick>
 8002f22:	1bc0      	subs	r0, r0, r7
 8002f24:	4540      	cmp	r0, r8
 8002f26:	f63f af3a 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f2a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002f2e:	0519      	lsls	r1, r3, #20
 8002f30:	d4f5      	bmi.n	8002f1e <HAL_RCC_OscConfig+0x5f2>
 8002f32:	e62c      	b.n	8002b8e <HAL_RCC_OscConfig+0x262>
      __HAL_RCC_LSI_DISABLE();
 8002f34:	4e7a      	ldr	r6, [pc, #488]	@ (8003120 <HAL_RCC_OscConfig+0x7f4>)
 8002f36:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002f3a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002f3e:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8002f42:	f7fe fff3 	bl	8001f2c <HAL_GetTick>
 8002f46:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f48:	e005      	b.n	8002f56 <HAL_RCC_OscConfig+0x62a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4a:	f7fe ffef 	bl	8001f2c <HAL_GetTick>
 8002f4e:	1bc0      	subs	r0, r0, r7
 8002f50:	2805      	cmp	r0, #5
 8002f52:	f63f af24 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002f56:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	d4f5      	bmi.n	8002f4a <HAL_RCC_OscConfig+0x61e>
    if (pwrclkchanged == SET)
 8002f5e:	2d00      	cmp	r5, #0
 8002f60:	f43f adbc 	beq.w	8002adc <HAL_RCC_OscConfig+0x1b0>
 8002f64:	e043      	b.n	8002fee <HAL_RCC_OscConfig+0x6c2>
      __HAL_RCC_HSI48_DISABLE();
 8002f66:	682b      	ldr	r3, [r5, #0]
 8002f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f6c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002f6e:	f7fe ffdd 	bl	8001f2c <HAL_GetTick>
 8002f72:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002f74:	e005      	b.n	8002f82 <HAL_RCC_OscConfig+0x656>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f76:	f7fe ffd9 	bl	8001f2c <HAL_GetTick>
 8002f7a:	1b80      	subs	r0, r0, r6
 8002f7c:	2802      	cmp	r0, #2
 8002f7e:	f63f af0e 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002f82:	682b      	ldr	r3, [r5, #0]
 8002f84:	049f      	lsls	r7, r3, #18
 8002f86:	d4f6      	bmi.n	8002f76 <HAL_RCC_OscConfig+0x64a>
 8002f88:	e622      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2a4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002f8a:	f022 021f 	bic.w	r2, r2, #31
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e745      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002f94:	f022 021f 	bic.w	r2, r2, #31
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e743      	b.n	8002e26 <HAL_RCC_OscConfig+0x4fa>
      __HAL_RCC_SHSI_DISABLE();
 8002f9e:	682b      	ldr	r3, [r5, #0]
 8002fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fa4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002fa6:	f7fe ffc1 	bl	8001f2c <HAL_GetTick>
 8002faa:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002fac:	e005      	b.n	8002fba <HAL_RCC_OscConfig+0x68e>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002fae:	f7fe ffbd 	bl	8001f2c <HAL_GetTick>
 8002fb2:	1b80      	subs	r0, r0, r6
 8002fb4:	2802      	cmp	r0, #2
 8002fb6:	f63f aef2 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002fba:	682b      	ldr	r3, [r5, #0]
 8002fbc:	0419      	lsls	r1, r3, #16
 8002fbe:	d4f6      	bmi.n	8002fae <HAL_RCC_OscConfig+0x682>
 8002fc0:	e623      	b.n	8002c0a <HAL_RCC_OscConfig+0x2de>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fc2:	4a57      	ldr	r2, [pc, #348]	@ (8003120 <HAL_RCC_OscConfig+0x7f4>)
 8002fc4:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd0:	e5b3      	b.n	8002b3a <HAL_RCC_OscConfig+0x20e>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002fd2:	4b53      	ldr	r3, [pc, #332]	@ (8003120 <HAL_RCC_OscConfig+0x7f4>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002fea:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fec:	e74e      	b.n	8002e8c <HAL_RCC_OscConfig+0x560>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4a4c      	ldr	r2, [pc, #304]	@ (8003120 <HAL_RCC_OscConfig+0x7f4>)
 8002ff0:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002ffc:	e56e      	b.n	8002adc <HAL_RCC_OscConfig+0x1b0>
          __HAL_RCC_LSI_DISABLE();
 8002ffe:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003002:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003006:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
          tickstart = HAL_GetTick();
 800300a:	f7fe ff8f 	bl	8001f2c <HAL_GetTick>
 800300e:	4607      	mov	r7, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003010:	e005      	b.n	800301e <HAL_RCC_OscConfig+0x6f2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003012:	f7fe ff8b 	bl	8001f2c <HAL_GetTick>
 8003016:	1bc0      	subs	r0, r0, r7
 8003018:	2805      	cmp	r0, #5
 800301a:	f63f aec0 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800301e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003022:	0119      	lsls	r1, r3, #4
 8003024:	d4f5      	bmi.n	8003012 <HAL_RCC_OscConfig+0x6e6>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003026:	69a2      	ldr	r2, [r4, #24]
 8003028:	e538      	b.n	8002a9c <HAL_RCC_OscConfig+0x170>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800302a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 8003032:	f7fe ff7b 	bl	8001f2c <HAL_GetTick>
 8003036:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003038:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800303a:	07db      	lsls	r3, r3, #31
 800303c:	f53f ad69 	bmi.w	8002b12 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003040:	f7fe ff74 	bl	8001f2c <HAL_GetTick>
 8003044:	1bc0      	subs	r0, r0, r7
 8003046:	2802      	cmp	r0, #2
 8003048:	d9f6      	bls.n	8003038 <HAL_RCC_OscConfig+0x70c>
 800304a:	e6a8      	b.n	8002d9e <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800304c:	4b34      	ldr	r3, [pc, #208]	@ (8003120 <HAL_RCC_OscConfig+0x7f4>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003064:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003066:	e711      	b.n	8002e8c <HAL_RCC_OscConfig+0x560>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003068:	f7ff fa0e 	bl	8002488 <RCC_SetFlashLatencyFromMSIRange>
 800306c:	2800      	cmp	r0, #0
 800306e:	f47f ae5c 	bne.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003072:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003074:	e634      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003076:	2a00      	cmp	r2, #0
 8003078:	f2c0 80a4 	blt.w	80031c4 <HAL_RCC_OscConfig+0x898>
 800307c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003080:	bf2b      	itete	cs
 8003082:	f423 43f8 	biccs.w	r3, r3, #31744	@ 0x7c00
 8003086:	f423 2378 	biccc.w	r3, r3, #1015808	@ 0xf8000
 800308a:	ea43 2381 	orrcs.w	r3, r3, r1, lsl #10
 800308e:	ea43 33c1 	orrcc.w	r3, r3, r1, lsl #15
 8003092:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	e48c      	b.n	80029b2 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003098:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 800309c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	e6bd      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f4>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80030a4:	2a00      	cmp	r2, #0
 80030a6:	f2c0 811e 	blt.w	80032e6 <HAL_RCC_OscConfig+0x9ba>
 80030aa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	bf2b      	itete	cs
 80030b2:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 80030b6:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 80030ba:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 80030be:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	e5be      	b.n	8002c44 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_MSIK_DISABLE();
 80030c6:	4d16      	ldr	r5, [pc, #88]	@ (8003120 <HAL_RCC_OscConfig+0x7f4>)
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	f023 0310 	bic.w	r3, r3, #16
 80030ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80030d0:	f7fe ff2c 	bl	8001f2c <HAL_GetTick>
 80030d4:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80030d6:	e005      	b.n	80030e4 <HAL_RCC_OscConfig+0x7b8>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80030d8:	f7fe ff28 	bl	8001f2c <HAL_GetTick>
 80030dc:	1b80      	subs	r0, r0, r6
 80030de:	2802      	cmp	r0, #2
 80030e0:	f63f ae5d 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	069f      	lsls	r7, r3, #26
 80030e8:	d4f6      	bmi.n	80030d8 <HAL_RCC_OscConfig+0x7ac>
 80030ea:	e5bd      	b.n	8002c68 <HAL_RCC_OscConfig+0x33c>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80030ec:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 80030f0:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	e696      	b.n	8002e26 <HAL_RCC_OscConfig+0x4fa>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003104:	4f06      	ldr	r7, [pc, #24]	@ (8003120 <HAL_RCC_OscConfig+0x7f4>)
 8003106:	e005      	b.n	8003114 <HAL_RCC_OscConfig+0x7e8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fe ff10 	bl	8001f2c <HAL_GetTick>
 800310c:	1b80      	subs	r0, r0, r6
 800310e:	4540      	cmp	r0, r8
 8003110:	f63f ae45 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003114:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003118:	051a      	lsls	r2, r3, #20
 800311a:	d4f5      	bmi.n	8003108 <HAL_RCC_OscConfig+0x7dc>
 800311c:	e537      	b.n	8002b8e <HAL_RCC_OscConfig+0x262>
 800311e:	bf00      	nop
 8003120:	46020c00 	.word	0x46020c00
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003124:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003126:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003128:	6b68      	ldr	r0, [r5, #52]	@ 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312a:	f43f adfe 	beq.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
 800312e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003130:	f002 0103 	and.w	r1, r2, #3
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003134:	4299      	cmp	r1, r3
 8003136:	f47f adf8 	bne.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800313a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800313c:	f3c2 2103 	ubfx	r1, r2, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003140:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	4299      	cmp	r1, r3
 8003144:	f47f adf1 	bne.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003148:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800314a:	f402 4270 	and.w	r2, r2, #61440	@ 0xf000
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	f47f adeb 	bne.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003154:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003156:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800315a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	f47f ade4 	bne.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003162:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003164:	f3c0 2246 	ubfx	r2, r0, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003168:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	f47f addd 	bne.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003170:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003172:	f3c0 4206 	ubfx	r2, r0, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003176:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	f47f add6 	bne.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800317e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003180:	f3c0 6006 	ubfx	r0, r0, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003184:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003186:	4298      	cmp	r0, r3
 8003188:	f47f adcf 	bne.w	8002d2a <HAL_RCC_OscConfig+0x3fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800318c:	4b59      	ldr	r3, [pc, #356]	@ (80032f4 <HAL_RCC_OscConfig+0x9c8>)
 800318e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003192:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8003196:	428a      	cmp	r2, r1
 8003198:	f43f ad89 	beq.w	8002cae <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_FRACN_DISABLE();
 800319c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800319e:	f022 0210 	bic.w	r2, r2, #16
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
        tickstart = HAL_GetTick();
 80031a4:	f7fe fec2 	bl	8001f2c <HAL_GetTick>
 80031a8:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80031aa:	f7fe febf 	bl	8001f2c <HAL_GetTick>
 80031ae:	42a8      	cmp	r0, r5
 80031b0:	d0fb      	beq.n	80031aa <HAL_RCC_OscConfig+0x87e>
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80031b2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80031b4:	4b4f      	ldr	r3, [pc, #316]	@ (80032f4 <HAL_RCC_OscConfig+0x9c8>)
 80031b6:	00d2      	lsls	r2, r2, #3
 80031b8:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 80031ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031bc:	f042 0210 	orr.w	r2, r2, #16
 80031c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80031c2:	e574      	b.n	8002cae <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80031c4:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 80031c8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80031cc:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	f7ff bbef 	b.w	80029b2 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80031d4:	f7fe feaa 	bl	8001f2c <HAL_GetTick>
 80031d8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031da:	e005      	b.n	80031e8 <HAL_RCC_OscConfig+0x8bc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fea6 	bl	8001f2c <HAL_GetTick>
 80031e0:	1b80      	subs	r0, r0, r6
 80031e2:	2802      	cmp	r0, #2
 80031e4:	f63f addb 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 80031ee:	d1f5      	bne.n	80031dc <HAL_RCC_OscConfig+0x8b0>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f0:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 80031f4:	0756      	lsls	r6, r2, #29
 80031f6:	d40c      	bmi.n	8003212 <HAL_RCC_OscConfig+0x8e6>
          pwrclkchanged = SET;
 80031f8:	2301      	movs	r3, #1
          __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 80031fe:	f042 0204 	orr.w	r2, r2, #4
 8003202:	f8c5 2094 	str.w	r2, [r5, #148]	@ 0x94
 8003206:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 800320a:	f002 0204 	and.w	r2, r2, #4
 800320e:	9203      	str	r2, [sp, #12]
 8003210:	9a03      	ldr	r2, [sp, #12]
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003212:	4d39      	ldr	r5, [pc, #228]	@ (80032f8 <HAL_RCC_OscConfig+0x9cc>)
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003214:	4937      	ldr	r1, [pc, #220]	@ (80032f4 <HAL_RCC_OscConfig+0x9c8>)
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003216:	68ee      	ldr	r6, [r5, #12]
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003218:	68ea      	ldr	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800321a:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 80032fc <HAL_RCC_OscConfig+0x9d0>
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800321e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003222:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003224:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8003226:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8003228:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800322a:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 800322e:	f020 0003 	bic.w	r0, r0, #3
 8003232:	433a      	orrs	r2, r7
 8003234:	4302      	orrs	r2, r0
 8003236:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003238:	3801      	subs	r0, #1
 800323a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800323e:	628a      	str	r2, [r1, #40]	@ 0x28
 8003240:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003242:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003244:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 8003248:	1e47      	subs	r7, r0, #1
 800324a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800324c:	3a01      	subs	r2, #1
 800324e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003252:	027f      	lsls	r7, r7, #9
 8003254:	3801      	subs	r0, #1
 8003256:	ea0e 0c0c 	and.w	ip, lr, ip
 800325a:	b2bf      	uxth	r7, r7
 800325c:	0400      	lsls	r0, r0, #16
 800325e:	ea42 020c 	orr.w	r2, r2, ip
 8003262:	f400 00fe 	and.w	r0, r0, #8323072	@ 0x7f0000
 8003266:	433a      	orrs	r2, r7
 8003268:	4302      	orrs	r2, r0
 800326a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800326c:	3801      	subs	r0, #1
 800326e:	0600      	lsls	r0, r0, #24
 8003270:	f000 40fe 	and.w	r0, r0, #2130706432	@ 0x7f000000
 8003274:	4302      	orrs	r2, r0
 8003276:	634a      	str	r2, [r1, #52]	@ 0x34
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003278:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800327a:	f022 0210 	bic.w	r2, r2, #16
 800327e:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003280:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003282:	00d2      	lsls	r2, r2, #3
 8003284:	638a      	str	r2, [r1, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003286:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003288:	f042 0210 	orr.w	r2, r2, #16
 800328c:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800328e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003292:	f022 020c 	bic.w	r2, r2, #12
 8003296:	4302      	orrs	r2, r0
        if (pwrboosten == SET)
 8003298:	0374      	lsls	r4, r6, #13
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800329a:	628a      	str	r2, [r1, #40]	@ 0x28
        if (pwrboosten == SET)
 800329c:	d41e      	bmi.n	80032dc <HAL_RCC_OscConfig+0x9b0>
        if (pwrclkchanged == SET)
 800329e:	b133      	cbz	r3, 80032ae <HAL_RCC_OscConfig+0x982>
          __HAL_RCC_PWR_CLK_DISABLE();
 80032a0:	4a14      	ldr	r2, [pc, #80]	@ (80032f4 <HAL_RCC_OscConfig+0x9c8>)
 80032a2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80032a6:	f023 0304 	bic.w	r3, r3, #4
 80032aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        __HAL_RCC_PLL_ENABLE();
 80032ae:	4c11      	ldr	r4, [pc, #68]	@ (80032f4 <HAL_RCC_OscConfig+0x9c8>)
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032b8:	f7fe fe38 	bl	8001f2c <HAL_GetTick>
 80032bc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80032be:	e005      	b.n	80032cc <HAL_RCC_OscConfig+0x9a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe fe34 	bl	8001f2c <HAL_GetTick>
 80032c4:	1b40      	subs	r0, r0, r5
 80032c6:	2802      	cmp	r0, #2
 80032c8:	f63f ad69 	bhi.w	8002d9e <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	0198      	lsls	r0, r3, #6
 80032d0:	d5f6      	bpl.n	80032c0 <HAL_RCC_OscConfig+0x994>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80032d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032da:	e4e8      	b.n	8002cae <HAL_RCC_OscConfig+0x382>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80032dc:	68ea      	ldr	r2, [r5, #12]
 80032de:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80032e2:	60ea      	str	r2, [r5, #12]
 80032e4:	e7db      	b.n	800329e <HAL_RCC_OscConfig+0x972>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 80032ec:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e4a7      	b.n	8002c44 <HAL_RCC_OscConfig+0x318>
 80032f4:	46020c00 	.word	0x46020c00
 80032f8:	46020800 	.word	0x46020800
 80032fc:	80800000 	.word	0x80800000

08003300 <_init>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr

0800330c <_fini>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	bf00      	nop
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr
