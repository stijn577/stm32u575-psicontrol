
pin-toggle-fast.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001878  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08001ab0  08001ab0  00002ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b80  08001b80  00002b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08001b84  08001b84  00002b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  20000000  08001b88  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08001b94  0000300c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000002c  08001b94  0000302c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
  9 .comment      00000026  00000000  00000000  00003042  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007d3c  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000199e  00000000  00000000  0000ada4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000718  00000000  00000000  0000c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000723  00000000  00000000  0000ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f26e  00000000  00000000  0000d583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00007d78  00000000  00000000  0003c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001276ca  00000000  00000000  00044569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000fc8  00000000  00000000  0016bc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00002c7a  00000000  00000000  0016cbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0016f876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <deregister_tm_clones>:
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <deregister_tm_clones+0x10>)
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <deregister_tm_clones+0x14>)
 800023c:	4283      	cmp	r3, r0
 800023e:	d002      	beq.n	8000246 <deregister_tm_clones+0xe>
 8000240:	4b03      	ldr	r3, [pc, #12]	@ (8000250 <deregister_tm_clones+0x18>)
 8000242:	b103      	cbz	r3, 8000246 <deregister_tm_clones+0xe>
 8000244:	4718      	bx	r3
 8000246:	4770      	bx	lr
 8000248:	2000000c 	.word	0x2000000c
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000

08000254 <register_tm_clones>:
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <register_tm_clones+0x1c>)
 8000256:	4907      	ldr	r1, [pc, #28]	@ (8000274 <register_tm_clones+0x20>)
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	1089      	asrs	r1, r1, #2
 800025c:	bf48      	it	mi
 800025e:	3101      	addmi	r1, #1
 8000260:	1049      	asrs	r1, r1, #1
 8000262:	d003      	beq.n	800026c <register_tm_clones+0x18>
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <register_tm_clones+0x24>)
 8000266:	b10b      	cbz	r3, 800026c <register_tm_clones+0x18>
 8000268:	4801      	ldr	r0, [pc, #4]	@ (8000270 <register_tm_clones+0x1c>)
 800026a:	4718      	bx	r3
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	2000000c 	.word	0x2000000c
 8000274:	2000000c 	.word	0x2000000c
 8000278:	00000000 	.word	0x00000000

0800027c <__do_global_dtors_aux>:
 800027c:	b510      	push	{r4, lr}
 800027e:	4c06      	ldr	r4, [pc, #24]	@ (8000298 <__do_global_dtors_aux+0x1c>)
 8000280:	7823      	ldrb	r3, [r4, #0]
 8000282:	b943      	cbnz	r3, 8000296 <__do_global_dtors_aux+0x1a>
 8000284:	f7ff ffd8 	bl	8000238 <deregister_tm_clones>
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <__do_global_dtors_aux+0x20>)
 800028a:	b113      	cbz	r3, 8000292 <__do_global_dtors_aux+0x16>
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x24>)
 800028e:	f3af 8000 	nop.w
 8000292:	2301      	movs	r3, #1
 8000294:	7023      	strb	r3, [r4, #0]
 8000296:	bd10      	pop	{r4, pc}
 8000298:	2000000c 	.word	0x2000000c
 800029c:	00000000 	.word	0x00000000
 80002a0:	08001a98 	.word	0x08001a98

080002a4 <frame_dummy>:
 80002a4:	b508      	push	{r3, lr}
 80002a6:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <frame_dummy+0x14>)
 80002a8:	b11b      	cbz	r3, 80002b2 <frame_dummy+0xe>
 80002aa:	4904      	ldr	r1, [pc, #16]	@ (80002bc <frame_dummy+0x18>)
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <frame_dummy+0x1c>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002b6:	e7cd      	b.n	8000254 <register_tm_clones>
 80002b8:	00000000 	.word	0x00000000
 80002bc:	20000010 	.word	0x20000010
 80002c0:	08001a98 	.word	0x08001a98

080002c4 <__libc_init_array>:
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <__libc_init_array+0x40>)
 80002c6:	b570      	push	{r4, r5, r6, lr}
 80002c8:	4d0f      	ldr	r5, [pc, #60]	@ (8000308 <__libc_init_array+0x44>)
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	eba3 0605 	sub.w	r6, r3, r5
 80002d0:	d007      	beq.n	80002e2 <__libc_init_array+0x1e>
 80002d2:	10b6      	asrs	r6, r6, #2
 80002d4:	2400      	movs	r4, #0
 80002d6:	3401      	adds	r4, #1
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d8f9      	bhi.n	80002d6 <__libc_init_array+0x12>
 80002e2:	4d0a      	ldr	r5, [pc, #40]	@ (800030c <__libc_init_array+0x48>)
 80002e4:	f001 fbd8 	bl	8001a98 <_init>
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <__libc_init_array+0x4c>)
 80002ea:	1b5e      	subs	r6, r3, r5
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80002f2:	d006      	beq.n	8000302 <__libc_init_array+0x3e>
 80002f4:	2400      	movs	r4, #0
 80002f6:	3401      	adds	r4, #1
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d8f9      	bhi.n	80002f6 <__libc_init_array+0x32>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	08001b80 	.word	0x08001b80
 8000308:	08001b80 	.word	0x08001b80
 800030c:	08001b80 	.word	0x08001b80
 8000310:	08001b84 	.word	0x08001b84

08000314 <memset>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	0786      	lsls	r6, r0, #30
 8000318:	d047      	beq.n	80003aa <memset+0x96>
 800031a:	1e54      	subs	r4, r2, #1
 800031c:	2a00      	cmp	r2, #0
 800031e:	d03e      	beq.n	800039e <memset+0x8a>
 8000320:	b2ca      	uxtb	r2, r1
 8000322:	4603      	mov	r3, r0
 8000324:	e001      	b.n	800032a <memset+0x16>
 8000326:	3c01      	subs	r4, #1
 8000328:	d339      	bcc.n	800039e <memset+0x8a>
 800032a:	f803 2b01 	strb.w	r2, [r3], #1
 800032e:	079d      	lsls	r5, r3, #30
 8000330:	d1f9      	bne.n	8000326 <memset+0x12>
 8000332:	2c03      	cmp	r4, #3
 8000334:	d92c      	bls.n	8000390 <memset+0x7c>
 8000336:	b2cd      	uxtb	r5, r1
 8000338:	2c0f      	cmp	r4, #15
 800033a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800033e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8000342:	d935      	bls.n	80003b0 <memset+0x9c>
 8000344:	f1a4 0c10 	sub.w	ip, r4, #16
 8000348:	f103 0e10 	add.w	lr, r3, #16
 800034c:	461a      	mov	r2, r3
 800034e:	f02c 060f 	bic.w	r6, ip, #15
 8000352:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8000356:	44b6      	add	lr, r6
 8000358:	e9c2 5500 	strd	r5, r5, [r2]
 800035c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000360:	3210      	adds	r2, #16
 8000362:	4572      	cmp	r2, lr
 8000364:	d1f8      	bne.n	8000358 <memset+0x44>
 8000366:	f10c 0201 	add.w	r2, ip, #1
 800036a:	f014 0f0c 	tst.w	r4, #12
 800036e:	f004 0c0f 	and.w	ip, r4, #15
 8000372:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000376:	d013      	beq.n	80003a0 <memset+0x8c>
 8000378:	f1ac 0304 	sub.w	r3, ip, #4
 800037c:	f023 0303 	bic.w	r3, r3, #3
 8000380:	3304      	adds	r3, #4
 8000382:	4413      	add	r3, r2
 8000384:	f842 5b04 	str.w	r5, [r2], #4
 8000388:	4293      	cmp	r3, r2
 800038a:	d1fb      	bne.n	8000384 <memset+0x70>
 800038c:	f00c 0403 	and.w	r4, ip, #3
 8000390:	b12c      	cbz	r4, 800039e <memset+0x8a>
 8000392:	b2c9      	uxtb	r1, r1
 8000394:	441c      	add	r4, r3
 8000396:	f803 1b01 	strb.w	r1, [r3], #1
 800039a:	42a3      	cmp	r3, r4
 800039c:	d1fb      	bne.n	8000396 <memset+0x82>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	4664      	mov	r4, ip
 80003a2:	4613      	mov	r3, r2
 80003a4:	2c00      	cmp	r4, #0
 80003a6:	d1f4      	bne.n	8000392 <memset+0x7e>
 80003a8:	e7f9      	b.n	800039e <memset+0x8a>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4614      	mov	r4, r2
 80003ae:	e7c0      	b.n	8000332 <memset+0x1e>
 80003b0:	461a      	mov	r2, r3
 80003b2:	46a4      	mov	ip, r4
 80003b4:	e7e0      	b.n	8000378 <memset+0x64>
 80003b6:	bf00      	nop

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b530      	push	{r4, r5, lr}
 80003ba:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003bc:	2260      	movs	r2, #96	@ 0x60
 80003be:	2100      	movs	r1, #0
 80003c0:	a806      	add	r0, sp, #24
 80003c2:	f7ff ffa7 	bl	8000314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c6:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003c8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	e9cd 3300 	strd	r3, r3, [sp]
 80003d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80003d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003d8:	f000 fbd0 	bl	8000b7c <HAL_PWREx_ControlVoltageScaling>
 80003dc:	b108      	cbz	r0, 80003e2 <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003de:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <SystemClock_Config+0x28>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e2:	4603      	mov	r3, r0
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80003e4:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003e6:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e8:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80003ee:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8000448 <SystemClock_Config+0x90>
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003f2:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 1;
 80003f4:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f6:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003f8:	230a      	movs	r3, #10
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003fc:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80003fe:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000402:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000406:	e9cd 2219 	strd	r2, r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040e:	9109      	str	r1, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000410:	f000 fe58 	bl	80010c4 <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	b108      	cbz	r0, 800041c <SystemClock_Config+0x64>
 8000418:	b672      	cpsid	i
  while (1)
 800041a:	e7fe      	b.n	800041a <SystemClock_Config+0x62>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041c:	251f      	movs	r5, #31
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041e:	2403      	movs	r4, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000420:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000422:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000426:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000428:	4668      	mov	r0, sp
 800042a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	e9cd 5400 	strd	r5, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000434:	f000 fce0 	bl	8000df8 <HAL_RCC_ClockConfig>
 8000438:	b108      	cbz	r0, 800043e <SystemClock_Config+0x86>
 800043a:	b672      	cpsid	i
  while (1)
 800043c:	e7fe      	b.n	800043c <SystemClock_Config+0x84>
}
 800043e:	b01f      	add	sp, #124	@ 0x7c
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	bf00      	nop
 8000444:	f3af 8000 	nop.w
 8000448:	0000000c 	.word	0x0000000c
 800044c:	00000000 	.word	0x00000000

08000450 <main>:
{
 8000450:	b500      	push	{lr}
 8000452:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 8000454:	f000 f904 	bl	8000660 <HAL_Init>
  SystemClock_Config();
 8000458:	f7ff ffae 	bl	80003b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	2200      	movs	r2, #0
 800045e:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8000462:	e9cd 2204 	strd	r2, r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000466:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <main+0x80>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	9206      	str	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046a:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800046e:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	f044 0404 	orr.w	r4, r4, #4
 8000474:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
 8000478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800047c:	4815      	ldr	r0, [pc, #84]	@ (80004d4 <main+0x84>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	f003 0304 	and.w	r3, r3, #4
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000486:	f000 fb69 	bl	8000b5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800048a:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 80004c8 <main+0x78>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000492:	4810      	ldr	r0, [pc, #64]	@ (80004d4 <main+0x84>)
 8000494:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000496:	ed8d 7b02 	vstr	d7, [sp, #8]
 800049a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800049e:	f000 f9d3 	bl	8000848 <HAL_GPIO_Init>
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004a2:	f000 fb61 	bl	8000b68 <HAL_ICACHE_Enable>
 80004a6:	b958      	cbnz	r0, 80004c0 <main+0x70>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,	 LED_GREEN_Pin, 1);
 80004a8:	4c0a      	ldr	r4, [pc, #40]	@ (80004d4 <main+0x84>)
 80004aa:	4620      	mov	r0, r4
 80004ac:	2201      	movs	r2, #1
 80004ae:	2180      	movs	r1, #128	@ 0x80
 80004b0:	f000 fb54 	bl	8000b5c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,	 LED_GREEN_Pin, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2180      	movs	r1, #128	@ 0x80
 80004b8:	4620      	mov	r0, r4
 80004ba:	f000 fb4f 	bl	8000b5c <HAL_GPIO_WritePin>
  while (1)
 80004be:	e7f4      	b.n	80004aa <main+0x5a>
 80004c0:	b672      	cpsid	i
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <main+0x72>
 80004c4:	f3af 8000 	nop.w
 80004c8:	00000080 	.word	0x00000080
 80004cc:	00000001 	.word	0x00000001
 80004d0:	46020c00 	.word	0x46020c00
 80004d4:	42020800 	.word	0x42020800

080004d8 <HAL_MspInit>:

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80004d8:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <HAL_MspInit+0x20>)
{
 80004dc:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80004e2:	4302      	orrs	r2, r0
 80004e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80004e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80004ec:	4003      	ands	r3, r0
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80004f4:	f000 b8f2 	b.w	80006dc <HAL_NVIC_SetPriorityGrouping>
 80004f8:	46020c00 	.word	0x46020c00

080004fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler>
 80004fe:	bf00      	nop

08000500 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <HardFault_Handler>
 8000502:	bf00      	nop

08000504 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <MemManage_Handler>
 8000506:	bf00      	nop

08000508 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <BusFault_Handler>
 800050a:	bf00      	nop

0800050c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler>
 800050e:	bf00      	nop

08000510 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051c:	f000 b8cc 	b.w	80006b8 <HAL_IncTick>

08000520 <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000520:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_MSISON;
 8000522:	2101      	movs	r1, #1
{
 8000524:	b410      	push	{r4}

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000526:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800052a:	480e      	ldr	r0, [pc, #56]	@ (8000564 <SystemInit+0x44>)
 800052c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8000530:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000534:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  RCC->CR = RCC_CR_MSISON;
 8000538:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <SystemInit+0x48>)
 800053a:	6019      	str	r1, [r3, #0]
  RCC->CFGR1 = 0U;
 800053c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800053e:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000540:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	f021 51a8 	bic.w	r1, r1, #352321536	@ 0x15000000
 8000548:	f421 2110 	bic.w	r1, r1, #589824	@ 0x90000
 800054c:	6019      	str	r1, [r3, #0]
  RCC->PLL1CFGR = 0U;
 800054e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000550:	6819      	ldr	r1, [r3, #0]
 8000552:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000556:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0U;
 8000558:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800055a:	6084      	str	r4, [r0, #8]
  #endif
}
 800055c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000ed00 	.word	0xe000ed00
 8000568:	46020c00 	.word	0x46020c00

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005a4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000570:	f7ff ffd6 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000574:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	@ (80005ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000586:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
	ldr	r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f7ff fe93 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f7ff ff57 	bl	8000450 <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80005a4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80005a8:	08001b88 	.word	0x08001b88
	ldr	r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80005b4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005b8:	2000002c 	.word	0x2000002c

080005bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_IRQHandler>
	...

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80005c2:	4e24      	ldr	r6, [pc, #144]	@ (8000654 <HAL_InitTick+0x94>)
 80005c4:	7832      	ldrb	r2, [r6, #0]
 80005c6:	b1ea      	cbz	r2, 8000604 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80005c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80005cc:	691c      	ldr	r4, [r3, #16]
 80005ce:	4605      	mov	r5, r0
 80005d0:	f014 0404 	ands.w	r4, r4, #4
 80005d4:	d018      	beq.n	8000608 <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80005d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005da:	fbb1 f2f2 	udiv	r2, r1, r2
 80005de:	4b1e      	ldr	r3, [pc, #120]	@ (8000658 <HAL_InitTick+0x98>)
 80005e0:	681c      	ldr	r4, [r3, #0]
 80005e2:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80005e6:	4620      	mov	r0, r4
 80005e8:	f000 f8c6 	bl	8000778 <HAL_SYSTICK_Config>
 80005ec:	4604      	mov	r4, r0
 80005ee:	b948      	cbnz	r0, 8000604 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f0:	4602      	mov	r2, r0
 80005f2:	4629      	mov	r1, r5
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005f8:	f000 f882 	bl	8000700 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <HAL_InitTick+0x9c>)
 80005fe:	4620      	mov	r0, r4
 8000600:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000602:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000604:	2001      	movs	r0, #1
}
 8000606:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000608:	f000 f904 	bl	8000814 <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 800060c:	2801      	cmp	r0, #1
 800060e:	d00d      	beq.n	800062c <HAL_InitTick+0x6c>
 8000610:	2802      	cmp	r0, #2
 8000612:	d015      	beq.n	8000640 <HAL_InitTick+0x80>
 8000614:	2800      	cmp	r0, #0
 8000616:	d1e6      	bne.n	80005e6 <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000618:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800061c:	7831      	ldrb	r1, [r6, #0]
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <HAL_InitTick+0x98>)
 8000620:	fbb2 f2f1 	udiv	r2, r2, r1
 8000624:	681c      	ldr	r4, [r3, #0]
 8000626:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 800062a:	e7dc      	b.n	80005e6 <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800062c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000630:	7831      	ldrb	r1, [r6, #0]
 8000632:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000636:	fbb2 f2f1 	udiv	r2, r2, r1
 800063a:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 800063e:	e7d2      	b.n	80005e6 <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000640:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000644:	7831      	ldrb	r1, [r6, #0]
 8000646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064a:	fbb2 f2f1 	udiv	r2, r2, r1
 800064e:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8000652:	e7c8      	b.n	80005e6 <HAL_InitTick+0x26>
 8000654:	20000004 	.word	0x20000004
 8000658:	20000000 	.word	0x20000000
 800065c:	20000008 	.word	0x20000008

08000660 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000660:	4a11      	ldr	r2, [pc, #68]	@ (80006a8 <HAL_Init+0x48>)
{
 8000662:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000666:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800066c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066e:	f000 f835 	bl	80006dc <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000672:	f000 fb33 	bl	8000cdc <HAL_RCC_GetSysClockFreq>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <HAL_Init+0x4c>)
 800067a:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <HAL_Init+0x50>)
 800067c:	6a12      	ldr	r2, [r2, #32]
 800067e:	490d      	ldr	r1, [pc, #52]	@ (80006b4 <HAL_Init+0x54>)
 8000680:	f002 020f 	and.w	r2, r2, #15
 8000684:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000686:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000688:	40d3      	lsrs	r3, r2
 800068a:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800068c:	f000 f884 	bl	8000798 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff95 	bl	80005c0 <HAL_InitTick>
 8000696:	b110      	cbz	r0, 800069e <HAL_Init+0x3e>
    return HAL_ERROR;
 8000698:	2401      	movs	r4, #1
}
 800069a:	4620      	mov	r0, r4
 800069c:	bd10      	pop	{r4, pc}
 800069e:	4604      	mov	r4, r0
  HAL_MspInit();
 80006a0:	f7ff ff1a 	bl	80004d8 <HAL_MspInit>
}
 80006a4:	4620      	mov	r0, r4
 80006a6:	bd10      	pop	{r4, pc}
 80006a8:	40022000 	.word	0x40022000
 80006ac:	46020c00 	.word	0x46020c00
 80006b0:	08001af0 	.word	0x08001af0
 80006b4:	20000000 	.word	0x20000000

080006b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4a03      	ldr	r2, [pc, #12]	@ (80006c8 <HAL_IncTick+0x10>)
 80006ba:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <HAL_IncTick+0x14>)
 80006bc:	6811      	ldr	r1, [r2, #0]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	440b      	add	r3, r1
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000028 	.word	0x20000028
 80006cc:	20000004 	.word	0x20000004

080006d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006d0:	4b01      	ldr	r3, [pc, #4]	@ (80006d8 <HAL_GetTick+0x8>)
 80006d2:	6818      	ldr	r0, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000028 	.word	0x20000028

080006dc <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006dc:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e0:	4906      	ldr	r1, [pc, #24]	@ (80006fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ea:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80006f8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000702:	b500      	push	{lr}
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070a:	f1c3 0e07 	rsb	lr, r3, #7
 800070e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000716:	bf28      	it	cs
 8000718:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071c:	f1bc 0f06 	cmp.w	ip, #6
 8000720:	d91c      	bls.n	800075c <HAL_NVIC_SetPriority+0x5c>
 8000722:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000726:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800072a:	fa03 f30c 	lsl.w	r3, r3, ip
 800072e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000736:	fa03 f30e 	lsl.w	r3, r3, lr
 800073a:	ea21 0303 	bic.w	r3, r1, r3
 800073e:	fa03 f30c 	lsl.w	r3, r3, ip
 8000742:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000746:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800074a:	db0a      	blt.n	8000762 <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000750:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000754:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000758:	f85d fb04 	ldr.w	pc, [sp], #4
 800075c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	4694      	mov	ip, r2
 8000760:	e7e7      	b.n	8000732 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <HAL_NVIC_SetPriority+0x74>)
 8000764:	f000 000f 	and.w	r0, r0, #15
 8000768:	4402      	add	r2, r0
 800076a:	7613      	strb	r3, [r2, #24]
 800076c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	e000ecfc 	.word	0xe000ecfc

08000778 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	1e43      	subs	r3, r0, #1
 800077a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800077e:	d209      	bcs.n	8000794 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000780:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000784:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000786:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 8000788:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800078a:	6913      	ldr	r3, [r2, #16]
 800078c:	f043 0303 	orr.w	r3, r3, #3
 8000790:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 8000792:	4770      	bx	lr
    return (1UL);
 8000794:	2001      	movs	r0, #1
}
 8000796:	4770      	bx	lr

08000798 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000798:	2804      	cmp	r0, #4
 800079a:	d813      	bhi.n	80007c4 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 800079c:	e8df f000 	tbb	[pc, r0]
 80007a0:	12031a2a 	.word	0x12031a2a
 80007a4:	13          	.byte	0x13
 80007a5:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80007a6:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80007aa:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80007ac:	4a18      	ldr	r2, [pc, #96]	@ (8000810 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80007ae:	f023 0304 	bic.w	r3, r3, #4
 80007b2:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80007b4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 80007b8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80007bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80007c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 80007c4:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80007c6:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80007ca:	6913      	ldr	r3, [r2, #16]
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6113      	str	r3, [r2, #16]
      break;
 80007d2:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80007d4:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80007d8:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80007da:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80007dc:	f023 0304 	bic.w	r3, r3, #4
 80007e0:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80007e2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 80007e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80007ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80007f2:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80007f4:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80007f8:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80007fa:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80007fc:	f023 0304 	bic.w	r3, r3, #4
 8000800:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000802:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8000806:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800080e:	4770      	bx	lr
 8000810:	46020c00 	.word	0x46020c00

08000814 <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000814:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	075b      	lsls	r3, r3, #29
 800081c:	d410      	bmi.n	8000840 <HAL_SYSTICK_GetCLKSourceConfig+0x2c>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 8000820:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000824:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000

    switch (systick_rcc_source)
 8000828:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 800082c:	d006      	beq.n	800083c <HAL_SYSTICK_GetCLKSourceConfig+0x28>
 800082e:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 8000832:	fab0 f080 	clz	r0, r0
 8000836:	0940      	lsrs	r0, r0, #5
 8000838:	0040      	lsls	r0, r0, #1
 800083a:	4770      	bx	lr
 800083c:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 800083e:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000840:	2004      	movs	r0, #4
 8000842:	4770      	bx	lr
 8000844:	46020c00 	.word	0x46020c00

08000848 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Save GPIO port address */
  p_gpio = GPIOx;

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800084c:	f8d1 b000 	ldr.w	fp, [r1]
{
 8000850:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000852:	f1bb 0f00 	cmp.w	fp, #0
 8000856:	f000 80b4 	beq.w	80009c2 <HAL_GPIO_Init+0x17a>
 800085a:	4bbb      	ldr	r3, [pc, #748]	@ (8000b48 <HAL_GPIO_Init+0x300>)
 800085c:	468a      	mov	sl, r1
 800085e:	4298      	cmp	r0, r3
 8000860:	f000 80be 	beq.w	80009e0 <HAL_GPIO_Init+0x198>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000864:	4bb9      	ldr	r3, [pc, #740]	@ (8000b4c <HAL_GPIO_Init+0x304>)
  uint32_t position = 0U;
 8000866:	2200      	movs	r2, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000868:	ea03 2390 	and.w	r3, r3, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800086c:	f04f 0801 	mov.w	r8, #1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000870:	9303      	str	r3, [sp, #12]
 8000872:	e029      	b.n	80008c8 <HAL_GPIO_Init+0x80>
        tmp = p_gpio->MODER;
 8000874:	6806      	ldr	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000876:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800087a:	ea05 0c06 	and.w	ip, r5, r6
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800087e:	f003 0603 	and.w	r6, r3, #3
 8000882:	fa06 f607 	lsl.w	r6, r6, r7
 8000886:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->MODER = tmp;
 800088a:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088c:	d901      	bls.n	8000892 <HAL_GPIO_Init+0x4a>
 800088e:	2b11      	cmp	r3, #17
 8000890:	d153      	bne.n	800093a <HAL_GPIO_Init+0xf2>
        tmp = p_gpio->OSPEEDR;
 8000892:	6886      	ldr	r6, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000894:	091b      	lsrs	r3, r3, #4
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000896:	ea06 0c05 	and.w	ip, r6, r5
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800089a:	f8da 600c 	ldr.w	r6, [sl, #12]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800089e:	4093      	lsls	r3, r2
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80008a0:	40be      	lsls	r6, r7
 80008a2:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->OSPEEDR = tmp;
 80008a6:	6086      	str	r6, [r0, #8]
        tmp = p_gpio->OTYPER;
 80008a8:	6846      	ldr	r6, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80008aa:	ea26 0101 	bic.w	r1, r6, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80008ae:	430b      	orrs	r3, r1
        p_gpio->OTYPER = tmp;
 80008b0:	6043      	str	r3, [r0, #4]
        tmp = p_gpio->PUPDR;
 80008b2:	68c1      	ldr	r1, [r0, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80008b4:	f8da 3008 	ldr.w	r3, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80008b8:	4029      	ands	r1, r5
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80008ba:	40bb      	lsls	r3, r7
 80008bc:	430b      	orrs	r3, r1
        p_gpio->PUPDR = tmp;
 80008be:	60c3      	str	r3, [r0, #12]
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
      }
    }
    position++;
 80008c0:	3201      	adds	r2, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80008c2:	fa3b f302 	lsrs.w	r3, fp, r2
 80008c6:	d07c      	beq.n	80009c2 <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80008c8:	fa08 f102 	lsl.w	r1, r8, r2
    if (iocurrent != 0U)
 80008cc:	ea1b 0e01 	ands.w	lr, fp, r1
 80008d0:	d0f6      	beq.n	80008c0 <HAL_GPIO_Init+0x78>
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80008d2:	2403      	movs	r4, #3
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80008d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80008d8:	0057      	lsls	r7, r2, #1
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008da:	f023 0610 	bic.w	r6, r3, #16
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80008de:	fa04 f507 	lsl.w	r5, r4, r7
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e2:	2e02      	cmp	r6, #2
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80008e4:	ea6f 0505 	mvn.w	r5, r5
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e8:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ec:	d1c2      	bne.n	8000874 <HAL_GPIO_Init+0x2c>
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80008ee:	fa06 f407 	lsl.w	r4, r6, r7
        tmp = GPIOx->AFR[position >> 3U];
 80008f2:	08d6      	lsrs	r6, r2, #3
 80008f4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80008f8:	9402      	str	r4, [sp, #8]
 80008fa:	4634      	mov	r4, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80008fc:	f8da 6010 	ldr.w	r6, [sl, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000900:	f002 0c07 	and.w	ip, r2, #7
 8000904:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000908:	f006 060f 	and.w	r6, r6, #15
 800090c:	fa06 f60c 	lsl.w	r6, r6, ip
 8000910:	9601      	str	r6, [sp, #4]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000912:	260f      	movs	r6, #15
 8000914:	fa06 fc0c 	lsl.w	ip, r6, ip
        tmp = GPIOx->AFR[position >> 3U];
 8000918:	6a26      	ldr	r6, [r4, #32]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800091a:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800091e:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000922:	9e01      	ldr	r6, [sp, #4]
 8000924:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8000928:	6226      	str	r6, [r4, #32]
        tmp = p_gpio->MODER;
 800092a:	6806      	ldr	r6, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800092c:	9c02      	ldr	r4, [sp, #8]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800092e:	ea06 0605 	and.w	r6, r6, r5
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000932:	ea46 0604 	orr.w	r6, r6, r4
        p_gpio->MODER = tmp;
 8000936:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000938:	d0ab      	beq.n	8000892 <HAL_GPIO_Init+0x4a>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093a:	2b12      	cmp	r3, #18
 800093c:	d0a9      	beq.n	8000892 <HAL_GPIO_Init+0x4a>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800093e:	2b03      	cmp	r3, #3
 8000940:	d0be      	beq.n	80008c0 <HAL_GPIO_Init+0x78>
        tmp = p_gpio->PUPDR;
 8000942:	68c1      	ldr	r1, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000944:	400d      	ands	r5, r1
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000946:	f8da 1008 	ldr.w	r1, [sl, #8]
 800094a:	40b9      	lsls	r1, r7
 800094c:	4329      	orrs	r1, r5
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800094e:	00dd      	lsls	r5, r3, #3
        p_gpio->PUPDR = tmp;
 8000950:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000952:	d5b5      	bpl.n	80008c0 <HAL_GPIO_Init+0x78>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000954:	240f      	movs	r4, #15
 8000956:	f022 0503 	bic.w	r5, r2, #3
 800095a:	f105 458c 	add.w	r5, r5, #1174405120	@ 0x46000000
 800095e:	f002 0103 	and.w	r1, r2, #3
 8000962:	f505 3508 	add.w	r5, r5, #139264	@ 0x22000
 8000966:	00c9      	lsls	r1, r1, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8000968:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800096a:	fa04 f701 	lsl.w	r7, r4, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800096e:	9c03      	ldr	r4, [sp, #12]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000970:	ea26 0607 	bic.w	r6, r6, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000974:	fa04 f101 	lsl.w	r1, r4, r1
 8000978:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2U] = tmp;
 800097a:	6629      	str	r1, [r5, #96]	@ 0x60
        tmp = EXTI->RTSR1;
 800097c:	4974      	ldr	r1, [pc, #464]	@ (8000b50 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800097e:	02dc      	lsls	r4, r3, #11
        tmp &= ~((uint32_t)iocurrent);
 8000980:	ea6f 050e 	mvn.w	r5, lr
        tmp = EXTI->RTSR1;
 8000984:	6809      	ldr	r1, [r1, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000986:	d428      	bmi.n	80009da <HAL_GPIO_Init+0x192>
        tmp &= ~((uint32_t)iocurrent);
 8000988:	4029      	ands	r1, r5
        EXTI->RTSR1 = tmp;
 800098a:	4c71      	ldr	r4, [pc, #452]	@ (8000b50 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800098c:	029f      	lsls	r7, r3, #10
        EXTI->RTSR1 = tmp;
 800098e:	6021      	str	r1, [r4, #0]
        tmp = EXTI->FTSR1;
 8000990:	6861      	ldr	r1, [r4, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000992:	d41f      	bmi.n	80009d4 <HAL_GPIO_Init+0x18c>
        tmp &= ~((uint32_t)iocurrent);
 8000994:	4029      	ands	r1, r5
        EXTI->FTSR1 = tmp;
 8000996:	4c6e      	ldr	r4, [pc, #440]	@ (8000b50 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000998:	039e      	lsls	r6, r3, #14
        EXTI->FTSR1 = tmp;
 800099a:	6061      	str	r1, [r4, #4]
        tmp = EXTI->EMR1;
 800099c:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009a0:	d415      	bmi.n	80009ce <HAL_GPIO_Init+0x186>
        tmp &= ~((uint32_t)iocurrent);
 80009a2:	4029      	ands	r1, r5
        EXTI->EMR1 = tmp;
 80009a4:	4c6a      	ldr	r4, [pc, #424]	@ (8000b50 <HAL_GPIO_Init+0x308>)
 80009a6:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        tmp = EXTI->IMR1;
 80009aa:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ae:	03dc      	lsls	r4, r3, #15
 80009b0:	d40a      	bmi.n	80009c8 <HAL_GPIO_Init+0x180>
        tmp &= ~((uint32_t)iocurrent);
 80009b2:	4029      	ands	r1, r5
        EXTI->IMR1 = tmp;
 80009b4:	4b66      	ldr	r3, [pc, #408]	@ (8000b50 <HAL_GPIO_Init+0x308>)
    position++;
 80009b6:	3201      	adds	r2, #1
        EXTI->IMR1 = tmp;
 80009b8:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80009bc:	fa3b f302 	lsrs.w	r3, fp, r2
 80009c0:	d182      	bne.n	80008c8 <HAL_GPIO_Init+0x80>
  }
}
 80009c2:	b005      	add	sp, #20
 80009c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          tmp |= iocurrent;
 80009c8:	ea41 010e 	orr.w	r1, r1, lr
 80009cc:	e7f2      	b.n	80009b4 <HAL_GPIO_Init+0x16c>
          tmp |= iocurrent;
 80009ce:	ea41 010e 	orr.w	r1, r1, lr
 80009d2:	e7e7      	b.n	80009a4 <HAL_GPIO_Init+0x15c>
          tmp |= iocurrent;
 80009d4:	ea41 010e 	orr.w	r1, r1, lr
 80009d8:	e7dd      	b.n	8000996 <HAL_GPIO_Init+0x14e>
          tmp |= iocurrent;
 80009da:	ea4e 0101 	orr.w	r1, lr, r1
 80009de:	e7d4      	b.n	800098a <HAL_GPIO_Init+0x142>
  uint32_t position = 0U;
 80009e0:	2300      	movs	r3, #0
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80009e2:	2701      	movs	r7, #1
        tmp = EXTI->RTSR1;
 80009e4:	4e5a      	ldr	r6, [pc, #360]	@ (8000b50 <HAL_GPIO_Init+0x308>)
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80009e6:	fa07 f103 	lsl.w	r1, r7, r3
    if (iocurrent != 0U)
 80009ea:	ea11 050b 	ands.w	r5, r1, fp
 80009ee:	d059      	beq.n	8000aa4 <HAL_GPIO_Init+0x25c>
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80009f0:	f04f 090f 	mov.w	r9, #15
        tmp = GPIOx->MODER;
 80009f4:	6804      	ldr	r4, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80009f6:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80009fa:	ea24 0401 	bic.w	r4, r4, r1
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80009fe:	4955      	ldr	r1, [pc, #340]	@ (8000b54 <HAL_GPIO_Init+0x30c>)
 8000a00:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000a04:	f002 0101 	and.w	r1, r2, #1
 8000a08:	4099      	lsls	r1, r3
 8000a0a:	4321      	orrs	r1, r4
        GPIOx->MODER = tmp;
 8000a0c:	6001      	str	r1, [r0, #0]
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000a0e:	4952      	ldr	r1, [pc, #328]	@ (8000b58 <HAL_GPIO_Init+0x310>)
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000a10:	ea4f 0edc 	mov.w	lr, ip, lsr #3
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000a14:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000a18:	f00c 0407 	and.w	r4, ip, #7
 8000a1c:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000a20:	f8de 8020 	ldr.w	r8, [lr, #32]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000a24:	00a4      	lsls	r4, r4, #2
 8000a26:	fa09 f904 	lsl.w	r9, r9, r4
 8000a2a:	ea28 0809 	bic.w	r8, r8, r9
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000a2e:	f04f 090b 	mov.w	r9, #11
 8000a32:	fa09 f404 	lsl.w	r4, r9, r4
 8000a36:	ea44 0408 	orr.w	r4, r4, r8
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a3a:	f04f 0803 	mov.w	r8, #3
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000a3e:	f8ce 4020 	str.w	r4, [lr, #32]
        tmp = p_gpio->MODER;
 8000a42:	680c      	ldr	r4, [r1, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a44:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8000a48:	fa08 f80e 	lsl.w	r8, r8, lr
 8000a4c:	ea24 0908 	bic.w	r9, r4, r8
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a50:	2402      	movs	r4, #2
 8000a52:	fa04 f40e 	lsl.w	r4, r4, lr
 8000a56:	ea44 0409 	orr.w	r4, r4, r9
        p_gpio->MODER = tmp;
 8000a5a:	600c      	str	r4, [r1, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5c:	1e54      	subs	r4, r2, #1
 8000a5e:	2c01      	cmp	r4, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a60:	ea6f 0808 	mvn.w	r8, r8
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a64:	d901      	bls.n	8000a6a <HAL_GPIO_Init+0x222>
 8000a66:	2a11      	cmp	r2, #17
 8000a68:	d123      	bne.n	8000ab2 <HAL_GPIO_Init+0x26a>
        tmp = p_gpio->OSPEEDR;
 8000a6a:	688c      	ldr	r4, [r1, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000a6c:	0912      	lsrs	r2, r2, #4
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000a6e:	fa07 f50c 	lsl.w	r5, r7, ip
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000a72:	fa02 f20c 	lsl.w	r2, r2, ip
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000a76:	ea08 0c04 	and.w	ip, r8, r4
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000a7a:	f8da 400c 	ldr.w	r4, [sl, #12]
 8000a7e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000a82:	ea44 040c 	orr.w	r4, r4, ip
        p_gpio->OSPEEDR = tmp;
 8000a86:	608c      	str	r4, [r1, #8]
        tmp = p_gpio->OTYPER;
 8000a88:	684c      	ldr	r4, [r1, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000a8a:	ea24 0405 	bic.w	r4, r4, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000a8e:	4322      	orrs	r2, r4
        p_gpio->OTYPER = tmp;
 8000a90:	604a      	str	r2, [r1, #4]
        tmp = p_gpio->PUPDR;
 8000a92:	68cc      	ldr	r4, [r1, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000a94:	f8da 2008 	ldr.w	r2, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000a98:	ea08 0404 	and.w	r4, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000a9c:	fa02 f20e 	lsl.w	r2, r2, lr
 8000aa0:	4322      	orrs	r2, r4
        p_gpio->PUPDR = tmp;
 8000aa2:	60ca      	str	r2, [r1, #12]
    position++;
 8000aa4:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000aa6:	fa3b f203 	lsrs.w	r2, fp, r3
 8000aaa:	d19c      	bne.n	80009e6 <HAL_GPIO_Init+0x19e>
}
 8000aac:	b005      	add	sp, #20
 8000aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ab2:	2a12      	cmp	r2, #18
 8000ab4:	d0d9      	beq.n	8000a6a <HAL_GPIO_Init+0x222>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ab6:	2a03      	cmp	r2, #3
 8000ab8:	d0f4      	beq.n	8000aa4 <HAL_GPIO_Init+0x25c>
        tmp = p_gpio->PUPDR;
 8000aba:	68cc      	ldr	r4, [r1, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000abc:	ea08 0804 	and.w	r8, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000ac0:	f8da 4008 	ldr.w	r4, [sl, #8]
 8000ac4:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ac8:	ea44 0408 	orr.w	r4, r4, r8
        p_gpio->PUPDR = tmp;
 8000acc:	60cc      	str	r4, [r1, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	00d1      	lsls	r1, r2, #3
 8000ad0:	d5e8      	bpl.n	8000aa4 <HAL_GPIO_Init+0x25c>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000ad2:	f04f 080f 	mov.w	r8, #15
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000ad6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8000ada:	f023 0103 	bic.w	r1, r3, #3
 8000ade:	f101 418c 	add.w	r1, r1, #1174405120	@ 0x46000000
 8000ae2:	f501 3108 	add.w	r1, r1, #139264	@ 0x22000
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000ae6:	f003 0c03 	and.w	ip, r3, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8000aea:	f8d1 e060 	ldr.w	lr, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000aee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000af2:	fa08 f80c 	lsl.w	r8, r8, ip
 8000af6:	ea2e 0e08 	bic.w	lr, lr, r8
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000afa:	fa04 f40c 	lsl.w	r4, r4, ip
 8000afe:	ea44 040e 	orr.w	r4, r4, lr
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b02:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 8000b04:	43ec      	mvns	r4, r5
        tmp = EXTI->RTSR1;
 8000b06:	6831      	ldr	r1, [r6, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b08:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
        tmp &= ~((uint32_t)iocurrent);
 8000b0c:	bf0c      	ite	eq
 8000b0e:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8000b10:	4329      	orrne	r1, r5
        EXTI->RTSR1 = tmp;
 8000b12:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 8000b14:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b16:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8000b1a:	bf0c      	ite	eq
 8000b1c:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8000b1e:	4329      	orrne	r1, r5
        EXTI->FTSR1 = tmp;
 8000b20:	6071      	str	r1, [r6, #4]
        tmp = EXTI->EMR1;
 8000b22:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b26:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8000b2a:	bf0c      	ite	eq
 8000b2c:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8000b2e:	4329      	orrne	r1, r5
        EXTI->EMR1 = tmp;
 8000b30:	f8c6 1084 	str.w	r1, [r6, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8000b34:	f8d6 1080 	ldr.w	r1, [r6, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b38:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 8000b3a:	bf54      	ite	pl
 8000b3c:	4021      	andpl	r1, r4
          tmp |= iocurrent;
 8000b3e:	4329      	orrmi	r1, r5
        EXTI->IMR1 = tmp;
 8000b40:	f8c6 1080 	str.w	r1, [r6, #128]	@ 0x80
 8000b44:	e7ae      	b.n	8000aa4 <HAL_GPIO_Init+0x25c>
 8000b46:	bf00      	nop
 8000b48:	46020000 	.word	0x46020000
 8000b4c:	002f7f7f 	.word	0x002f7f7f
 8000b50:	46022000 	.word	0x46022000
 8000b54:	08001b04 	.word	0x08001b04
 8000b58:	08001b00 	.word	0x08001b00

08000b5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b5c:	b10a      	cbz	r2, 8000b62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b5e:	6181      	str	r1, [r0, #24]
 8000b60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8000b62:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000b68:	4a03      	ldr	r2, [pc, #12]	@ (8000b78 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8000b6a:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000b6c:	6813      	ldr	r3, [r2, #0]
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40030400 	.word	0x40030400

08000b7c <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000b7c:	4a21      	ldr	r2, [pc, #132]	@ (8000c04 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000b7e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000b80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000b84:	4283      	cmp	r3, r0
 8000b86:	d034      	beq.n	8000bf2 <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000b88:	f04f 0c32 	mov.w	ip, #50	@ 0x32
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000b8c:	68d3      	ldr	r3, [r2, #12]
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000b8e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000b92:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8000b96:	ea43 0300 	orr.w	r3, r3, r0
 8000b9a:	bf88      	it	hi
 8000b9c:	f443 2380 	orrhi.w	r3, r3, #262144	@ 0x40000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000ba0:	60d3      	str	r3, [r2, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8000ba4:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <HAL_PWREx_ControlVoltageScaling+0x90>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000ba8:	4816      	ldr	r0, [pc, #88]	@ (8000c04 <HAL_PWREx_ControlVoltageScaling+0x88>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000baa:	fba2 1303 	umull	r1, r3, r2, r3
 8000bae:	099b      	lsrs	r3, r3, #6
 8000bb0:	fb0c f303 	mul.w	r3, ip, r3
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000bb8:	68c1      	ldr	r1, [r0, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000bba:	099b      	lsrs	r3, r3, #6
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000bbc:	040a      	lsls	r2, r1, #16
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000bbe:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000bc2:	d407      	bmi.n	8000bd4 <HAL_PWREx_ControlVoltageScaling+0x58>
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	e000      	b.n	8000bca <HAL_PWREx_ControlVoltageScaling+0x4e>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000bc8:	b18a      	cbz	r2, 8000bee <HAL_PWREx_ControlVoltageScaling+0x72>
 8000bca:	68c1      	ldr	r1, [r0, #12]
  {
    timeout--;
 8000bcc:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000bce:	0409      	lsls	r1, r1, #16
 8000bd0:	d5fa      	bpl.n	8000bc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }

  /* Check time out */
  if (timeout != 0U)
 8000bd2:	b162      	cbz	r2, 8000bee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000bd4:	490b      	ldr	r1, [pc, #44]	@ (8000c04 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000bd6:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000bd8:	0410      	lsls	r0, r2, #16
 8000bda:	d406      	bmi.n	8000bea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000bdc:	e000      	b.n	8000be0 <HAL_PWREx_ControlVoltageScaling+0x64>
 8000bde:	b133      	cbz	r3, 8000bee <HAL_PWREx_ControlVoltageScaling+0x72>
 8000be0:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
    {
      timeout--;
 8000be2:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000be4:	0412      	lsls	r2, r2, #16
 8000be6:	d5fa      	bpl.n	8000bde <HAL_PWREx_ControlVoltageScaling+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000be8:	b10b      	cbz	r3, 8000bee <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 8000bea:	2000      	movs	r0, #0
 8000bec:	4770      	bx	lr
  {
    return HAL_TIMEOUT;
 8000bee:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8000bf0:	4770      	bx	lr
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bf6:	d9f8      	bls.n	8000bea <HAL_PWREx_ControlVoltageScaling+0x6e>
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000bf8:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 8000bfa:	2000      	movs	r0, #0
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c00:	60d3      	str	r3, [r2, #12]
 8000c02:	4770      	bx	lr
 8000c04:	46020800 	.word	0x46020800
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	10624dd3 	.word	0x10624dd3

08000c10 <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000c10:	4b02      	ldr	r3, [pc, #8]	@ (8000c1c <HAL_PWREx_GetVoltageRange+0xc>)
 8000c12:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
}
 8000c14:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	46020800 	.word	0x46020800

08000c20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000c20:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000c22:	4d2c      	ldr	r5, [pc, #176]	@ (8000cd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
{
 8000c24:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000c26:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
{
 8000c2a:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000c2c:	075b      	lsls	r3, r3, #29
 8000c2e:	d52b      	bpl.n	8000c88 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8000c34:	f420 3380 	bic.w	r3, r0, #65536	@ 0x10000
 8000c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000c3c:	d007      	beq.n	8000c4e <RCC_SetFlashLatencyFromMSIRange+0x2e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8000c3e:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8000c42:	d217      	bcs.n	8000c74 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8000c44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8000c48:	d133      	bne.n	8000cb2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	e004      	b.n	8000c58 <RCC_SetFlashLatencyFromMSIRange+0x38>
    if (msirange < RCC_MSIRANGE_1)
 8000c4e:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8000c52:	bf2c      	ite	cs
 8000c54:	2200      	movcs	r2, #0
 8000c56:	2201      	movcc	r2, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000c58:	491f      	ldr	r1, [pc, #124]	@ (8000cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000c5a:	680b      	ldr	r3, [r1, #0]
 8000c5c:	f023 030f 	bic.w	r3, r3, #15
 8000c60:	4313      	orrs	r3, r2
 8000c62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000c64:	6808      	ldr	r0, [r1, #0]
 8000c66:	f000 000f 	and.w	r0, r0, #15
 8000c6a:	1a80      	subs	r0, r0, r2
 8000c6c:	bf18      	it	ne
 8000c6e:	2001      	movne	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000c70:	b003      	add	sp, #12
 8000c72:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 8000c74:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8000c78:	d91e      	bls.n	8000cb8 <RCC_SetFlashLatencyFromMSIRange+0x98>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8000c7a:	bb10      	cbnz	r0, 8000cc2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
          if (msirange > RCC_MSIRANGE_3)
 8000c7c:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
 8000c80:	bf8c      	ite	hi
 8000c82:	2200      	movhi	r2, #0
 8000c84:	2201      	movls	r2, #1
 8000c86:	e7e7      	b.n	8000c58 <RCC_SetFlashLatencyFromMSIRange+0x38>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8000c94:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000ca0:	f7ff ffb6 	bl	8000c10 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000ca4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8000ca8:	f023 0304 	bic.w	r3, r3, #4
 8000cac:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8000cb0:	e7c0      	b.n	8000c34 <RCC_SetFlashLatencyFromMSIRange+0x14>
        return HAL_ERROR;
 8000cb2:	2001      	movs	r0, #1
}
 8000cb4:	b003      	add	sp, #12
 8000cb6:	bd30      	pop	{r4, r5, pc}
        if (msirange == RCC_MSIRANGE_1)
 8000cb8:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8000cbc:	d003      	beq.n	8000cc6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
          latency = FLASH_LATENCY_1; /* 1WS */
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	e7ca      	b.n	8000c58 <RCC_SetFlashLatencyFromMSIRange+0x38>
      latency = FLASH_LATENCY_0; /* 0WS */
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	e7c8      	b.n	8000c58 <RCC_SetFlashLatencyFromMSIRange+0x38>
            latency = FLASH_LATENCY_2; /* 2WS */
 8000cc6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8000cca:	bf0c      	ite	eq
 8000ccc:	2201      	moveq	r2, #1
 8000cce:	2202      	movne	r2, #2
 8000cd0:	e7c2      	b.n	8000c58 <RCC_SetFlashLatencyFromMSIRange+0x38>
 8000cd2:	bf00      	nop
 8000cd4:	46020c00 	.word	0x46020c00
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cdc:	4a41      	ldr	r2, [pc, #260]	@ (8000de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cde:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ce0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000ce2:	f013 030c 	ands.w	r3, r3, #12
 8000ce6:	d00b      	beq.n	8000d00 <HAL_RCC_GetSysClockFreq+0x24>
 8000ce8:	2b0c      	cmp	r3, #12
 8000cea:	d05f      	beq.n	8000dac <HAL_RCC_GetSysClockFreq+0xd0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cec:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 8000cee:	483e      	ldr	r0, [pc, #248]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x10c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf0:	f002 020c 	and.w	r2, r2, #12
 8000cf4:	2a04      	cmp	r2, #4
 8000cf6:	d072      	beq.n	8000dde <HAL_RCC_GetSysClockFreq+0x102>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	bf18      	it	ne
 8000cfc:	2000      	movne	r0, #0
 8000cfe:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8000d00:	4a38      	ldr	r2, [pc, #224]	@ (8000de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d02:	6891      	ldr	r1, [r2, #8]
 8000d04:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8000d06:	bf54      	ite	pl
 8000d08:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8000d0c:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8000d0e:	4937      	ldr	r1, [pc, #220]	@ (8000dec <HAL_RCC_GetSysClockFreq+0x110>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8000d10:	bf54      	ite	pl
 8000d12:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8000d16:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8000d18:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d05f      	beq.n	8000de0 <HAL_RCC_GetSysClockFreq+0x104>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8000d20:	4930      	ldr	r1, [pc, #192]	@ (8000de4 <HAL_RCC_GetSysClockFreq+0x108>)
{
 8000d22:	b510      	push	{r4, lr}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8000d24:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8000d26:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8000d28:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8000d2a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000d2e:	3301      	adds	r3, #1
 8000d30:	ee07 3a10 	vmov	s14, r3
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8000d34:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8000d36:	f3c4 1e00 	ubfx	lr, r4, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8000d3a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8000d3e:	fb0e f303 	mul.w	r3, lr, r3
 8000d42:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8000d46:	f002 0c03 	and.w	ip, r2, #3
    switch (pllsource)
 8000d4a:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8000d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 8000d52:	d002      	beq.n	8000d5a <HAL_RCC_GetSysClockFreq+0x7e>
 8000d54:	f1bc 0f03 	cmp.w	ip, #3
 8000d58:	d12f      	bne.n	8000dba <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000d5a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000d5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d64:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000d68:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8000df0 <HAL_RCC_GetSysClockFreq+0x114>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000d6c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000d70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000d74:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 8000df4 <HAL_RCC_GetSysClockFreq+0x118>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000d78:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000d7c:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000d80:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8000d84:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <HAL_RCC_GetSysClockFreq+0x108>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000d86:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000d8c:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8000d90:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8000d94:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000da2:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8000da6:	ee17 0a90 	vmov	r0, s15
}
 8000daa:	bd10      	pop	{r4, pc}
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dac:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000db0:	2901      	cmp	r1, #1
 8000db2:	d0a5      	beq.n	8000d00 <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U;
 8000db4:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000db6:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000db8:	e7b2      	b.n	8000d20 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000dba:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8000dbc:	ee05 0a90 	vmov	s11, r0
 8000dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dc4:	ee06 3a10 	vmov	s12, r3
 8000dc8:	eeb8 5a65 	vcvt.f32.u32	s10, s11
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000dcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000dd0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000dd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000dd8:	eddf 5a05 	vldr	s11, [pc, #20]	@ 8000df0 <HAL_RCC_GetSysClockFreq+0x114>
 8000ddc:	e7cc      	b.n	8000d78 <HAL_RCC_GetSysClockFreq+0x9c>
 8000dde:	4770      	bx	lr
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	46020c00 	.word	0x46020c00
 8000de8:	00f42400 	.word	0x00f42400
 8000dec:	08001ab0 	.word	0x08001ab0
 8000df0:	39000000 	.word	0x39000000
 8000df4:	4b742400 	.word	0x4b742400

08000df8 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	f000 810e 	beq.w	800101a <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000dfe:	4a9f      	ldr	r2, [pc, #636]	@ (800107c <HAL_RCC_ClockConfig+0x284>)
{
 8000e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e04:	6813      	ldr	r3, [r2, #0]
 8000e06:	4604      	mov	r4, r0
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	460d      	mov	r5, r1
{
 8000e10:	b082      	sub	sp, #8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e12:	d20d      	bcs.n	8000e30 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e14:	6813      	ldr	r3, [r2, #0]
 8000e16:	f023 030f 	bic.w	r3, r3, #15
 8000e1a:	430b      	orrs	r3, r1
 8000e1c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e1e:	6813      	ldr	r3, [r2, #0]
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d003      	beq.n	8000e30 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8000e28:	2001      	movs	r0, #1
}
 8000e2a:	b002      	add	sp, #8
 8000e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	06df      	lsls	r7, r3, #27
 8000e34:	d50b      	bpl.n	8000e4e <HAL_RCC_ClockConfig+0x56>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8000e36:	4992      	ldr	r1, [pc, #584]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8000e38:	6960      	ldr	r0, [r4, #20]
 8000e3a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8000e3c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8000e40:	4290      	cmp	r0, r2
 8000e42:	d904      	bls.n	8000e4e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8000e44:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8000e46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000e4a:	4302      	orrs	r2, r0
 8000e4c:	624a      	str	r2, [r1, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e4e:	071e      	lsls	r6, r3, #28
 8000e50:	d50d      	bpl.n	8000e6e <HAL_RCC_ClockConfig+0x76>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8000e52:	498b      	ldr	r1, [pc, #556]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8000e54:	6920      	ldr	r0, [r4, #16]
 8000e56:	6a0a      	ldr	r2, [r1, #32]
 8000e58:	0912      	lsrs	r2, r2, #4
 8000e5a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8000e5e:	4290      	cmp	r0, r2
 8000e60:	d905      	bls.n	8000e6e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8000e62:	6a0a      	ldr	r2, [r1, #32]
 8000e64:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000e68:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8000e6c:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e6e:	0758      	lsls	r0, r3, #29
 8000e70:	d50b      	bpl.n	8000e8a <HAL_RCC_ClockConfig+0x92>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8000e72:	4983      	ldr	r1, [pc, #524]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8000e74:	68e0      	ldr	r0, [r4, #12]
 8000e76:	6a0a      	ldr	r2, [r1, #32]
 8000e78:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	d904      	bls.n	8000e8a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8000e80:	6a0a      	ldr	r2, [r1, #32]
 8000e82:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000e86:	4302      	orrs	r2, r0
 8000e88:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e8a:	0799      	lsls	r1, r3, #30
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e8c:	f003 0201 	and.w	r2, r3, #1
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e90:	d530      	bpl.n	8000ef4 <HAL_RCC_ClockConfig+0xfc>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8000e92:	4e7b      	ldr	r6, [pc, #492]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8000e94:	68a0      	ldr	r0, [r4, #8]
 8000e96:	6a31      	ldr	r1, [r6, #32]
 8000e98:	f001 010f 	and.w	r1, r1, #15
 8000e9c:	4288      	cmp	r0, r1
 8000e9e:	d904      	bls.n	8000eaa <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8000ea0:	6a31      	ldr	r1, [r6, #32]
 8000ea2:	f021 010f 	bic.w	r1, r1, #15
 8000ea6:	4301      	orrs	r1, r0
 8000ea8:	6231      	str	r1, [r6, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eaa:	2a00      	cmp	r2, #0
 8000eac:	f000 8081 	beq.w	8000fb2 <HAL_RCC_ClockConfig+0x1ba>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eb0:	6863      	ldr	r3, [r4, #4]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	f000 80b3 	beq.w	800101e <HAL_RCC_ClockConfig+0x226>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eb8:	4a71      	ldr	r2, [pc, #452]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eba:	2b02      	cmp	r3, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ebc:	6812      	ldr	r2, [r2, #0]
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ebe:	f000 8084 	beq.w	8000fca <HAL_RCC_ClockConfig+0x1d2>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 80be 	bne.w	8001044 <HAL_RCC_ClockConfig+0x24c>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000ec8:	0757      	lsls	r7, r2, #29
 8000eca:	d5ad      	bpl.n	8000e28 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8000ecc:	4e6c      	ldr	r6, [pc, #432]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ece:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8000ed2:	69f2      	ldr	r2, [r6, #28]
 8000ed4:	f022 0203 	bic.w	r2, r2, #3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8000edc:	f7ff fbf8 	bl	80006d0 <HAL_GetTick>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ee0:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ee2:	4607      	mov	r7, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d05b      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x1a8>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d077      	beq.n	8000fdc <HAL_RCC_ClockConfig+0x1e4>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f040 808a 	bne.w	8001006 <HAL_RCC_ClockConfig+0x20e>
 8000ef2:	e07e      	b.n	8000ff2 <HAL_RCC_ClockConfig+0x1fa>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	d1db      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0xb8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ef8:	4960      	ldr	r1, [pc, #384]	@ (800107c <HAL_RCC_ClockConfig+0x284>)
 8000efa:	680a      	ldr	r2, [r1, #0]
 8000efc:	f002 020f 	and.w	r2, r2, #15
 8000f00:	42aa      	cmp	r2, r5
 8000f02:	d909      	bls.n	8000f18 <HAL_RCC_ClockConfig+0x120>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f04:	680a      	ldr	r2, [r1, #0]
 8000f06:	f022 020f 	bic.w	r2, r2, #15
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f0e:	680a      	ldr	r2, [r1, #0]
 8000f10:	f002 020f 	and.w	r2, r2, #15
 8000f14:	42aa      	cmp	r2, r5
 8000f16:	d187      	bne.n	8000e28 <HAL_RCC_ClockConfig+0x30>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f18:	0759      	lsls	r1, r3, #29
 8000f1a:	d50b      	bpl.n	8000f34 <HAL_RCC_ClockConfig+0x13c>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8000f1c:	4958      	ldr	r1, [pc, #352]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8000f1e:	68e0      	ldr	r0, [r4, #12]
 8000f20:	6a0a      	ldr	r2, [r1, #32]
 8000f22:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8000f26:	4290      	cmp	r0, r2
 8000f28:	d204      	bcs.n	8000f34 <HAL_RCC_ClockConfig+0x13c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8000f2a:	6a0a      	ldr	r2, [r1, #32]
 8000f2c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000f30:	4302      	orrs	r2, r0
 8000f32:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f34:	071a      	lsls	r2, r3, #28
 8000f36:	d50d      	bpl.n	8000f54 <HAL_RCC_ClockConfig+0x15c>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8000f38:	4951      	ldr	r1, [pc, #324]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8000f3a:	6920      	ldr	r0, [r4, #16]
 8000f3c:	6a0a      	ldr	r2, [r1, #32]
 8000f3e:	0912      	lsrs	r2, r2, #4
 8000f40:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8000f44:	4290      	cmp	r0, r2
 8000f46:	d205      	bcs.n	8000f54 <HAL_RCC_ClockConfig+0x15c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8000f48:	6a0a      	ldr	r2, [r1, #32]
 8000f4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000f4e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8000f52:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8000f54:	06db      	lsls	r3, r3, #27
 8000f56:	d50b      	bpl.n	8000f70 <HAL_RCC_ClockConfig+0x178>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8000f58:	4a49      	ldr	r2, [pc, #292]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8000f5a:	6961      	ldr	r1, [r4, #20]
 8000f5c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000f5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000f62:	4299      	cmp	r1, r3
 8000f64:	d204      	bcs.n	8000f70 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8000f66:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	6253      	str	r3, [r2, #36]	@ 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f70:	f7ff feb4 	bl	8000cdc <HAL_RCC_GetSysClockFreq>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a42      	ldr	r2, [pc, #264]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8000f78:	4942      	ldr	r1, [pc, #264]	@ (8001084 <HAL_RCC_ClockConfig+0x28c>)
 8000f7a:	6a12      	ldr	r2, [r2, #32]
  status = HAL_InitTick(uwTickPrio);
 8000f7c:	4842      	ldr	r0, [pc, #264]	@ (8001088 <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f7e:	f002 020f 	and.w	r2, r2, #15
 8000f82:	5c89      	ldrb	r1, [r1, r2]
  status = HAL_InitTick(uwTickPrio);
 8000f84:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f86:	4a41      	ldr	r2, [pc, #260]	@ (800108c <HAL_RCC_ClockConfig+0x294>)
 8000f88:	40cb      	lsrs	r3, r1
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	b002      	add	sp, #8
 8000f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8000f92:	f7ff bb15 	b.w	80005c0 <HAL_InitTick>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f96:	f7ff fb9b 	bl	80006d0 <HAL_GetTick>
 8000f9a:	1bc3      	subs	r3, r0, r7
 8000f9c:	4543      	cmp	r3, r8
 8000f9e:	d838      	bhi.n	8001012 <HAL_RCC_ClockConfig+0x21a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa0:	69f3      	ldr	r3, [r6, #28]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b0c      	cmp	r3, #12
 8000fa8:	d1f5      	bne.n	8000f96 <HAL_RCC_ClockConfig+0x19e>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	0798      	lsls	r0, r3, #30
 8000fae:	d5a3      	bpl.n	8000ef8 <HAL_RCC_ClockConfig+0x100>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8000fb0:	68a0      	ldr	r0, [r4, #8]
 8000fb2:	4933      	ldr	r1, [pc, #204]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8000fb4:	6a0a      	ldr	r2, [r1, #32]
 8000fb6:	f002 020f 	and.w	r2, r2, #15
 8000fba:	4282      	cmp	r2, r0
 8000fbc:	d99c      	bls.n	8000ef8 <HAL_RCC_ClockConfig+0x100>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8000fbe:	6a0a      	ldr	r2, [r1, #32]
 8000fc0:	f022 020f 	bic.w	r2, r2, #15
 8000fc4:	4302      	orrs	r2, r0
 8000fc6:	620a      	str	r2, [r1, #32]
 8000fc8:	e796      	b.n	8000ef8 <HAL_RCC_ClockConfig+0x100>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fca:	0392      	lsls	r2, r2, #14
 8000fcc:	f53f af7e 	bmi.w	8000ecc <HAL_RCC_ClockConfig+0xd4>
 8000fd0:	e72a      	b.n	8000e28 <HAL_RCC_ClockConfig+0x30>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd2:	f7ff fb7d 	bl	80006d0 <HAL_GetTick>
 8000fd6:	1bc0      	subs	r0, r0, r7
 8000fd8:	4540      	cmp	r0, r8
 8000fda:	d81a      	bhi.n	8001012 <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fdc:	69f3      	ldr	r3, [r6, #28]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d1f5      	bne.n	8000fd2 <HAL_RCC_ClockConfig+0x1da>
 8000fe6:	e7e0      	b.n	8000faa <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe8:	f7ff fb72 	bl	80006d0 <HAL_GetTick>
 8000fec:	1bc0      	subs	r0, r0, r7
 8000fee:	4540      	cmp	r0, r8
 8000ff0:	d80f      	bhi.n	8001012 <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000ff2:	69f3      	ldr	r3, [r6, #28]
 8000ff4:	f013 0f0c 	tst.w	r3, #12
 8000ff8:	d1f6      	bne.n	8000fe8 <HAL_RCC_ClockConfig+0x1f0>
 8000ffa:	e7d6      	b.n	8000faa <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f7ff fb68 	bl	80006d0 <HAL_GetTick>
 8001000:	1bc0      	subs	r0, r0, r7
 8001002:	4540      	cmp	r0, r8
 8001004:	d805      	bhi.n	8001012 <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001006:	69f3      	ldr	r3, [r6, #28]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b04      	cmp	r3, #4
 800100e:	d1f5      	bne.n	8000ffc <HAL_RCC_ClockConfig+0x204>
 8001010:	e7cb      	b.n	8000faa <HAL_RCC_ClockConfig+0x1b2>
            return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
}
 8001014:	b002      	add	sp, #8
 8001016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800101a:	2001      	movs	r0, #1
}
 800101c:	4770      	bx	lr
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8001020:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8001024:	0752      	lsls	r2, r2, #29
 8001026:	d511      	bpl.n	800104c <HAL_RCC_ClockConfig+0x254>
      tickstart = HAL_GetTick();
 8001028:	f7ff fb52 	bl	80006d0 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 800102e:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	035b      	lsls	r3, r3, #13
 8001034:	d441      	bmi.n	80010ba <HAL_RCC_ClockConfig+0x2c2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_RCC_ClockConfig+0x288>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	0199      	lsls	r1, r3, #6
 800103c:	f57f aef4 	bpl.w	8000e28 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001040:	6863      	ldr	r3, [r4, #4]
 8001042:	e743      	b.n	8000ecc <HAL_RCC_ClockConfig+0xd4>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001044:	0556      	lsls	r6, r2, #21
 8001046:	f57f aeef 	bpl.w	8000e28 <HAL_RCC_ClockConfig+0x30>
 800104a:	e73f      	b.n	8000ecc <HAL_RCC_ClockConfig+0xd4>
        __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8001050:	f042 0204 	orr.w	r2, r2, #4
 8001054:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	9b01      	ldr	r3, [sp, #4]
      tickstart = HAL_GetTick();
 8001064:	f7ff fb34 	bl	80006d0 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 800106a:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	035f      	lsls	r7, r3, #13
 8001070:	d51b      	bpl.n	80010aa <HAL_RCC_ClockConfig+0x2b2>
        pwrclkchanged = SET;
 8001072:	f04f 0801 	mov.w	r8, #1
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001076:	4f06      	ldr	r7, [pc, #24]	@ (8001090 <HAL_RCC_ClockConfig+0x298>)
 8001078:	e011      	b.n	800109e <HAL_RCC_ClockConfig+0x2a6>
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000
 8001080:	46020c00 	.word	0x46020c00
 8001084:	08001af0 	.word	0x08001af0
 8001088:	20000008 	.word	0x20000008
 800108c:	20000000 	.word	0x20000000
 8001090:	46020800 	.word	0x46020800
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001094:	f7ff fb1c 	bl	80006d0 <HAL_GetTick>
 8001098:	1b80      	subs	r0, r0, r6
 800109a:	2802      	cmp	r0, #2
 800109c:	d8b9      	bhi.n	8001012 <HAL_RCC_ClockConfig+0x21a>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	0458      	lsls	r0, r3, #17
 80010a2:	d5f7      	bpl.n	8001094 <HAL_RCC_ClockConfig+0x29c>
      if (pwrclkchanged == SET)
 80010a4:	f1b8 0f00 	cmp.w	r8, #0
 80010a8:	d0c5      	beq.n	8001036 <HAL_RCC_ClockConfig+0x23e>
        __HAL_RCC_PWR_CLK_DISABLE();
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <HAL_RCC_ClockConfig+0x2c8>)
 80010ac:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80010b0:	f023 0304 	bic.w	r3, r3, #4
 80010b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010b8:	e7bd      	b.n	8001036 <HAL_RCC_ClockConfig+0x23e>
    FlagStatus  pwrclkchanged = RESET;
 80010ba:	f04f 0800 	mov.w	r8, #0
 80010be:	e7da      	b.n	8001076 <HAL_RCC_ClockConfig+0x27e>
 80010c0:	46020c00 	.word	0x46020c00

080010c4 <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 80010c4:	2800      	cmp	r0, #0
 80010c6:	f000 82a4 	beq.w	8001612 <HAL_RCC_OscConfig+0x54e>
{
 80010ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ce:	4aae      	ldr	r2, [pc, #696]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010d0:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010d2:	69d5      	ldr	r5, [r2, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010d4:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010d6:	06da      	lsls	r2, r3, #27
 80010d8:	4604      	mov	r4, r0
{
 80010da:	b084      	sub	sp, #16
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010dc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e0:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010e4:	d531      	bpl.n	800114a <HAL_RCC_OscConfig+0x86>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80010e6:	2d00      	cmp	r5, #0
 80010e8:	f000 81b2 	beq.w	8001450 <HAL_RCC_OscConfig+0x38c>
 80010ec:	2d0c      	cmp	r5, #12
 80010ee:	f000 81ac 	beq.w	800144a <HAL_RCC_OscConfig+0x386>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010f2:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 80010f4:	4fa4      	ldr	r7, [pc, #656]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 822b 	beq.w	8001552 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_MSI_ENABLE();
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8001104:	f7ff fae4 	bl	80006d0 <HAL_GetTick>
 8001108:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800110a:	e006      	b.n	800111a <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800110c:	f7ff fae0 	bl	80006d0 <HAL_GetTick>
 8001110:	eba0 0008 	sub.w	r0, r0, r8
 8001114:	2802      	cmp	r0, #2
 8001116:	f200 820e 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	075a      	lsls	r2, r3, #29
 800111e:	d5f5      	bpl.n	800110c <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800112c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001130:	4313      	orrs	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001134:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8001138:	6a21      	ldr	r1, [r4, #32]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f0c0 8367 	bcc.w	800180e <HAL_RCC_OscConfig+0x74a>
 8001140:	f023 031f 	bic.w	r3, r3, #31
 8001144:	430b      	orrs	r3, r1
 8001146:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	07df      	lsls	r7, r3, #31
 800114c:	d531      	bpl.n	80011b2 <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800114e:	2d08      	cmp	r5, #8
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001150:	6862      	ldr	r2, [r4, #4]
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001152:	f000 81bd 	beq.w	80014d0 <HAL_RCC_OscConfig+0x40c>
 8001156:	2d0c      	cmp	r5, #12
 8001158:	f000 81b7 	beq.w	80014ca <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800115c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8001160:	f000 825b 	beq.w	800161a <HAL_RCC_OscConfig+0x556>
 8001164:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8001168:	f000 833c 	beq.w	80017e4 <HAL_RCC_OscConfig+0x720>
 800116c:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 8001170:	f000 82fb 	beq.w	800176a <HAL_RCC_OscConfig+0x6a6>
 8001174:	4f84      	ldr	r7, [pc, #528]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800118c:	603b      	str	r3, [r7, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118e:	2a00      	cmp	r2, #0
 8001190:	f040 8248 	bne.w	8001624 <HAL_RCC_OscConfig+0x560>
        tickstart = HAL_GetTick();
 8001194:	f7ff fa9c 	bl	80006d0 <HAL_GetTick>
 8001198:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800119a:	e006      	b.n	80011aa <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fa98 	bl	80006d0 <HAL_GetTick>
 80011a0:	eba0 0008 	sub.w	r0, r0, r8
 80011a4:	2864      	cmp	r0, #100	@ 0x64
 80011a6:	f200 81c6 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	0399      	lsls	r1, r3, #14
 80011ae:	d4f5      	bmi.n	800119c <HAL_RCC_OscConfig+0xd8>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	079a      	lsls	r2, r3, #30
 80011b4:	d50f      	bpl.n	80011d6 <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80011b6:	2d04      	cmp	r5, #4
 80011b8:	f040 81c4 	bne.w	8001544 <HAL_RCC_OscConfig+0x480>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80011bc:	68e3      	ldr	r3, [r4, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 817f 	beq.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4a70      	ldr	r2, [pc, #448]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 80011c6:	6921      	ldr	r1, [r4, #16]
 80011c8:	6913      	ldr	r3, [r2, #16]
 80011ca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80011ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011d2:	6113      	str	r3, [r2, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	0718      	lsls	r0, r3, #28
 80011d8:	d54d      	bpl.n	8001276 <HAL_RCC_OscConfig+0x1b2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011da:	4b6b      	ldr	r3, [pc, #428]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 80011dc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80011e0:	0751      	lsls	r1, r2, #29
 80011e2:	f100 81b4 	bmi.w	800154e <HAL_RCC_OscConfig+0x48a>
      pwrclkchanged = SET;
 80011e6:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80011ec:	f042 0204 	orr.w	r2, r2, #4
 80011f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80011f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001200:	4e62      	ldr	r6, [pc, #392]	@ (800138c <HAL_RCC_OscConfig+0x2c8>)
 8001202:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8001204:	07da      	lsls	r2, r3, #31
 8001206:	f140 8186 	bpl.w	8001516 <HAL_RCC_OscConfig+0x452>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800120a:	6963      	ldr	r3, [r4, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 825d 	beq.w	80016cc <HAL_RCC_OscConfig+0x608>
      uint32_t bdcr_temp = RCC->BDCR;
 8001212:	4e5d      	ldr	r6, [pc, #372]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001214:	69a2      	ldr	r2, [r4, #24]
      uint32_t bdcr_temp = RCC->BDCR;
 8001216:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800121a:	f003 5180 	and.w	r1, r3, #268435456	@ 0x10000000
 800121e:	428a      	cmp	r2, r1
 8001220:	d010      	beq.n	8001244 <HAL_RCC_OscConfig+0x180>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001222:	f003 6140 	and.w	r1, r3, #201326592	@ 0xc000000
 8001226:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 800122a:	f000 814a 	beq.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800122e:	0158      	lsls	r0, r3, #5
 8001230:	f100 82b1 	bmi.w	8001796 <HAL_RCC_OscConfig+0x6d2>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001234:	4954      	ldr	r1, [pc, #336]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 8001236:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 800123a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800123e:	4313      	orrs	r3, r2
 8001240:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      __HAL_RCC_LSI_ENABLE();
 8001244:	4e50      	ldr	r6, [pc, #320]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 8001246:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800124a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800124e:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8001252:	f7ff fa3d 	bl	80006d0 <HAL_GetTick>
 8001256:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001258:	e005      	b.n	8001266 <HAL_RCC_OscConfig+0x1a2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125a:	f7ff fa39 	bl	80006d0 <HAL_GetTick>
 800125e:	1bc0      	subs	r0, r0, r7
 8001260:	2805      	cmp	r0, #5
 8001262:	f200 8168 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001266:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800126a:	011a      	lsls	r2, r3, #4
 800126c:	d5f5      	bpl.n	800125a <HAL_RCC_OscConfig+0x196>
    if (pwrclkchanged == SET)
 800126e:	2d00      	cmp	r5, #0
 8001270:	f040 8289 	bne.w	8001786 <HAL_RCC_OscConfig+0x6c2>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	075d      	lsls	r5, r3, #29
 8001278:	d55e      	bpl.n	8001338 <HAL_RCC_OscConfig+0x274>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127a:	4b43      	ldr	r3, [pc, #268]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 800127c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8001280:	0750      	lsls	r0, r2, #29
 8001282:	f100 81c8 	bmi.w	8001616 <HAL_RCC_OscConfig+0x552>
      pwrclkchanged = SET;
 8001286:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800128c:	f042 0204 	orr.w	r2, r2, #4
 8001290:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	9b02      	ldr	r3, [sp, #8]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80012a0:	4e3a      	ldr	r6, [pc, #232]	@ (800138c <HAL_RCC_OscConfig+0x2c8>)
 80012a2:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80012a4:	07d9      	lsls	r1, r3, #31
 80012a6:	f140 828c 	bpl.w	80017c2 <HAL_RCC_OscConfig+0x6fe>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80012aa:	68a3      	ldr	r3, [r4, #8]
 80012ac:	07da      	lsls	r2, r3, #31
 80012ae:	f140 81d3 	bpl.w	8001658 <HAL_RCC_OscConfig+0x594>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80012b2:	075e      	lsls	r6, r3, #29
 80012b4:	f140 8251 	bpl.w	800175a <HAL_RCC_OscConfig+0x696>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012b8:	4b33      	ldr	r3, [pc, #204]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 80012ba:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80012be:	f042 0204 	orr.w	r2, r2, #4
 80012c2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012c6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80012ca:	f042 0201 	orr.w	r2, r2, #1
 80012ce:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80012d2:	f7ff f9fd 	bl	80006d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80012da:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012dc:	4f2a      	ldr	r7, [pc, #168]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 80012de:	e005      	b.n	80012ec <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff f9f6 	bl	80006d0 <HAL_GetTick>
 80012e4:	1b80      	subs	r0, r0, r6
 80012e6:	4540      	cmp	r0, r8
 80012e8:	f200 8125 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80012f0:	0798      	lsls	r0, r3, #30
 80012f2:	d5f5      	bpl.n	80012e0 <HAL_RCC_OscConfig+0x21c>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80012f4:	68a3      	ldr	r3, [r4, #8]
 80012f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80012fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80012fe:	f000 82c7 	beq.w	8001890 <HAL_RCC_OscConfig+0x7cc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001306:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800130e:	4f1e      	ldr	r7, [pc, #120]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 8001310:	e005      	b.n	800131e <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff f9dd 	bl	80006d0 <HAL_GetTick>
 8001316:	1b80      	subs	r0, r0, r6
 8001318:	4540      	cmp	r0, r8
 800131a:	f200 810c 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800131e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001322:	0519      	lsls	r1, r3, #20
 8001324:	d5f5      	bpl.n	8001312 <HAL_RCC_OscConfig+0x24e>
    if (pwrclkchanged == SET)
 8001326:	b135      	cbz	r5, 8001336 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001328:	4a17      	ldr	r2, [pc, #92]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
 800132a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800132e:	f023 0304 	bic.w	r3, r3, #4
 8001332:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	069a      	lsls	r2, r3, #26
 800133a:	d516      	bpl.n	800136a <HAL_RCC_OscConfig+0x2a6>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800133c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      __HAL_RCC_HSI48_ENABLE();
 800133e:	4d12      	ldr	r5, [pc, #72]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 81dc 	beq.w	80016fe <HAL_RCC_OscConfig+0x63a>
      __HAL_RCC_HSI48_ENABLE();
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800134c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800134e:	f7ff f9bf 	bl	80006d0 <HAL_GetTick>
 8001352:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001354:	e005      	b.n	8001362 <HAL_RCC_OscConfig+0x29e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001356:	f7ff f9bb 	bl	80006d0 <HAL_GetTick>
 800135a:	1b80      	subs	r0, r0, r6
 800135c:	2802      	cmp	r0, #2
 800135e:	f200 80ea 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001362:	682b      	ldr	r3, [r5, #0]
 8001364:	049b      	lsls	r3, r3, #18
 8001366:	d5f6      	bpl.n	8001356 <HAL_RCC_OscConfig+0x292>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	061d      	lsls	r5, r3, #24
 800136c:	d51a      	bpl.n	80013a4 <HAL_RCC_OscConfig+0x2e0>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800136e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      __HAL_RCC_SHSI_ENABLE();
 8001370:	4d05      	ldr	r5, [pc, #20]	@ (8001388 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 81df 	beq.w	8001736 <HAL_RCC_OscConfig+0x672>
      __HAL_RCC_SHSI_ENABLE();
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001380:	f7ff f9a6 	bl	80006d0 <HAL_GetTick>
 8001384:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001386:	e009      	b.n	800139c <HAL_RCC_OscConfig+0x2d8>
 8001388:	46020c00 	.word	0x46020c00
 800138c:	46020800 	.word	0x46020800
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001390:	f7ff f99e 	bl	80006d0 <HAL_GetTick>
 8001394:	1b80      	subs	r0, r0, r6
 8001396:	2802      	cmp	r0, #2
 8001398:	f200 80cd 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	0418      	lsls	r0, r3, #16
 80013a0:	d5f6      	bpl.n	8001390 <HAL_RCC_OscConfig+0x2cc>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	065a      	lsls	r2, r3, #25
 80013a6:	d52b      	bpl.n	8001400 <HAL_RCC_OscConfig+0x33c>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80013a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8257 	beq.w	800185e <HAL_RCC_OscConfig+0x79a>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80013b0:	4ba5      	ldr	r3, [pc, #660]	@ (8001648 <HAL_RCC_OscConfig+0x584>)
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80013be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80013c6:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 80013ca:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 80013ce:	f0c0 8235 	bcc.w	800183c <HAL_RCC_OscConfig+0x778>
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	f022 021f 	bic.w	r2, r2, #31
 80013d8:	430a      	orrs	r2, r1
 80013da:	60da      	str	r2, [r3, #12]
      __HAL_RCC_MSIK_ENABLE();
 80013dc:	4d9a      	ldr	r5, [pc, #616]	@ (8001648 <HAL_RCC_OscConfig+0x584>)
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013e6:	f7ff f973 	bl	80006d0 <HAL_GetTick>
 80013ea:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80013ec:	e005      	b.n	80013fa <HAL_RCC_OscConfig+0x336>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80013ee:	f7ff f96f 	bl	80006d0 <HAL_GetTick>
 80013f2:	1b80      	subs	r0, r0, r6
 80013f4:	2802      	cmp	r0, #2
 80013f6:	f200 809e 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	069b      	lsls	r3, r3, #26
 80013fe:	d5f6      	bpl.n	80013ee <HAL_RCC_OscConfig+0x32a>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001400:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001402:	b303      	cbz	r3, 8001446 <HAL_RCC_OscConfig+0x382>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001404:	4d90      	ldr	r5, [pc, #576]	@ (8001648 <HAL_RCC_OscConfig+0x584>)
 8001406:	69ea      	ldr	r2, [r5, #28]
 8001408:	f002 020c 	and.w	r2, r2, #12
 800140c:	2a0c      	cmp	r2, #12
 800140e:	f000 8255 	beq.w	80018bc <HAL_RCC_OscConfig+0x7f8>
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001412:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800141a:	602b      	str	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141c:	f000 82a6 	beq.w	800196c <HAL_RCC_OscConfig+0x8a8>
        tickstart = HAL_GetTick();
 8001420:	f7ff f956 	bl	80006d0 <HAL_GetTick>
 8001424:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001426:	e005      	b.n	8001434 <HAL_RCC_OscConfig+0x370>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff f952 	bl	80006d0 <HAL_GetTick>
 800142c:	1b00      	subs	r0, r0, r4
 800142e:	2802      	cmp	r0, #2
 8001430:	f200 8081 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	0199      	lsls	r1, r3, #6
 8001438:	d4f6      	bmi.n	8001428 <HAL_RCC_OscConfig+0x364>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800143a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800143c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001440:	f023 0303 	bic.w	r3, r3, #3
 8001444:	62ab      	str	r3, [r5, #40]	@ 0x28
  return HAL_OK;
 8001446:	2000      	movs	r0, #0
 8001448:	e03c      	b.n	80014c4 <HAL_RCC_OscConfig+0x400>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800144a:	2e01      	cmp	r6, #1
 800144c:	f47f ae51 	bne.w	80010f2 <HAL_RCC_OscConfig+0x2e>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001450:	69e3      	ldr	r3, [r4, #28]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d035      	beq.n	80014c2 <HAL_RCC_OscConfig+0x3fe>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001456:	4b7c      	ldr	r3, [pc, #496]	@ (8001648 <HAL_RCC_OscConfig+0x584>)
 8001458:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	0217      	lsls	r7, r2, #8
 800145e:	bf56      	itet	pl
 8001460:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
 8001464:	689b      	ldrmi	r3, [r3, #8]
 8001466:	041b      	lslpl	r3, r3, #16
 8001468:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800146c:	4298      	cmp	r0, r3
 800146e:	f240 8083 	bls.w	8001578 <HAL_RCC_OscConfig+0x4b4>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001472:	2d00      	cmp	r5, #0
 8001474:	f000 81c4 	beq.w	8001800 <HAL_RCC_OscConfig+0x73c>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001478:	4b73      	ldr	r3, [pc, #460]	@ (8001648 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800147a:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800148c:	ea42 0200 	orr.w	r2, r2, r0
 8001490:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001492:	6a21      	ldr	r1, [r4, #32]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	f080 8149 	bcs.w	800172c <HAL_RCC_OscConfig+0x668>
 800149a:	2800      	cmp	r0, #0
 800149c:	f2c0 81f2 	blt.w	8001884 <HAL_RCC_OscConfig+0x7c0>
 80014a0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80014a4:	bf2b      	itete	cs
 80014a6:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 80014aa:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 80014ae:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 80014b2:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	e081      	b.n	80015be <HAL_RCC_OscConfig+0x4fa>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ba:	f7ff fbb1 	bl	8000c20 <RCC_SetFlashLatencyFromMSIRange>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d07d      	beq.n	80015be <HAL_RCC_OscConfig+0x4fa>
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
}
 80014c4:	b004      	add	sp, #16
 80014c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ca:	2e03      	cmp	r6, #3
 80014cc:	f47f ae46 	bne.w	800115c <HAL_RCC_OscConfig+0x98>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d0f6      	beq.n	80014c2 <HAL_RCC_OscConfig+0x3fe>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d4:	079d      	lsls	r5, r3, #30
 80014d6:	f57f ae7e 	bpl.w	80011d6 <HAL_RCC_OscConfig+0x112>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014da:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80014dc:	4d5a      	ldr	r5, [pc, #360]	@ (8001648 <HAL_RCC_OscConfig+0x584>)
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8085 	beq.w	80015ee <HAL_RCC_OscConfig+0x52a>
        __HAL_RCC_HSI_ENABLE();
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014ec:	f7ff f8f0 	bl	80006d0 <HAL_GetTick>
 80014f0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f2:	e004      	b.n	80014fe <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff f8ec 	bl	80006d0 <HAL_GetTick>
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d81b      	bhi.n	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fe:	682b      	ldr	r3, [r5, #0]
 8001500:	055b      	lsls	r3, r3, #21
 8001502:	d5f7      	bpl.n	80014f4 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001504:	692b      	ldr	r3, [r5, #16]
 8001506:	6922      	ldr	r2, [r4, #16]
 8001508:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800150c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001510:	612b      	str	r3, [r5, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	e65f      	b.n	80011d6 <HAL_RCC_OscConfig+0x112>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001516:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 800151e:	f7ff f8d7 	bl	80006d0 <HAL_GetTick>
 8001522:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001524:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8001526:	07db      	lsls	r3, r3, #31
 8001528:	f53f ae6f 	bmi.w	800120a <HAL_RCC_OscConfig+0x146>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152c:	f7ff f8d0 	bl	80006d0 <HAL_GetTick>
 8001530:	1bc0      	subs	r0, r0, r7
 8001532:	2802      	cmp	r0, #2
 8001534:	d9f6      	bls.n	8001524 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8001536:	2003      	movs	r0, #3
}
 8001538:	b004      	add	sp, #16
 800153a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	079a      	lsls	r2, r3, #30
 8001540:	f57f ae49 	bpl.w	80011d6 <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001544:	2d0c      	cmp	r5, #12
 8001546:	d1c8      	bne.n	80014da <HAL_RCC_OscConfig+0x416>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001548:	2e02      	cmp	r6, #2
 800154a:	d1c6      	bne.n	80014da <HAL_RCC_OscConfig+0x416>
 800154c:	e636      	b.n	80011bc <HAL_RCC_OscConfig+0xf8>
    FlagStatus  pwrclkchanged = RESET;
 800154e:	2500      	movs	r5, #0
 8001550:	e656      	b.n	8001200 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_DISABLE();
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800155a:	f7ff f8b9 	bl	80006d0 <HAL_GetTick>
 800155e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001560:	e005      	b.n	800156e <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001562:	f7ff f8b5 	bl	80006d0 <HAL_GetTick>
 8001566:	eba0 0008 	sub.w	r0, r0, r8
 800156a:	2802      	cmp	r0, #2
 800156c:	d8e3      	bhi.n	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	075b      	lsls	r3, r3, #29
 8001572:	d4f6      	bmi.n	8001562 <HAL_RCC_OscConfig+0x49e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	e5e8      	b.n	800114a <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800157a:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800158c:	ea42 0200 	orr.w	r2, r2, r0
 8001590:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001592:	6a21      	ldr	r1, [r4, #32]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	f080 80c4 	bcs.w	8001722 <HAL_RCC_OscConfig+0x65e>
 800159a:	2800      	cmp	r0, #0
 800159c:	f2c0 8148 	blt.w	8001830 <HAL_RCC_OscConfig+0x76c>
 80015a0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80015a4:	bf2b      	itete	cs
 80015a6:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 80015aa:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 80015ae:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 80015b2:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 80015b6:	60da      	str	r2, [r3, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80015b8:	2d00      	cmp	r5, #0
 80015ba:	f43f af7e 	beq.w	80014ba <HAL_RCC_OscConfig+0x3f6>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80015be:	f7ff fb8d 	bl	8000cdc <HAL_RCC_GetSysClockFreq>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a20      	ldr	r2, [pc, #128]	@ (8001648 <HAL_RCC_OscConfig+0x584>)
 80015c6:	4921      	ldr	r1, [pc, #132]	@ (800164c <HAL_RCC_OscConfig+0x588>)
 80015c8:	6a12      	ldr	r2, [r2, #32]
 80015ca:	f002 020f 	and.w	r2, r2, #15
 80015ce:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 80015d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001650 <HAL_RCC_OscConfig+0x58c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80015d2:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 80015d4:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80015d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001654 <HAL_RCC_OscConfig+0x590>)
 80015d8:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80015da:	f7fe fff1 	bl	80005c0 <HAL_InitTick>
        if (status != HAL_OK)
 80015de:	2800      	cmp	r0, #0
 80015e0:	f47f af70 	bne.w	80014c4 <HAL_RCC_OscConfig+0x400>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	07d9      	lsls	r1, r3, #31
 80015e8:	d5a9      	bpl.n	800153e <HAL_RCC_OscConfig+0x47a>
 80015ea:	6862      	ldr	r2, [r4, #4]
 80015ec:	e5b3      	b.n	8001156 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_DISABLE();
 80015ee:	682b      	ldr	r3, [r5, #0]
 80015f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015f6:	f7ff f86b 	bl	80006d0 <HAL_GetTick>
 80015fa:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fc:	e004      	b.n	8001608 <HAL_RCC_OscConfig+0x544>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff f867 	bl	80006d0 <HAL_GetTick>
 8001602:	1b80      	subs	r0, r0, r6
 8001604:	2802      	cmp	r0, #2
 8001606:	d896      	bhi.n	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	055f      	lsls	r7, r3, #21
 800160c:	d4f7      	bmi.n	80015fe <HAL_RCC_OscConfig+0x53a>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	e5e1      	b.n	80011d6 <HAL_RCC_OscConfig+0x112>
    return HAL_ERROR;
 8001612:	2001      	movs	r0, #1
}
 8001614:	4770      	bx	lr
    FlagStatus pwrclkchanged = RESET;
 8001616:	2500      	movs	r5, #0
 8001618:	e642      	b.n	80012a0 <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800161a:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <HAL_RCC_OscConfig+0x584>)
 800161c:	6813      	ldr	r3, [r2, #0]
 800161e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001622:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001624:	f7ff f854 	bl	80006d0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001628:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8001648 <HAL_RCC_OscConfig+0x584>
        tickstart = HAL_GetTick();
 800162c:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162e:	e005      	b.n	800163c <HAL_RCC_OscConfig+0x578>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff f84e 	bl	80006d0 <HAL_GetTick>
 8001634:	1bc0      	subs	r0, r0, r7
 8001636:	2864      	cmp	r0, #100	@ 0x64
 8001638:	f63f af7d 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163c:	f8d8 3000 	ldr.w	r3, [r8]
 8001640:	0398      	lsls	r0, r3, #14
 8001642:	d5f5      	bpl.n	8001630 <HAL_RCC_OscConfig+0x56c>
 8001644:	e5b4      	b.n	80011b0 <HAL_RCC_OscConfig+0xec>
 8001646:	bf00      	nop
 8001648:	46020c00 	.word	0x46020c00
 800164c:	08001af0 	.word	0x08001af0
 8001650:	20000008 	.word	0x20000008
 8001654:	20000000 	.word	0x20000000
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001658:	4e97      	ldr	r6, [pc, #604]	@ (80018b8 <HAL_RCC_OscConfig+0x7f4>)
 800165a:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001666:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 800166a:	f022 0204 	bic.w	r2, r2, #4
 800166e:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001672:	2b00      	cmp	r3, #0
 8001674:	f47f ae2d 	bne.w	80012d2 <HAL_RCC_OscConfig+0x20e>
      tickstart = HAL_GetTick();
 8001678:	f7ff f82a 	bl	80006d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001680:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001682:	e005      	b.n	8001690 <HAL_RCC_OscConfig+0x5cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001684:	f7ff f824 	bl	80006d0 <HAL_GetTick>
 8001688:	1bc0      	subs	r0, r0, r7
 800168a:	4540      	cmp	r0, r8
 800168c:	f63f af53 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001690:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8001694:	079b      	lsls	r3, r3, #30
 8001696:	d4f5      	bmi.n	8001684 <HAL_RCC_OscConfig+0x5c0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001698:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800169c:	0618      	lsls	r0, r3, #24
 800169e:	f57f ae42 	bpl.w	8001326 <HAL_RCC_OscConfig+0x262>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016a2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f241 3888 	movw	r8, #5000	@ 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016ae:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016b2:	4e81      	ldr	r6, [pc, #516]	@ (80018b8 <HAL_RCC_OscConfig+0x7f4>)
 80016b4:	e005      	b.n	80016c2 <HAL_RCC_OscConfig+0x5fe>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f80b 	bl	80006d0 <HAL_GetTick>
 80016ba:	1bc0      	subs	r0, r0, r7
 80016bc:	4540      	cmp	r0, r8
 80016be:	f63f af3a 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016c2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80016c6:	0519      	lsls	r1, r3, #20
 80016c8:	d4f5      	bmi.n	80016b6 <HAL_RCC_OscConfig+0x5f2>
 80016ca:	e62c      	b.n	8001326 <HAL_RCC_OscConfig+0x262>
      __HAL_RCC_LSI_DISABLE();
 80016cc:	4e7a      	ldr	r6, [pc, #488]	@ (80018b8 <HAL_RCC_OscConfig+0x7f4>)
 80016ce:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80016d2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80016d6:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80016da:	f7fe fff9 	bl	80006d0 <HAL_GetTick>
 80016de:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016e0:	e005      	b.n	80016ee <HAL_RCC_OscConfig+0x62a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e2:	f7fe fff5 	bl	80006d0 <HAL_GetTick>
 80016e6:	1bc0      	subs	r0, r0, r7
 80016e8:	2805      	cmp	r0, #5
 80016ea:	f63f af24 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016ee:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	d4f5      	bmi.n	80016e2 <HAL_RCC_OscConfig+0x61e>
    if (pwrclkchanged == SET)
 80016f6:	2d00      	cmp	r5, #0
 80016f8:	f43f adbc 	beq.w	8001274 <HAL_RCC_OscConfig+0x1b0>
 80016fc:	e043      	b.n	8001786 <HAL_RCC_OscConfig+0x6c2>
      __HAL_RCC_HSI48_DISABLE();
 80016fe:	682b      	ldr	r3, [r5, #0]
 8001700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001704:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001706:	f7fe ffe3 	bl	80006d0 <HAL_GetTick>
 800170a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800170c:	e005      	b.n	800171a <HAL_RCC_OscConfig+0x656>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800170e:	f7fe ffdf 	bl	80006d0 <HAL_GetTick>
 8001712:	1b80      	subs	r0, r0, r6
 8001714:	2802      	cmp	r0, #2
 8001716:	f63f af0e 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800171a:	682b      	ldr	r3, [r5, #0]
 800171c:	049f      	lsls	r7, r3, #18
 800171e:	d4f6      	bmi.n	800170e <HAL_RCC_OscConfig+0x64a>
 8001720:	e622      	b.n	8001368 <HAL_RCC_OscConfig+0x2a4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001722:	f022 021f 	bic.w	r2, r2, #31
 8001726:	430a      	orrs	r2, r1
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	e745      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800172c:	f022 021f 	bic.w	r2, r2, #31
 8001730:	430a      	orrs	r2, r1
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	e743      	b.n	80015be <HAL_RCC_OscConfig+0x4fa>
      __HAL_RCC_SHSI_DISABLE();
 8001736:	682b      	ldr	r3, [r5, #0]
 8001738:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800173c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800173e:	f7fe ffc7 	bl	80006d0 <HAL_GetTick>
 8001742:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001744:	e005      	b.n	8001752 <HAL_RCC_OscConfig+0x68e>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001746:	f7fe ffc3 	bl	80006d0 <HAL_GetTick>
 800174a:	1b80      	subs	r0, r0, r6
 800174c:	2802      	cmp	r0, #2
 800174e:	f63f aef2 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	0419      	lsls	r1, r3, #16
 8001756:	d4f6      	bmi.n	8001746 <HAL_RCC_OscConfig+0x682>
 8001758:	e623      	b.n	80013a2 <HAL_RCC_OscConfig+0x2de>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800175a:	4a57      	ldr	r2, [pc, #348]	@ (80018b8 <HAL_RCC_OscConfig+0x7f4>)
 800175c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001768:	e5b3      	b.n	80012d2 <HAL_RCC_OscConfig+0x20e>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800176a:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_RCC_OscConfig+0x7f4>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001782:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001784:	e74e      	b.n	8001624 <HAL_RCC_OscConfig+0x560>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001786:	4a4c      	ldr	r2, [pc, #304]	@ (80018b8 <HAL_RCC_OscConfig+0x7f4>)
 8001788:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001794:	e56e      	b.n	8001274 <HAL_RCC_OscConfig+0x1b0>
          __HAL_RCC_LSI_DISABLE();
 8001796:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800179a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800179e:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
          tickstart = HAL_GetTick();
 80017a2:	f7fe ff95 	bl	80006d0 <HAL_GetTick>
 80017a6:	4607      	mov	r7, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017a8:	e005      	b.n	80017b6 <HAL_RCC_OscConfig+0x6f2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017aa:	f7fe ff91 	bl	80006d0 <HAL_GetTick>
 80017ae:	1bc0      	subs	r0, r0, r7
 80017b0:	2805      	cmp	r0, #5
 80017b2:	f63f aec0 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017b6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80017ba:	0119      	lsls	r1, r3, #4
 80017bc:	d4f5      	bmi.n	80017aa <HAL_RCC_OscConfig+0x6e6>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80017be:	69a2      	ldr	r2, [r4, #24]
 80017c0:	e538      	b.n	8001234 <HAL_RCC_OscConfig+0x170>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80017c2:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 80017ca:	f7fe ff81 	bl	80006d0 <HAL_GetTick>
 80017ce:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80017d0:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80017d2:	07db      	lsls	r3, r3, #31
 80017d4:	f53f ad69 	bmi.w	80012aa <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7fe ff7a 	bl	80006d0 <HAL_GetTick>
 80017dc:	1bc0      	subs	r0, r0, r7
 80017de:	2802      	cmp	r0, #2
 80017e0:	d9f6      	bls.n	80017d0 <HAL_RCC_OscConfig+0x70c>
 80017e2:	e6a8      	b.n	8001536 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80017e4:	4b34      	ldr	r3, [pc, #208]	@ (80018b8 <HAL_RCC_OscConfig+0x7f4>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80017fc:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017fe:	e711      	b.n	8001624 <HAL_RCC_OscConfig+0x560>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001800:	f7ff fa0e 	bl	8000c20 <RCC_SetFlashLatencyFromMSIRange>
 8001804:	2800      	cmp	r0, #0
 8001806:	f47f ae5c 	bne.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800180a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800180c:	e634      	b.n	8001478 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800180e:	2a00      	cmp	r2, #0
 8001810:	f2c0 80a4 	blt.w	800195c <HAL_RCC_OscConfig+0x898>
 8001814:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001818:	bf2b      	itete	cs
 800181a:	f423 43f8 	biccs.w	r3, r3, #31744	@ 0x7c00
 800181e:	f423 2378 	biccc.w	r3, r3, #1015808	@ 0xf8000
 8001822:	ea43 2381 	orrcs.w	r3, r3, r1, lsl #10
 8001826:	ea43 33c1 	orrcc.w	r3, r3, r1, lsl #15
 800182a:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	e48c      	b.n	800114a <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001830:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8001834:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	e6bd      	b.n	80015b8 <HAL_RCC_OscConfig+0x4f4>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800183c:	2a00      	cmp	r2, #0
 800183e:	f2c0 811e 	blt.w	8001a7e <HAL_RCC_OscConfig+0x9ba>
 8001842:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	bf2b      	itete	cs
 800184a:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 800184e:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8001852:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8001856:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	e5be      	b.n	80013dc <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_MSIK_DISABLE();
 800185e:	4d16      	ldr	r5, [pc, #88]	@ (80018b8 <HAL_RCC_OscConfig+0x7f4>)
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	f023 0310 	bic.w	r3, r3, #16
 8001866:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001868:	f7fe ff32 	bl	80006d0 <HAL_GetTick>
 800186c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800186e:	e005      	b.n	800187c <HAL_RCC_OscConfig+0x7b8>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001870:	f7fe ff2e 	bl	80006d0 <HAL_GetTick>
 8001874:	1b80      	subs	r0, r0, r6
 8001876:	2802      	cmp	r0, #2
 8001878:	f63f ae5d 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	069f      	lsls	r7, r3, #26
 8001880:	d4f6      	bmi.n	8001870 <HAL_RCC_OscConfig+0x7ac>
 8001882:	e5bd      	b.n	8001400 <HAL_RCC_OscConfig+0x33c>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001884:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8001888:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	e696      	b.n	80015be <HAL_RCC_OscConfig+0x4fa>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001894:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800189c:	4f06      	ldr	r7, [pc, #24]	@ (80018b8 <HAL_RCC_OscConfig+0x7f4>)
 800189e:	e005      	b.n	80018ac <HAL_RCC_OscConfig+0x7e8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f7fe ff16 	bl	80006d0 <HAL_GetTick>
 80018a4:	1b80      	subs	r0, r0, r6
 80018a6:	4540      	cmp	r0, r8
 80018a8:	f63f ae45 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80018b0:	051a      	lsls	r2, r3, #20
 80018b2:	d4f5      	bmi.n	80018a0 <HAL_RCC_OscConfig+0x7dc>
 80018b4:	e537      	b.n	8001326 <HAL_RCC_OscConfig+0x262>
 80018b6:	bf00      	nop
 80018b8:	46020c00 	.word	0x46020c00
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018bc:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 80018be:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018c0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c2:	f43f adfe 	beq.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
 80018c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80018c8:	f002 0103 	and.w	r1, r2, #3
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018cc:	4299      	cmp	r1, r3
 80018ce:	f47f adf8 	bne.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80018d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80018d4:	f3c2 2103 	ubfx	r1, r2, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80018d8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	4299      	cmp	r1, r3
 80018dc:	f47f adf1 	bne.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80018e0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80018e2:	f402 4270 	and.w	r2, r2, #61440	@ 0xf000
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	f47f adeb 	bne.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018ec:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80018ee:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80018f2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	f47f ade4 	bne.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80018fc:	f3c0 2246 	ubfx	r2, r0, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001900:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	f47f addd 	bne.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001908:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800190a:	f3c0 4206 	ubfx	r2, r0, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800190e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	f47f add6 	bne.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001916:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001918:	f3c0 6006 	ubfx	r0, r0, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800191c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800191e:	4298      	cmp	r0, r3
 8001920:	f47f adcf 	bne.w	80014c2 <HAL_RCC_OscConfig+0x3fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001924:	4b59      	ldr	r3, [pc, #356]	@ (8001a8c <HAL_RCC_OscConfig+0x9c8>)
 8001926:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800192a:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 800192e:	428a      	cmp	r2, r1
 8001930:	f43f ad89 	beq.w	8001446 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001934:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001936:	f022 0210 	bic.w	r2, r2, #16
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
        tickstart = HAL_GetTick();
 800193c:	f7fe fec8 	bl	80006d0 <HAL_GetTick>
 8001940:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001942:	f7fe fec5 	bl	80006d0 <HAL_GetTick>
 8001946:	42a8      	cmp	r0, r5
 8001948:	d0fb      	beq.n	8001942 <HAL_RCC_OscConfig+0x87e>
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800194a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800194c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a8c <HAL_RCC_OscConfig+0x9c8>)
 800194e:	00d2      	lsls	r2, r2, #3
 8001950:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001952:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001954:	f042 0210 	orr.w	r2, r2, #16
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
 800195a:	e574      	b.n	8001446 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800195c:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8001960:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8001964:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	f7ff bbef 	b.w	800114a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800196c:	f7fe feb0 	bl	80006d0 <HAL_GetTick>
 8001970:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001972:	e005      	b.n	8001980 <HAL_RCC_OscConfig+0x8bc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7fe feac 	bl	80006d0 <HAL_GetTick>
 8001978:	1b80      	subs	r0, r0, r6
 800197a:	2802      	cmp	r0, #2
 800197c:	f63f addb 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001980:	682b      	ldr	r3, [r5, #0]
 8001982:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8001986:	d1f5      	bne.n	8001974 <HAL_RCC_OscConfig+0x8b0>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001988:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 800198c:	0756      	lsls	r6, r2, #29
 800198e:	d40c      	bmi.n	80019aa <HAL_RCC_OscConfig+0x8e6>
          pwrclkchanged = SET;
 8001990:	2301      	movs	r3, #1
          __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8001996:	f042 0204 	orr.w	r2, r2, #4
 800199a:	f8c5 2094 	str.w	r2, [r5, #148]	@ 0x94
 800199e:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 80019a2:	f002 0204 	and.w	r2, r2, #4
 80019a6:	9203      	str	r2, [sp, #12]
 80019a8:	9a03      	ldr	r2, [sp, #12]
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80019aa:	4d39      	ldr	r5, [pc, #228]	@ (8001a90 <HAL_RCC_OscConfig+0x9cc>)
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80019ac:	4937      	ldr	r1, [pc, #220]	@ (8001a8c <HAL_RCC_OscConfig+0x9c8>)
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80019ae:	68ee      	ldr	r6, [r5, #12]
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80019b0:	68ea      	ldr	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80019b2:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8001a94 <HAL_RCC_OscConfig+0x9d0>
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80019b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019ba:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80019bc:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 80019be:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80019c0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80019c2:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 80019c6:	f020 0003 	bic.w	r0, r0, #3
 80019ca:	433a      	orrs	r2, r7
 80019cc:	4302      	orrs	r2, r0
 80019ce:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80019d0:	3801      	subs	r0, #1
 80019d2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80019d6:	628a      	str	r2, [r1, #40]	@ 0x28
 80019d8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80019da:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80019dc:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 80019e0:	1e47      	subs	r7, r0, #1
 80019e2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80019e4:	3a01      	subs	r2, #1
 80019e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019ea:	027f      	lsls	r7, r7, #9
 80019ec:	3801      	subs	r0, #1
 80019ee:	ea0e 0c0c 	and.w	ip, lr, ip
 80019f2:	b2bf      	uxth	r7, r7
 80019f4:	0400      	lsls	r0, r0, #16
 80019f6:	ea42 020c 	orr.w	r2, r2, ip
 80019fa:	f400 00fe 	and.w	r0, r0, #8323072	@ 0x7f0000
 80019fe:	433a      	orrs	r2, r7
 8001a00:	4302      	orrs	r2, r0
 8001a02:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8001a04:	3801      	subs	r0, #1
 8001a06:	0600      	lsls	r0, r0, #24
 8001a08:	f000 40fe 	and.w	r0, r0, #2130706432	@ 0x7f000000
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	634a      	str	r2, [r1, #52]	@ 0x34
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001a10:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8001a12:	f022 0210 	bic.w	r2, r2, #16
 8001a16:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001a18:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001a1a:	00d2      	lsls	r2, r2, #3
 8001a1c:	638a      	str	r2, [r1, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001a1e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8001a20:	f042 0210 	orr.w	r2, r2, #16
 8001a24:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001a26:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8001a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a2a:	f022 020c 	bic.w	r2, r2, #12
 8001a2e:	4302      	orrs	r2, r0
        if (pwrboosten == SET)
 8001a30:	0374      	lsls	r4, r6, #13
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001a32:	628a      	str	r2, [r1, #40]	@ 0x28
        if (pwrboosten == SET)
 8001a34:	d41e      	bmi.n	8001a74 <HAL_RCC_OscConfig+0x9b0>
        if (pwrclkchanged == SET)
 8001a36:	b133      	cbz	r3, 8001a46 <HAL_RCC_OscConfig+0x982>
          __HAL_RCC_PWR_CLK_DISABLE();
 8001a38:	4a14      	ldr	r2, [pc, #80]	@ (8001a8c <HAL_RCC_OscConfig+0x9c8>)
 8001a3a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001a3e:	f023 0304 	bic.w	r3, r3, #4
 8001a42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        __HAL_RCC_PLL_ENABLE();
 8001a46:	4c11      	ldr	r4, [pc, #68]	@ (8001a8c <HAL_RCC_OscConfig+0x9c8>)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a50:	f7fe fe3e 	bl	80006d0 <HAL_GetTick>
 8001a54:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a56:	e005      	b.n	8001a64 <HAL_RCC_OscConfig+0x9a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7fe fe3a 	bl	80006d0 <HAL_GetTick>
 8001a5c:	1b40      	subs	r0, r0, r5
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	f63f ad69 	bhi.w	8001536 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	0198      	lsls	r0, r3, #6
 8001a68:	d5f6      	bpl.n	8001a58 <HAL_RCC_OscConfig+0x994>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a72:	e4e8      	b.n	8001446 <HAL_RCC_OscConfig+0x382>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001a74:	68ea      	ldr	r2, [r5, #12]
 8001a76:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001a7a:	60ea      	str	r2, [r5, #12]
 8001a7c:	e7db      	b.n	8001a36 <HAL_RCC_OscConfig+0x972>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8001a84:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	e4a7      	b.n	80013dc <HAL_RCC_OscConfig+0x318>
 8001a8c:	46020c00 	.word	0x46020c00
 8001a90:	46020800 	.word	0x46020800
 8001a94:	80800000 	.word	0x80800000

08001a98 <_init>:
 8001a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9a:	bf00      	nop
 8001a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a9e:	bc08      	pop	{r3}
 8001aa0:	469e      	mov	lr, r3
 8001aa2:	4770      	bx	lr

08001aa4 <_fini>:
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa6:	bf00      	nop
 8001aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aaa:	bc08      	pop	{r3}
 8001aac:	469e      	mov	lr, r3
 8001aae:	4770      	bx	lr
