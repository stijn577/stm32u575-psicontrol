
pwm-gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b4  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006aec  08006aec  00007aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c38  08006c38  00007c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c40  08006c40  00007c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006c44  08006c44  00007c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000000  08006c48  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000258  20000068  08006cb0  00008068  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200002c0  08006cb0  000082c0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 10 .comment      00000026  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002e956  00000000  00000000  000080c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006ba3  00000000  00000000  00036a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000169e6  00000000  00000000  0003d5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00053fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e31  00000000  00000000  000555e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032ab1  00000000  00000000  00057419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237cd  00000000  00000000  00089eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001444f1  00000000  00000000  000ad697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00003aec  00000000  00000000  001f1b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000001a4  00000000  00000000  001f5674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <deregister_tm_clones>:
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <deregister_tm_clones+0x10>)
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <deregister_tm_clones+0x14>)
 800023c:	4283      	cmp	r3, r0
 800023e:	d002      	beq.n	8000246 <deregister_tm_clones+0xe>
 8000240:	4b03      	ldr	r3, [pc, #12]	@ (8000250 <deregister_tm_clones+0x18>)
 8000242:	b103      	cbz	r3, 8000246 <deregister_tm_clones+0xe>
 8000244:	4718      	bx	r3
 8000246:	4770      	bx	lr
 8000248:	20000068 	.word	0x20000068
 800024c:	20000068 	.word	0x20000068
 8000250:	00000000 	.word	0x00000000

08000254 <register_tm_clones>:
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <register_tm_clones+0x1c>)
 8000256:	4907      	ldr	r1, [pc, #28]	@ (8000274 <register_tm_clones+0x20>)
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	1089      	asrs	r1, r1, #2
 800025c:	bf48      	it	mi
 800025e:	3101      	addmi	r1, #1
 8000260:	1049      	asrs	r1, r1, #1
 8000262:	d003      	beq.n	800026c <register_tm_clones+0x18>
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <register_tm_clones+0x24>)
 8000266:	b10b      	cbz	r3, 800026c <register_tm_clones+0x18>
 8000268:	4801      	ldr	r0, [pc, #4]	@ (8000270 <register_tm_clones+0x1c>)
 800026a:	4718      	bx	r3
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	20000068 	.word	0x20000068
 8000274:	20000068 	.word	0x20000068
 8000278:	00000000 	.word	0x00000000

0800027c <__do_global_dtors_aux>:
 800027c:	b510      	push	{r4, lr}
 800027e:	4c06      	ldr	r4, [pc, #24]	@ (8000298 <__do_global_dtors_aux+0x1c>)
 8000280:	7823      	ldrb	r3, [r4, #0]
 8000282:	b943      	cbnz	r3, 8000296 <__do_global_dtors_aux+0x1a>
 8000284:	f7ff ffd8 	bl	8000238 <deregister_tm_clones>
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <__do_global_dtors_aux+0x20>)
 800028a:	b113      	cbz	r3, 8000292 <__do_global_dtors_aux+0x16>
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x24>)
 800028e:	f3af 8000 	nop.w
 8000292:	2301      	movs	r3, #1
 8000294:	7023      	strb	r3, [r4, #0]
 8000296:	bd10      	pop	{r4, pc}
 8000298:	20000068 	.word	0x20000068
 800029c:	00000000 	.word	0x00000000
 80002a0:	08006ad4 	.word	0x08006ad4

080002a4 <frame_dummy>:
 80002a4:	b508      	push	{r3, lr}
 80002a6:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <frame_dummy+0x14>)
 80002a8:	b11b      	cbz	r3, 80002b2 <frame_dummy+0xe>
 80002aa:	4904      	ldr	r1, [pc, #16]	@ (80002bc <frame_dummy+0x18>)
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <frame_dummy+0x1c>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002b6:	e7cd      	b.n	8000254 <register_tm_clones>
 80002b8:	00000000 	.word	0x00000000
 80002bc:	2000006c 	.word	0x2000006c
 80002c0:	08006ad4 	.word	0x08006ad4

080002c4 <__libc_init_array>:
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <__libc_init_array+0x40>)
 80002c6:	b570      	push	{r4, r5, r6, lr}
 80002c8:	4d0f      	ldr	r5, [pc, #60]	@ (8000308 <__libc_init_array+0x44>)
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	eba3 0605 	sub.w	r6, r3, r5
 80002d0:	d007      	beq.n	80002e2 <__libc_init_array+0x1e>
 80002d2:	10b6      	asrs	r6, r6, #2
 80002d4:	2400      	movs	r4, #0
 80002d6:	3401      	adds	r4, #1
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d8f9      	bhi.n	80002d6 <__libc_init_array+0x12>
 80002e2:	4d0a      	ldr	r5, [pc, #40]	@ (800030c <__libc_init_array+0x48>)
 80002e4:	f006 fbf6 	bl	8006ad4 <_init>
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <__libc_init_array+0x4c>)
 80002ea:	1b5e      	subs	r6, r3, r5
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80002f2:	d006      	beq.n	8000302 <__libc_init_array+0x3e>
 80002f4:	2400      	movs	r4, #0
 80002f6:	3401      	adds	r4, #1
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d8f9      	bhi.n	80002f6 <__libc_init_array+0x32>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	08006c40 	.word	0x08006c40
 8000308:	08006c40 	.word	0x08006c40
 800030c:	08006c40 	.word	0x08006c40
 8000310:	08006c44 	.word	0x08006c44

08000314 <memset>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	0786      	lsls	r6, r0, #30
 8000318:	d047      	beq.n	80003aa <memset+0x96>
 800031a:	1e54      	subs	r4, r2, #1
 800031c:	2a00      	cmp	r2, #0
 800031e:	d03e      	beq.n	800039e <memset+0x8a>
 8000320:	b2ca      	uxtb	r2, r1
 8000322:	4603      	mov	r3, r0
 8000324:	e001      	b.n	800032a <memset+0x16>
 8000326:	3c01      	subs	r4, #1
 8000328:	d339      	bcc.n	800039e <memset+0x8a>
 800032a:	f803 2b01 	strb.w	r2, [r3], #1
 800032e:	079d      	lsls	r5, r3, #30
 8000330:	d1f9      	bne.n	8000326 <memset+0x12>
 8000332:	2c03      	cmp	r4, #3
 8000334:	d92c      	bls.n	8000390 <memset+0x7c>
 8000336:	b2cd      	uxtb	r5, r1
 8000338:	2c0f      	cmp	r4, #15
 800033a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800033e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8000342:	d935      	bls.n	80003b0 <memset+0x9c>
 8000344:	f1a4 0c10 	sub.w	ip, r4, #16
 8000348:	f103 0e10 	add.w	lr, r3, #16
 800034c:	461a      	mov	r2, r3
 800034e:	f02c 060f 	bic.w	r6, ip, #15
 8000352:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8000356:	44b6      	add	lr, r6
 8000358:	e9c2 5500 	strd	r5, r5, [r2]
 800035c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000360:	3210      	adds	r2, #16
 8000362:	4572      	cmp	r2, lr
 8000364:	d1f8      	bne.n	8000358 <memset+0x44>
 8000366:	f10c 0201 	add.w	r2, ip, #1
 800036a:	f014 0f0c 	tst.w	r4, #12
 800036e:	f004 0c0f 	and.w	ip, r4, #15
 8000372:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000376:	d013      	beq.n	80003a0 <memset+0x8c>
 8000378:	f1ac 0304 	sub.w	r3, ip, #4
 800037c:	f023 0303 	bic.w	r3, r3, #3
 8000380:	3304      	adds	r3, #4
 8000382:	4413      	add	r3, r2
 8000384:	f842 5b04 	str.w	r5, [r2], #4
 8000388:	4293      	cmp	r3, r2
 800038a:	d1fb      	bne.n	8000384 <memset+0x70>
 800038c:	f00c 0403 	and.w	r4, ip, #3
 8000390:	b12c      	cbz	r4, 800039e <memset+0x8a>
 8000392:	b2c9      	uxtb	r1, r1
 8000394:	441c      	add	r4, r3
 8000396:	f803 1b01 	strb.w	r1, [r3], #1
 800039a:	42a3      	cmp	r3, r4
 800039c:	d1fb      	bne.n	8000396 <memset+0x82>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	4664      	mov	r4, ip
 80003a2:	4613      	mov	r3, r2
 80003a4:	2c00      	cmp	r4, #0
 80003a6:	d1f4      	bne.n	8000392 <memset+0x7e>
 80003a8:	e7f9      	b.n	800039e <memset+0x8a>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4614      	mov	r4, r2
 80003ae:	e7c0      	b.n	8000332 <memset+0x1e>
 80003b0:	461a      	mov	r2, r3
 80003b2:	46a4      	mov	ip, r4
 80003b4:	e7e0      	b.n	8000378 <memset+0x64>
 80003b6:	bf00      	nop

080003b8 <__errno>:
 80003b8:	4b01      	ldr	r3, [pc, #4]	@ (80003c0 <__errno+0x8>)
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000000 	.word	0x20000000

080003c4 <memmove>:
 80003c4:	4288      	cmp	r0, r1
 80003c6:	d90e      	bls.n	80003e6 <memmove+0x22>
 80003c8:	188b      	adds	r3, r1, r2
 80003ca:	4283      	cmp	r3, r0
 80003cc:	d90b      	bls.n	80003e6 <memmove+0x22>
 80003ce:	eb00 0c02 	add.w	ip, r0, r2
 80003d2:	2a00      	cmp	r2, #0
 80003d4:	d06e      	beq.n	80004b4 <memmove+0xf0>
 80003d6:	4662      	mov	r2, ip
 80003d8:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80003dc:	4299      	cmp	r1, r3
 80003de:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80003e2:	d1f9      	bne.n	80003d8 <memmove+0x14>
 80003e4:	4770      	bx	lr
 80003e6:	2a0f      	cmp	r2, #15
 80003e8:	d80f      	bhi.n	800040a <memmove+0x46>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d05f      	beq.n	80004b4 <memmove+0xf0>
 80003f4:	f10c 0c01 	add.w	ip, ip, #1
 80003f8:	3b01      	subs	r3, #1
 80003fa:	448c      	add	ip, r1
 80003fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000400:	4561      	cmp	r1, ip
 8000402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000406:	d1f9      	bne.n	80003fc <memmove+0x38>
 8000408:	4770      	bx	lr
 800040a:	ea40 0301 	orr.w	r3, r0, r1
 800040e:	079b      	lsls	r3, r3, #30
 8000410:	d151      	bne.n	80004b6 <memmove+0xf2>
 8000412:	f1a2 0310 	sub.w	r3, r2, #16
 8000416:	f101 0c20 	add.w	ip, r1, #32
 800041a:	b570      	push	{r4, r5, r6, lr}
 800041c:	f023 050f 	bic.w	r5, r3, #15
 8000420:	f101 0e10 	add.w	lr, r1, #16
 8000424:	f100 0410 	add.w	r4, r0, #16
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	44ac      	add	ip, r5
 800042c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8000430:	f10e 0e10 	add.w	lr, lr, #16
 8000434:	3410      	adds	r4, #16
 8000436:	f844 5c20 	str.w	r5, [r4, #-32]
 800043a:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
 800043e:	f844 5c1c 	str.w	r5, [r4, #-28]
 8000442:	f85e 5c18 	ldr.w	r5, [lr, #-24]
 8000446:	f844 5c18 	str.w	r5, [r4, #-24]
 800044a:	f85e 5c14 	ldr.w	r5, [lr, #-20]
 800044e:	45e6      	cmp	lr, ip
 8000450:	f844 5c14 	str.w	r5, [r4, #-20]
 8000454:	d1ea      	bne.n	800042c <memmove+0x68>
 8000456:	3301      	adds	r3, #1
 8000458:	f012 0f0c 	tst.w	r2, #12
 800045c:	f002 0c0f 	and.w	ip, r2, #15
 8000460:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8000464:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8000468:	d029      	beq.n	80004be <memmove+0xfa>
 800046a:	f1ac 0c04 	sub.w	ip, ip, #4
 800046e:	1f1c      	subs	r4, r3, #4
 8000470:	468e      	mov	lr, r1
 8000472:	f02c 0603 	bic.w	r6, ip, #3
 8000476:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800047a:	441e      	add	r6, r3
 800047c:	f85e 5b04 	ldr.w	r5, [lr], #4
 8000480:	f844 5f04 	str.w	r5, [r4, #4]!
 8000484:	42b4      	cmp	r4, r6
 8000486:	d1f9      	bne.n	800047c <memmove+0xb8>
 8000488:	f10c 0401 	add.w	r4, ip, #1
 800048c:	f002 0203 	and.w	r2, r2, #3
 8000490:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8000498:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 800049c:	b14a      	cbz	r2, 80004b2 <memmove+0xee>
 800049e:	f10c 0c01 	add.w	ip, ip, #1
 80004a2:	3b01      	subs	r3, #1
 80004a4:	448c      	add	ip, r1
 80004a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80004aa:	4561      	cmp	r1, ip
 80004ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80004b0:	d1f9      	bne.n	80004a6 <memmove+0xe2>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	4770      	bx	lr
 80004b6:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80004ba:	4603      	mov	r3, r0
 80004bc:	e79a      	b.n	80003f4 <memmove+0x30>
 80004be:	4662      	mov	r2, ip
 80004c0:	e7ea      	b.n	8000498 <memmove+0xd4>
 80004c2:	bf00      	nop

080004c4 <_iprintf_r>:
 80004c4:	b40e      	push	{r1, r2, r3}
 80004c6:	b500      	push	{lr}
 80004c8:	b082      	sub	sp, #8
 80004ca:	6881      	ldr	r1, [r0, #8]
 80004cc:	ab03      	add	r3, sp, #12
 80004ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	f000 f860 	bl	8000598 <_vfiprintf_r>
 80004d8:	b002      	add	sp, #8
 80004da:	f85d eb04 	ldr.w	lr, [sp], #4
 80004de:	b003      	add	sp, #12
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <iprintf>:
 80004e4:	b40f      	push	{r0, r1, r2, r3}
 80004e6:	4908      	ldr	r1, [pc, #32]	@ (8000508 <iprintf+0x24>)
 80004e8:	b500      	push	{lr}
 80004ea:	b083      	sub	sp, #12
 80004ec:	6808      	ldr	r0, [r1, #0]
 80004ee:	ab04      	add	r3, sp, #16
 80004f0:	6881      	ldr	r1, [r0, #8]
 80004f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	f000 f84e 	bl	8000598 <_vfiprintf_r>
 80004fc:	b003      	add	sp, #12
 80004fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8000502:	b004      	add	sp, #16
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000

0800050c <__sfputc_r>:
 800050c:	6893      	ldr	r3, [r2, #8]
 800050e:	3b01      	subs	r3, #1
 8000510:	2b00      	cmp	r3, #0
 8000512:	6093      	str	r3, [r2, #8]
 8000514:	da11      	bge.n	800053a <__sfputc_r+0x2e>
 8000516:	b410      	push	{r4}
 8000518:	6994      	ldr	r4, [r2, #24]
 800051a:	42a3      	cmp	r3, r4
 800051c:	db09      	blt.n	8000532 <__sfputc_r+0x26>
 800051e:	290a      	cmp	r1, #10
 8000520:	d007      	beq.n	8000532 <__sfputc_r+0x26>
 8000522:	6813      	ldr	r3, [r2, #0]
 8000524:	1c58      	adds	r0, r3, #1
 8000526:	6010      	str	r0, [r2, #0]
 8000528:	4608      	mov	r0, r1
 800052a:	7019      	strb	r1, [r3, #0]
 800052c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000536:	f000 b957 	b.w	80007e8 <__swbuf_r>
 800053a:	6813      	ldr	r3, [r2, #0]
 800053c:	1c58      	adds	r0, r3, #1
 800053e:	6010      	str	r0, [r2, #0]
 8000540:	4608      	mov	r0, r1
 8000542:	7019      	strb	r1, [r3, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <__sfputs_r>:
 8000548:	b19b      	cbz	r3, 8000572 <__sfputs_r+0x2a>
 800054a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054c:	4413      	add	r3, r2
 800054e:	4606      	mov	r6, r0
 8000550:	460f      	mov	r7, r1
 8000552:	1e54      	subs	r4, r2, #1
 8000554:	1e5d      	subs	r5, r3, #1
 8000556:	e001      	b.n	800055c <__sfputs_r+0x14>
 8000558:	42ac      	cmp	r4, r5
 800055a:	d008      	beq.n	800056e <__sfputs_r+0x26>
 800055c:	463a      	mov	r2, r7
 800055e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000562:	4630      	mov	r0, r6
 8000564:	f7ff ffd2 	bl	800050c <__sfputc_r>
 8000568:	1c43      	adds	r3, r0, #1
 800056a:	d1f5      	bne.n	8000558 <__sfputs_r+0x10>
 800056c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800056e:	2000      	movs	r0, #0
 8000570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000572:	2000      	movs	r0, #0
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__sprint_r>:
 8000578:	6893      	ldr	r3, [r2, #8]
 800057a:	b510      	push	{r4, lr}
 800057c:	4614      	mov	r4, r2
 800057e:	b91b      	cbnz	r3, 8000588 <__sprint_r+0x10>
 8000580:	4618      	mov	r0, r3
 8000582:	2300      	movs	r3, #0
 8000584:	6063      	str	r3, [r4, #4]
 8000586:	bd10      	pop	{r4, pc}
 8000588:	f000 f97a 	bl	8000880 <__sfvwrite_r>
 800058c:	2300      	movs	r3, #0
 800058e:	60a3      	str	r3, [r4, #8]
 8000590:	2300      	movs	r3, #0
 8000592:	6063      	str	r3, [r4, #4]
 8000594:	bd10      	pop	{r4, pc}
 8000596:	bf00      	nop

08000598 <_vfiprintf_r>:
 8000598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800059c:	468b      	mov	fp, r1
 800059e:	b09f      	sub	sp, #124	@ 0x7c
 80005a0:	4616      	mov	r6, r2
 80005a2:	461c      	mov	r4, r3
 80005a4:	4682      	mov	sl, r0
 80005a6:	b118      	cbz	r0, 80005b0 <_vfiprintf_r+0x18>
 80005a8:	6a03      	ldr	r3, [r0, #32]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f000 8103 	beq.w	80007b6 <_vfiprintf_r+0x21e>
 80005b0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80005b4:	0718      	lsls	r0, r3, #28
 80005b6:	f140 8098 	bpl.w	80006ea <_vfiprintf_r+0x152>
 80005ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f000 8093 	beq.w	80006ea <_vfiprintf_r+0x152>
 80005c4:	2300      	movs	r3, #0
 80005c6:	4f7d      	ldr	r7, [pc, #500]	@ (80007bc <_vfiprintf_r+0x224>)
 80005c8:	f04f 0801 	mov.w	r8, #1
 80005cc:	9405      	str	r4, [sp, #20]
 80005ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80005d0:	f243 0320 	movw	r3, #12320	@ 0x3020
 80005d4:	f8ad 3031 	strh.w	r3, [sp, #49]	@ 0x31
 80005d8:	7833      	ldrb	r3, [r6, #0]
 80005da:	4635      	mov	r5, r6
 80005dc:	b14b      	cbz	r3, 80005f2 <_vfiprintf_r+0x5a>
 80005de:	2b25      	cmp	r3, #37	@ 0x25
 80005e0:	d007      	beq.n	80005f2 <_vfiprintf_r+0x5a>
 80005e2:	462a      	mov	r2, r5
 80005e4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80005e8:	b10b      	cbz	r3, 80005ee <_vfiprintf_r+0x56>
 80005ea:	2b25      	cmp	r3, #37	@ 0x25
 80005ec:	d1f9      	bne.n	80005e2 <_vfiprintf_r+0x4a>
 80005ee:	1ba9      	subs	r1, r5, r6
 80005f0:	d160      	bne.n	80006b4 <_vfiprintf_r+0x11c>
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d071      	beq.n	80006da <_vfiprintf_r+0x142>
 80005f6:	2300      	movs	r3, #0
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005fc:	3501      	adds	r5, #1
 80005fe:	9306      	str	r3, [sp, #24]
 8000600:	9309      	str	r3, [sp, #36]	@ 0x24
 8000602:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8000606:	931c      	str	r3, [sp, #112]	@ 0x70
 8000608:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800060c:	e005      	b.n	800061a <_vfiprintf_r+0x82>
 800060e:	1bc0      	subs	r0, r0, r7
 8000610:	4625      	mov	r5, r4
 8000612:	fa08 f000 	lsl.w	r0, r8, r0
 8000616:	4303      	orrs	r3, r0
 8000618:	9306      	str	r3, [sp, #24]
 800061a:	462c      	mov	r4, r5
 800061c:	2205      	movs	r2, #5
 800061e:	4638      	mov	r0, r7
 8000620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000624:	f001 f912 	bl	800184c <memchr>
 8000628:	9b06      	ldr	r3, [sp, #24]
 800062a:	4626      	mov	r6, r4
 800062c:	2800      	cmp	r0, #0
 800062e:	d1ee      	bne.n	800060e <_vfiprintf_r+0x76>
 8000630:	06d9      	lsls	r1, r3, #27
 8000632:	d502      	bpl.n	800063a <_vfiprintf_r+0xa2>
 8000634:	2220      	movs	r2, #32
 8000636:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800063a:	071a      	lsls	r2, r3, #28
 800063c:	d502      	bpl.n	8000644 <_vfiprintf_r+0xac>
 800063e:	222b      	movs	r2, #43	@ 0x2b
 8000640:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8000644:	7829      	ldrb	r1, [r5, #0]
 8000646:	292a      	cmp	r1, #42	@ 0x2a
 8000648:	d159      	bne.n	80006fe <_vfiprintf_r+0x166>
 800064a:	9a05      	ldr	r2, [sp, #20]
 800064c:	1d11      	adds	r1, r2, #4
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	2a00      	cmp	r2, #0
 8000652:	9105      	str	r1, [sp, #20]
 8000654:	f2c0 8089 	blt.w	800076a <_vfiprintf_r+0x1d2>
 8000658:	9209      	str	r2, [sp, #36]	@ 0x24
 800065a:	7869      	ldrb	r1, [r5, #1]
 800065c:	292e      	cmp	r1, #46	@ 0x2e
 800065e:	d062      	beq.n	8000726 <_vfiprintf_r+0x18e>
 8000660:	4c57      	ldr	r4, [pc, #348]	@ (80007c0 <_vfiprintf_r+0x228>)
 8000662:	2203      	movs	r2, #3
 8000664:	4620      	mov	r0, r4
 8000666:	f001 f8f1 	bl	800184c <memchr>
 800066a:	b130      	cbz	r0, 800067a <_vfiprintf_r+0xe2>
 800066c:	1b00      	subs	r0, r0, r4
 800066e:	2240      	movs	r2, #64	@ 0x40
 8000670:	9b06      	ldr	r3, [sp, #24]
 8000672:	3601      	adds	r6, #1
 8000674:	4082      	lsls	r2, r0
 8000676:	4313      	orrs	r3, r2
 8000678:	9306      	str	r3, [sp, #24]
 800067a:	f816 1b01 	ldrb.w	r1, [r6], #1
 800067e:	2206      	movs	r2, #6
 8000680:	4850      	ldr	r0, [pc, #320]	@ (80007c4 <_vfiprintf_r+0x22c>)
 8000682:	f88d 1030 	strb.w	r1, [sp, #48]	@ 0x30
 8000686:	f001 f8e1 	bl	800184c <memchr>
 800068a:	2800      	cmp	r0, #0
 800068c:	d073      	beq.n	8000776 <_vfiprintf_r+0x1de>
 800068e:	4b4e      	ldr	r3, [pc, #312]	@ (80007c8 <_vfiprintf_r+0x230>)
 8000690:	2b00      	cmp	r3, #0
 8000692:	d05a      	beq.n	800074a <_vfiprintf_r+0x1b2>
 8000694:	ac05      	add	r4, sp, #20
 8000696:	4b4d      	ldr	r3, [pc, #308]	@ (80007cc <_vfiprintf_r+0x234>)
 8000698:	465a      	mov	r2, fp
 800069a:	a906      	add	r1, sp, #24
 800069c:	4650      	mov	r0, sl
 800069e:	9400      	str	r4, [sp, #0]
 80006a0:	f3af 8000 	nop.w
 80006a4:	4681      	mov	r9, r0
 80006a6:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80006aa:	d016      	beq.n	80006da <_vfiprintf_r+0x142>
 80006ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80006ae:	444b      	add	r3, r9
 80006b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80006b2:	e791      	b.n	80005d8 <_vfiprintf_r+0x40>
 80006b4:	3e01      	subs	r6, #1
 80006b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80006ba:	9503      	str	r5, [sp, #12]
 80006bc:	4689      	mov	r9, r1
 80006be:	1874      	adds	r4, r6, r1
 80006c0:	4635      	mov	r5, r6
 80006c2:	4616      	mov	r6, r2
 80006c4:	e001      	b.n	80006ca <_vfiprintf_r+0x132>
 80006c6:	42a5      	cmp	r5, r4
 80006c8:	d046      	beq.n	8000758 <_vfiprintf_r+0x1c0>
 80006ca:	465a      	mov	r2, fp
 80006cc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80006d0:	4650      	mov	r0, sl
 80006d2:	f7ff ff1b 	bl	800050c <__sfputc_r>
 80006d6:	3001      	adds	r0, #1
 80006d8:	d1f5      	bne.n	80006c6 <_vfiprintf_r+0x12e>
 80006da:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80006de:	065b      	lsls	r3, r3, #25
 80006e0:	d40a      	bmi.n	80006f8 <_vfiprintf_r+0x160>
 80006e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80006e4:	b01f      	add	sp, #124	@ 0x7c
 80006e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ea:	4659      	mov	r1, fp
 80006ec:	4650      	mov	r0, sl
 80006ee:	f000 fd45 	bl	800117c <__swsetup_r>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	f43f af66 	beq.w	80005c4 <_vfiprintf_r+0x2c>
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006fc:	e7f2      	b.n	80006e4 <_vfiprintf_r+0x14c>
 80006fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000702:	2a09      	cmp	r2, #9
 8000704:	d855      	bhi.n	80007b2 <_vfiprintf_r+0x21a>
 8000706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000708:	e000      	b.n	800070c <_vfiprintf_r+0x174>
 800070a:	3401      	adds	r4, #1
 800070c:	7821      	ldrb	r1, [r4, #0]
 800070e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000712:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000716:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800071a:	2a09      	cmp	r2, #9
 800071c:	d9f5      	bls.n	800070a <_vfiprintf_r+0x172>
 800071e:	292e      	cmp	r1, #46	@ 0x2e
 8000720:	4626      	mov	r6, r4
 8000722:	9309      	str	r3, [sp, #36]	@ 0x24
 8000724:	d19c      	bne.n	8000660 <_vfiprintf_r+0xc8>
 8000726:	7871      	ldrb	r1, [r6, #1]
 8000728:	292a      	cmp	r1, #42	@ 0x2a
 800072a:	d12e      	bne.n	800078a <_vfiprintf_r+0x1f2>
 800072c:	9b05      	ldr	r3, [sp, #20]
 800072e:	1cb2      	adds	r2, r6, #2
 8000730:	1d19      	adds	r1, r3, #4
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	9307      	str	r3, [sp, #28]
 8000738:	9105      	str	r1, [sp, #20]
 800073a:	bfb8      	it	lt
 800073c:	f04f 33ff 	movlt.w	r3, #4294967295	@ 0xffffffff
 8000740:	78b1      	ldrb	r1, [r6, #2]
 8000742:	4616      	mov	r6, r2
 8000744:	bfb8      	it	lt
 8000746:	9307      	strlt	r3, [sp, #28]
 8000748:	e78a      	b.n	8000660 <_vfiprintf_r+0xc8>
 800074a:	9b05      	ldr	r3, [sp, #20]
 800074c:	3307      	adds	r3, #7
 800074e:	f023 0307 	bic.w	r3, r3, #7
 8000752:	3308      	adds	r3, #8
 8000754:	9305      	str	r3, [sp, #20]
 8000756:	e7a9      	b.n	80006ac <_vfiprintf_r+0x114>
 8000758:	4649      	mov	r1, r9
 800075a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800075c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8000760:	440b      	add	r3, r1
 8000762:	9d03      	ldr	r5, [sp, #12]
 8000764:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000766:	7873      	ldrb	r3, [r6, #1]
 8000768:	e743      	b.n	80005f2 <_vfiprintf_r+0x5a>
 800076a:	4252      	negs	r2, r2
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	9209      	str	r2, [sp, #36]	@ 0x24
 8000772:	9306      	str	r3, [sp, #24]
 8000774:	e771      	b.n	800065a <_vfiprintf_r+0xc2>
 8000776:	a805      	add	r0, sp, #20
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <_vfiprintf_r+0x234>)
 800077a:	465a      	mov	r2, fp
 800077c:	a906      	add	r1, sp, #24
 800077e:	9000      	str	r0, [sp, #0]
 8000780:	4650      	mov	r0, sl
 8000782:	f000 fe93 	bl	80014ac <_printf_i>
 8000786:	4681      	mov	r9, r0
 8000788:	e78d      	b.n	80006a6 <_vfiprintf_r+0x10e>
 800078a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800078e:	2300      	movs	r3, #0
 8000790:	3601      	adds	r6, #1
 8000792:	2a09      	cmp	r2, #9
 8000794:	9307      	str	r3, [sp, #28]
 8000796:	f63f af63 	bhi.w	8000660 <_vfiprintf_r+0xc8>
 800079a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800079e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80007a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80007aa:	2a09      	cmp	r2, #9
 80007ac:	d9f5      	bls.n	800079a <_vfiprintf_r+0x202>
 80007ae:	9307      	str	r3, [sp, #28]
 80007b0:	e756      	b.n	8000660 <_vfiprintf_r+0xc8>
 80007b2:	462e      	mov	r6, r5
 80007b4:	e752      	b.n	800065c <_vfiprintf_r+0xc4>
 80007b6:	f000 facd 	bl	8000d54 <__sinit>
 80007ba:	e6f9      	b.n	80005b0 <_vfiprintf_r+0x18>
 80007bc:	08006afc 	.word	0x08006afc
 80007c0:	08006b04 	.word	0x08006b04
 80007c4:	08006b08 	.word	0x08006b08
 80007c8:	00000000 	.word	0x00000000
 80007cc:	08000549 	.word	0x08000549

080007d0 <vfiprintf>:
 80007d0:	b410      	push	{r4}
 80007d2:	4c04      	ldr	r4, [pc, #16]	@ (80007e4 <vfiprintf+0x14>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	460a      	mov	r2, r1
 80007d8:	4601      	mov	r1, r0
 80007da:	6820      	ldr	r0, [r4, #0]
 80007dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007e0:	f7ff beda 	b.w	8000598 <_vfiprintf_r>
 80007e4:	20000000 	.word	0x20000000

080007e8 <__swbuf_r>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	460d      	mov	r5, r1
 80007ec:	4606      	mov	r6, r0
 80007ee:	4614      	mov	r4, r2
 80007f0:	b110      	cbz	r0, 80007f8 <__swbuf_r+0x10>
 80007f2:	6a03      	ldr	r3, [r0, #32]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d037      	beq.n	8000868 <__swbuf_r+0x80>
 80007f8:	69a2      	ldr	r2, [r4, #24]
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	60a2      	str	r2, [r4, #8]
 80007fe:	071a      	lsls	r2, r3, #28
 8000800:	d519      	bpl.n	8000836 <__swbuf_r+0x4e>
 8000802:	6923      	ldr	r3, [r4, #16]
 8000804:	b1bb      	cbz	r3, 8000836 <__swbuf_r+0x4e>
 8000806:	6822      	ldr	r2, [r4, #0]
 8000808:	b2ed      	uxtb	r5, r5
 800080a:	6961      	ldr	r1, [r4, #20]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	462f      	mov	r7, r5
 8000810:	4299      	cmp	r1, r3
 8000812:	dd20      	ble.n	8000856 <__swbuf_r+0x6e>
 8000814:	3301      	adds	r3, #1
 8000816:	68a1      	ldr	r1, [r4, #8]
 8000818:	3901      	subs	r1, #1
 800081a:	60a1      	str	r1, [r4, #8]
 800081c:	1c51      	adds	r1, r2, #1
 800081e:	6021      	str	r1, [r4, #0]
 8000820:	7015      	strb	r5, [r2, #0]
 8000822:	6962      	ldr	r2, [r4, #20]
 8000824:	429a      	cmp	r2, r3
 8000826:	d00d      	beq.n	8000844 <__swbuf_r+0x5c>
 8000828:	89a3      	ldrh	r3, [r4, #12]
 800082a:	07db      	lsls	r3, r3, #31
 800082c:	d501      	bpl.n	8000832 <__swbuf_r+0x4a>
 800082e:	2d0a      	cmp	r5, #10
 8000830:	d008      	beq.n	8000844 <__swbuf_r+0x5c>
 8000832:	4638      	mov	r0, r7
 8000834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000836:	4621      	mov	r1, r4
 8000838:	4630      	mov	r0, r6
 800083a:	f000 fc9f 	bl	800117c <__swsetup_r>
 800083e:	b938      	cbnz	r0, 8000850 <__swbuf_r+0x68>
 8000840:	6923      	ldr	r3, [r4, #16]
 8000842:	e7e0      	b.n	8000806 <__swbuf_r+0x1e>
 8000844:	4621      	mov	r1, r4
 8000846:	4630      	mov	r0, r6
 8000848:	f000 fb3c 	bl	8000ec4 <_fflush_r>
 800084c:	2800      	cmp	r0, #0
 800084e:	d0f0      	beq.n	8000832 <__swbuf_r+0x4a>
 8000850:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000854:	e7ed      	b.n	8000832 <__swbuf_r+0x4a>
 8000856:	4621      	mov	r1, r4
 8000858:	4630      	mov	r0, r6
 800085a:	f000 fb33 	bl	8000ec4 <_fflush_r>
 800085e:	2800      	cmp	r0, #0
 8000860:	d1f6      	bne.n	8000850 <__swbuf_r+0x68>
 8000862:	6822      	ldr	r2, [r4, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	e7d6      	b.n	8000816 <__swbuf_r+0x2e>
 8000868:	f000 fa74 	bl	8000d54 <__sinit>
 800086c:	e7c4      	b.n	80007f8 <__swbuf_r+0x10>
 800086e:	bf00      	nop

08000870 <__swbuf>:
 8000870:	4b02      	ldr	r3, [pc, #8]	@ (800087c <__swbuf+0xc>)
 8000872:	460a      	mov	r2, r1
 8000874:	4601      	mov	r1, r0
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	f7ff bfb6 	b.w	80007e8 <__swbuf_r>
 800087c:	20000000 	.word	0x20000000

08000880 <__sfvwrite_r>:
 8000880:	6893      	ldr	r3, [r2, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f000 80f9 	beq.w	8000a7a <__sfvwrite_r+0x1fa>
 8000888:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 800088c:	f01c 0f08 	tst.w	ip, #8
 8000890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000894:	4690      	mov	r8, r2
 8000896:	b083      	sub	sp, #12
 8000898:	4681      	mov	r9, r0
 800089a:	460c      	mov	r4, r1
 800089c:	d031      	beq.n	8000902 <__sfvwrite_r+0x82>
 800089e:	690b      	ldr	r3, [r1, #16]
 80008a0:	b37b      	cbz	r3, 8000902 <__sfvwrite_r+0x82>
 80008a2:	f01c 0702 	ands.w	r7, ip, #2
 80008a6:	f8d8 6000 	ldr.w	r6, [r8]
 80008aa:	d038      	beq.n	800091e <__sfvwrite_r+0x9e>
 80008ac:	2700      	movs	r7, #0
 80008ae:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80008b2:	6a21      	ldr	r1, [r4, #32]
 80008b4:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 8000b7c <__sfvwrite_r+0x2fc>
 80008b8:	463d      	mov	r5, r7
 80008ba:	4555      	cmp	r5, sl
 80008bc:	462b      	mov	r3, r5
 80008be:	463a      	mov	r2, r7
 80008c0:	4648      	mov	r0, r9
 80008c2:	bf28      	it	cs
 80008c4:	4653      	movcs	r3, sl
 80008c6:	b1c5      	cbz	r5, 80008fa <__sfvwrite_r+0x7a>
 80008c8:	47d8      	blx	fp
 80008ca:	2800      	cmp	r0, #0
 80008cc:	f340 80cb 	ble.w	8000a66 <__sfvwrite_r+0x1e6>
 80008d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80008d4:	4407      	add	r7, r0
 80008d6:	1a2d      	subs	r5, r5, r0
 80008d8:	1a1b      	subs	r3, r3, r0
 80008da:	f8c8 3008 	str.w	r3, [r8, #8]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 80b7 	beq.w	8000a52 <__sfvwrite_r+0x1d2>
 80008e4:	4555      	cmp	r5, sl
 80008e6:	462b      	mov	r3, r5
 80008e8:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80008ec:	463a      	mov	r2, r7
 80008ee:	6a21      	ldr	r1, [r4, #32]
 80008f0:	bf28      	it	cs
 80008f2:	4653      	movcs	r3, sl
 80008f4:	4648      	mov	r0, r9
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d1e6      	bne.n	80008c8 <__sfvwrite_r+0x48>
 80008fa:	e9d6 7500 	ldrd	r7, r5, [r6]
 80008fe:	3608      	adds	r6, #8
 8000900:	e7db      	b.n	80008ba <__sfvwrite_r+0x3a>
 8000902:	4621      	mov	r1, r4
 8000904:	4648      	mov	r0, r9
 8000906:	f000 fc39 	bl	800117c <__swsetup_r>
 800090a:	2800      	cmp	r0, #0
 800090c:	f040 80b0 	bne.w	8000a70 <__sfvwrite_r+0x1f0>
 8000910:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000914:	f8d8 6000 	ldr.w	r6, [r8]
 8000918:	f01c 0702 	ands.w	r7, ip, #2
 800091c:	d1c6      	bne.n	80008ac <__sfvwrite_r+0x2c>
 800091e:	f01c 0a01 	ands.w	sl, ip, #1
 8000922:	d164      	bne.n	80009ee <__sfvwrite_r+0x16e>
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	4657      	mov	r7, sl
 8000928:	68a1      	ldr	r1, [r4, #8]
 800092a:	4618      	mov	r0, r3
 800092c:	468b      	mov	fp, r1
 800092e:	2f00      	cmp	r7, #0
 8000930:	d059      	beq.n	80009e6 <__sfvwrite_r+0x166>
 8000932:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 8000936:	f000 80b6 	beq.w	8000aa6 <__sfvwrite_r+0x226>
 800093a:	42b9      	cmp	r1, r7
 800093c:	460a      	mov	r2, r1
 800093e:	f200 80e2 	bhi.w	8000b06 <__sfvwrite_r+0x286>
 8000942:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 8000946:	d030      	beq.n	80009aa <__sfvwrite_r+0x12a>
 8000948:	6921      	ldr	r1, [r4, #16]
 800094a:	1a5d      	subs	r5, r3, r1
 800094c:	6963      	ldr	r3, [r4, #20]
 800094e:	eb13 0343 	adds.w	r3, r3, r3, lsl #1
 8000952:	bf48      	it	mi
 8000954:	3301      	addmi	r3, #1
 8000956:	ea4f 0b63 	mov.w	fp, r3, asr #1
 800095a:	1c6b      	adds	r3, r5, #1
 800095c:	443b      	add	r3, r7
 800095e:	465a      	mov	r2, fp
 8000960:	455b      	cmp	r3, fp
 8000962:	d901      	bls.n	8000968 <__sfvwrite_r+0xe8>
 8000964:	469b      	mov	fp, r3
 8000966:	461a      	mov	r2, r3
 8000968:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 800096c:	f000 80ea 	beq.w	8000b44 <__sfvwrite_r+0x2c4>
 8000970:	4611      	mov	r1, r2
 8000972:	4648      	mov	r0, r9
 8000974:	f000 fb0c 	bl	8000f90 <_malloc_r>
 8000978:	2800      	cmp	r0, #0
 800097a:	f000 80f9 	beq.w	8000b70 <__sfvwrite_r+0x2f0>
 800097e:	462a      	mov	r2, r5
 8000980:	6921      	ldr	r1, [r4, #16]
 8000982:	9000      	str	r0, [sp, #0]
 8000984:	f000 fc5c 	bl	8001240 <memcpy>
 8000988:	89a2      	ldrh	r2, [r4, #12]
 800098a:	9b00      	ldr	r3, [sp, #0]
 800098c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8000990:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000994:	81a2      	strh	r2, [r4, #12]
 8000996:	1958      	adds	r0, r3, r5
 8000998:	f8c4 b014 	str.w	fp, [r4, #20]
 800099c:	ebab 0505 	sub.w	r5, fp, r5
 80009a0:	463a      	mov	r2, r7
 80009a2:	46bb      	mov	fp, r7
 80009a4:	6123      	str	r3, [r4, #16]
 80009a6:	60a5      	str	r5, [r4, #8]
 80009a8:	6020      	str	r0, [r4, #0]
 80009aa:	4651      	mov	r1, sl
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	f7ff fd09 	bl	80003c4 <memmove>
 80009b2:	68a1      	ldr	r1, [r4, #8]
 80009b4:	6823      	ldr	r3, [r4, #0]
 80009b6:	463d      	mov	r5, r7
 80009b8:	9a00      	ldr	r2, [sp, #0]
 80009ba:	eba1 010b 	sub.w	r1, r1, fp
 80009be:	2700      	movs	r7, #0
 80009c0:	441a      	add	r2, r3
 80009c2:	60a1      	str	r1, [r4, #8]
 80009c4:	6022      	str	r2, [r4, #0]
 80009c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80009ca:	44aa      	add	sl, r5
 80009cc:	1b5b      	subs	r3, r3, r5
 80009ce:	f8c8 3008 	str.w	r3, [r8, #8]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d03d      	beq.n	8000a52 <__sfvwrite_r+0x1d2>
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	68a1      	ldr	r1, [r4, #8]
 80009da:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80009de:	4618      	mov	r0, r3
 80009e0:	468b      	mov	fp, r1
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d1a5      	bne.n	8000932 <__sfvwrite_r+0xb2>
 80009e6:	e9d6 a700 	ldrd	sl, r7, [r6]
 80009ea:	3608      	adds	r6, #8
 80009ec:	e79d      	b.n	800092a <__sfvwrite_r+0xaa>
 80009ee:	4638      	mov	r0, r7
 80009f0:	46bb      	mov	fp, r7
 80009f2:	463d      	mov	r5, r7
 80009f4:	9700      	str	r7, [sp, #0]
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d041      	beq.n	8000a7e <__sfvwrite_r+0x1fe>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d046      	beq.n	8000a8c <__sfvwrite_r+0x20c>
 80009fe:	9a00      	ldr	r2, [sp, #0]
 8000a00:	68a1      	ldr	r1, [r4, #8]
 8000a02:	42aa      	cmp	r2, r5
 8000a04:	6963      	ldr	r3, [r4, #20]
 8000a06:	6820      	ldr	r0, [r4, #0]
 8000a08:	bf28      	it	cs
 8000a0a:	462a      	movcs	r2, r5
 8000a0c:	eb03 0a01 	add.w	sl, r3, r1
 8000a10:	6921      	ldr	r1, [r4, #16]
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d902      	bls.n	8000a1c <__sfvwrite_r+0x19c>
 8000a16:	4552      	cmp	r2, sl
 8000a18:	f300 8085 	bgt.w	8000b26 <__sfvwrite_r+0x2a6>
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	dc75      	bgt.n	8000b0c <__sfvwrite_r+0x28c>
 8000a20:	465a      	mov	r2, fp
 8000a22:	6a21      	ldr	r1, [r4, #32]
 8000a24:	4648      	mov	r0, r9
 8000a26:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8000a28:	47b8      	blx	r7
 8000a2a:	f1b0 0a00 	subs.w	sl, r0, #0
 8000a2e:	dd1a      	ble.n	8000a66 <__sfvwrite_r+0x1e6>
 8000a30:	9b00      	ldr	r3, [sp, #0]
 8000a32:	ebb3 030a 	subs.w	r3, r3, sl
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	d00f      	beq.n	8000a5a <__sfvwrite_r+0x1da>
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000a40:	44d3      	add	fp, sl
 8000a42:	eba5 050a 	sub.w	r5, r5, sl
 8000a46:	eba3 030a 	sub.w	r3, r3, sl
 8000a4a:	f8c8 3008 	str.w	r3, [r8, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1d1      	bne.n	80009f6 <__sfvwrite_r+0x176>
 8000a52:	2000      	movs	r0, #0
 8000a54:	b003      	add	sp, #12
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5a:	4621      	mov	r1, r4
 8000a5c:	4648      	mov	r0, r9
 8000a5e:	f000 fa31 	bl	8000ec4 <_fflush_r>
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d0ea      	beq.n	8000a3c <__sfvwrite_r+0x1bc>
 8000a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a6e:	81a3      	strh	r3, [r4, #12]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a74:	b003      	add	sp, #12
 8000a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	6875      	ldr	r5, [r6, #4]
 8000a80:	4633      	mov	r3, r6
 8000a82:	3608      	adds	r6, #8
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d0fa      	beq.n	8000a7e <__sfvwrite_r+0x1fe>
 8000a88:	f8d3 b000 	ldr.w	fp, [r3]
 8000a8c:	462a      	mov	r2, r5
 8000a8e:	210a      	movs	r1, #10
 8000a90:	4658      	mov	r0, fp
 8000a92:	f000 fedb 	bl	800184c <memchr>
 8000a96:	2800      	cmp	r0, #0
 8000a98:	d067      	beq.n	8000b6a <__sfvwrite_r+0x2ea>
 8000a9a:	3001      	adds	r0, #1
 8000a9c:	eba0 030b 	sub.w	r3, r0, fp
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	e7ac      	b.n	8000a00 <__sfvwrite_r+0x180>
 8000aa6:	6922      	ldr	r2, [r4, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d314      	bcc.n	8000ad6 <__sfvwrite_r+0x256>
 8000aac:	6962      	ldr	r2, [r4, #20]
 8000aae:	42ba      	cmp	r2, r7
 8000ab0:	d811      	bhi.n	8000ad6 <__sfvwrite_r+0x256>
 8000ab2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000ab6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8000ab8:	6a21      	ldr	r1, [r4, #32]
 8000aba:	4648      	mov	r0, r9
 8000abc:	42bb      	cmp	r3, r7
 8000abe:	bf28      	it	cs
 8000ac0:	463b      	movcs	r3, r7
 8000ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ac6:	fb02 f303 	mul.w	r3, r2, r3
 8000aca:	4652      	mov	r2, sl
 8000acc:	47a8      	blx	r5
 8000ace:	1e05      	subs	r5, r0, #0
 8000ad0:	ddc9      	ble.n	8000a66 <__sfvwrite_r+0x1e6>
 8000ad2:	1b7f      	subs	r7, r7, r5
 8000ad4:	e777      	b.n	80009c6 <__sfvwrite_r+0x146>
 8000ad6:	42b9      	cmp	r1, r7
 8000ad8:	4618      	mov	r0, r3
 8000ada:	bf28      	it	cs
 8000adc:	4639      	movcs	r1, r7
 8000ade:	460d      	mov	r5, r1
 8000ae0:	4651      	mov	r1, sl
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	f7ff fc6e 	bl	80003c4 <memmove>
 8000ae8:	68a1      	ldr	r1, [r4, #8]
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	1b49      	subs	r1, r1, r5
 8000aee:	442b      	add	r3, r5
 8000af0:	60a1      	str	r1, [r4, #8]
 8000af2:	6023      	str	r3, [r4, #0]
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d1ec      	bne.n	8000ad2 <__sfvwrite_r+0x252>
 8000af8:	4621      	mov	r1, r4
 8000afa:	4648      	mov	r0, r9
 8000afc:	f000 f9e2 	bl	8000ec4 <_fflush_r>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d0e6      	beq.n	8000ad2 <__sfvwrite_r+0x252>
 8000b04:	e7af      	b.n	8000a66 <__sfvwrite_r+0x1e6>
 8000b06:	46bb      	mov	fp, r7
 8000b08:	463a      	mov	r2, r7
 8000b0a:	e74e      	b.n	80009aa <__sfvwrite_r+0x12a>
 8000b0c:	4659      	mov	r1, fp
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	f7ff fc58 	bl	80003c4 <memmove>
 8000b14:	9a01      	ldr	r2, [sp, #4]
 8000b16:	68a3      	ldr	r3, [r4, #8]
 8000b18:	4692      	mov	sl, r2
 8000b1a:	1a9b      	subs	r3, r3, r2
 8000b1c:	60a3      	str	r3, [r4, #8]
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	6023      	str	r3, [r4, #0]
 8000b24:	e784      	b.n	8000a30 <__sfvwrite_r+0x1b0>
 8000b26:	4659      	mov	r1, fp
 8000b28:	4652      	mov	r2, sl
 8000b2a:	f7ff fc4b 	bl	80003c4 <memmove>
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	4621      	mov	r1, r4
 8000b32:	4648      	mov	r0, r9
 8000b34:	4453      	add	r3, sl
 8000b36:	6023      	str	r3, [r4, #0]
 8000b38:	f000 f9c4 	bl	8000ec4 <_fflush_r>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	f43f af77 	beq.w	8000a30 <__sfvwrite_r+0x1b0>
 8000b42:	e790      	b.n	8000a66 <__sfvwrite_r+0x1e6>
 8000b44:	4648      	mov	r0, r9
 8000b46:	f000 fbf1 	bl	800132c <_realloc_r>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	f47f af22 	bne.w	8000996 <__sfvwrite_r+0x116>
 8000b52:	6921      	ldr	r1, [r4, #16]
 8000b54:	4648      	mov	r0, r9
 8000b56:	f000 fa9b 	bl	8001090 <_free_r>
 8000b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b5e:	220c      	movs	r2, #12
 8000b60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b64:	f8c9 2000 	str.w	r2, [r9]
 8000b68:	e77f      	b.n	8000a6a <__sfvwrite_r+0x1ea>
 8000b6a:	1c6a      	adds	r2, r5, #1
 8000b6c:	9200      	str	r2, [sp, #0]
 8000b6e:	e747      	b.n	8000a00 <__sfvwrite_r+0x180>
 8000b70:	220c      	movs	r2, #12
 8000b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b76:	f8c9 2000 	str.w	r2, [r9]
 8000b7a:	e776      	b.n	8000a6a <__sfvwrite_r+0x1ea>
 8000b7c:	7ffffc00 	.word	0x7ffffc00

08000b80 <__fp_lock>:
 8000b80:	2000      	movs	r0, #0
 8000b82:	4770      	bx	lr

08000b84 <stdio_exit_handler>:
 8000b84:	4a02      	ldr	r2, [pc, #8]	@ (8000b90 <stdio_exit_handler+0xc>)
 8000b86:	4903      	ldr	r1, [pc, #12]	@ (8000b94 <stdio_exit_handler+0x10>)
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <stdio_exit_handler+0x14>)
 8000b8a:	f000 bad5 	b.w	8001138 <_fwalk_sglue>
 8000b8e:	bf00      	nop
 8000b90:	20000050 	.word	0x20000050
 8000b94:	08000ec5 	.word	0x08000ec5
 8000b98:	20000004 	.word	0x20000004

08000b9c <cleanup_stdio>:
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <cleanup_stdio+0x34>)
 8000b9e:	6841      	ldr	r1, [r0, #4]
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	b510      	push	{r4, lr}
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	d001      	beq.n	8000bac <cleanup_stdio+0x10>
 8000ba8:	f000 f98c 	bl	8000ec4 <_fflush_r>
 8000bac:	68a1      	ldr	r1, [r4, #8]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <cleanup_stdio+0x38>)
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	d002      	beq.n	8000bba <cleanup_stdio+0x1e>
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f000 f985 	bl	8000ec4 <_fflush_r>
 8000bba:	68e1      	ldr	r1, [r4, #12]
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <cleanup_stdio+0x3c>)
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d004      	beq.n	8000bcc <cleanup_stdio+0x30>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc8:	f000 b97c 	b.w	8000ec4 <_fflush_r>
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000084 	.word	0x20000084
 8000bd4:	200000ec 	.word	0x200000ec
 8000bd8:	20000154 	.word	0x20000154

08000bdc <__fp_unlock>:
 8000bdc:	2000      	movs	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <global_stdio_init.part.0>:
 8000be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be4:	492a      	ldr	r1, [pc, #168]	@ (8000c90 <global_stdio_init.part.0+0xb0>)
 8000be6:	2500      	movs	r5, #0
 8000be8:	4c2a      	ldr	r4, [pc, #168]	@ (8000c94 <global_stdio_init.part.0+0xb4>)
 8000bea:	2304      	movs	r3, #4
 8000bec:	2208      	movs	r2, #8
 8000bee:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 8000ca8 <global_stdio_init.part.0+0xc8>
 8000bf2:	f8c4 1138 	str.w	r1, [r4, #312]	@ 0x138
 8000bf6:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8000cac <global_stdio_init.part.0+0xcc>
 8000c00:	4f25      	ldr	r7, [pc, #148]	@ (8000c98 <global_stdio_init.part.0+0xb8>)
 8000c02:	4e26      	ldr	r6, [pc, #152]	@ (8000c9c <global_stdio_init.part.0+0xbc>)
 8000c04:	60e3      	str	r3, [r4, #12]
 8000c06:	6025      	str	r5, [r4, #0]
 8000c08:	6665      	str	r5, [r4, #100]	@ 0x64
 8000c0a:	61a5      	str	r5, [r4, #24]
 8000c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c14:	f7ff fb7e 	bl	8000314 <memset>
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <global_stdio_init.part.0+0xc0>)
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 8000c22:	6763      	str	r3, [r4, #116]	@ 0x74
 8000c24:	6725      	str	r5, [r4, #112]	@ 0x70
 8000c26:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8000c2a:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000c2e:	6326      	str	r6, [r4, #48]	@ 0x30
 8000c30:	e9c4 4908 	strd	r4, r9, [r4, #32]
 8000c34:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 8000c38:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8000c3c:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 8000c40:	f7ff fb68 	bl	8000314 <memset>
 8000c44:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8000c48:	4629      	mov	r1, r5
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8000c50:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <global_stdio_init.part.0+0xc4>)
 8000c56:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 8000c5a:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8000c5e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8000c62:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8000c66:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8000c6a:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 8000c6e:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 8000c72:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8000c76:	f7ff fb4d 	bl	8000314 <memset>
 8000c7a:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8000c7e:	e9c4 983d 	strd	r9, r8, [r4, #244]	@ 0xf4
 8000c82:	e9c4 763f 	strd	r7, r6, [r4, #252]	@ 0xfc
 8000c86:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8000c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c8e:	bf00      	nop
 8000c90:	08000b85 	.word	0x08000b85
 8000c94:	20000084 	.word	0x20000084
 8000c98:	08001995 	.word	0x08001995
 8000c9c:	080019bd 	.word	0x080019bd
 8000ca0:	00010009 	.word	0x00010009
 8000ca4:	00020012 	.word	0x00020012
 8000ca8:	0800192d 	.word	0x0800192d
 8000cac:	08001955 	.word	0x08001955

08000cb0 <__sfp>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <__sfp+0x98>)
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d03d      	beq.n	8000d3a <__sfp+0x8a>
 8000cbe:	4f23      	ldr	r7, [pc, #140]	@ (8000d4c <__sfp+0x9c>)
 8000cc0:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	d504      	bpl.n	8000cd2 <__sfp+0x22>
 8000cc8:	e01d      	b.n	8000d06 <__sfp+0x56>
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8000cd0:	d019      	beq.n	8000d06 <__sfp+0x56>
 8000cd2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d1f6      	bne.n	8000cca <__sfp+0x1a>
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <__sfp+0xa0>)
 8000cde:	2208      	movs	r2, #8
 8000ce0:	4629      	mov	r1, r5
 8000ce2:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000ce6:	6665      	str	r5, [r4, #100]	@ 0x64
 8000ce8:	60e3      	str	r3, [r4, #12]
 8000cea:	6025      	str	r5, [r4, #0]
 8000cec:	61a5      	str	r5, [r4, #24]
 8000cee:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000cf2:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000cf6:	f7ff fb0d 	bl	8000314 <memset>
 8000cfa:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8000cfe:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8000d02:	4620      	mov	r0, r4
 8000d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d06:	683d      	ldr	r5, [r7, #0]
 8000d08:	b10d      	cbz	r5, 8000d0e <__sfp+0x5e>
 8000d0a:	462f      	mov	r7, r5
 8000d0c:	e7d8      	b.n	8000cc0 <__sfp+0x10>
 8000d0e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8000d12:	4630      	mov	r0, r6
 8000d14:	f000 f93c 	bl	8000f90 <_malloc_r>
 8000d18:	4604      	mov	r4, r0
 8000d1a:	b188      	cbz	r0, 8000d40 <__sfp+0x90>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	6005      	str	r5, [r0, #0]
 8000d20:	300c      	adds	r0, #12
 8000d22:	4629      	mov	r1, r5
 8000d24:	4625      	mov	r5, r4
 8000d26:	f840 3c08 	str.w	r3, [r0, #-8]
 8000d2a:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000d2e:	60a0      	str	r0, [r4, #8]
 8000d30:	f7ff faf0 	bl	8000314 <memset>
 8000d34:	603c      	str	r4, [r7, #0]
 8000d36:	462f      	mov	r7, r5
 8000d38:	e7c2      	b.n	8000cc0 <__sfp+0x10>
 8000d3a:	f7ff ff51 	bl	8000be0 <global_stdio_init.part.0>
 8000d3e:	e7be      	b.n	8000cbe <__sfp+0xe>
 8000d40:	230c      	movs	r3, #12
 8000d42:	6038      	str	r0, [r7, #0]
 8000d44:	6033      	str	r3, [r6, #0]
 8000d46:	e7dc      	b.n	8000d02 <__sfp+0x52>
 8000d48:	20000084 	.word	0x20000084
 8000d4c:	20000050 	.word	0x20000050
 8000d50:	ffff0001 	.word	0xffff0001

08000d54 <__sinit>:
 8000d54:	6a03      	ldr	r3, [r0, #32]
 8000d56:	b103      	cbz	r3, 8000d5a <__sinit+0x6>
 8000d58:	4770      	bx	lr
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__sinit+0x18>)
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__sinit+0x1c>)
 8000d5e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d62:	6202      	str	r2, [r0, #32]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f7      	bne.n	8000d58 <__sinit+0x4>
 8000d68:	e73a      	b.n	8000be0 <global_stdio_init.part.0>
 8000d6a:	bf00      	nop
 8000d6c:	20000084 	.word	0x20000084
 8000d70:	08000b9d 	.word	0x08000b9d

08000d74 <__sfp_lock_acquire>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__sfp_lock_release>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <__fp_lock_all>:
 8000d7c:	4a02      	ldr	r2, [pc, #8]	@ (8000d88 <__fp_lock_all+0xc>)
 8000d7e:	2000      	movs	r0, #0
 8000d80:	4902      	ldr	r1, [pc, #8]	@ (8000d8c <__fp_lock_all+0x10>)
 8000d82:	f000 b9d9 	b.w	8001138 <_fwalk_sglue>
 8000d86:	bf00      	nop
 8000d88:	20000050 	.word	0x20000050
 8000d8c:	08000b81 	.word	0x08000b81

08000d90 <__fp_unlock_all>:
 8000d90:	4a02      	ldr	r2, [pc, #8]	@ (8000d9c <__fp_unlock_all+0xc>)
 8000d92:	2000      	movs	r0, #0
 8000d94:	4902      	ldr	r1, [pc, #8]	@ (8000da0 <__fp_unlock_all+0x10>)
 8000d96:	f000 b9cf 	b.w	8001138 <_fwalk_sglue>
 8000d9a:	bf00      	nop
 8000d9c:	20000050 	.word	0x20000050
 8000da0:	08000bdd 	.word	0x08000bdd

08000da4 <__sflush_r>:
 8000da4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8000da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dac:	071e      	lsls	r6, r3, #28
 8000dae:	460c      	mov	r4, r1
 8000db0:	4680      	mov	r8, r0
 8000db2:	d43d      	bmi.n	8000e30 <__sflush_r+0x8c>
 8000db4:	684a      	ldr	r2, [r1, #4]
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	dd55      	ble.n	8000e66 <__sflush_r+0xc2>
 8000dba:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d034      	beq.n	8000e2a <__sflush_r+0x86>
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f8d8 6000 	ldr.w	r6, [r8]
 8000dc6:	6a21      	ldr	r1, [r4, #32]
 8000dc8:	f8c8 2000 	str.w	r2, [r8]
 8000dcc:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 8000dd0:	d156      	bne.n	8000e80 <__sflush_r+0xdc>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	47a8      	blx	r5
 8000dd8:	1c45      	adds	r5, r0, #1
 8000dda:	4602      	mov	r2, r0
 8000ddc:	d065      	beq.n	8000eaa <__sflush_r+0x106>
 8000dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000de2:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8000de4:	6a21      	ldr	r1, [r4, #32]
 8000de6:	0758      	lsls	r0, r3, #29
 8000de8:	d505      	bpl.n	8000df6 <__sflush_r+0x52>
 8000dea:	6863      	ldr	r3, [r4, #4]
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000df0:	b10b      	cbz	r3, 8000df6 <__sflush_r+0x52>
 8000df2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	2300      	movs	r3, #0
 8000df8:	4640      	mov	r0, r8
 8000dfa:	47a8      	blx	r5
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d041      	beq.n	8000e84 <__sflush_r+0xe0>
 8000e00:	2300      	movs	r3, #0
 8000e02:	6063      	str	r3, [r4, #4]
 8000e04:	6923      	ldr	r3, [r4, #16]
 8000e06:	6023      	str	r3, [r4, #0]
 8000e08:	89a3      	ldrh	r3, [r4, #12]
 8000e0a:	04df      	lsls	r7, r3, #19
 8000e0c:	d500      	bpl.n	8000e10 <__sflush_r+0x6c>
 8000e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8000e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e12:	f8c8 6000 	str.w	r6, [r8]
 8000e16:	b141      	cbz	r1, 8000e2a <__sflush_r+0x86>
 8000e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d002      	beq.n	8000e26 <__sflush_r+0x82>
 8000e20:	4640      	mov	r0, r8
 8000e22:	f000 f935 	bl	8001090 <_free_r>
 8000e26:	2300      	movs	r3, #0
 8000e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e30:	690e      	ldr	r6, [r1, #16]
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0f9      	beq.n	8000e2a <__sflush_r+0x86>
 8000e36:	079b      	lsls	r3, r3, #30
 8000e38:	680d      	ldr	r5, [r1, #0]
 8000e3a:	600e      	str	r6, [r1, #0]
 8000e3c:	bf0c      	ite	eq
 8000e3e:	694b      	ldreq	r3, [r1, #20]
 8000e40:	2300      	movne	r3, #0
 8000e42:	1bad      	subs	r5, r5, r6
 8000e44:	608b      	str	r3, [r1, #8]
 8000e46:	e00b      	b.n	8000e60 <__sflush_r+0xbc>
 8000e48:	462b      	mov	r3, r5
 8000e4a:	4632      	mov	r2, r6
 8000e4c:	6a21      	ldr	r1, [r4, #32]
 8000e4e:	4640      	mov	r0, r8
 8000e50:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8000e52:	47b8      	blx	r7
 8000e54:	f1b0 0c00 	subs.w	ip, r0, #0
 8000e58:	eba5 050c 	sub.w	r5, r5, ip
 8000e5c:	4466      	add	r6, ip
 8000e5e:	dd06      	ble.n	8000e6e <__sflush_r+0xca>
 8000e60:	2d00      	cmp	r5, #0
 8000e62:	dcf1      	bgt.n	8000e48 <__sflush_r+0xa4>
 8000e64:	e7e1      	b.n	8000e2a <__sflush_r+0x86>
 8000e66:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	dca6      	bgt.n	8000dba <__sflush_r+0x16>
 8000e6c:	e7dd      	b.n	8000e2a <__sflush_r+0x86>
 8000e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e7a:	81a3      	strh	r3, [r4, #12]
 8000e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000e82:	e7b0      	b.n	8000de6 <__sflush_r+0x42>
 8000e84:	f8d8 1000 	ldr.w	r1, [r8]
 8000e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8c:	291d      	cmp	r1, #29
 8000e8e:	d8f0      	bhi.n	8000e72 <__sflush_r+0xce>
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <__sflush_r+0x11c>)
 8000e92:	40ca      	lsrs	r2, r1
 8000e94:	07d5      	lsls	r5, r2, #31
 8000e96:	d5ec      	bpl.n	8000e72 <__sflush_r+0xce>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6062      	str	r2, [r4, #4]
 8000e9c:	6922      	ldr	r2, [r4, #16]
 8000e9e:	6022      	str	r2, [r4, #0]
 8000ea0:	04da      	lsls	r2, r3, #19
 8000ea2:	d5b5      	bpl.n	8000e10 <__sflush_r+0x6c>
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	d0b2      	beq.n	8000e0e <__sflush_r+0x6a>
 8000ea8:	e7b2      	b.n	8000e10 <__sflush_r+0x6c>
 8000eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d095      	beq.n	8000dde <__sflush_r+0x3a>
 8000eb2:	2b1d      	cmp	r3, #29
 8000eb4:	d001      	beq.n	8000eba <__sflush_r+0x116>
 8000eb6:	2b16      	cmp	r3, #22
 8000eb8:	d1d9      	bne.n	8000e6e <__sflush_r+0xca>
 8000eba:	f8c8 6000 	str.w	r6, [r8]
 8000ebe:	e7b4      	b.n	8000e2a <__sflush_r+0x86>
 8000ec0:	20400001 	.word	0x20400001

08000ec4 <_fflush_r>:
 8000ec4:	690b      	ldr	r3, [r1, #16]
 8000ec6:	b1b3      	cbz	r3, 8000ef6 <_fflush_r+0x32>
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
 8000ecc:	b082      	sub	sp, #8
 8000ece:	b108      	cbz	r0, 8000ed4 <_fflush_r+0x10>
 8000ed0:	6a03      	ldr	r3, [r0, #32]
 8000ed2:	b15b      	cbz	r3, 8000eec <_fflush_r+0x28>
 8000ed4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8000ed8:	b913      	cbnz	r3, 8000ee0 <_fflush_r+0x1c>
 8000eda:	2000      	movs	r0, #0
 8000edc:	b002      	add	sp, #8
 8000ede:	bd10      	pop	{r4, pc}
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	b002      	add	sp, #8
 8000ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ee8:	f7ff bf5c 	b.w	8000da4 <__sflush_r>
 8000eec:	9101      	str	r1, [sp, #4]
 8000eee:	f7ff ff31 	bl	8000d54 <__sinit>
 8000ef2:	9901      	ldr	r1, [sp, #4]
 8000ef4:	e7ee      	b.n	8000ed4 <_fflush_r+0x10>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <fflush>:
 8000efc:	b1b8      	cbz	r0, 8000f2e <fflush+0x32>
 8000efe:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <fflush+0x3c>)
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	6903      	ldr	r3, [r0, #16]
 8000f04:	4604      	mov	r4, r0
 8000f06:	6815      	ldr	r5, [r2, #0]
 8000f08:	b12b      	cbz	r3, 8000f16 <fflush+0x1a>
 8000f0a:	b10d      	cbz	r5, 8000f10 <fflush+0x14>
 8000f0c:	6a2b      	ldr	r3, [r5, #32]
 8000f0e:	b153      	cbz	r3, 8000f26 <fflush+0x2a>
 8000f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f14:	b90b      	cbnz	r3, 8000f1a <fflush+0x1e>
 8000f16:	2000      	movs	r0, #0
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f22:	f7ff bf3f 	b.w	8000da4 <__sflush_r>
 8000f26:	4628      	mov	r0, r5
 8000f28:	f7ff ff14 	bl	8000d54 <__sinit>
 8000f2c:	e7f0      	b.n	8000f10 <fflush+0x14>
 8000f2e:	4a03      	ldr	r2, [pc, #12]	@ (8000f3c <fflush+0x40>)
 8000f30:	4903      	ldr	r1, [pc, #12]	@ (8000f40 <fflush+0x44>)
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <fflush+0x48>)
 8000f34:	f000 b900 	b.w	8001138 <_fwalk_sglue>
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000050 	.word	0x20000050
 8000f40:	08000ec5 	.word	0x08000ec5
 8000f44:	20000004 	.word	0x20000004

08000f48 <sbrk_aligned>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	4e10      	ldr	r6, [pc, #64]	@ (8000f8c <sbrk_aligned+0x44>)
 8000f4c:	4605      	mov	r5, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	6833      	ldr	r3, [r6, #0]
 8000f52:	b1b3      	cbz	r3, 8000f82 <sbrk_aligned+0x3a>
 8000f54:	4621      	mov	r1, r4
 8000f56:	4628      	mov	r0, r5
 8000f58:	f000 fcd6 	bl	8001908 <_sbrk_r>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	d00c      	beq.n	8000f7a <sbrk_aligned+0x32>
 8000f60:	1cc4      	adds	r4, r0, #3
 8000f62:	f024 0403 	bic.w	r4, r4, #3
 8000f66:	42a0      	cmp	r0, r4
 8000f68:	d005      	beq.n	8000f76 <sbrk_aligned+0x2e>
 8000f6a:	1a21      	subs	r1, r4, r0
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	f000 fccb 	bl	8001908 <_sbrk_r>
 8000f72:	3001      	adds	r0, #1
 8000f74:	d001      	beq.n	8000f7a <sbrk_aligned+0x32>
 8000f76:	4620      	mov	r0, r4
 8000f78:	bd70      	pop	{r4, r5, r6, pc}
 8000f7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f7e:	4620      	mov	r0, r4
 8000f80:	bd70      	pop	{r4, r5, r6, pc}
 8000f82:	4619      	mov	r1, r3
 8000f84:	f000 fcc0 	bl	8001908 <_sbrk_r>
 8000f88:	6030      	str	r0, [r6, #0]
 8000f8a:	e7e3      	b.n	8000f54 <sbrk_aligned+0xc>
 8000f8c:	200001c0 	.word	0x200001c0

08000f90 <_malloc_r>:
 8000f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f94:	1ccd      	adds	r5, r1, #3
 8000f96:	4606      	mov	r6, r0
 8000f98:	f025 0503 	bic.w	r5, r5, #3
 8000f9c:	3508      	adds	r5, #8
 8000f9e:	2d0c      	cmp	r5, #12
 8000fa0:	bf38      	it	cc
 8000fa2:	250c      	movcc	r5, #12
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	db2e      	blt.n	8001006 <_malloc_r+0x76>
 8000fa8:	42a9      	cmp	r1, r5
 8000faa:	d82c      	bhi.n	8001006 <_malloc_r+0x76>
 8000fac:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 800108c <_malloc_r+0xfc>
 8000fb0:	f000 fbbe 	bl	8001730 <__malloc_lock>
 8000fb4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000fb8:	b17a      	cbz	r2, 8000fda <_malloc_r+0x4a>
 8000fba:	4614      	mov	r4, r2
 8000fbc:	e003      	b.n	8000fc6 <_malloc_r+0x36>
 8000fbe:	6863      	ldr	r3, [r4, #4]
 8000fc0:	4622      	mov	r2, r4
 8000fc2:	461c      	mov	r4, r3
 8000fc4:	b14b      	cbz	r3, 8000fda <_malloc_r+0x4a>
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	1b5b      	subs	r3, r3, r5
 8000fca:	d4f8      	bmi.n	8000fbe <_malloc_r+0x2e>
 8000fcc:	2b0b      	cmp	r3, #11
 8000fce:	d81e      	bhi.n	800100e <_malloc_r+0x7e>
 8000fd0:	4294      	cmp	r4, r2
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	d053      	beq.n	800107e <_malloc_r+0xee>
 8000fd6:	6053      	str	r3, [r2, #4]
 8000fd8:	e007      	b.n	8000fea <_malloc_r+0x5a>
 8000fda:	4629      	mov	r1, r5
 8000fdc:	4630      	mov	r0, r6
 8000fde:	f7ff ffb3 	bl	8000f48 <sbrk_aligned>
 8000fe2:	1c43      	adds	r3, r0, #1
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	d01d      	beq.n	8001024 <_malloc_r+0x94>
 8000fe8:	6005      	str	r5, [r0, #0]
 8000fea:	4630      	mov	r0, r6
 8000fec:	f000 fba2 	bl	8001734 <__malloc_unlock>
 8000ff0:	f104 000b 	add.w	r0, r4, #11
 8000ff4:	1d23      	adds	r3, r4, #4
 8000ff6:	f020 0007 	bic.w	r0, r0, #7
 8000ffa:	1ac2      	subs	r2, r0, r3
 8000ffc:	d001      	beq.n	8001002 <_malloc_r+0x72>
 8000ffe:	1a1b      	subs	r3, r3, r0
 8001000:	50a3      	str	r3, [r4, r2]
 8001002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001006:	230c      	movs	r3, #12
 8001008:	6033      	str	r3, [r6, #0]
 800100a:	2000      	movs	r0, #0
 800100c:	e7f9      	b.n	8001002 <_malloc_r+0x72>
 800100e:	1961      	adds	r1, r4, r5
 8001010:	4294      	cmp	r4, r2
 8001012:	6025      	str	r5, [r4, #0]
 8001014:	bf14      	ite	ne
 8001016:	6051      	strne	r1, [r2, #4]
 8001018:	f8c8 1004 	streq.w	r1, [r8, #4]
 800101c:	5163      	str	r3, [r4, r5]
 800101e:	6863      	ldr	r3, [r4, #4]
 8001020:	604b      	str	r3, [r1, #4]
 8001022:	e7e2      	b.n	8000fea <_malloc_r+0x5a>
 8001024:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8001028:	b31f      	cbz	r7, 8001072 <_malloc_r+0xe2>
 800102a:	463c      	mov	r4, r7
 800102c:	687f      	ldr	r7, [r7, #4]
 800102e:	2f00      	cmp	r7, #0
 8001030:	d1fb      	bne.n	800102a <_malloc_r+0x9a>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	4639      	mov	r1, r7
 8001036:	4630      	mov	r0, r6
 8001038:	eb04 0903 	add.w	r9, r4, r3
 800103c:	f000 fc64 	bl	8001908 <_sbrk_r>
 8001040:	4581      	cmp	r9, r0
 8001042:	d116      	bne.n	8001072 <_malloc_r+0xe2>
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	4630      	mov	r0, r6
 8001048:	1aed      	subs	r5, r5, r3
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff ff7c 	bl	8000f48 <sbrk_aligned>
 8001050:	3001      	adds	r0, #1
 8001052:	d00e      	beq.n	8001072 <_malloc_r+0xe2>
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800105a:	442b      	add	r3, r5
 800105c:	6023      	str	r3, [r4, #0]
 800105e:	6853      	ldr	r3, [r2, #4]
 8001060:	b183      	cbz	r3, 8001084 <_malloc_r+0xf4>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d003      	beq.n	800106e <_malloc_r+0xde>
 8001066:	461a      	mov	r2, r3
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	429c      	cmp	r4, r3
 800106c:	d1fb      	bne.n	8001066 <_malloc_r+0xd6>
 800106e:	2300      	movs	r3, #0
 8001070:	e7b1      	b.n	8000fd6 <_malloc_r+0x46>
 8001072:	230c      	movs	r3, #12
 8001074:	4630      	mov	r0, r6
 8001076:	6033      	str	r3, [r6, #0]
 8001078:	f000 fb5c 	bl	8001734 <__malloc_unlock>
 800107c:	e7c5      	b.n	800100a <_malloc_r+0x7a>
 800107e:	f8c8 3004 	str.w	r3, [r8, #4]
 8001082:	e7b2      	b.n	8000fea <_malloc_r+0x5a>
 8001084:	f8c8 7004 	str.w	r7, [r8, #4]
 8001088:	e7af      	b.n	8000fea <_malloc_r+0x5a>
 800108a:	bf00      	nop
 800108c:	200001c0 	.word	0x200001c0

08001090 <_free_r>:
 8001090:	2900      	cmp	r1, #0
 8001092:	d03a      	beq.n	800110a <_free_r+0x7a>
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800109a:	1f0c      	subs	r4, r1, #4
 800109c:	4605      	mov	r5, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bfb8      	it	lt
 80010a2:	18e4      	addlt	r4, r4, r3
 80010a4:	f000 fb44 	bl	8001730 <__malloc_lock>
 80010a8:	4a22      	ldr	r2, [pc, #136]	@ (8001134 <_free_r+0xa4>)
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	b1d3      	cbz	r3, 80010e4 <_free_r+0x54>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d814      	bhi.n	80010dc <_free_r+0x4c>
 80010b2:	461a      	mov	r2, r3
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	b10b      	cbz	r3, 80010bc <_free_r+0x2c>
 80010b8:	42a3      	cmp	r3, r4
 80010ba:	d9fa      	bls.n	80010b2 <_free_r+0x22>
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	1850      	adds	r0, r2, r1
 80010c0:	42a0      	cmp	r0, r4
 80010c2:	d023      	beq.n	800110c <_free_r+0x7c>
 80010c4:	d82e      	bhi.n	8001124 <_free_r+0x94>
 80010c6:	6821      	ldr	r1, [r4, #0]
 80010c8:	1860      	adds	r0, r4, r1
 80010ca:	4283      	cmp	r3, r0
 80010cc:	d011      	beq.n	80010f2 <_free_r+0x62>
 80010ce:	6063      	str	r3, [r4, #4]
 80010d0:	6054      	str	r4, [r2, #4]
 80010d2:	4628      	mov	r0, r5
 80010d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010d8:	f000 bb2c 	b.w	8001734 <__malloc_unlock>
 80010dc:	6821      	ldr	r1, [r4, #0]
 80010de:	1860      	adds	r0, r4, r1
 80010e0:	4283      	cmp	r3, r0
 80010e2:	d00d      	beq.n	8001100 <_free_r+0x70>
 80010e4:	4628      	mov	r0, r5
 80010e6:	6063      	str	r3, [r4, #4]
 80010e8:	6014      	str	r4, [r2, #0]
 80010ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ee:	f000 bb21 	b.w	8001734 <__malloc_unlock>
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4408      	add	r0, r1
 80010f8:	e9c4 0300 	strd	r0, r3, [r4]
 80010fc:	6054      	str	r4, [r2, #4]
 80010fe:	e7e8      	b.n	80010d2 <_free_r+0x42>
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4408      	add	r0, r1
 8001106:	6020      	str	r0, [r4, #0]
 8001108:	e7ec      	b.n	80010e4 <_free_r+0x54>
 800110a:	4770      	bx	lr
 800110c:	6820      	ldr	r0, [r4, #0]
 800110e:	4401      	add	r1, r0
 8001110:	1850      	adds	r0, r2, r1
 8001112:	6011      	str	r1, [r2, #0]
 8001114:	4283      	cmp	r3, r0
 8001116:	d1dc      	bne.n	80010d2 <_free_r+0x42>
 8001118:	e9d3 0400 	ldrd	r0, r4, [r3]
 800111c:	4401      	add	r1, r0
 800111e:	e9c2 1400 	strd	r1, r4, [r2]
 8001122:	e7d6      	b.n	80010d2 <_free_r+0x42>
 8001124:	230c      	movs	r3, #12
 8001126:	4628      	mov	r0, r5
 8001128:	602b      	str	r3, [r5, #0]
 800112a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112e:	f000 bb01 	b.w	8001734 <__malloc_unlock>
 8001132:	bf00      	nop
 8001134:	200001c4 	.word	0x200001c4

08001138 <_fwalk_sglue>:
 8001138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800113c:	f04f 0900 	mov.w	r9, #0
 8001140:	4607      	mov	r7, r0
 8001142:	4688      	mov	r8, r1
 8001144:	4616      	mov	r6, r2
 8001146:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800114a:	3d01      	subs	r5, #1
 800114c:	d40f      	bmi.n	800116e <_fwalk_sglue+0x36>
 800114e:	89a3      	ldrh	r3, [r4, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d908      	bls.n	8001166 <_fwalk_sglue+0x2e>
 8001154:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001158:	4621      	mov	r1, r4
 800115a:	4638      	mov	r0, r7
 800115c:	3301      	adds	r3, #1
 800115e:	d002      	beq.n	8001166 <_fwalk_sglue+0x2e>
 8001160:	47c0      	blx	r8
 8001162:	ea49 0900 	orr.w	r9, r9, r0
 8001166:	3d01      	subs	r5, #1
 8001168:	3468      	adds	r4, #104	@ 0x68
 800116a:	1c6b      	adds	r3, r5, #1
 800116c:	d1ef      	bne.n	800114e <_fwalk_sglue+0x16>
 800116e:	6836      	ldr	r6, [r6, #0]
 8001170:	2e00      	cmp	r6, #0
 8001172:	d1e8      	bne.n	8001146 <_fwalk_sglue+0xe>
 8001174:	4648      	mov	r0, r9
 8001176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800117a:	bf00      	nop

0800117c <__swsetup_r>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <__swsetup_r+0xc0>)
 8001180:	4605      	mov	r5, r0
 8001182:	460c      	mov	r4, r1
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b113      	cbz	r3, 800118e <__swsetup_r+0x12>
 8001188:	6a1a      	ldr	r2, [r3, #32]
 800118a:	2a00      	cmp	r2, #0
 800118c:	d045      	beq.n	800121a <__swsetup_r+0x9e>
 800118e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001192:	0718      	lsls	r0, r3, #28
 8001194:	d516      	bpl.n	80011c4 <__swsetup_r+0x48>
 8001196:	6922      	ldr	r2, [r4, #16]
 8001198:	b1f2      	cbz	r2, 80011d8 <__swsetup_r+0x5c>
 800119a:	f013 0101 	ands.w	r1, r3, #1
 800119e:	d007      	beq.n	80011b0 <__swsetup_r+0x34>
 80011a0:	6961      	ldr	r1, [r4, #20]
 80011a2:	2000      	movs	r0, #0
 80011a4:	4249      	negs	r1, r1
 80011a6:	60a0      	str	r0, [r4, #8]
 80011a8:	61a1      	str	r1, [r4, #24]
 80011aa:	b13a      	cbz	r2, 80011bc <__swsetup_r+0x40>
 80011ac:	2000      	movs	r0, #0
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
 80011b0:	0798      	lsls	r0, r3, #30
 80011b2:	bf58      	it	pl
 80011b4:	6961      	ldrpl	r1, [r4, #20]
 80011b6:	60a1      	str	r1, [r4, #8]
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	d1f7      	bne.n	80011ac <__swsetup_r+0x30>
 80011bc:	0619      	lsls	r1, r3, #24
 80011be:	d438      	bmi.n	8001232 <__swsetup_r+0xb6>
 80011c0:	4610      	mov	r0, r2
 80011c2:	bd38      	pop	{r3, r4, r5, pc}
 80011c4:	06d9      	lsls	r1, r3, #27
 80011c6:	d52c      	bpl.n	8001222 <__swsetup_r+0xa6>
 80011c8:	075a      	lsls	r2, r3, #29
 80011ca:	d412      	bmi.n	80011f2 <__swsetup_r+0x76>
 80011cc:	6922      	ldr	r2, [r4, #16]
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	81a3      	strh	r3, [r4, #12]
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d1e0      	bne.n	800119a <__swsetup_r+0x1e>
 80011d8:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 80011dc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80011e0:	d0db      	beq.n	800119a <__swsetup_r+0x1e>
 80011e2:	4621      	mov	r1, r4
 80011e4:	4628      	mov	r0, r5
 80011e6:	f000 faa7 	bl	8001738 <__smakebuf_r>
 80011ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ee:	6922      	ldr	r2, [r4, #16]
 80011f0:	e7d3      	b.n	800119a <__swsetup_r+0x1e>
 80011f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011f4:	b151      	cbz	r1, 800120c <__swsetup_r+0x90>
 80011f6:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80011fa:	4291      	cmp	r1, r2
 80011fc:	d004      	beq.n	8001208 <__swsetup_r+0x8c>
 80011fe:	4628      	mov	r0, r5
 8001200:	f7ff ff46 	bl	8001090 <_free_r>
 8001204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	6362      	str	r2, [r4, #52]	@ 0x34
 800120c:	2100      	movs	r1, #0
 800120e:	6922      	ldr	r2, [r4, #16]
 8001210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001214:	e9c4 2100 	strd	r2, r1, [r4]
 8001218:	e7d9      	b.n	80011ce <__swsetup_r+0x52>
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fd9a 	bl	8000d54 <__sinit>
 8001220:	e7b5      	b.n	800118e <__swsetup_r+0x12>
 8001222:	2209      	movs	r2, #9
 8001224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001228:	602a      	str	r2, [r5, #0]
 800122a:	81a3      	strh	r3, [r4, #12]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001230:	bd38      	pop	{r3, r4, r5, pc}
 8001232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001236:	81a3      	strh	r3, [r4, #12]
 8001238:	e7f8      	b.n	800122c <__swsetup_r+0xb0>
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000

08001240 <memcpy>:
 8001240:	4684      	mov	ip, r0
 8001242:	ea41 0300 	orr.w	r3, r1, r0
 8001246:	f013 0303 	ands.w	r3, r3, #3
 800124a:	d149      	bne.n	80012e0 <memcpy+0xa0>
 800124c:	3a40      	subs	r2, #64	@ 0x40
 800124e:	d323      	bcc.n	8001298 <memcpy+0x58>
 8001250:	680b      	ldr	r3, [r1, #0]
 8001252:	6003      	str	r3, [r0, #0]
 8001254:	684b      	ldr	r3, [r1, #4]
 8001256:	6043      	str	r3, [r0, #4]
 8001258:	688b      	ldr	r3, [r1, #8]
 800125a:	6083      	str	r3, [r0, #8]
 800125c:	68cb      	ldr	r3, [r1, #12]
 800125e:	60c3      	str	r3, [r0, #12]
 8001260:	690b      	ldr	r3, [r1, #16]
 8001262:	6103      	str	r3, [r0, #16]
 8001264:	694b      	ldr	r3, [r1, #20]
 8001266:	6143      	str	r3, [r0, #20]
 8001268:	698b      	ldr	r3, [r1, #24]
 800126a:	6183      	str	r3, [r0, #24]
 800126c:	69cb      	ldr	r3, [r1, #28]
 800126e:	61c3      	str	r3, [r0, #28]
 8001270:	6a0b      	ldr	r3, [r1, #32]
 8001272:	6203      	str	r3, [r0, #32]
 8001274:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8001276:	6243      	str	r3, [r0, #36]	@ 0x24
 8001278:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800127a:	6283      	str	r3, [r0, #40]	@ 0x28
 800127c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800127e:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001280:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001282:	6303      	str	r3, [r0, #48]	@ 0x30
 8001284:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8001286:	6343      	str	r3, [r0, #52]	@ 0x34
 8001288:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800128a:	6383      	str	r3, [r0, #56]	@ 0x38
 800128c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800128e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8001290:	3040      	adds	r0, #64	@ 0x40
 8001292:	3140      	adds	r1, #64	@ 0x40
 8001294:	3a40      	subs	r2, #64	@ 0x40
 8001296:	d2db      	bcs.n	8001250 <memcpy+0x10>
 8001298:	3230      	adds	r2, #48	@ 0x30
 800129a:	d30b      	bcc.n	80012b4 <memcpy+0x74>
 800129c:	680b      	ldr	r3, [r1, #0]
 800129e:	6003      	str	r3, [r0, #0]
 80012a0:	684b      	ldr	r3, [r1, #4]
 80012a2:	6043      	str	r3, [r0, #4]
 80012a4:	688b      	ldr	r3, [r1, #8]
 80012a6:	6083      	str	r3, [r0, #8]
 80012a8:	68cb      	ldr	r3, [r1, #12]
 80012aa:	60c3      	str	r3, [r0, #12]
 80012ac:	3010      	adds	r0, #16
 80012ae:	3110      	adds	r1, #16
 80012b0:	3a10      	subs	r2, #16
 80012b2:	d2f3      	bcs.n	800129c <memcpy+0x5c>
 80012b4:	320c      	adds	r2, #12
 80012b6:	d305      	bcc.n	80012c4 <memcpy+0x84>
 80012b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80012bc:	f840 3b04 	str.w	r3, [r0], #4
 80012c0:	3a04      	subs	r2, #4
 80012c2:	d2f9      	bcs.n	80012b8 <memcpy+0x78>
 80012c4:	3204      	adds	r2, #4
 80012c6:	d008      	beq.n	80012da <memcpy+0x9a>
 80012c8:	07d2      	lsls	r2, r2, #31
 80012ca:	bf1c      	itt	ne
 80012cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012d0:	f800 3b01 	strbne.w	r3, [r0], #1
 80012d4:	d301      	bcc.n	80012da <memcpy+0x9a>
 80012d6:	880b      	ldrh	r3, [r1, #0]
 80012d8:	8003      	strh	r3, [r0, #0]
 80012da:	4660      	mov	r0, ip
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2a08      	cmp	r2, #8
 80012e2:	d313      	bcc.n	800130c <memcpy+0xcc>
 80012e4:	078b      	lsls	r3, r1, #30
 80012e6:	d0b1      	beq.n	800124c <memcpy+0xc>
 80012e8:	f010 0303 	ands.w	r3, r0, #3
 80012ec:	d0ae      	beq.n	800124c <memcpy+0xc>
 80012ee:	f1c3 0304 	rsb	r3, r3, #4
 80012f2:	1ad2      	subs	r2, r2, r3
 80012f4:	07db      	lsls	r3, r3, #31
 80012f6:	bf1c      	itt	ne
 80012f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8001300:	d3a4      	bcc.n	800124c <memcpy+0xc>
 8001302:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001306:	f820 3b02 	strh.w	r3, [r0], #2
 800130a:	e79f      	b.n	800124c <memcpy+0xc>
 800130c:	3a04      	subs	r2, #4
 800130e:	d3d9      	bcc.n	80012c4 <memcpy+0x84>
 8001310:	3a01      	subs	r2, #1
 8001312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001316:	f800 3b01 	strb.w	r3, [r0], #1
 800131a:	d2f9      	bcs.n	8001310 <memcpy+0xd0>
 800131c:	780b      	ldrb	r3, [r1, #0]
 800131e:	7003      	strb	r3, [r0, #0]
 8001320:	784b      	ldrb	r3, [r1, #1]
 8001322:	7043      	strb	r3, [r0, #1]
 8001324:	788b      	ldrb	r3, [r1, #2]
 8001326:	7083      	strb	r3, [r0, #2]
 8001328:	4660      	mov	r0, ip
 800132a:	4770      	bx	lr

0800132c <_realloc_r>:
 800132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001330:	4614      	mov	r4, r2
 8001332:	b341      	cbz	r1, 8001386 <_realloc_r+0x5a>
 8001334:	b30a      	cbz	r2, 800137a <_realloc_r+0x4e>
 8001336:	4606      	mov	r6, r0
 8001338:	460d      	mov	r5, r1
 800133a:	f000 fb43 	bl	80019c4 <_malloc_usable_size_r>
 800133e:	4284      	cmp	r4, r0
 8001340:	4607      	mov	r7, r0
 8001342:	d802      	bhi.n	800134a <_realloc_r+0x1e>
 8001344:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001348:	d813      	bhi.n	8001372 <_realloc_r+0x46>
 800134a:	4621      	mov	r1, r4
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff fe1f 	bl	8000f90 <_malloc_r>
 8001352:	4680      	mov	r8, r0
 8001354:	b150      	cbz	r0, 800136c <_realloc_r+0x40>
 8001356:	42bc      	cmp	r4, r7
 8001358:	4622      	mov	r2, r4
 800135a:	4629      	mov	r1, r5
 800135c:	bf28      	it	cs
 800135e:	463a      	movcs	r2, r7
 8001360:	f7ff ff6e 	bl	8001240 <memcpy>
 8001364:	4629      	mov	r1, r5
 8001366:	4630      	mov	r0, r6
 8001368:	f7ff fe92 	bl	8001090 <_free_r>
 800136c:	4640      	mov	r0, r8
 800136e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001372:	46a8      	mov	r8, r5
 8001374:	4640      	mov	r0, r8
 8001376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800137a:	46a0      	mov	r8, r4
 800137c:	f7ff fe88 	bl	8001090 <_free_r>
 8001380:	4640      	mov	r0, r8
 8001382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001386:	4611      	mov	r1, r2
 8001388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800138c:	f7ff be00 	b.w	8000f90 <_malloc_r>

08001390 <_printf_common>:
 8001390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001394:	4692      	mov	sl, r2
 8001396:	461f      	mov	r7, r3
 8001398:	690a      	ldr	r2, [r1, #16]
 800139a:	460c      	mov	r4, r1
 800139c:	688b      	ldr	r3, [r1, #8]
 800139e:	4606      	mov	r6, r0
 80013a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80013a4:	429a      	cmp	r2, r3
 80013a6:	bfb8      	it	lt
 80013a8:	461a      	movlt	r2, r3
 80013aa:	f8ca 2000 	str.w	r2, [sl]
 80013ae:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 80013b2:	b113      	cbz	r3, 80013ba <_printf_common+0x2a>
 80013b4:	3201      	adds	r2, #1
 80013b6:	f8ca 2000 	str.w	r2, [sl]
 80013ba:	6822      	ldr	r2, [r4, #0]
 80013bc:	0691      	lsls	r1, r2, #26
 80013be:	d55d      	bpl.n	800147c <_printf_common+0xec>
 80013c0:	f8da 3000 	ldr.w	r3, [sl]
 80013c4:	3302      	adds	r3, #2
 80013c6:	f8ca 3000 	str.w	r3, [sl]
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	f012 0f06 	tst.w	r2, #6
 80013d0:	4611      	mov	r1, r2
 80013d2:	d11b      	bne.n	800140c <_printf_common+0x7c>
 80013d4:	68e1      	ldr	r1, [r4, #12]
 80013d6:	4299      	cmp	r1, r3
 80013d8:	dd66      	ble.n	80014a8 <_printf_common+0x118>
 80013da:	f04f 0800 	mov.w	r8, #0
 80013de:	f104 0b19 	add.w	fp, r4, #25
 80013e2:	e005      	b.n	80013f0 <_printf_common+0x60>
 80013e4:	68e5      	ldr	r5, [r4, #12]
 80013e6:	f8da 3000 	ldr.w	r3, [sl]
 80013ea:	1aed      	subs	r5, r5, r3
 80013ec:	4545      	cmp	r5, r8
 80013ee:	dd0c      	ble.n	800140a <_printf_common+0x7a>
 80013f0:	2301      	movs	r3, #1
 80013f2:	465a      	mov	r2, fp
 80013f4:	4639      	mov	r1, r7
 80013f6:	4630      	mov	r0, r6
 80013f8:	47c8      	blx	r9
 80013fa:	3001      	adds	r0, #1
 80013fc:	f108 0801 	add.w	r8, r8, #1
 8001400:	d1f0      	bne.n	80013e4 <_printf_common+0x54>
 8001402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800140a:	6821      	ldr	r1, [r4, #0]
 800140c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001410:	3b00      	subs	r3, #0
 8001412:	bf18      	it	ne
 8001414:	2301      	movne	r3, #1
 8001416:	068a      	lsls	r2, r1, #26
 8001418:	d50a      	bpl.n	8001430 <_printf_common+0xa0>
 800141a:	18e1      	adds	r1, r4, r3
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	2030      	movs	r0, #48	@ 0x30
 8001420:	3302      	adds	r3, #2
 8001422:	4422      	add	r2, r4
 8001424:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800142c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001430:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001434:	4639      	mov	r1, r7
 8001436:	4630      	mov	r0, r6
 8001438:	47c8      	blx	r9
 800143a:	3001      	adds	r0, #1
 800143c:	d0e1      	beq.n	8001402 <_printf_common+0x72>
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	f8da 5000 	ldr.w	r5, [sl]
 8001444:	f003 0306 	and.w	r3, r3, #6
 8001448:	6921      	ldr	r1, [r4, #16]
 800144a:	2b04      	cmp	r3, #4
 800144c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8001450:	d01b      	beq.n	800148a <_printf_common+0xfa>
 8001452:	428a      	cmp	r2, r1
 8001454:	dd20      	ble.n	8001498 <_printf_common+0x108>
 8001456:	f04f 0800 	mov.w	r8, #0
 800145a:	1a52      	subs	r2, r2, r1
 800145c:	4490      	add	r8, r2
 800145e:	341a      	adds	r4, #26
 8001460:	2500      	movs	r5, #0
 8001462:	e001      	b.n	8001468 <_printf_common+0xd8>
 8001464:	4545      	cmp	r5, r8
 8001466:	da17      	bge.n	8001498 <_printf_common+0x108>
 8001468:	2301      	movs	r3, #1
 800146a:	4622      	mov	r2, r4
 800146c:	4639      	mov	r1, r7
 800146e:	4630      	mov	r0, r6
 8001470:	47c8      	blx	r9
 8001472:	3001      	adds	r0, #1
 8001474:	f105 0501 	add.w	r5, r5, #1
 8001478:	d1f4      	bne.n	8001464 <_printf_common+0xd4>
 800147a:	e7c2      	b.n	8001402 <_printf_common+0x72>
 800147c:	f012 0f06 	tst.w	r2, #6
 8001480:	d00d      	beq.n	800149e <_printf_common+0x10e>
 8001482:	3b00      	subs	r3, #0
 8001484:	bf18      	it	ne
 8001486:	2301      	movne	r3, #1
 8001488:	e7d2      	b.n	8001430 <_printf_common+0xa0>
 800148a:	1b40      	subs	r0, r0, r5
 800148c:	428a      	cmp	r2, r1
 800148e:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 8001492:	dce2      	bgt.n	800145a <_printf_common+0xca>
 8001494:	2800      	cmp	r0, #0
 8001496:	dce2      	bgt.n	800145e <_printf_common+0xce>
 8001498:	2000      	movs	r0, #0
 800149a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800149e:	f8da 3000 	ldr.w	r3, [sl]
 80014a2:	68e1      	ldr	r1, [r4, #12]
 80014a4:	4299      	cmp	r1, r3
 80014a6:	dc98      	bgt.n	80013da <_printf_common+0x4a>
 80014a8:	4611      	mov	r1, r2
 80014aa:	e7af      	b.n	800140c <_printf_common+0x7c>

080014ac <_printf_i>:
 80014ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b0:	4617      	mov	r7, r2
 80014b2:	b084      	sub	sp, #16
 80014b4:	7e0a      	ldrb	r2, [r1, #24]
 80014b6:	460c      	mov	r4, r1
 80014b8:	4606      	mov	r6, r0
 80014ba:	4698      	mov	r8, r3
 80014bc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80014be:	f101 0c43 	add.w	ip, r1, #67	@ 0x43
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d035      	beq.n	8001532 <_printf_i+0x86>
 80014c6:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 80014ca:	b2d9      	uxtb	r1, r3
 80014cc:	2920      	cmp	r1, #32
 80014ce:	d869      	bhi.n	80015a4 <_printf_i+0xf8>
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	d867      	bhi.n	80015a4 <_printf_i+0xf8>
 80014d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80014d8:	006600e6 	.word	0x006600e6
 80014dc:	00660066 	.word	0x00660066
 80014e0:	00660066 	.word	0x00660066
 80014e4:	00660066 	.word	0x00660066
 80014e8:	00660066 	.word	0x00660066
 80014ec:	00ac0066 	.word	0x00ac0066
 80014f0:	00660070 	.word	0x00660070
 80014f4:	00660066 	.word	0x00660066
 80014f8:	00700066 	.word	0x00700066
 80014fc:	00660066 	.word	0x00660066
 8001500:	00660066 	.word	0x00660066
 8001504:	00830021 	.word	0x00830021
 8001508:	006600c6 	.word	0x006600c6
 800150c:	00b60066 	.word	0x00b60066
 8001510:	00830066 	.word	0x00830066
 8001514:	00660066 	.word	0x00660066
 8001518:	00ec      	.short	0x00ec
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	6822      	ldr	r2, [r4, #0]
 800151e:	1d18      	adds	r0, r3, #4
 8001520:	6961      	ldr	r1, [r4, #20]
 8001522:	6028      	str	r0, [r5, #0]
 8001524:	0610      	lsls	r0, r2, #24
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	d402      	bmi.n	8001530 <_printf_i+0x84>
 800152a:	0652      	lsls	r2, r2, #25
 800152c:	f100 80e0 	bmi.w	80016f0 <_printf_i+0x244>
 8001530:	6019      	str	r1, [r3, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	46e1      	mov	r9, ip
 8001536:	6123      	str	r3, [r4, #16]
 8001538:	463b      	mov	r3, r7
 800153a:	aa03      	add	r2, sp, #12
 800153c:	4621      	mov	r1, r4
 800153e:	4630      	mov	r0, r6
 8001540:	f8cd 8000 	str.w	r8, [sp]
 8001544:	f7ff ff24 	bl	8001390 <_printf_common>
 8001548:	3001      	adds	r0, #1
 800154a:	d020      	beq.n	800158e <_printf_i+0xe2>
 800154c:	464a      	mov	r2, r9
 800154e:	6923      	ldr	r3, [r4, #16]
 8001550:	4639      	mov	r1, r7
 8001552:	4630      	mov	r0, r6
 8001554:	47c0      	blx	r8
 8001556:	3001      	adds	r0, #1
 8001558:	d019      	beq.n	800158e <_printf_i+0xe2>
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	68e0      	ldr	r0, [r4, #12]
 800155e:	079b      	lsls	r3, r3, #30
 8001560:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001564:	d518      	bpl.n	8001598 <_printf_i+0xec>
 8001566:	4548      	cmp	r0, r9
 8001568:	dd16      	ble.n	8001598 <_printf_i+0xec>
 800156a:	2500      	movs	r5, #0
 800156c:	f104 0a19 	add.w	sl, r4, #25
 8001570:	e004      	b.n	800157c <_printf_i+0xd0>
 8001572:	68e0      	ldr	r0, [r4, #12]
 8001574:	eba0 0309 	sub.w	r3, r0, r9
 8001578:	42ab      	cmp	r3, r5
 800157a:	dd0d      	ble.n	8001598 <_printf_i+0xec>
 800157c:	2301      	movs	r3, #1
 800157e:	4652      	mov	r2, sl
 8001580:	4639      	mov	r1, r7
 8001582:	4630      	mov	r0, r6
 8001584:	47c0      	blx	r8
 8001586:	3001      	adds	r0, #1
 8001588:	f105 0501 	add.w	r5, r5, #1
 800158c:	d1f1      	bne.n	8001572 <_printf_i+0xc6>
 800158e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001592:	b004      	add	sp, #16
 8001594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001598:	4548      	cmp	r0, r9
 800159a:	bfb8      	it	lt
 800159c:	4648      	movlt	r0, r9
 800159e:	b004      	add	sp, #16
 80015a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a4:	2001      	movs	r0, #1
 80015a6:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80015aa:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80015ae:	2300      	movs	r3, #0
 80015b0:	6120      	str	r0, [r4, #16]
 80015b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015b6:	e7bf      	b.n	8001538 <_printf_i+0x8c>
 80015b8:	682a      	ldr	r2, [r5, #0]
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	1d11      	adds	r1, r2, #4
 80015be:	0618      	lsls	r0, r3, #24
 80015c0:	6029      	str	r1, [r5, #0]
 80015c2:	d402      	bmi.n	80015ca <_printf_i+0x11e>
 80015c4:	0659      	lsls	r1, r3, #25
 80015c6:	f100 8095 	bmi.w	80016f4 <_printf_i+0x248>
 80015ca:	6810      	ldr	r0, [r2, #0]
 80015cc:	4601      	mov	r1, r0
 80015ce:	2800      	cmp	r0, #0
 80015d0:	6862      	ldr	r2, [r4, #4]
 80015d2:	f2c0 8093 	blt.w	80016fc <_printf_i+0x250>
 80015d6:	4854      	ldr	r0, [pc, #336]	@ (8001728 <_printf_i+0x27c>)
 80015d8:	f04f 0e0a 	mov.w	lr, #10
 80015dc:	e015      	b.n	800160a <_printf_i+0x15e>
 80015de:	6820      	ldr	r0, [r4, #0]
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80015e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80015ea:	d102      	bne.n	80015f2 <_printf_i+0x146>
 80015ec:	0640      	lsls	r0, r0, #25
 80015ee:	bf48      	it	mi
 80015f0:	b289      	uxthmi	r1, r1
 80015f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80015f4:	484c      	ldr	r0, [pc, #304]	@ (8001728 <_printf_i+0x27c>)
 80015f6:	602b      	str	r3, [r5, #0]
 80015f8:	bf14      	ite	ne
 80015fa:	f04f 0e0a 	movne.w	lr, #10
 80015fe:	f04f 0e08 	moveq.w	lr, #8
 8001602:	2300      	movs	r3, #0
 8001604:	6862      	ldr	r2, [r4, #4]
 8001606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800160a:	2a00      	cmp	r2, #0
 800160c:	60a2      	str	r2, [r4, #8]
 800160e:	db51      	blt.n	80016b4 <_printf_i+0x208>
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6023      	str	r3, [r4, #0]
 8001618:	2900      	cmp	r1, #0
 800161a:	d14b      	bne.n	80016b4 <_printf_i+0x208>
 800161c:	2a00      	cmp	r2, #0
 800161e:	d17b      	bne.n	8001718 <_printf_i+0x26c>
 8001620:	46e1      	mov	r9, ip
 8001622:	f1be 0f08 	cmp.w	lr, #8
 8001626:	d056      	beq.n	80016d6 <_printf_i+0x22a>
 8001628:	ebac 0309 	sub.w	r3, ip, r9
 800162c:	6123      	str	r3, [r4, #16]
 800162e:	e783      	b.n	8001538 <_printf_i+0x8c>
 8001630:	682a      	ldr	r2, [r5, #0]
 8001632:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001636:	2001      	movs	r0, #1
 8001638:	1d11      	adds	r1, r2, #4
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	6029      	str	r1, [r5, #0]
 800163e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001642:	e7b4      	b.n	80015ae <_printf_i+0x102>
 8001644:	682b      	ldr	r3, [r5, #0]
 8001646:	2100      	movs	r1, #0
 8001648:	6862      	ldr	r2, [r4, #4]
 800164a:	1d18      	adds	r0, r3, #4
 800164c:	6028      	str	r0, [r5, #0]
 800164e:	f8d3 9000 	ldr.w	r9, [r3]
 8001652:	4648      	mov	r0, r9
 8001654:	f000 f8fa 	bl	800184c <memchr>
 8001658:	2800      	cmp	r0, #0
 800165a:	d063      	beq.n	8001724 <_printf_i+0x278>
 800165c:	eba0 0009 	sub.w	r0, r0, r9
 8001660:	6060      	str	r0, [r4, #4]
 8001662:	e7a4      	b.n	80015ae <_printf_i+0x102>
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	6023      	str	r3, [r4, #0]
 800166c:	2278      	movs	r2, #120	@ 0x78
 800166e:	482f      	ldr	r0, [pc, #188]	@ (800172c <_printf_i+0x280>)
 8001670:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8001674:	682a      	ldr	r2, [r5, #0]
 8001676:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800167a:	f852 1b04 	ldr.w	r1, [r2], #4
 800167e:	d103      	bne.n	8001688 <_printf_i+0x1dc>
 8001680:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001684:	bf18      	it	ne
 8001686:	b289      	uxthne	r1, r1
 8001688:	602a      	str	r2, [r5, #0]
 800168a:	07da      	lsls	r2, r3, #31
 800168c:	d502      	bpl.n	8001694 <_printf_i+0x1e8>
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	6023      	str	r3, [r4, #0]
 8001694:	b919      	cbnz	r1, 800169e <_printf_i+0x1f2>
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	f023 0320 	bic.w	r3, r3, #32
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	f04f 0e10 	mov.w	lr, #16
 80016a2:	e7ae      	b.n	8001602 <_printf_i+0x156>
 80016a4:	2358      	movs	r3, #88	@ 0x58
 80016a6:	4820      	ldr	r0, [pc, #128]	@ (8001728 <_printf_i+0x27c>)
 80016a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	e7e1      	b.n	8001674 <_printf_i+0x1c8>
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	e7db      	b.n	800166c <_printf_i+0x1c0>
 80016b4:	4675      	mov	r5, lr
 80016b6:	46e1      	mov	r9, ip
 80016b8:	460a      	mov	r2, r1
 80016ba:	fbb1 f3f5 	udiv	r3, r1, r5
 80016be:	fb05 1a13 	mls	sl, r5, r3, r1
 80016c2:	42aa      	cmp	r2, r5
 80016c4:	4619      	mov	r1, r3
 80016c6:	f810 300a 	ldrb.w	r3, [r0, sl]
 80016ca:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80016ce:	d2f3      	bcs.n	80016b8 <_printf_i+0x20c>
 80016d0:	f1be 0f08 	cmp.w	lr, #8
 80016d4:	d1a8      	bne.n	8001628 <_printf_i+0x17c>
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	07dd      	lsls	r5, r3, #31
 80016da:	d5a5      	bpl.n	8001628 <_printf_i+0x17c>
 80016dc:	6862      	ldr	r2, [r4, #4]
 80016de:	6923      	ldr	r3, [r4, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dca1      	bgt.n	8001628 <_printf_i+0x17c>
 80016e4:	2330      	movs	r3, #48	@ 0x30
 80016e6:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80016ea:	f889 3000 	strb.w	r3, [r9]
 80016ee:	e79b      	b.n	8001628 <_printf_i+0x17c>
 80016f0:	8019      	strh	r1, [r3, #0]
 80016f2:	e71e      	b.n	8001532 <_printf_i+0x86>
 80016f4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80016f8:	4608      	mov	r0, r1
 80016fa:	e768      	b.n	80015ce <_printf_i+0x122>
 80016fc:	202d      	movs	r0, #45	@ 0x2d
 80016fe:	2a00      	cmp	r2, #0
 8001700:	60a2      	str	r2, [r4, #8]
 8001702:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8001706:	db02      	blt.n	800170e <_printf_i+0x262>
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6023      	str	r3, [r4, #0]
 800170e:	250a      	movs	r5, #10
 8001710:	4249      	negs	r1, r1
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <_printf_i+0x27c>)
 8001714:	46ae      	mov	lr, r5
 8001716:	e7ce      	b.n	80016b6 <_printf_i+0x20a>
 8001718:	7803      	ldrb	r3, [r0, #0]
 800171a:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 800171e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001722:	e77e      	b.n	8001622 <_printf_i+0x176>
 8001724:	6860      	ldr	r0, [r4, #4]
 8001726:	e742      	b.n	80015ae <_printf_i+0x102>
 8001728:	08006b10 	.word	0x08006b10
 800172c:	08006b24 	.word	0x08006b24

08001730 <__malloc_lock>:
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <__malloc_unlock>:
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <__smakebuf_r>:
 8001738:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	460c      	mov	r4, r1
 8001740:	0799      	lsls	r1, r3, #30
 8001742:	b096      	sub	sp, #88	@ 0x58
 8001744:	d507      	bpl.n	8001756 <__smakebuf_r+0x1e>
 8001746:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800174a:	2201      	movs	r2, #1
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8001752:	b016      	add	sp, #88	@ 0x58
 8001754:	bd70      	pop	{r4, r5, r6, pc}
 8001756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800175a:	4605      	mov	r5, r0
 800175c:	2900      	cmp	r1, #0
 800175e:	db2a      	blt.n	80017b6 <__smakebuf_r+0x7e>
 8001760:	466a      	mov	r2, sp
 8001762:	f000 f961 	bl	8001a28 <_fstat_r>
 8001766:	2800      	cmp	r0, #0
 8001768:	db23      	blt.n	80017b2 <__smakebuf_r+0x7a>
 800176a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800176e:	4628      	mov	r0, r5
 8001770:	9e01      	ldr	r6, [sp, #4]
 8001772:	f7ff fc0d 	bl	8000f90 <_malloc_r>
 8001776:	2800      	cmp	r0, #0
 8001778:	d031      	beq.n	80017de <__smakebuf_r+0xa6>
 800177a:	89a3      	ldrh	r3, [r4, #12]
 800177c:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 8001780:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001784:	6020      	str	r0, [r4, #0]
 8001786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178a:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800178e:	6120      	str	r0, [r4, #16]
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	6162      	str	r2, [r4, #20]
 8001794:	d1dd      	bne.n	8001752 <__smakebuf_r+0x1a>
 8001796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800179a:	4628      	mov	r0, r5
 800179c:	f000 f8a2 	bl	80018e4 <_isatty_r>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d0d6      	beq.n	8001752 <__smakebuf_r+0x1a>
 80017a4:	89a3      	ldrh	r3, [r4, #12]
 80017a6:	f023 0303 	bic.w	r3, r3, #3
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	81a3      	strh	r3, [r4, #12]
 80017b0:	e7cf      	b.n	8001752 <__smakebuf_r+0x1a>
 80017b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80017ba:	4628      	mov	r0, r5
 80017bc:	bf14      	ite	ne
 80017be:	2540      	movne	r5, #64	@ 0x40
 80017c0:	f44f 6580 	moveq.w	r5, #1024	@ 0x400
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7ff fbe3 	bl	8000f90 <_malloc_r>
 80017ca:	b140      	cbz	r0, 80017de <__smakebuf_r+0xa6>
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	6020      	str	r0, [r4, #0]
 80017d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80017d8:	81a3      	strh	r3, [r4, #12]
 80017da:	b016      	add	sp, #88	@ 0x58
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e2:	059a      	lsls	r2, r3, #22
 80017e4:	d4b5      	bmi.n	8001752 <__smakebuf_r+0x1a>
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80017ee:	2101      	movs	r1, #1
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6022      	str	r2, [r4, #0]
 80017f6:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80017fa:	81a3      	strh	r3, [r4, #12]
 80017fc:	e7a9      	b.n	8001752 <__smakebuf_r+0x1a>
 80017fe:	bf00      	nop

08001800 <__swhatbuf_r>:
 8001800:	b570      	push	{r4, r5, r6, lr}
 8001802:	460c      	mov	r4, r1
 8001804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001808:	b096      	sub	sp, #88	@ 0x58
 800180a:	4615      	mov	r5, r2
 800180c:	2900      	cmp	r1, #0
 800180e:	461e      	mov	r6, r3
 8001810:	db0f      	blt.n	8001832 <__swhatbuf_r+0x32>
 8001812:	466a      	mov	r2, sp
 8001814:	f000 f908 	bl	8001a28 <_fstat_r>
 8001818:	2800      	cmp	r0, #0
 800181a:	db0a      	blt.n	8001832 <__swhatbuf_r+0x32>
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001822:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001826:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	e007      	b.n	8001842 <__swhatbuf_r+0x42>
 8001832:	89a2      	ldrh	r2, [r4, #12]
 8001834:	2300      	movs	r3, #0
 8001836:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800183a:	bf14      	ite	ne
 800183c:	2240      	movne	r2, #64	@ 0x40
 800183e:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 8001842:	2000      	movs	r0, #0
 8001844:	6033      	str	r3, [r6, #0]
 8001846:	602a      	str	r2, [r5, #0]
 8001848:	b016      	add	sp, #88	@ 0x58
 800184a:	bd70      	pop	{r4, r5, r6, pc}

0800184c <memchr>:
 800184c:	fa5f fc81 	uxtb.w	ip, r1
 8001850:	0781      	lsls	r1, r0, #30
 8001852:	d044      	beq.n	80018de <memchr+0x92>
 8001854:	4603      	mov	r3, r0
 8001856:	1e51      	subs	r1, r2, #1
 8001858:	b922      	cbnz	r2, 8001864 <memchr+0x18>
 800185a:	e009      	b.n	8001870 <memchr+0x24>
 800185c:	079a      	lsls	r2, r3, #30
 800185e:	d009      	beq.n	8001874 <memchr+0x28>
 8001860:	3901      	subs	r1, #1
 8001862:	d305      	bcc.n	8001870 <memchr+0x24>
 8001864:	4618      	mov	r0, r3
 8001866:	3301      	adds	r3, #1
 8001868:	7802      	ldrb	r2, [r0, #0]
 800186a:	4562      	cmp	r2, ip
 800186c:	d1f6      	bne.n	800185c <memchr+0x10>
 800186e:	4770      	bx	lr
 8001870:	2000      	movs	r0, #0
 8001872:	4770      	bx	lr
 8001874:	4618      	mov	r0, r3
 8001876:	2903      	cmp	r1, #3
 8001878:	d80c      	bhi.n	8001894 <memchr+0x48>
 800187a:	2900      	cmp	r1, #0
 800187c:	d0f8      	beq.n	8001870 <memchr+0x24>
 800187e:	4603      	mov	r3, r0
 8001880:	4401      	add	r1, r0
 8001882:	e001      	b.n	8001888 <memchr+0x3c>
 8001884:	428b      	cmp	r3, r1
 8001886:	d0f3      	beq.n	8001870 <memchr+0x24>
 8001888:	4618      	mov	r0, r3
 800188a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800188e:	4562      	cmp	r2, ip
 8001890:	d1f8      	bne.n	8001884 <memchr+0x38>
 8001892:	4770      	bx	lr
 8001894:	b510      	push	{r4, lr}
 8001896:	eb0c 240c 	add.w	r4, ip, ip, lsl #8
 800189a:	4602      	mov	r2, r0
 800189c:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 80018a0:	e002      	b.n	80018a8 <memchr+0x5c>
 80018a2:	3904      	subs	r1, #4
 80018a4:	2903      	cmp	r1, #3
 80018a6:	d915      	bls.n	80018d4 <memchr+0x88>
 80018a8:	4610      	mov	r0, r2
 80018aa:	f852 3b04 	ldr.w	r3, [r2], #4
 80018ae:	4063      	eors	r3, r4
 80018b0:	f1a3 3e01 	sub.w	lr, r3, #16843009	@ 0x1010101
 80018b4:	ea2e 0303 	bic.w	r3, lr, r3
 80018b8:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
 80018bc:	d0f1      	beq.n	80018a2 <memchr+0x56>
 80018be:	4603      	mov	r3, r0
 80018c0:	4401      	add	r1, r0
 80018c2:	e001      	b.n	80018c8 <memchr+0x7c>
 80018c4:	428b      	cmp	r3, r1
 80018c6:	d008      	beq.n	80018da <memchr+0x8e>
 80018c8:	4618      	mov	r0, r3
 80018ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018ce:	4562      	cmp	r2, ip
 80018d0:	d1f8      	bne.n	80018c4 <memchr+0x78>
 80018d2:	bd10      	pop	{r4, pc}
 80018d4:	4610      	mov	r0, r2
 80018d6:	2900      	cmp	r1, #0
 80018d8:	d1f1      	bne.n	80018be <memchr+0x72>
 80018da:	2000      	movs	r0, #0
 80018dc:	bd10      	pop	{r4, pc}
 80018de:	4611      	mov	r1, r2
 80018e0:	e7c9      	b.n	8001876 <memchr+0x2a>
 80018e2:	bf00      	nop

080018e4 <_isatty_r>:
 80018e4:	b538      	push	{r3, r4, r5, lr}
 80018e6:	2200      	movs	r2, #0
 80018e8:	4d06      	ldr	r5, [pc, #24]	@ (8001904 <_isatty_r+0x20>)
 80018ea:	4604      	mov	r4, r0
 80018ec:	4608      	mov	r0, r1
 80018ee:	602a      	str	r2, [r5, #0]
 80018f0:	f000 fcb6 	bl	8002260 <_isatty>
 80018f4:	1c43      	adds	r3, r0, #1
 80018f6:	d000      	beq.n	80018fa <_isatty_r+0x16>
 80018f8:	bd38      	pop	{r3, r4, r5, pc}
 80018fa:	682b      	ldr	r3, [r5, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0fb      	beq.n	80018f8 <_isatty_r+0x14>
 8001900:	6023      	str	r3, [r4, #0]
 8001902:	bd38      	pop	{r3, r4, r5, pc}
 8001904:	200001c8 	.word	0x200001c8

08001908 <_sbrk_r>:
 8001908:	b538      	push	{r3, r4, r5, lr}
 800190a:	2200      	movs	r2, #0
 800190c:	4d06      	ldr	r5, [pc, #24]	@ (8001928 <_sbrk_r+0x20>)
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	602a      	str	r2, [r5, #0]
 8001914:	f000 fca8 	bl	8002268 <_sbrk>
 8001918:	1c43      	adds	r3, r0, #1
 800191a:	d000      	beq.n	800191e <_sbrk_r+0x16>
 800191c:	bd38      	pop	{r3, r4, r5, pc}
 800191e:	682b      	ldr	r3, [r5, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0fb      	beq.n	800191c <_sbrk_r+0x14>
 8001924:	6023      	str	r3, [r4, #0]
 8001926:	bd38      	pop	{r3, r4, r5, pc}
 8001928:	200001c8 	.word	0x200001c8

0800192c <__sread>:
 800192c:	b510      	push	{r4, lr}
 800192e:	460c      	mov	r4, r1
 8001930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001934:	f000 f862 	bl	80019fc <_read_r>
 8001938:	2800      	cmp	r0, #0
 800193a:	db03      	blt.n	8001944 <__sread+0x18>
 800193c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800193e:	4403      	add	r3, r0
 8001940:	6563      	str	r3, [r4, #84]	@ 0x54
 8001942:	bd10      	pop	{r4, pc}
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800194a:	81a3      	strh	r3, [r4, #12]
 800194c:	bd10      	pop	{r4, pc}
 800194e:	bf00      	nop

08001950 <__seofread>:
 8001950:	2000      	movs	r0, #0
 8001952:	4770      	bx	lr

08001954 <__swrite>:
 8001954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001958:	460c      	mov	r4, r1
 800195a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800195e:	461f      	mov	r7, r3
 8001960:	4605      	mov	r5, r0
 8001962:	05cb      	lsls	r3, r1, #23
 8001964:	4616      	mov	r6, r2
 8001966:	d40b      	bmi.n	8001980 <__swrite+0x2c>
 8001968:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800196c:	463b      	mov	r3, r7
 800196e:	4632      	mov	r2, r6
 8001970:	4628      	mov	r0, r5
 8001972:	81a1      	strh	r1, [r4, #12]
 8001974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800197c:	f000 b880 	b.w	8001a80 <_write_r>
 8001980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001984:	2302      	movs	r3, #2
 8001986:	2200      	movs	r2, #0
 8001988:	f000 f864 	bl	8001a54 <_lseek_r>
 800198c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001990:	e7ea      	b.n	8001968 <__swrite+0x14>
 8001992:	bf00      	nop

08001994 <__sseek>:
 8001994:	b510      	push	{r4, lr}
 8001996:	460c      	mov	r4, r1
 8001998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800199c:	f000 f85a 	bl	8001a54 <_lseek_r>
 80019a0:	1c42      	adds	r2, r0, #1
 80019a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019a6:	d004      	beq.n	80019b2 <__sseek+0x1e>
 80019a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019ac:	6560      	str	r0, [r4, #84]	@ 0x54
 80019ae:	81a3      	strh	r3, [r4, #12]
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b6:	81a3      	strh	r3, [r4, #12]
 80019b8:	bd10      	pop	{r4, pc}
 80019ba:	bf00      	nop

080019bc <__sclose>:
 80019bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c0:	f000 b80a 	b.w	80019d8 <_close_r>

080019c4 <_malloc_usable_size_r>:
 80019c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f1a3 0004 	sub.w	r0, r3, #4
 80019ce:	db00      	blt.n	80019d2 <_malloc_usable_size_r+0xe>
 80019d0:	4770      	bx	lr
 80019d2:	580b      	ldr	r3, [r1, r0]
 80019d4:	4418      	add	r0, r3
 80019d6:	4770      	bx	lr

080019d8 <_close_r>:
 80019d8:	b538      	push	{r3, r4, r5, lr}
 80019da:	2200      	movs	r2, #0
 80019dc:	4d06      	ldr	r5, [pc, #24]	@ (80019f8 <_close_r+0x20>)
 80019de:	4604      	mov	r4, r0
 80019e0:	4608      	mov	r0, r1
 80019e2:	602a      	str	r2, [r5, #0]
 80019e4:	f000 fc32 	bl	800224c <_close>
 80019e8:	1c43      	adds	r3, r0, #1
 80019ea:	d000      	beq.n	80019ee <_close_r+0x16>
 80019ec:	bd38      	pop	{r3, r4, r5, pc}
 80019ee:	682b      	ldr	r3, [r5, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0fb      	beq.n	80019ec <_close_r+0x14>
 80019f4:	6023      	str	r3, [r4, #0]
 80019f6:	bd38      	pop	{r3, r4, r5, pc}
 80019f8:	200001c8 	.word	0x200001c8

080019fc <_read_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	460c      	mov	r4, r1
 8001a00:	4684      	mov	ip, r0
 8001a02:	4611      	mov	r1, r2
 8001a04:	4d07      	ldr	r5, [pc, #28]	@ (8001a24 <_read_r+0x28>)
 8001a06:	461a      	mov	r2, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4664      	mov	r4, ip
 8001a0e:	602b      	str	r3, [r5, #0]
 8001a10:	f000 fc0e 	bl	8002230 <_read>
 8001a14:	1c43      	adds	r3, r0, #1
 8001a16:	d000      	beq.n	8001a1a <_read_r+0x1e>
 8001a18:	bd38      	pop	{r3, r4, r5, pc}
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0fb      	beq.n	8001a18 <_read_r+0x1c>
 8001a20:	6023      	str	r3, [r4, #0]
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	200001c8 	.word	0x200001c8

08001a28 <_fstat_r>:
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4d08      	ldr	r5, [pc, #32]	@ (8001a50 <_fstat_r+0x28>)
 8001a30:	2600      	movs	r6, #0
 8001a32:	4620      	mov	r0, r4
 8001a34:	4611      	mov	r1, r2
 8001a36:	461c      	mov	r4, r3
 8001a38:	602e      	str	r6, [r5, #0]
 8001a3a:	f000 fc0b 	bl	8002254 <_fstat>
 8001a3e:	1c43      	adds	r3, r0, #1
 8001a40:	d000      	beq.n	8001a44 <_fstat_r+0x1c>
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	682b      	ldr	r3, [r5, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0fb      	beq.n	8001a42 <_fstat_r+0x1a>
 8001a4a:	6023      	str	r3, [r4, #0]
 8001a4c:	bd70      	pop	{r4, r5, r6, pc}
 8001a4e:	bf00      	nop
 8001a50:	200001c8 	.word	0x200001c8

08001a54 <_lseek_r>:
 8001a54:	b538      	push	{r3, r4, r5, lr}
 8001a56:	460c      	mov	r4, r1
 8001a58:	4684      	mov	ip, r0
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4d07      	ldr	r5, [pc, #28]	@ (8001a7c <_lseek_r+0x28>)
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	4620      	mov	r0, r4
 8001a64:	4664      	mov	r4, ip
 8001a66:	602b      	str	r3, [r5, #0]
 8001a68:	f000 fbfc 	bl	8002264 <_lseek>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d000      	beq.n	8001a72 <_lseek_r+0x1e>
 8001a70:	bd38      	pop	{r3, r4, r5, pc}
 8001a72:	682b      	ldr	r3, [r5, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0fb      	beq.n	8001a70 <_lseek_r+0x1c>
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 8001a7c:	200001c8 	.word	0x200001c8

08001a80 <_write_r>:
 8001a80:	b538      	push	{r3, r4, r5, lr}
 8001a82:	460c      	mov	r4, r1
 8001a84:	4684      	mov	ip, r0
 8001a86:	4611      	mov	r1, r2
 8001a88:	4d07      	ldr	r5, [pc, #28]	@ (8001aa8 <_write_r+0x28>)
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4664      	mov	r4, ip
 8001a92:	602b      	str	r3, [r5, #0]
 8001a94:	f000 f9a4 	bl	8001de0 <_write>
 8001a98:	1c43      	adds	r3, r0, #1
 8001a9a:	d000      	beq.n	8001a9e <_write_r+0x1e>
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
 8001a9e:	682b      	ldr	r3, [r5, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0fb      	beq.n	8001a9c <_write_r+0x1c>
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	200001c8 	.word	0x200001c8

08001aac <__aeabi_uldivmod>:
 8001aac:	b953      	cbnz	r3, 8001ac4 <__aeabi_uldivmod+0x18>
 8001aae:	b94a      	cbnz	r2, 8001ac4 <__aeabi_uldivmod+0x18>
 8001ab0:	2900      	cmp	r1, #0
 8001ab2:	bf08      	it	eq
 8001ab4:	2800      	cmpeq	r0, #0
 8001ab6:	bf1c      	itt	ne
 8001ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001ac0:	f000 b98c 	b.w	8001ddc <__aeabi_idiv0>
 8001ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8001ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001acc:	f000 f806 	bl	8001adc <__udivmoddi4>
 8001ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001ad8:	b004      	add	sp, #16
 8001ada:	4770      	bx	lr

08001adc <__udivmoddi4>:
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8001ae2:	460e      	mov	r6, r1
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	460f      	mov	r7, r1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d147      	bne.n	8001b7c <__udivmoddi4+0xa0>
 8001aec:	428a      	cmp	r2, r1
 8001aee:	4694      	mov	ip, r2
 8001af0:	fab2 f382 	clz	r3, r2
 8001af4:	d95a      	bls.n	8001bac <__udivmoddi4+0xd0>
 8001af6:	b143      	cbz	r3, 8001b0a <__udivmoddi4+0x2e>
 8001af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8001afc:	f1c3 0220 	rsb	r2, r3, #32
 8001b00:	409f      	lsls	r7, r3
 8001b02:	409c      	lsls	r4, r3
 8001b04:	fa20 f202 	lsr.w	r2, r0, r2
 8001b08:	4317      	orrs	r7, r2
 8001b0a:	ea4f 461c 	mov.w	r6, ip, lsr #16
 8001b0e:	fa1f fe8c 	uxth.w	lr, ip
 8001b12:	0c22      	lsrs	r2, r4, #16
 8001b14:	fbb7 f1f6 	udiv	r1, r7, r6
 8001b18:	fb06 7711 	mls	r7, r6, r1, r7
 8001b1c:	fb01 f00e 	mul.w	r0, r1, lr
 8001b20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001b24:	4290      	cmp	r0, r2
 8001b26:	d908      	bls.n	8001b3a <__udivmoddi4+0x5e>
 8001b28:	eb1c 0202 	adds.w	r2, ip, r2
 8001b2c:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8001b30:	d202      	bcs.n	8001b38 <__udivmoddi4+0x5c>
 8001b32:	4290      	cmp	r0, r2
 8001b34:	f200 813c 	bhi.w	8001db0 <__udivmoddi4+0x2d4>
 8001b38:	4639      	mov	r1, r7
 8001b3a:	1a12      	subs	r2, r2, r0
 8001b3c:	b2a4      	uxth	r4, r4
 8001b3e:	fbb2 f0f6 	udiv	r0, r2, r6
 8001b42:	fb06 2210 	mls	r2, r6, r0, r2
 8001b46:	fb00 fe0e 	mul.w	lr, r0, lr
 8001b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001b4e:	45a6      	cmp	lr, r4
 8001b50:	d908      	bls.n	8001b64 <__udivmoddi4+0x88>
 8001b52:	eb1c 0404 	adds.w	r4, ip, r4
 8001b56:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001b5a:	d202      	bcs.n	8001b62 <__udivmoddi4+0x86>
 8001b5c:	45a6      	cmp	lr, r4
 8001b5e:	f200 812a 	bhi.w	8001db6 <__udivmoddi4+0x2da>
 8001b62:	4610      	mov	r0, r2
 8001b64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001b68:	eba4 040e 	sub.w	r4, r4, lr
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	b11d      	cbz	r5, 8001b78 <__udivmoddi4+0x9c>
 8001b70:	40dc      	lsrs	r4, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	e9c5 4300 	strd	r4, r3, [r5]
 8001b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b7c:	428b      	cmp	r3, r1
 8001b7e:	d905      	bls.n	8001b8c <__udivmoddi4+0xb0>
 8001b80:	b10d      	cbz	r5, 8001b86 <__udivmoddi4+0xaa>
 8001b82:	e9c5 0100 	strd	r0, r1, [r5]
 8001b86:	2100      	movs	r1, #0
 8001b88:	4608      	mov	r0, r1
 8001b8a:	e7f5      	b.n	8001b78 <__udivmoddi4+0x9c>
 8001b8c:	fab3 f183 	clz	r1, r3
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d14f      	bne.n	8001c34 <__udivmoddi4+0x158>
 8001b94:	42b3      	cmp	r3, r6
 8001b96:	f0c0 8102 	bcc.w	8001d9e <__udivmoddi4+0x2c2>
 8001b9a:	4282      	cmp	r2, r0
 8001b9c:	f240 80ff 	bls.w	8001d9e <__udivmoddi4+0x2c2>
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	2d00      	cmp	r5, #0
 8001ba4:	d0e8      	beq.n	8001b78 <__udivmoddi4+0x9c>
 8001ba6:	e9c5 4700 	strd	r4, r7, [r5]
 8001baa:	e7e5      	b.n	8001b78 <__udivmoddi4+0x9c>
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 80af 	bne.w	8001d10 <__udivmoddi4+0x234>
 8001bb2:	1a8a      	subs	r2, r1, r2
 8001bb4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001bb8:	fa1f f78c 	uxth.w	r7, ip
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fbb2 f6fe 	udiv	r6, r2, lr
 8001bc2:	fb0e 2016 	mls	r0, lr, r6, r2
 8001bc6:	0c22      	lsrs	r2, r4, #16
 8001bc8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001bcc:	fb07 f006 	mul.w	r0, r7, r6
 8001bd0:	4290      	cmp	r0, r2
 8001bd2:	d90f      	bls.n	8001bf4 <__udivmoddi4+0x118>
 8001bd4:	eb1c 0202 	adds.w	r2, ip, r2
 8001bd8:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 8001bdc:	bf2c      	ite	cs
 8001bde:	f04f 0901 	movcs.w	r9, #1
 8001be2:	f04f 0900 	movcc.w	r9, #0
 8001be6:	4290      	cmp	r0, r2
 8001be8:	d903      	bls.n	8001bf2 <__udivmoddi4+0x116>
 8001bea:	f1b9 0f00 	cmp.w	r9, #0
 8001bee:	f000 80dc 	beq.w	8001daa <__udivmoddi4+0x2ce>
 8001bf2:	4646      	mov	r6, r8
 8001bf4:	1a12      	subs	r2, r2, r0
 8001bf6:	b2a4      	uxth	r4, r4
 8001bf8:	fbb2 f0fe 	udiv	r0, r2, lr
 8001bfc:	fb0e 2210 	mls	r2, lr, r0, r2
 8001c00:	fb00 f707 	mul.w	r7, r0, r7
 8001c04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001c08:	42a7      	cmp	r7, r4
 8001c0a:	d90f      	bls.n	8001c2c <__udivmoddi4+0x150>
 8001c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8001c10:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001c14:	bf2c      	ite	cs
 8001c16:	f04f 0e01 	movcs.w	lr, #1
 8001c1a:	f04f 0e00 	movcc.w	lr, #0
 8001c1e:	42a7      	cmp	r7, r4
 8001c20:	d903      	bls.n	8001c2a <__udivmoddi4+0x14e>
 8001c22:	f1be 0f00 	cmp.w	lr, #0
 8001c26:	f000 80c9 	beq.w	8001dbc <__udivmoddi4+0x2e0>
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	1be4      	subs	r4, r4, r7
 8001c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001c32:	e79c      	b.n	8001b6e <__udivmoddi4+0x92>
 8001c34:	f1c1 0420 	rsb	r4, r1, #32
 8001c38:	408b      	lsls	r3, r1
 8001c3a:	fa06 fc01 	lsl.w	ip, r6, r1
 8001c3e:	fa00 fe01 	lsl.w	lr, r0, r1
 8001c42:	fa22 f704 	lsr.w	r7, r2, r4
 8001c46:	40e6      	lsrs	r6, r4
 8001c48:	408a      	lsls	r2, r1
 8001c4a:	431f      	orrs	r7, r3
 8001c4c:	fa20 f304 	lsr.w	r3, r0, r4
 8001c50:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001c54:	ea43 030c 	orr.w	r3, r3, ip
 8001c58:	fa1f fc87 	uxth.w	ip, r7
 8001c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001c60:	fbb6 f0f8 	udiv	r0, r6, r8
 8001c64:	fb08 6610 	mls	r6, r8, r0, r6
 8001c68:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8001c6c:	fb00 f90c 	mul.w	r9, r0, ip
 8001c70:	45b1      	cmp	r9, r6
 8001c72:	d90e      	bls.n	8001c92 <__udivmoddi4+0x1b6>
 8001c74:	19be      	adds	r6, r7, r6
 8001c76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8001c7a:	bf2c      	ite	cs
 8001c7c:	f04f 0b01 	movcs.w	fp, #1
 8001c80:	f04f 0b00 	movcc.w	fp, #0
 8001c84:	45b1      	cmp	r9, r6
 8001c86:	d903      	bls.n	8001c90 <__udivmoddi4+0x1b4>
 8001c88:	f1bb 0f00 	cmp.w	fp, #0
 8001c8c:	f000 80a2 	beq.w	8001dd4 <__udivmoddi4+0x2f8>
 8001c90:	4650      	mov	r0, sl
 8001c92:	eba6 0609 	sub.w	r6, r6, r9
 8001c96:	fa1f f983 	uxth.w	r9, r3
 8001c9a:	fbb6 f3f8 	udiv	r3, r6, r8
 8001c9e:	fb08 6613 	mls	r6, r8, r3, r6
 8001ca2:	fb03 fc0c 	mul.w	ip, r3, ip
 8001ca6:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8001caa:	45b4      	cmp	ip, r6
 8001cac:	d90e      	bls.n	8001ccc <__udivmoddi4+0x1f0>
 8001cae:	19be      	adds	r6, r7, r6
 8001cb0:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8001cb4:	bf2c      	ite	cs
 8001cb6:	f04f 0901 	movcs.w	r9, #1
 8001cba:	f04f 0900 	movcc.w	r9, #0
 8001cbe:	45b4      	cmp	ip, r6
 8001cc0:	d903      	bls.n	8001cca <__udivmoddi4+0x1ee>
 8001cc2:	f1b9 0f00 	cmp.w	r9, #0
 8001cc6:	f000 8082 	beq.w	8001dce <__udivmoddi4+0x2f2>
 8001cca:	4643      	mov	r3, r8
 8001ccc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001cd0:	eba6 060c 	sub.w	r6, r6, ip
 8001cd4:	fba0 8c02 	umull	r8, ip, r0, r2
 8001cd8:	4566      	cmp	r6, ip
 8001cda:	4643      	mov	r3, r8
 8001cdc:	46e1      	mov	r9, ip
 8001cde:	d302      	bcc.n	8001ce6 <__udivmoddi4+0x20a>
 8001ce0:	d107      	bne.n	8001cf2 <__udivmoddi4+0x216>
 8001ce2:	45c6      	cmp	lr, r8
 8001ce4:	d205      	bcs.n	8001cf2 <__udivmoddi4+0x216>
 8001ce6:	ebb8 0302 	subs.w	r3, r8, r2
 8001cea:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001cee:	3801      	subs	r0, #1
 8001cf0:	46e1      	mov	r9, ip
 8001cf2:	b15d      	cbz	r5, 8001d0c <__udivmoddi4+0x230>
 8001cf4:	ebbe 0203 	subs.w	r2, lr, r3
 8001cf8:	eb66 0609 	sbc.w	r6, r6, r9
 8001cfc:	fa06 f404 	lsl.w	r4, r6, r4
 8001d00:	fa22 f301 	lsr.w	r3, r2, r1
 8001d04:	40ce      	lsrs	r6, r1
 8001d06:	431c      	orrs	r4, r3
 8001d08:	e9c5 4600 	strd	r4, r6, [r5]
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	e733      	b.n	8001b78 <__udivmoddi4+0x9c>
 8001d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8001d14:	f1c3 0220 	rsb	r2, r3, #32
 8001d18:	4099      	lsls	r1, r3
 8001d1a:	409c      	lsls	r4, r3
 8001d1c:	40d6      	lsrs	r6, r2
 8001d1e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001d22:	fa20 f202 	lsr.w	r2, r0, r2
 8001d26:	fa1f f78c 	uxth.w	r7, ip
 8001d2a:	fbb6 f0fe 	udiv	r0, r6, lr
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	fb0e 6610 	mls	r6, lr, r0, r6
 8001d34:	0c11      	lsrs	r1, r2, #16
 8001d36:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8001d3a:	fb00 f607 	mul.w	r6, r0, r7
 8001d3e:	428e      	cmp	r6, r1
 8001d40:	d90e      	bls.n	8001d60 <__udivmoddi4+0x284>
 8001d42:	eb1c 0101 	adds.w	r1, ip, r1
 8001d46:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8001d4a:	bf2c      	ite	cs
 8001d4c:	f04f 0901 	movcs.w	r9, #1
 8001d50:	f04f 0900 	movcc.w	r9, #0
 8001d54:	428e      	cmp	r6, r1
 8001d56:	d902      	bls.n	8001d5e <__udivmoddi4+0x282>
 8001d58:	f1b9 0f00 	cmp.w	r9, #0
 8001d5c:	d034      	beq.n	8001dc8 <__udivmoddi4+0x2ec>
 8001d5e:	4640      	mov	r0, r8
 8001d60:	1b89      	subs	r1, r1, r6
 8001d62:	b292      	uxth	r2, r2
 8001d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8001d68:	fb0e 1116 	mls	r1, lr, r6, r1
 8001d6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d70:	fb06 f107 	mul.w	r1, r6, r7
 8001d74:	4291      	cmp	r1, r2
 8001d76:	d90e      	bls.n	8001d96 <__udivmoddi4+0x2ba>
 8001d78:	eb1c 0202 	adds.w	r2, ip, r2
 8001d7c:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 8001d80:	bf2c      	ite	cs
 8001d82:	f04f 0901 	movcs.w	r9, #1
 8001d86:	f04f 0900 	movcc.w	r9, #0
 8001d8a:	4291      	cmp	r1, r2
 8001d8c:	d902      	bls.n	8001d94 <__udivmoddi4+0x2b8>
 8001d8e:	f1b9 0f00 	cmp.w	r9, #0
 8001d92:	d016      	beq.n	8001dc2 <__udivmoddi4+0x2e6>
 8001d94:	4646      	mov	r6, r8
 8001d96:	1a52      	subs	r2, r2, r1
 8001d98:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 8001d9c:	e70f      	b.n	8001bbe <__udivmoddi4+0xe2>
 8001d9e:	1a84      	subs	r4, r0, r2
 8001da0:	eb66 0203 	sbc.w	r2, r6, r3
 8001da4:	2001      	movs	r0, #1
 8001da6:	4617      	mov	r7, r2
 8001da8:	e6fb      	b.n	8001ba2 <__udivmoddi4+0xc6>
 8001daa:	3e02      	subs	r6, #2
 8001dac:	4462      	add	r2, ip
 8001dae:	e721      	b.n	8001bf4 <__udivmoddi4+0x118>
 8001db0:	3902      	subs	r1, #2
 8001db2:	4462      	add	r2, ip
 8001db4:	e6c1      	b.n	8001b3a <__udivmoddi4+0x5e>
 8001db6:	4464      	add	r4, ip
 8001db8:	3802      	subs	r0, #2
 8001dba:	e6d3      	b.n	8001b64 <__udivmoddi4+0x88>
 8001dbc:	4464      	add	r4, ip
 8001dbe:	3802      	subs	r0, #2
 8001dc0:	e734      	b.n	8001c2c <__udivmoddi4+0x150>
 8001dc2:	3e02      	subs	r6, #2
 8001dc4:	4462      	add	r2, ip
 8001dc6:	e7e6      	b.n	8001d96 <__udivmoddi4+0x2ba>
 8001dc8:	3802      	subs	r0, #2
 8001dca:	4461      	add	r1, ip
 8001dcc:	e7c8      	b.n	8001d60 <__udivmoddi4+0x284>
 8001dce:	3b02      	subs	r3, #2
 8001dd0:	443e      	add	r6, r7
 8001dd2:	e77b      	b.n	8001ccc <__udivmoddi4+0x1f0>
 8001dd4:	3802      	subs	r0, #2
 8001dd6:	443e      	add	r6, r7
 8001dd8:	e75b      	b.n	8001c92 <__udivmoddi4+0x1b6>
 8001dda:	bf00      	nop

08001ddc <__aeabi_idiv0>:
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int le, char *ptr, int len) {
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001de0:	1e10      	subs	r0, r2, #0
 8001de2:	dd29      	ble.n	8001e38 <_write+0x58>
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001de4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001de8:	eb01 0c00 	add.w	ip, r1, r0
 8001dec:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
		ITM_SendChar(*ptr++);
 8001df0:	3101      	adds	r1, #1
 8001df2:	07d2      	lsls	r2, r2, #31
 8001df4:	d51d      	bpl.n	8001e32 <_write+0x52>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001df6:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dfa:	07d2      	lsls	r2, r2, #31
 8001dfc:	d519      	bpl.n	8001e32 <_write+0x52>
int _write(int le, char *ptr, int len) {
 8001dfe:	b500      	push	{lr}
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e00:	681a      	ldr	r2, [r3, #0]
		ITM_SendChar(*ptr++);
 8001e02:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 8001e06:	b91a      	cbnz	r2, 8001e10 <_write+0x30>
    {
      __NOP();
 8001e08:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	d0fb      	beq.n	8001e08 <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e10:	f883 e000 	strb.w	lr, [r3]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e14:	4561      	cmp	r1, ip
 8001e16:	d00a      	beq.n	8001e2e <_write+0x4e>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e18:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
		ITM_SendChar(*ptr++);
 8001e1c:	3101      	adds	r1, #1
 8001e1e:	07d2      	lsls	r2, r2, #31
 8001e20:	d5f8      	bpl.n	8001e14 <_write+0x34>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e22:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e26:	07d2      	lsls	r2, r2, #31
 8001e28:	d4ea      	bmi.n	8001e00 <_write+0x20>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e2a:	4561      	cmp	r1, ip
 8001e2c:	d1f4      	bne.n	8001e18 <_write+0x38>
	}

	return len;
}
 8001e2e:	f85d fb04 	ldr.w	pc, [sp], #4
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e32:	4561      	cmp	r1, ip
 8001e34:	d1da      	bne.n	8001dec <_write+0xc>
 8001e36:	4770      	bx	lr
}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	0000      	movs	r0, r0
	...

08001e40 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e40:	b530      	push	{r4, r5, lr}
 8001e42:	b09f      	sub	sp, #124	@ 0x7c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e44:	2260      	movs	r2, #96	@ 0x60
 8001e46:	2100      	movs	r1, #0
 8001e48:	a806      	add	r0, sp, #24
 8001e4a:	f7fe fa63 	bl	8000314 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e4e:	2300      	movs	r3, #0

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e54:	e9cd 3300 	strd	r3, r3, [sp]
 8001e58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001e5c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e60:	f000 fd60 	bl	8002924 <HAL_PWREx_ControlVoltageScaling>
 8001e64:	b108      	cbz	r0, 8001e6a <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e66:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e68:	e7fe      	b.n	8001e68 <SystemClock_Config+0x28>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e6a:	4603      	mov	r3, r0
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001e6c:	9317      	str	r3, [sp, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001e6e:	2301      	movs	r3, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e70:	2202      	movs	r2, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e72:	f44f 7180 	mov.w	r1, #256	@ 0x100
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001e76:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001ed0 <SystemClock_Config+0x90>
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001e7a:	9316      	str	r3, [sp, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLR = 1;
 8001e7c:	931b      	str	r3, [sp, #108]	@ 0x6c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e7e:	2410      	movs	r4, #16
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001e80:	230a      	movs	r3, #10
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e82:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001e84:	9318      	str	r3, [sp, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001e86:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e8a:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e8e:	e9cd 2219 	strd	r2, r2, [sp, #100]	@ 0x64
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e92:	940a      	str	r4, [sp, #40]	@ 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e94:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e96:	9109      	str	r1, [sp, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e98:	f001 f82a 	bl	8002ef0 <HAL_RCC_OscConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b108      	cbz	r0, 8001ea4 <SystemClock_Config+0x64>
 8001ea0:	b672      	cpsid	i
	while (1) {
 8001ea2:	e7fe      	b.n	8001ea2 <SystemClock_Config+0x62>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ea4:	251f      	movs	r5, #31
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea6:	2403      	movs	r4, #3
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea8:	2200      	movs	r2, #0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eae:	2300      	movs	r3, #0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001eb0:	4668      	mov	r0, sp
 8001eb2:	2104      	movs	r1, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb4:	e9cd 5400 	strd	r5, r4, [sp]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001ebc:	f000 feb2 	bl	8002c24 <HAL_RCC_ClockConfig>
 8001ec0:	b108      	cbz	r0, 8001ec6 <SystemClock_Config+0x86>
 8001ec2:	b672      	cpsid	i
	while (1) {
 8001ec4:	e7fe      	b.n	8001ec4 <SystemClock_Config+0x84>
}
 8001ec6:	b01f      	add	sp, #124	@ 0x7c
 8001ec8:	bd30      	pop	{r4, r5, pc}
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	0000000c 	.word	0x0000000c
 8001ed4:	00000000 	.word	0x00000000

08001ed8 <main>:
int main(void) {
 8001ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	begin = DWT->CYCCNT;
 8001edc:	4b64      	ldr	r3, [pc, #400]	@ (8002070 <main+0x198>)
 8001ede:	4d65      	ldr	r5, [pc, #404]	@ (8002074 <main+0x19c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
int main(void) {
 8001ee2:	b092      	sub	sp, #72	@ 0x48
	begin = DWT->CYCCNT;
 8001ee4:	602b      	str	r3, [r5, #0]
	HAL_Init();
 8001ee6:	f000 fa83 	bl	80023f0 <HAL_Init>
	SystemClock_Config();
 8001eea:	f7ff ffa9 	bl	8001e40 <SystemClock_Config>
	HAL_PWREx_DisableUCPDDeadBattery();
 8001eee:	f000 fda5 	bl	8002a3c <HAL_PWREx_DisableUCPDDeadBattery>
	if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK) {
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f000 fd68 	bl	80029c8 <HAL_PWREx_ConfigSupply>
 8001ef8:	b108      	cbz	r0, 8001efe <main+0x26>
 8001efa:	b672      	cpsid	i
	while (1) {
 8001efc:	e7fe      	b.n	8001efc <main+0x24>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b5e      	ldr	r3, [pc, #376]	@ (8002078 <main+0x1a0>)
 8001f00:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001f0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f10:	f002 0201 	and.w	r2, r2, #1
 8001f14:	9201      	str	r2, [sp, #4]
 8001f16:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f18:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f1c:	f042 0202 	orr.w	r2, r2, #2
 8001f20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	9302      	str	r3, [sp, #8]
 8001f2e:	9b02      	ldr	r3, [sp, #8]
	if (HAL_ICACHE_Enable() != HAL_OK) {
 8001f30:	f000 fcee 	bl	8002910 <HAL_ICACHE_Enable>
 8001f34:	b108      	cbz	r0, 8001f3a <main+0x62>
 8001f36:	b672      	cpsid	i
	while (1) {
 8001f38:	e7fe      	b.n	8001f38 <main+0x60>
	htim4.Instance = TIM4;
 8001f3a:	4c50      	ldr	r4, [pc, #320]	@ (800207c <main+0x1a4>)
 8001f3c:	4b50      	ldr	r3, [pc, #320]	@ (8002080 <main+0x1a8>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim4.Instance = TIM4;
 8001f42:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1000;
 8001f44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f48:	e9cd 0007 	strd	r0, r0, [sp, #28]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f4c:	e9cd 0004 	strd	r0, r0, [sp, #16]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001f50:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8001f54:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8001f58:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f5c:	9006      	str	r0, [sp, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f5e:	9003      	str	r0, [sp, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001f60:	900a      	str	r0, [sp, #40]	@ 0x28
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f62:	6120      	str	r0, [r4, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	61a0      	str	r0, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f66:	9009      	str	r0, [sp, #36]	@ 0x24
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001f68:	4620      	mov	r0, r4
	htim4.Init.Period = 1000;
 8001f6a:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001f6c:	f003 fd84 	bl	8005a78 <HAL_TIM_Base_Init>
 8001f70:	b108      	cbz	r0, 8001f76 <main+0x9e>
 8001f72:	b672      	cpsid	i
	while (1) {
 8001f74:	e7fe      	b.n	8001f74 <main+0x9c>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	a906      	add	r1, sp, #24
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7e:	9306      	str	r3, [sp, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001f80:	f004 f81c 	bl	8005fbc <HAL_TIM_ConfigClockSource>
 8001f84:	b108      	cbz	r0, 8001f8a <main+0xb2>
 8001f86:	b672      	cpsid	i
	while (1) {
 8001f88:	e7fe      	b.n	8001f88 <main+0xb0>
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f003 fe52 	bl	8005c34 <HAL_TIM_PWM_Init>
 8001f90:	b108      	cbz	r0, 8001f96 <main+0xbe>
 8001f92:	b672      	cpsid	i
	while (1) {
 8001f94:	e7fe      	b.n	8001f94 <main+0xbc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001f9a:	a903      	add	r1, sp, #12
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f004 f9bf 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa2:	b108      	cbz	r0, 8001fa8 <main+0xd0>
 8001fa4:	b672      	cpsid	i
	while (1) {
 8001fa6:	e7fe      	b.n	8001fa6 <main+0xce>
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001fa8:	2204      	movs	r2, #4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001faa:	2660      	movs	r6, #96	@ 0x60
 8001fac:	2700      	movs	r7, #0
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fae:	900c      	str	r0, [sp, #48]	@ 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8001fb0:	a90a      	add	r1, sp, #40	@ 0x28
 8001fb2:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb4:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001fb8:	920e      	str	r2, [sp, #56]	@ 0x38
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8001fba:	f004 f92d 	bl	8006218 <HAL_TIM_PWM_ConfigChannel>
 8001fbe:	4606      	mov	r6, r0
 8001fc0:	b108      	cbz	r0, 8001fc6 <main+0xee>
 8001fc2:	b672      	cpsid	i
	while (1) {
 8001fc4:	e7fe      	b.n	8001fc4 <main+0xec>
	HAL_TIM_MspPostInit(&htim4);
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f000 f896 	bl	80020f8 <HAL_TIM_MspPostInit>
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001fcc:	230c      	movs	r3, #12
	huart1.Init.BaudRate = 115200;
 8001fce:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
	huart1.Instance = USART1;
 8001fd2:	4c2c      	ldr	r4, [pc, #176]	@ (8002084 <main+0x1ac>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	e9c4 6304 	strd	r6, r3, [r4, #16]
	huart1.Instance = USART1;
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <main+0x1b0>)
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001fda:	4620      	mov	r0, r4
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	e9c4 6602 	strd	r6, r6, [r4, #8]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	e9c4 6606 	strd	r6, r6, [r4, #24]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fe4:	e9c4 6608 	strd	r6, r6, [r4, #32]
	huart1.Init.BaudRate = 115200;
 8001fe8:	6062      	str	r2, [r4, #4]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fea:	62a6      	str	r6, [r4, #40]	@ 0x28
	huart1.Instance = USART1;
 8001fec:	6023      	str	r3, [r4, #0]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001fee:	f004 fb91 	bl	8006714 <HAL_UART_Init>
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	b108      	cbz	r0, 8001ffa <main+0x122>
 8001ff6:	b672      	cpsid	i
	while (1) {
 8001ff8:	e7fe      	b.n	8001ff8 <main+0x120>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f004 fce6 	bl	80069cc <HAL_UARTEx_SetTxFifoThreshold>
 8002000:	4601      	mov	r1, r0
 8002002:	b108      	cbz	r0, 8002008 <main+0x130>
 8002004:	b672      	cpsid	i
	while (1) {
 8002006:	e7fe      	b.n	8002006 <main+0x12e>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8002008:	4620      	mov	r0, r4
 800200a:	f004 fd21 	bl	8006a50 <HAL_UARTEx_SetRxFifoThreshold>
 800200e:	b108      	cbz	r0, 8002014 <main+0x13c>
 8002010:	b672      	cpsid	i
	while (1) {
 8002012:	e7fe      	b.n	8002012 <main+0x13a>
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8002014:	481b      	ldr	r0, [pc, #108]	@ (8002084 <main+0x1ac>)
 8002016:	f004 fcbb 	bl	8006990 <HAL_UARTEx_DisableFifoMode>
 800201a:	b108      	cbz	r0, 8002020 <main+0x148>
 800201c:	b672      	cpsid	i
	while (1) {
 800201e:	e7fe      	b.n	800201e <main+0x146>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002020:	2104      	movs	r1, #4
 8002022:	4816      	ldr	r0, [pc, #88]	@ (800207c <main+0x1a4>)
 8002024:	f003 fee2 	bl	8005dec <HAL_TIM_PWM_Start>
	end = DWT->CYCCNT;
 8002028:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <main+0x198>)
 800202a:	4b18      	ldr	r3, [pc, #96]	@ (800208c <main+0x1b4>)
 800202c:	6856      	ldr	r6, [r2, #4]
	printf("%u\n", diff);
 800202e:	4818      	ldr	r0, [pc, #96]	@ (8002090 <main+0x1b8>)
	end = DWT->CYCCNT;
 8002030:	601e      	str	r6, [r3, #0]
	uint32_t diff = end - begin;
 8002032:	682b      	ldr	r3, [r5, #0]
		printf("diff: %ld\n", diff);
 8002034:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8002094 <main+0x1bc>
	uint32_t diff = end - begin;
 8002038:	1af6      	subs	r6, r6, r3
	printf("%u\n", diff);
 800203a:	4631      	mov	r1, r6
 800203c:	f7fe fa52 	bl	80004e4 <iprintf>
			TIM4->CCR2 = i;
 8002040:	4d0f      	ldr	r5, [pc, #60]	@ (8002080 <main+0x1a8>)
		for (int i = 0; i <= 1000; i++) {
 8002042:	2400      	movs	r4, #0
 8002044:	f240 37e9 	movw	r7, #1001	@ 0x3e9
			TIM4->CCR2 = i;
 8002048:	63ac      	str	r4, [r5, #56]	@ 0x38
			HAL_Delay(1);
 800204a:	2001      	movs	r0, #1
		for (int i = 0; i <= 1000; i++) {
 800204c:	3401      	adds	r4, #1
			HAL_Delay(1);
 800204e:	f000 fa0d 	bl	800246c <HAL_Delay>
		for (int i = 0; i <= 1000; i++) {
 8002052:	42bc      	cmp	r4, r7
 8002054:	d1f8      	bne.n	8002048 <main+0x170>
		for (int i = 1000; i >= 0; i--) {
 8002056:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
			TIM4->CCR2 = i;
 800205a:	63ac      	str	r4, [r5, #56]	@ 0x38
			HAL_Delay(1);
 800205c:	2001      	movs	r0, #1
 800205e:	f000 fa05 	bl	800246c <HAL_Delay>
		for (int i = 1000; i >= 0; i--) {
 8002062:	3c01      	subs	r4, #1
 8002064:	d2f9      	bcs.n	800205a <main+0x182>
		printf("diff: %ld\n", diff);
 8002066:	4631      	mov	r1, r6
 8002068:	4640      	mov	r0, r8
 800206a:	f7fe fa3b 	bl	80004e4 <iprintf>
		for (int i = 0; i <= 1000; i++) {
 800206e:	e7e8      	b.n	8002042 <main+0x16a>
 8002070:	e0001000 	.word	0xe0001000
 8002074:	200001d0 	.word	0x200001d0
 8002078:	46020c00 	.word	0x46020c00
 800207c:	2000026c 	.word	0x2000026c
 8002080:	40000800 	.word	0x40000800
 8002084:	200001d8 	.word	0x200001d8
 8002088:	40013800 	.word	0x40013800
 800208c:	200001cc 	.word	0x200001cc
 8002090:	08006aec 	.word	0x08006aec
 8002094:	08006af0 	.word	0x08006af0

08002098 <Error_Handler>:
 8002098:	b672      	cpsid	i
	while (1) {
 800209a:	e7fe      	b.n	800209a <Error_Handler+0x2>

0800209c <HAL_MspInit>:

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800209c:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <HAL_MspInit+0x20>)
{
 80020a0:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80020a6:	4302      	orrs	r2, r0
 80020a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80020ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b0:	4003      	ands	r3, r0
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80020b8:	f000 b9ea 	b.w	8002490 <HAL_NVIC_SetPriorityGrouping>
 80020bc:	46020c00 	.word	0x46020c00

080020c0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80020c0:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_TIM_Base_MspInit+0x2c>)
 80020c2:	6802      	ldr	r2, [r0, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d000      	beq.n	80020ca <HAL_TIM_Base_MspInit+0xa>
 80020c8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_TIM_Base_MspInit+0x30>)
{
 80020cc:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80020d2:	f042 0204 	orr.w	r2, r2, #4
 80020d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80020da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80020e6:	b002      	add	sp, #8
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40000800 	.word	0x40000800
 80020f0:	46020c00 	.word	0x46020c00
 80020f4:	00000000 	.word	0x00000000

080020f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	2300      	movs	r3, #0
{
 80020fa:	b510      	push	{r4, lr}
  if(htim->Instance==TIM4)
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <HAL_TIM_MspPostInit+0x58>)
 80020fe:	6801      	ldr	r1, [r0, #0]
{
 8002100:	b088      	sub	sp, #32
  if(htim->Instance==TIM4)
 8002102:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002108:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800210c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM4)
 800210e:	d001      	beq.n	8002114 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002110:	b008      	add	sp, #32
 8002112:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002114:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002116:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8002148 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <HAL_TIM_MspPostInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	480e      	ldr	r0, [pc, #56]	@ (8002158 <HAL_TIM_MspPostInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002122:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4322      	orrs	r2, r4
 8002126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800212a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800212e:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002132:	4023      	ands	r3, r4
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002138:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	f000 fa5f 	bl	80025fc <HAL_GPIO_Init>
}
 800213e:	b008      	add	sp, #32
 8002140:	bd10      	pop	{r4, pc}
 8002142:	bf00      	nop
 8002144:	f3af 8000 	nop.w
 8002148:	00000080 	.word	0x00000080
 800214c:	00000002 	.word	0x00000002
 8002150:	40000800 	.word	0x40000800
 8002154:	46020c00 	.word	0x46020c00
 8002158:	42020400 	.word	0x42020400
 800215c:	00000000 	.word	0x00000000

08002160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002160:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002162:	2100      	movs	r1, #0
{
 8002164:	4604      	mov	r4, r0
 8002166:	b0b8      	sub	sp, #224	@ 0xe0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002168:	22c0      	movs	r2, #192	@ 0xc0
 800216a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002170:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002174:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002176:	f7fe f8cd 	bl	8000314 <memset>
  if(huart->Instance==USART1)
 800217a:	4b21      	ldr	r3, [pc, #132]	@ (8002200 <HAL_UART_MspInit+0xa0>)
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002182:	b038      	add	sp, #224	@ 0xe0
 8002184:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002186:	2201      	movs	r2, #1
 8002188:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800218a:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800218c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002190:	f001 fefa 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8002194:	bb40      	cbnz	r0, 80021e8 <HAL_UART_MspInit+0x88>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002196:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 80021f0 <HAL_UART_MspInit+0x90>
 800219a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 80021f8 <HAL_UART_MspInit+0x98>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800219e:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a0:	4b18      	ldr	r3, [pc, #96]	@ (8002204 <HAL_UART_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	4819      	ldr	r0, [pc, #100]	@ (8002208 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80021aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021ae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80021b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80021b6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80021ba:	9200      	str	r2, [sp, #0]
 80021bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80021ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021ce:	ed8d 6b02 	vstr	d6, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021d8:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021de:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f000 fa0c 	bl	80025fc <HAL_GPIO_Init>
}
 80021e4:	b038      	add	sp, #224	@ 0xe0
 80021e6:	bd10      	pop	{r4, pc}
      Error_Handler();
 80021e8:	f7ff ff56 	bl	8002098 <Error_Handler>
 80021ec:	e7d3      	b.n	8002196 <HAL_UART_MspInit+0x36>
 80021ee:	bf00      	nop
 80021f0:	00000600 	.word	0x00000600
 80021f4:	00000002 	.word	0x00000002
	...
 8002200:	40013800 	.word	0x40013800
 8002204:	46020c00 	.word	0x46020c00
 8002208:	42020000 	.word	0x42020000

0800220c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800220c:	e7fe      	b.n	800220c <NMI_Handler>
 800220e:	bf00      	nop

08002210 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <HardFault_Handler>
 8002212:	bf00      	nop

08002214 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <MemManage_Handler>
 8002216:	bf00      	nop

08002218 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <BusFault_Handler>
 800221a:	bf00      	nop

0800221c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler>
 800221e:	bf00      	nop

08002220 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop

08002224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop

08002228 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop

0800222c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800222c:	f000 b90c 	b.w	8002448 <HAL_IncTick>

08002230 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002230:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	1e16      	subs	r6, r2, #0
 8002234:	dd07      	ble.n	8002246 <_read+0x16>
 8002236:	460c      	mov	r4, r1
 8002238:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800223a:	f3af 8000 	nop.w
 800223e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	42a5      	cmp	r5, r4
 8002244:	d1f9      	bne.n	800223a <_read+0xa>
  }

  return len;
}
 8002246:	4630      	mov	r0, r6
 8002248:	bd70      	pop	{r4, r5, r6, pc}
 800224a:	bf00      	nop

0800224c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800224c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8002258:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800225a:	604b      	str	r3, [r1, #4]
}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop

08002260 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002260:	2001      	movs	r0, #1
 8002262:	4770      	bx	lr

08002264 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002264:	2000      	movs	r0, #0
 8002266:	4770      	bx	lr

08002268 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	490d      	ldr	r1, [pc, #52]	@ (80022a0 <_sbrk+0x38>)
{
 800226a:	4603      	mov	r3, r0
 800226c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800226e:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <_sbrk+0x3c>)
 8002270:	4c0d      	ldr	r4, [pc, #52]	@ (80022a8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8002272:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002274:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002276:	b120      	cbz	r0, 8002282 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002278:	4403      	add	r3, r0
 800227a:	4293      	cmp	r3, r2
 800227c:	d807      	bhi.n	800228e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800227e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002280:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002282:	4c0a      	ldr	r4, [pc, #40]	@ (80022ac <_sbrk+0x44>)
 8002284:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8002286:	4403      	add	r3, r0
 8002288:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800228a:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800228c:	d9f7      	bls.n	800227e <_sbrk+0x16>
    errno = ENOMEM;
 800228e:	f7fe f893 	bl	80003b8 <__errno>
 8002292:	220c      	movs	r2, #12
 8002294:	4603      	mov	r3, r0
    return (void *)-1;
 8002296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOMEM;
 800229a:	601a      	str	r2, [r3, #0]
}
 800229c:	bd10      	pop	{r4, pc}
 800229e:	bf00      	nop
 80022a0:	200002b8 	.word	0x200002b8
 80022a4:	200c0000 	.word	0x200c0000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	200002c0 	.word	0x200002c0

080022b0 <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80022b0:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_MSISON;
 80022b2:	2101      	movs	r1, #1
{
 80022b4:	b410      	push	{r4}

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022b6:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022ba:	480e      	ldr	r0, [pc, #56]	@ (80022f4 <SystemInit+0x44>)
 80022bc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022c4:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  RCC->CR = RCC_CR_MSISON;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <SystemInit+0x48>)
 80022ca:	6019      	str	r1, [r3, #0]
  RCC->CFGR1 = 0U;
 80022cc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80022ce:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80022d0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	f021 51a8 	bic.w	r1, r1, #352321536	@ 0x15000000
 80022d8:	f421 2110 	bic.w	r1, r1, #589824	@ 0x90000
 80022dc:	6019      	str	r1, [r3, #0]
  RCC->PLL1CFGR = 0U;
 80022de:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80022e6:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0U;
 80022e8:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022ea:	6084      	str	r4, [r0, #8]
  #endif
}
 80022ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00
 80022f8:	46020c00 	.word	0x46020c00

080022fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80022fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002334 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002300:	f7ff ffd6 	bl	80022b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002304:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002306:	e003      	b.n	8002310 <LoopCopyDataInit>

08002308 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800230a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800230c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800230e:	3104      	adds	r1, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002310:	480a      	ldr	r0, [pc, #40]	@ (800233c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002314:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002316:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002318:	d3f6      	bcc.n	8002308 <CopyDataInit>
	ldr	r2, =_sbss
 800231a:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <LoopForever+0x12>)
	b	LoopFillZerobss
 800231c:	e002      	b.n	8002324 <LoopFillZerobss>

0800231e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800231e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002320:	f842 3b04 	str.w	r3, [r2], #4

08002324 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <LoopForever+0x16>)
	cmp	r2, r3
 8002326:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002328:	d3f9      	bcc.n	800231e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800232a:	f7fd ffcb 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800232e:	f7ff fdd3 	bl	8001ed8 <main>

08002332 <LoopForever>:

LoopForever:
    b LoopForever
 8002332:	e7fe      	b.n	8002332 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002334:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002338:	08006c48 	.word	0x08006c48
	ldr	r0, =_sdata
 800233c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002340:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002344:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8002348:	200002c0 	.word	0x200002c0

0800234c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800234c:	e7fe      	b.n	800234c <ADC1_IRQHandler>
	...

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002352:	4e24      	ldr	r6, [pc, #144]	@ (80023e4 <HAL_InitTick+0x94>)
 8002354:	7832      	ldrb	r2, [r6, #0]
 8002356:	b1ea      	cbz	r2, 8002394 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002358:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800235c:	691c      	ldr	r4, [r3, #16]
 800235e:	4605      	mov	r5, r0
 8002360:	f014 0404 	ands.w	r4, r4, #4
 8002364:	d018      	beq.n	8002398 <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002366:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800236a:	fbb1 f2f2 	udiv	r2, r1, r2
 800236e:	4b1e      	ldr	r3, [pc, #120]	@ (80023e8 <HAL_InitTick+0x98>)
 8002370:	681c      	ldr	r4, [r3, #0]
 8002372:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002376:	4620      	mov	r0, r4
 8002378:	f000 f8d8 	bl	800252c <HAL_SYSTICK_Config>
 800237c:	4604      	mov	r4, r0
 800237e:	b948      	cbnz	r0, 8002394 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002380:	4602      	mov	r2, r0
 8002382:	4629      	mov	r1, r5
 8002384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002388:	f000 f894 	bl	80024b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800238c:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <HAL_InitTick+0x9c>)
 800238e:	4620      	mov	r0, r4
 8002390:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002392:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
}
 8002396:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002398:	f000 f916 	bl	80025c8 <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 800239c:	2801      	cmp	r0, #1
 800239e:	d00d      	beq.n	80023bc <HAL_InitTick+0x6c>
 80023a0:	2802      	cmp	r0, #2
 80023a2:	d015      	beq.n	80023d0 <HAL_InitTick+0x80>
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d1e6      	bne.n	8002376 <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80023a8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80023ac:	7831      	ldrb	r1, [r6, #0]
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_InitTick+0x98>)
 80023b0:	fbb2 f2f1 	udiv	r2, r2, r1
 80023b4:	681c      	ldr	r4, [r3, #0]
 80023b6:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 80023ba:	e7dc      	b.n	8002376 <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80023bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023c0:	7831      	ldrb	r1, [r6, #0]
 80023c2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80023c6:	fbb2 f2f1 	udiv	r2, r2, r1
 80023ca:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 80023ce:	e7d2      	b.n	8002376 <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80023d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023d4:	7831      	ldrb	r1, [r6, #0]
 80023d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023da:	fbb2 f2f1 	udiv	r2, r2, r1
 80023de:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 80023e2:	e7c8      	b.n	8002376 <HAL_InitTick+0x26>
 80023e4:	20000060 	.word	0x20000060
 80023e8:	2000005c 	.word	0x2000005c
 80023ec:	20000064 	.word	0x20000064

080023f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f0:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <HAL_Init+0x48>)
{
 80023f2:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fe:	f000 f847 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002402:	f000 fb81 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002406:	4603      	mov	r3, r0
 8002408:	4a0c      	ldr	r2, [pc, #48]	@ (800243c <HAL_Init+0x4c>)
 800240a:	480d      	ldr	r0, [pc, #52]	@ (8002440 <HAL_Init+0x50>)
 800240c:	6a12      	ldr	r2, [r2, #32]
 800240e:	490d      	ldr	r1, [pc, #52]	@ (8002444 <HAL_Init+0x54>)
 8002410:	f002 020f 	and.w	r2, r2, #15
 8002414:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002416:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002418:	40d3      	lsrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800241c:	f000 f896 	bl	800254c <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff ff95 	bl	8002350 <HAL_InitTick>
 8002426:	b110      	cbz	r0, 800242e <HAL_Init+0x3e>
    return HAL_ERROR;
 8002428:	2401      	movs	r4, #1
}
 800242a:	4620      	mov	r0, r4
 800242c:	bd10      	pop	{r4, pc}
 800242e:	4604      	mov	r4, r0
  HAL_MspInit();
 8002430:	f7ff fe34 	bl	800209c <HAL_MspInit>
}
 8002434:	4620      	mov	r0, r4
 8002436:	bd10      	pop	{r4, pc}
 8002438:	40022000 	.word	0x40022000
 800243c:	46020c00 	.word	0x46020c00
 8002440:	08006b80 	.word	0x08006b80
 8002444:	2000005c 	.word	0x2000005c

08002448 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002448:	4a03      	ldr	r2, [pc, #12]	@ (8002458 <HAL_IncTick+0x10>)
 800244a:	4b04      	ldr	r3, [pc, #16]	@ (800245c <HAL_IncTick+0x14>)
 800244c:	6811      	ldr	r1, [r2, #0]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	440b      	add	r3, r1
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	200002bc 	.word	0x200002bc
 800245c:	20000060 	.word	0x20000060

08002460 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002460:	4b01      	ldr	r3, [pc, #4]	@ (8002468 <HAL_GetTick+0x8>)
 8002462:	6818      	ldr	r0, [r3, #0]
}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	200002bc 	.word	0x200002bc

0800246c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff fff6 	bl	8002460 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002474:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002476:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002478:	d002      	beq.n	8002480 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800247a:	4b04      	ldr	r3, [pc, #16]	@ (800248c <HAL_Delay+0x20>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002480:	f7ff ffee 	bl	8002460 <HAL_GetTick>
 8002484:	1b40      	subs	r0, r0, r5
 8002486:	42a0      	cmp	r0, r4
 8002488:	d3fa      	bcc.n	8002480 <HAL_Delay+0x14>
  {
  }
}
 800248a:	bd38      	pop	{r3, r4, r5, pc}
 800248c:	20000060 	.word	0x20000060

08002490 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002490:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4906      	ldr	r1, [pc, #24]	@ (80024b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002496:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80024ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b6:	b500      	push	{lr}
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024be:	f1c3 0e07 	rsb	lr, r3, #7
 80024c2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ca:	bf28      	it	cs
 80024cc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d0:	f1bc 0f06 	cmp.w	ip, #6
 80024d4:	d91c      	bls.n	8002510 <HAL_NVIC_SetPriority+0x5c>
 80024d6:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024de:	fa03 f30c 	lsl.w	r3, r3, ip
 80024e2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024ea:	fa03 f30e 	lsl.w	r3, r3, lr
 80024ee:	ea21 0303 	bic.w	r3, r1, r3
 80024f2:	fa03 f30c 	lsl.w	r3, r3, ip
 80024f6:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80024fa:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80024fe:	db0a      	blt.n	8002516 <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002504:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002508:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800250c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002510:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	4694      	mov	ip, r2
 8002514:	e7e7      	b.n	80024e6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002516:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <HAL_NVIC_SetPriority+0x74>)
 8002518:	f000 000f 	and.w	r0, r0, #15
 800251c:	4402      	add	r2, r0
 800251e:	7613      	strb	r3, [r2, #24]
 8002520:	f85d fb04 	ldr.w	pc, [sp], #4
 8002524:	e000ed00 	.word	0xe000ed00
 8002528:	e000ecfc 	.word	0xe000ecfc

0800252c <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	1e43      	subs	r3, r0, #1
 800252e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002532:	d209      	bcs.n	8002548 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002534:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002538:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800253a:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 800253c:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800253e:	6913      	ldr	r3, [r2, #16]
 8002540:	f043 0303 	orr.w	r3, r3, #3
 8002544:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 8002546:	4770      	bx	lr
    return (1UL);
 8002548:	2001      	movs	r0, #1
}
 800254a:	4770      	bx	lr

0800254c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800254c:	2804      	cmp	r0, #4
 800254e:	d813      	bhi.n	8002578 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 8002550:	e8df f000 	tbb	[pc, r0]
 8002554:	12031a2a 	.word	0x12031a2a
 8002558:	13          	.byte	0x13
 8002559:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800255a:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 800255e:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002560:	4a18      	ldr	r2, [pc, #96]	@ (80025c4 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002562:	f023 0304 	bic.w	r3, r3, #4
 8002566:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002568:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800256c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002570:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002574:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8002578:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800257a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800257e:	6913      	ldr	r3, [r2, #16]
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6113      	str	r3, [r2, #16]
      break;
 8002586:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002588:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 800258c:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800258e:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002596:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800259a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800259e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80025a6:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80025a8:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80025ac:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80025ae:	4a05      	ldr	r2, [pc, #20]	@ (80025c4 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80025b6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 80025ba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80025be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80025c2:	4770      	bx	lr
 80025c4:	46020c00 	.word	0x46020c00

080025c8 <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80025c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	075b      	lsls	r3, r3, #29
 80025d0:	d410      	bmi.n	80025f4 <HAL_SYSTICK_GetCLKSourceConfig+0x2c>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 80025d4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80025d8:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000

    switch (systick_rcc_source)
 80025dc:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 80025e0:	d006      	beq.n	80025f0 <HAL_SYSTICK_GetCLKSourceConfig+0x28>
 80025e2:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 80025e6:	fab0 f080 	clz	r0, r0
 80025ea:	0940      	lsrs	r0, r0, #5
 80025ec:	0040      	lsls	r0, r0, #1
 80025ee:	4770      	bx	lr
 80025f0:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 80025f2:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80025f4:	2004      	movs	r0, #4
 80025f6:	4770      	bx	lr
 80025f8:	46020c00 	.word	0x46020c00

080025fc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80025fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Save GPIO port address */
  p_gpio = GPIOx;

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002600:	f8d1 b000 	ldr.w	fp, [r1]
{
 8002604:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002606:	f1bb 0f00 	cmp.w	fp, #0
 800260a:	f000 80b4 	beq.w	8002776 <HAL_GPIO_Init+0x17a>
 800260e:	4bbb      	ldr	r3, [pc, #748]	@ (80028fc <HAL_GPIO_Init+0x300>)
 8002610:	468a      	mov	sl, r1
 8002612:	4298      	cmp	r0, r3
 8002614:	f000 80be 	beq.w	8002794 <HAL_GPIO_Init+0x198>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002618:	4bb9      	ldr	r3, [pc, #740]	@ (8002900 <HAL_GPIO_Init+0x304>)
  uint32_t position = 0U;
 800261a:	2200      	movs	r2, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800261c:	ea03 2390 	and.w	r3, r3, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002620:	f04f 0801 	mov.w	r8, #1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002624:	9303      	str	r3, [sp, #12]
 8002626:	e029      	b.n	800267c <HAL_GPIO_Init+0x80>
        tmp = p_gpio->MODER;
 8002628:	6806      	ldr	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800262a:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800262e:	ea05 0c06 	and.w	ip, r5, r6
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002632:	f003 0603 	and.w	r6, r3, #3
 8002636:	fa06 f607 	lsl.w	r6, r6, r7
 800263a:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->MODER = tmp;
 800263e:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002640:	d901      	bls.n	8002646 <HAL_GPIO_Init+0x4a>
 8002642:	2b11      	cmp	r3, #17
 8002644:	d153      	bne.n	80026ee <HAL_GPIO_Init+0xf2>
        tmp = p_gpio->OSPEEDR;
 8002646:	6886      	ldr	r6, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002648:	091b      	lsrs	r3, r3, #4
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800264a:	ea06 0c05 	and.w	ip, r6, r5
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800264e:	f8da 600c 	ldr.w	r6, [sl, #12]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002652:	4093      	lsls	r3, r2
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002654:	40be      	lsls	r6, r7
 8002656:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->OSPEEDR = tmp;
 800265a:	6086      	str	r6, [r0, #8]
        tmp = p_gpio->OTYPER;
 800265c:	6846      	ldr	r6, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800265e:	ea26 0101 	bic.w	r1, r6, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002662:	430b      	orrs	r3, r1
        p_gpio->OTYPER = tmp;
 8002664:	6043      	str	r3, [r0, #4]
        tmp = p_gpio->PUPDR;
 8002666:	68c1      	ldr	r1, [r0, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002668:	f8da 3008 	ldr.w	r3, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800266c:	4029      	ands	r1, r5
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800266e:	40bb      	lsls	r3, r7
 8002670:	430b      	orrs	r3, r1
        p_gpio->PUPDR = tmp;
 8002672:	60c3      	str	r3, [r0, #12]
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
      }
    }
    position++;
 8002674:	3201      	adds	r2, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002676:	fa3b f302 	lsrs.w	r3, fp, r2
 800267a:	d07c      	beq.n	8002776 <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800267c:	fa08 f102 	lsl.w	r1, r8, r2
    if (iocurrent != 0U)
 8002680:	ea1b 0e01 	ands.w	lr, fp, r1
 8002684:	d0f6      	beq.n	8002674 <HAL_GPIO_Init+0x78>
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002686:	2403      	movs	r4, #3
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002688:	f8da 3004 	ldr.w	r3, [sl, #4]
 800268c:	0057      	lsls	r7, r2, #1
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800268e:	f023 0610 	bic.w	r6, r3, #16
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002692:	fa04 f507 	lsl.w	r5, r4, r7
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002696:	2e02      	cmp	r6, #2
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002698:	ea6f 0505 	mvn.w	r5, r5
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800269c:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a0:	d1c2      	bne.n	8002628 <HAL_GPIO_Init+0x2c>
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80026a2:	fa06 f407 	lsl.w	r4, r6, r7
        tmp = GPIOx->AFR[position >> 3U];
 80026a6:	08d6      	lsrs	r6, r2, #3
 80026a8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80026ac:	9402      	str	r4, [sp, #8]
 80026ae:	4634      	mov	r4, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80026b0:	f8da 6010 	ldr.w	r6, [sl, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80026b4:	f002 0c07 	and.w	ip, r2, #7
 80026b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80026bc:	f006 060f 	and.w	r6, r6, #15
 80026c0:	fa06 f60c 	lsl.w	r6, r6, ip
 80026c4:	9601      	str	r6, [sp, #4]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80026c6:	260f      	movs	r6, #15
 80026c8:	fa06 fc0c 	lsl.w	ip, r6, ip
        tmp = GPIOx->AFR[position >> 3U];
 80026cc:	6a26      	ldr	r6, [r4, #32]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ce:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80026d2:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80026d6:	9e01      	ldr	r6, [sp, #4]
 80026d8:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = tmp;
 80026dc:	6226      	str	r6, [r4, #32]
        tmp = p_gpio->MODER;
 80026de:	6806      	ldr	r6, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80026e0:	9c02      	ldr	r4, [sp, #8]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80026e2:	ea06 0605 	and.w	r6, r6, r5
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80026e6:	ea46 0604 	orr.w	r6, r6, r4
        p_gpio->MODER = tmp;
 80026ea:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ec:	d0ab      	beq.n	8002646 <HAL_GPIO_Init+0x4a>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d0a9      	beq.n	8002646 <HAL_GPIO_Init+0x4a>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d0be      	beq.n	8002674 <HAL_GPIO_Init+0x78>
        tmp = p_gpio->PUPDR;
 80026f6:	68c1      	ldr	r1, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80026f8:	400d      	ands	r5, r1
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80026fa:	f8da 1008 	ldr.w	r1, [sl, #8]
 80026fe:	40b9      	lsls	r1, r7
 8002700:	4329      	orrs	r1, r5
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002702:	00dd      	lsls	r5, r3, #3
        p_gpio->PUPDR = tmp;
 8002704:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002706:	d5b5      	bpl.n	8002674 <HAL_GPIO_Init+0x78>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002708:	240f      	movs	r4, #15
 800270a:	f022 0503 	bic.w	r5, r2, #3
 800270e:	f105 458c 	add.w	r5, r5, #1174405120	@ 0x46000000
 8002712:	f002 0103 	and.w	r1, r2, #3
 8002716:	f505 3508 	add.w	r5, r5, #139264	@ 0x22000
 800271a:	00c9      	lsls	r1, r1, #3
        tmp = EXTI->EXTICR[position >> 2U];
 800271c:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800271e:	fa04 f701 	lsl.w	r7, r4, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002722:	9c03      	ldr	r4, [sp, #12]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002724:	ea26 0607 	bic.w	r6, r6, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002728:	fa04 f101 	lsl.w	r1, r4, r1
 800272c:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2U] = tmp;
 800272e:	6629      	str	r1, [r5, #96]	@ 0x60
        tmp = EXTI->RTSR1;
 8002730:	4974      	ldr	r1, [pc, #464]	@ (8002904 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002732:	02dc      	lsls	r4, r3, #11
        tmp &= ~((uint32_t)iocurrent);
 8002734:	ea6f 050e 	mvn.w	r5, lr
        tmp = EXTI->RTSR1;
 8002738:	6809      	ldr	r1, [r1, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800273a:	d428      	bmi.n	800278e <HAL_GPIO_Init+0x192>
        tmp &= ~((uint32_t)iocurrent);
 800273c:	4029      	ands	r1, r5
        EXTI->RTSR1 = tmp;
 800273e:	4c71      	ldr	r4, [pc, #452]	@ (8002904 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002740:	029f      	lsls	r7, r3, #10
        EXTI->RTSR1 = tmp;
 8002742:	6021      	str	r1, [r4, #0]
        tmp = EXTI->FTSR1;
 8002744:	6861      	ldr	r1, [r4, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002746:	d41f      	bmi.n	8002788 <HAL_GPIO_Init+0x18c>
        tmp &= ~((uint32_t)iocurrent);
 8002748:	4029      	ands	r1, r5
        EXTI->FTSR1 = tmp;
 800274a:	4c6e      	ldr	r4, [pc, #440]	@ (8002904 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800274c:	039e      	lsls	r6, r3, #14
        EXTI->FTSR1 = tmp;
 800274e:	6061      	str	r1, [r4, #4]
        tmp = EXTI->EMR1;
 8002750:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002754:	d415      	bmi.n	8002782 <HAL_GPIO_Init+0x186>
        tmp &= ~((uint32_t)iocurrent);
 8002756:	4029      	ands	r1, r5
        EXTI->EMR1 = tmp;
 8002758:	4c6a      	ldr	r4, [pc, #424]	@ (8002904 <HAL_GPIO_Init+0x308>)
 800275a:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        tmp = EXTI->IMR1;
 800275e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002762:	03dc      	lsls	r4, r3, #15
 8002764:	d40a      	bmi.n	800277c <HAL_GPIO_Init+0x180>
        tmp &= ~((uint32_t)iocurrent);
 8002766:	4029      	ands	r1, r5
        EXTI->IMR1 = tmp;
 8002768:	4b66      	ldr	r3, [pc, #408]	@ (8002904 <HAL_GPIO_Init+0x308>)
    position++;
 800276a:	3201      	adds	r2, #1
        EXTI->IMR1 = tmp;
 800276c:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002770:	fa3b f302 	lsrs.w	r3, fp, r2
 8002774:	d182      	bne.n	800267c <HAL_GPIO_Init+0x80>
  }
}
 8002776:	b005      	add	sp, #20
 8002778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          tmp |= iocurrent;
 800277c:	ea41 010e 	orr.w	r1, r1, lr
 8002780:	e7f2      	b.n	8002768 <HAL_GPIO_Init+0x16c>
          tmp |= iocurrent;
 8002782:	ea41 010e 	orr.w	r1, r1, lr
 8002786:	e7e7      	b.n	8002758 <HAL_GPIO_Init+0x15c>
          tmp |= iocurrent;
 8002788:	ea41 010e 	orr.w	r1, r1, lr
 800278c:	e7dd      	b.n	800274a <HAL_GPIO_Init+0x14e>
          tmp |= iocurrent;
 800278e:	ea4e 0101 	orr.w	r1, lr, r1
 8002792:	e7d4      	b.n	800273e <HAL_GPIO_Init+0x142>
  uint32_t position = 0U;
 8002794:	2300      	movs	r3, #0
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002796:	2701      	movs	r7, #1
        tmp = EXTI->RTSR1;
 8002798:	4e5a      	ldr	r6, [pc, #360]	@ (8002904 <HAL_GPIO_Init+0x308>)
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800279a:	fa07 f103 	lsl.w	r1, r7, r3
    if (iocurrent != 0U)
 800279e:	ea11 050b 	ands.w	r5, r1, fp
 80027a2:	d059      	beq.n	8002858 <HAL_GPIO_Init+0x25c>
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80027a4:	f04f 090f 	mov.w	r9, #15
        tmp = GPIOx->MODER;
 80027a8:	6804      	ldr	r4, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80027aa:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80027ae:	ea24 0401 	bic.w	r4, r4, r1
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80027b2:	4955      	ldr	r1, [pc, #340]	@ (8002908 <HAL_GPIO_Init+0x30c>)
 80027b4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80027b8:	f002 0101 	and.w	r1, r2, #1
 80027bc:	4099      	lsls	r1, r3
 80027be:	4321      	orrs	r1, r4
        GPIOx->MODER = tmp;
 80027c0:	6001      	str	r1, [r0, #0]
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80027c2:	4952      	ldr	r1, [pc, #328]	@ (800290c <HAL_GPIO_Init+0x310>)
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80027c4:	ea4f 0edc 	mov.w	lr, ip, lsr #3
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80027c8:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80027cc:	f00c 0407 	and.w	r4, ip, #7
 80027d0:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80027d4:	f8de 8020 	ldr.w	r8, [lr, #32]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80027d8:	00a4      	lsls	r4, r4, #2
 80027da:	fa09 f904 	lsl.w	r9, r9, r4
 80027de:	ea28 0809 	bic.w	r8, r8, r9
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80027e2:	f04f 090b 	mov.w	r9, #11
 80027e6:	fa09 f404 	lsl.w	r4, r9, r4
 80027ea:	ea44 0408 	orr.w	r4, r4, r8
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80027ee:	f04f 0803 	mov.w	r8, #3
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80027f2:	f8ce 4020 	str.w	r4, [lr, #32]
        tmp = p_gpio->MODER;
 80027f6:	680c      	ldr	r4, [r1, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80027f8:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 80027fc:	fa08 f80e 	lsl.w	r8, r8, lr
 8002800:	ea24 0908 	bic.w	r9, r4, r8
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002804:	2402      	movs	r4, #2
 8002806:	fa04 f40e 	lsl.w	r4, r4, lr
 800280a:	ea44 0409 	orr.w	r4, r4, r9
        p_gpio->MODER = tmp;
 800280e:	600c      	str	r4, [r1, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002810:	1e54      	subs	r4, r2, #1
 8002812:	2c01      	cmp	r4, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002814:	ea6f 0808 	mvn.w	r8, r8
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002818:	d901      	bls.n	800281e <HAL_GPIO_Init+0x222>
 800281a:	2a11      	cmp	r2, #17
 800281c:	d123      	bne.n	8002866 <HAL_GPIO_Init+0x26a>
        tmp = p_gpio->OSPEEDR;
 800281e:	688c      	ldr	r4, [r1, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002820:	0912      	lsrs	r2, r2, #4
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002822:	fa07 f50c 	lsl.w	r5, r7, ip
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002826:	fa02 f20c 	lsl.w	r2, r2, ip
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800282a:	ea08 0c04 	and.w	ip, r8, r4
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800282e:	f8da 400c 	ldr.w	r4, [sl, #12]
 8002832:	fa04 f40e 	lsl.w	r4, r4, lr
 8002836:	ea44 040c 	orr.w	r4, r4, ip
        p_gpio->OSPEEDR = tmp;
 800283a:	608c      	str	r4, [r1, #8]
        tmp = p_gpio->OTYPER;
 800283c:	684c      	ldr	r4, [r1, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800283e:	ea24 0405 	bic.w	r4, r4, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002842:	4322      	orrs	r2, r4
        p_gpio->OTYPER = tmp;
 8002844:	604a      	str	r2, [r1, #4]
        tmp = p_gpio->PUPDR;
 8002846:	68cc      	ldr	r4, [r1, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002848:	f8da 2008 	ldr.w	r2, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800284c:	ea08 0404 	and.w	r4, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002850:	fa02 f20e 	lsl.w	r2, r2, lr
 8002854:	4322      	orrs	r2, r4
        p_gpio->PUPDR = tmp;
 8002856:	60ca      	str	r2, [r1, #12]
    position++;
 8002858:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800285a:	fa3b f203 	lsrs.w	r2, fp, r3
 800285e:	d19c      	bne.n	800279a <HAL_GPIO_Init+0x19e>
}
 8002860:	b005      	add	sp, #20
 8002862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002866:	2a12      	cmp	r2, #18
 8002868:	d0d9      	beq.n	800281e <HAL_GPIO_Init+0x222>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800286a:	2a03      	cmp	r2, #3
 800286c:	d0f4      	beq.n	8002858 <HAL_GPIO_Init+0x25c>
        tmp = p_gpio->PUPDR;
 800286e:	68cc      	ldr	r4, [r1, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002870:	ea08 0804 	and.w	r8, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002874:	f8da 4008 	ldr.w	r4, [sl, #8]
 8002878:	fa04 f40e 	lsl.w	r4, r4, lr
 800287c:	ea44 0408 	orr.w	r4, r4, r8
        p_gpio->PUPDR = tmp;
 8002880:	60cc      	str	r4, [r1, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002882:	00d1      	lsls	r1, r2, #3
 8002884:	d5e8      	bpl.n	8002858 <HAL_GPIO_Init+0x25c>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002886:	f04f 080f 	mov.w	r8, #15
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800288a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 800288e:	f023 0103 	bic.w	r1, r3, #3
 8002892:	f101 418c 	add.w	r1, r1, #1174405120	@ 0x46000000
 8002896:	f501 3108 	add.w	r1, r1, #139264	@ 0x22000
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800289a:	f003 0c03 	and.w	ip, r3, #3
        tmp = EXTI->EXTICR[position >> 2U];
 800289e:	f8d1 e060 	ldr.w	lr, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80028a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80028a6:	fa08 f80c 	lsl.w	r8, r8, ip
 80028aa:	ea2e 0e08 	bic.w	lr, lr, r8
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80028ae:	fa04 f40c 	lsl.w	r4, r4, ip
 80028b2:	ea44 040e 	orr.w	r4, r4, lr
        EXTI->EXTICR[position >> 2U] = tmp;
 80028b6:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 80028b8:	43ec      	mvns	r4, r5
        tmp = EXTI->RTSR1;
 80028ba:	6831      	ldr	r1, [r6, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028bc:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
        tmp &= ~((uint32_t)iocurrent);
 80028c0:	bf0c      	ite	eq
 80028c2:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 80028c4:	4329      	orrne	r1, r5
        EXTI->RTSR1 = tmp;
 80028c6:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 80028c8:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ca:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
        tmp &= ~((uint32_t)iocurrent);
 80028ce:	bf0c      	ite	eq
 80028d0:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 80028d2:	4329      	orrne	r1, r5
        EXTI->FTSR1 = tmp;
 80028d4:	6071      	str	r1, [r6, #4]
        tmp = EXTI->EMR1;
 80028d6:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028da:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
        tmp &= ~((uint32_t)iocurrent);
 80028de:	bf0c      	ite	eq
 80028e0:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 80028e2:	4329      	orrne	r1, r5
        EXTI->EMR1 = tmp;
 80028e4:	f8c6 1084 	str.w	r1, [r6, #132]	@ 0x84
        tmp = EXTI->IMR1;
 80028e8:	f8d6 1080 	ldr.w	r1, [r6, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ec:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 80028ee:	bf54      	ite	pl
 80028f0:	4021      	andpl	r1, r4
          tmp |= iocurrent;
 80028f2:	4329      	orrmi	r1, r5
        EXTI->IMR1 = tmp;
 80028f4:	f8c6 1080 	str.w	r1, [r6, #128]	@ 0x80
 80028f8:	e7ae      	b.n	8002858 <HAL_GPIO_Init+0x25c>
 80028fa:	bf00      	nop
 80028fc:	46020000 	.word	0x46020000
 8002900:	002f7f7f 	.word	0x002f7f7f
 8002904:	46022000 	.word	0x46022000
 8002908:	08006b94 	.word	0x08006b94
 800290c:	08006b90 	.word	0x08006b90

08002910 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002910:	4a03      	ldr	r2, [pc, #12]	@ (8002920 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8002912:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002914:	6813      	ldr	r3, [r2, #0]
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40030400 	.word	0x40030400

08002924 <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002924:	4a21      	ldr	r2, [pc, #132]	@ (80029ac <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002926:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002928:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800292c:	4283      	cmp	r3, r0
 800292e:	d034      	beq.n	800299a <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002930:	f04f 0c32 	mov.w	ip, #50	@ 0x32
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002934:	68d3      	ldr	r3, [r2, #12]
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002936:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800293a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800293e:	ea43 0300 	orr.w	r3, r3, r0
 8002942:	bf88      	it	hi
 8002944:	f443 2380 	orrhi.w	r3, r3, #262144	@ 0x40000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002948:	60d3      	str	r3, [r2, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800294a:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800294c:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <HAL_PWREx_ControlVoltageScaling+0x90>)
 800294e:	681b      	ldr	r3, [r3, #0]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002950:	4816      	ldr	r0, [pc, #88]	@ (80029ac <HAL_PWREx_ControlVoltageScaling+0x88>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002952:	fba2 1303 	umull	r1, r3, r2, r3
 8002956:	099b      	lsrs	r3, r3, #6
 8002958:	fb0c f303 	mul.w	r3, ip, r3
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002960:	68c1      	ldr	r1, [r0, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002962:	099b      	lsrs	r3, r3, #6
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002964:	040a      	lsls	r2, r1, #16
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002966:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800296a:	d407      	bmi.n	800297c <HAL_PWREx_ControlVoltageScaling+0x58>
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800296c:	461a      	mov	r2, r3
 800296e:	e000      	b.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x4e>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002970:	b18a      	cbz	r2, 8002996 <HAL_PWREx_ControlVoltageScaling+0x72>
 8002972:	68c1      	ldr	r1, [r0, #12]
  {
    timeout--;
 8002974:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002976:	0409      	lsls	r1, r1, #16
 8002978:	d5fa      	bpl.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }

  /* Check time out */
  if (timeout != 0U)
 800297a:	b162      	cbz	r2, 8002996 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800297c:	490b      	ldr	r1, [pc, #44]	@ (80029ac <HAL_PWREx_ControlVoltageScaling+0x88>)
 800297e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8002980:	0410      	lsls	r0, r2, #16
 8002982:	d406      	bmi.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002984:	e000      	b.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x64>
 8002986:	b133      	cbz	r3, 8002996 <HAL_PWREx_ControlVoltageScaling+0x72>
 8002988:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
    {
      timeout--;
 800298a:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800298c:	0412      	lsls	r2, r2, #16
 800298e:	d5fa      	bpl.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002990:	b10b      	cbz	r3, 8002996 <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 8002992:	2000      	movs	r0, #0
 8002994:	4770      	bx	lr
  {
    return HAL_TIMEOUT;
 8002996:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002998:	4770      	bx	lr
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800299e:	d9f8      	bls.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x6e>
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80029a0:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 80029a2:	2000      	movs	r0, #0
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80029a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a8:	60d3      	str	r3, [r2, #12]
 80029aa:	4770      	bx	lr
 80029ac:	46020800 	.word	0x46020800
 80029b0:	2000005c 	.word	0x2000005c
 80029b4:	10624dd3 	.word	0x10624dd3

080029b8 <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80029b8:	4b02      	ldr	r3, [pc, #8]	@ (80029c4 <HAL_PWREx_GetVoltageRange+0xc>)
 80029ba:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
}
 80029bc:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	46020800 	.word	0x46020800

080029c8 <HAL_PWREx_ConfigSupply>:

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80029c8:	2132      	movs	r1, #50	@ 0x32
 80029ca:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <HAL_PWREx_ConfigSupply+0x68>)
 80029cc:	4a19      	ldr	r2, [pc, #100]	@ (8002a34 <HAL_PWREx_ConfigSupply+0x6c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fba2 c303 	umull	ip, r3, r2, r3
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	fba2 2303 	umull	r2, r3, r2, r3

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80029de:	4916      	ldr	r1, [pc, #88]	@ (8002a38 <HAL_PWREx_ConfigSupply+0x70>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80029e0:	099b      	lsrs	r3, r3, #6
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80029e2:	688a      	ldr	r2, [r1, #8]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80029e4:	3301      	adds	r3, #1
  if (SupplySource == PWR_LDO_SUPPLY)
 80029e6:	b980      	cbnz	r0, 8002a0a <HAL_PWREx_ConfigSupply+0x42>
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80029e8:	f022 0202 	bic.w	r2, r2, #2
 80029ec:	608a      	str	r2, [r1, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80029ee:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80029f0:	0790      	lsls	r0, r2, #30
 80029f2:	d402      	bmi.n	80029fa <HAL_PWREx_ConfigSupply+0x32>
  if (timeout == 0U)
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80029f4:	2000      	movs	r0, #0
 80029f6:	4770      	bx	lr
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80029f8:	b12b      	cbz	r3, 8002a06 <HAL_PWREx_ConfigSupply+0x3e>
 80029fa:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 80029fc:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80029fe:	0792      	lsls	r2, r2, #30
 8002a00:	d4fa      	bmi.n	80029f8 <HAL_PWREx_ConfigSupply+0x30>
  if (timeout == 0U)
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f6      	bne.n	80029f4 <HAL_PWREx_ConfigSupply+0x2c>
    return HAL_TIMEOUT;
 8002a06:	2003      	movs	r0, #3
}
 8002a08:	4770      	bx	lr
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002a0a:	f042 0202 	orr.w	r2, r2, #2
 8002a0e:	608a      	str	r2, [r1, #8]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002a10:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8002a12:	0790      	lsls	r0, r2, #30
 8002a14:	d4ee      	bmi.n	80029f4 <HAL_PWREx_ConfigSupply+0x2c>
 8002a16:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 8002a18:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002a1a:	0792      	lsls	r2, r2, #30
 8002a1c:	d4f1      	bmi.n	8002a02 <HAL_PWREx_ConfigSupply+0x3a>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f1      	beq.n	8002a06 <HAL_PWREx_ConfigSupply+0x3e>
 8002a22:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 8002a24:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002a26:	0792      	lsls	r2, r2, #30
 8002a28:	d5f9      	bpl.n	8002a1e <HAL_PWREx_ConfigSupply+0x56>
  if (timeout == 0U)
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e2      	bne.n	80029f4 <HAL_PWREx_ConfigSupply+0x2c>
 8002a2e:	e7ea      	b.n	8002a06 <HAL_PWREx_ConfigSupply+0x3e>
 8002a30:	2000005c 	.word	0x2000005c
 8002a34:	10624dd3 	.word	0x10624dd3
 8002a38:	46020800 	.word	0x46020800

08002a3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002a3c:	4a02      	ldr	r2, [pc, #8]	@ (8002a48 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002a3e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002a46:	4770      	bx	lr
 8002a48:	46020800 	.word	0x46020800

08002a4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a4c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a4e:	4d2c      	ldr	r5, [pc, #176]	@ (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
{
 8002a50:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a52:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
{
 8002a56:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a58:	075b      	lsls	r3, r3, #29
 8002a5a:	d52b      	bpl.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a5c:	f7ff ffac 	bl	80029b8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002a60:	f420 3380 	bic.w	r3, r0, #65536	@ 0x10000
 8002a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a68:	d007      	beq.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0x2e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002a6a:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8002a6e:	d217      	bcs.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8002a74:	d133      	bne.n	8002ade <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002a76:	2203      	movs	r2, #3
 8002a78:	e004      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x38>
    if (msirange < RCC_MSIRANGE_1)
 8002a7a:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8002a7e:	bf2c      	ite	cs
 8002a80:	2200      	movcs	r2, #0
 8002a82:	2201      	movcc	r2, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a84:	491f      	ldr	r1, [pc, #124]	@ (8002b04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	f023 030f 	bic.w	r3, r3, #15
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002a90:	6808      	ldr	r0, [r1, #0]
 8002a92:	f000 000f 	and.w	r0, r0, #15
 8002a96:	1a80      	subs	r0, r0, r2
 8002a98:	bf18      	it	ne
 8002a9a:	2001      	movne	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 8002aa0:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8002aa4:	d91e      	bls.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x98>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002aa6:	bb10      	cbnz	r0, 8002aee <RCC_SetFlashLatencyFromMSIRange+0xa2>
          if (msirange > RCC_MSIRANGE_3)
 8002aa8:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
 8002aac:	bf8c      	ite	hi
 8002aae:	2200      	movhi	r2, #0
 8002ab0:	2201      	movls	r2, #1
 8002ab2:	e7e7      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x38>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8002ac0:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002acc:	f7ff ff74 	bl	80029b8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ad0:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8002ad4:	f023 0304 	bic.w	r3, r3, #4
 8002ad8:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8002adc:	e7c0      	b.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x14>
        return HAL_ERROR;
 8002ade:	2001      	movs	r0, #1
}
 8002ae0:	b003      	add	sp, #12
 8002ae2:	bd30      	pop	{r4, r5, pc}
        if (msirange == RCC_MSIRANGE_1)
 8002ae4:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8002ae8:	d003      	beq.n	8002af2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
          latency = FLASH_LATENCY_1; /* 1WS */
 8002aea:	2201      	movs	r2, #1
 8002aec:	e7ca      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x38>
      latency = FLASH_LATENCY_0; /* 0WS */
 8002aee:	2200      	movs	r2, #0
 8002af0:	e7c8      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x38>
            latency = FLASH_LATENCY_2; /* 2WS */
 8002af2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8002af6:	bf0c      	ite	eq
 8002af8:	2201      	moveq	r2, #1
 8002afa:	2202      	movne	r2, #2
 8002afc:	e7c2      	b.n	8002a84 <RCC_SetFlashLatencyFromMSIRange+0x38>
 8002afe:	bf00      	nop
 8002b00:	46020c00 	.word	0x46020c00
 8002b04:	40022000 	.word	0x40022000

08002b08 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b08:	4a41      	ldr	r2, [pc, #260]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0a:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b0e:	f013 030c 	ands.w	r3, r3, #12
 8002b12:	d00b      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x24>
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d05f      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xd0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b18:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 8002b1a:	483e      	ldr	r0, [pc, #248]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x10c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b1c:	f002 020c 	and.w	r2, r2, #12
 8002b20:	2a04      	cmp	r2, #4
 8002b22:	d072      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x102>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	bf18      	it	ne
 8002b28:	2000      	movne	r0, #0
 8002b2a:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002b2c:	4a38      	ldr	r2, [pc, #224]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2e:	6891      	ldr	r1, [r2, #8]
 8002b30:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002b32:	bf54      	ite	pl
 8002b34:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002b38:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8002b3a:	4937      	ldr	r1, [pc, #220]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x110>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002b3c:	bf54      	ite	pl
 8002b3e:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002b42:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8002b44:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d05f      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x104>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002b4c:	4930      	ldr	r1, [pc, #192]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
{
 8002b4e:	b510      	push	{r4, lr}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002b50:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002b52:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002b54:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002b56:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	ee07 3a10 	vmov	s14, r3
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b60:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002b62:	f3c4 1e00 	ubfx	lr, r4, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b66:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8002b6a:	fb0e f303 	mul.w	r3, lr, r3
 8002b6e:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002b72:	f002 0c03 	and.w	ip, r2, #3
    switch (pllsource)
 8002b76:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 8002b7e:	d002      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x7e>
 8002b80:	f1bc 0f03 	cmp.w	ip, #3
 8002b84:	d12f      	bne.n	8002be6 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b86:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b90:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b94:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8002c1c <HAL_RCC_GetSysClockFreq+0x114>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b98:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002b9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ba0:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 8002c20 <HAL_RCC_GetSysClockFreq+0x118>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ba4:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ba8:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bac:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002bb0:	4b17      	ldr	r3, [pc, #92]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bb2:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bb8:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002bbc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002bc0:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bce:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002bd2:	ee17 0a90 	vmov	r0, s15
}
 8002bd6:	bd10      	pop	{r4, pc}
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd8:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bdc:	2901      	cmp	r1, #1
 8002bde:	d0a5      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U;
 8002be0:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be2:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be4:	e7b2      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002be6:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8002be8:	ee05 0a90 	vmov	s11, r0
 8002bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf0:	ee06 3a10 	vmov	s12, r3
 8002bf4:	eeb8 5a65 	vcvt.f32.u32	s10, s11
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bfc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002c00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002c04:	eddf 5a05 	vldr	s11, [pc, #20]	@ 8002c1c <HAL_RCC_GetSysClockFreq+0x114>
 8002c08:	e7cc      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x9c>
 8002c0a:	4770      	bx	lr
}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	46020c00 	.word	0x46020c00
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	08006b38 	.word	0x08006b38
 8002c1c:	39000000 	.word	0x39000000
 8002c20:	4b742400 	.word	0x4b742400

08002c24 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8002c24:	2800      	cmp	r0, #0
 8002c26:	f000 810e 	beq.w	8002e46 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2a:	4a9f      	ldr	r2, [pc, #636]	@ (8002ea8 <HAL_RCC_ClockConfig+0x284>)
{
 8002c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	6813      	ldr	r3, [r2, #0]
 8002c32:	4604      	mov	r4, r0
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	428b      	cmp	r3, r1
 8002c3a:	460d      	mov	r5, r1
{
 8002c3c:	b082      	sub	sp, #8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3e:	d20d      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c40:	6813      	ldr	r3, [r2, #0]
 8002c42:	f023 030f 	bic.w	r3, r3, #15
 8002c46:	430b      	orrs	r3, r1
 8002c48:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	6813      	ldr	r3, [r2, #0]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	428b      	cmp	r3, r1
 8002c52:	d003      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8002c54:	2001      	movs	r0, #1
}
 8002c56:	b002      	add	sp, #8
 8002c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	06df      	lsls	r7, r3, #27
 8002c60:	d50b      	bpl.n	8002c7a <HAL_RCC_ClockConfig+0x56>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002c62:	4992      	ldr	r1, [pc, #584]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002c64:	6960      	ldr	r0, [r4, #20]
 8002c66:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8002c68:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002c6c:	4290      	cmp	r0, r2
 8002c6e:	d904      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002c70:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8002c72:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002c76:	4302      	orrs	r2, r0
 8002c78:	624a      	str	r2, [r1, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7a:	071e      	lsls	r6, r3, #28
 8002c7c:	d50d      	bpl.n	8002c9a <HAL_RCC_ClockConfig+0x76>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c7e:	498b      	ldr	r1, [pc, #556]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002c80:	6920      	ldr	r0, [r4, #16]
 8002c82:	6a0a      	ldr	r2, [r1, #32]
 8002c84:	0912      	lsrs	r2, r2, #4
 8002c86:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002c8a:	4290      	cmp	r0, r2
 8002c8c:	d905      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002c8e:	6a0a      	ldr	r2, [r1, #32]
 8002c90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c94:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8002c98:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9a:	0758      	lsls	r0, r3, #29
 8002c9c:	d50b      	bpl.n	8002cb6 <HAL_RCC_ClockConfig+0x92>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c9e:	4983      	ldr	r1, [pc, #524]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002ca0:	68e0      	ldr	r0, [r4, #12]
 8002ca2:	6a0a      	ldr	r2, [r1, #32]
 8002ca4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002ca8:	4290      	cmp	r0, r2
 8002caa:	d904      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	6a0a      	ldr	r2, [r1, #32]
 8002cae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002cb2:	4302      	orrs	r2, r0
 8002cb4:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb6:	0799      	lsls	r1, r3, #30
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb8:	f003 0201 	and.w	r2, r3, #1
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	d530      	bpl.n	8002d20 <HAL_RCC_ClockConfig+0xfc>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002cbe:	4e7b      	ldr	r6, [pc, #492]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002cc0:	68a0      	ldr	r0, [r4, #8]
 8002cc2:	6a31      	ldr	r1, [r6, #32]
 8002cc4:	f001 010f 	and.w	r1, r1, #15
 8002cc8:	4288      	cmp	r0, r1
 8002cca:	d904      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	6a31      	ldr	r1, [r6, #32]
 8002cce:	f021 010f 	bic.w	r1, r1, #15
 8002cd2:	4301      	orrs	r1, r0
 8002cd4:	6231      	str	r1, [r6, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	2a00      	cmp	r2, #0
 8002cd8:	f000 8081 	beq.w	8002dde <HAL_RCC_ClockConfig+0x1ba>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	f000 80b3 	beq.w	8002e4a <HAL_RCC_ClockConfig+0x226>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce4:	4a71      	ldr	r2, [pc, #452]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	2b02      	cmp	r3, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce8:	6812      	ldr	r2, [r2, #0]
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	f000 8084 	beq.w	8002df6 <HAL_RCC_ClockConfig+0x1d2>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 80be 	bne.w	8002e70 <HAL_RCC_ClockConfig+0x24c>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002cf4:	0757      	lsls	r7, r2, #29
 8002cf6:	d5ad      	bpl.n	8002c54 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002cf8:	4e6c      	ldr	r6, [pc, #432]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfa:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	69f2      	ldr	r2, [r6, #28]
 8002d00:	f022 0203 	bic.w	r2, r2, #3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8002d08:	f7ff fbaa 	bl	8002460 <HAL_GetTick>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002d0e:	4607      	mov	r7, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d05b      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x1a8>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d077      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x1e4>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 808a 	bne.w	8002e32 <HAL_RCC_ClockConfig+0x20e>
 8002d1e:	e07e      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1fa>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d20:	2a00      	cmp	r2, #0
 8002d22:	d1db      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xb8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4960      	ldr	r1, [pc, #384]	@ (8002ea8 <HAL_RCC_ClockConfig+0x284>)
 8002d26:	680a      	ldr	r2, [r1, #0]
 8002d28:	f002 020f 	and.w	r2, r2, #15
 8002d2c:	42aa      	cmp	r2, r5
 8002d2e:	d909      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x120>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d30:	680a      	ldr	r2, [r1, #0]
 8002d32:	f022 020f 	bic.w	r2, r2, #15
 8002d36:	432a      	orrs	r2, r5
 8002d38:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	680a      	ldr	r2, [r1, #0]
 8002d3c:	f002 020f 	and.w	r2, r2, #15
 8002d40:	42aa      	cmp	r2, r5
 8002d42:	d187      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x30>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	0759      	lsls	r1, r3, #29
 8002d46:	d50b      	bpl.n	8002d60 <HAL_RCC_ClockConfig+0x13c>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d48:	4958      	ldr	r1, [pc, #352]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002d4a:	68e0      	ldr	r0, [r4, #12]
 8002d4c:	6a0a      	ldr	r2, [r1, #32]
 8002d4e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002d52:	4290      	cmp	r0, r2
 8002d54:	d204      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x13c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002d56:	6a0a      	ldr	r2, [r1, #32]
 8002d58:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d5c:	4302      	orrs	r2, r0
 8002d5e:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d60:	071a      	lsls	r2, r3, #28
 8002d62:	d50d      	bpl.n	8002d80 <HAL_RCC_ClockConfig+0x15c>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d64:	4951      	ldr	r1, [pc, #324]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002d66:	6920      	ldr	r0, [r4, #16]
 8002d68:	6a0a      	ldr	r2, [r1, #32]
 8002d6a:	0912      	lsrs	r2, r2, #4
 8002d6c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002d70:	4290      	cmp	r0, r2
 8002d72:	d205      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x15c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002d74:	6a0a      	ldr	r2, [r1, #32]
 8002d76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d7a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8002d7e:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d80:	06db      	lsls	r3, r3, #27
 8002d82:	d50b      	bpl.n	8002d9c <HAL_RCC_ClockConfig+0x178>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002d84:	4a49      	ldr	r2, [pc, #292]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002d86:	6961      	ldr	r1, [r4, #20]
 8002d88:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002d8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d8e:	4299      	cmp	r1, r3
 8002d90:	d204      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002d92:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6253      	str	r3, [r2, #36]	@ 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d9c:	f7ff feb4 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4a42      	ldr	r2, [pc, #264]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002da4:	4942      	ldr	r1, [pc, #264]	@ (8002eb0 <HAL_RCC_ClockConfig+0x28c>)
 8002da6:	6a12      	ldr	r2, [r2, #32]
  status = HAL_InitTick(uwTickPrio);
 8002da8:	4842      	ldr	r0, [pc, #264]	@ (8002eb4 <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002daa:	f002 020f 	and.w	r2, r2, #15
 8002dae:	5c89      	ldrb	r1, [r1, r2]
  status = HAL_InitTick(uwTickPrio);
 8002db0:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002db2:	4a41      	ldr	r2, [pc, #260]	@ (8002eb8 <HAL_RCC_ClockConfig+0x294>)
 8002db4:	40cb      	lsrs	r3, r1
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	b002      	add	sp, #8
 8002dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8002dbe:	f7ff bac7 	b.w	8002350 <HAL_InitTick>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc2:	f7ff fb4d 	bl	8002460 <HAL_GetTick>
 8002dc6:	1bc3      	subs	r3, r0, r7
 8002dc8:	4543      	cmp	r3, r8
 8002dca:	d838      	bhi.n	8002e3e <HAL_RCC_ClockConfig+0x21a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dcc:	69f3      	ldr	r3, [r6, #28]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d1f5      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0x19e>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	0798      	lsls	r0, r3, #30
 8002dda:	d5a3      	bpl.n	8002d24 <HAL_RCC_ClockConfig+0x100>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ddc:	68a0      	ldr	r0, [r4, #8]
 8002dde:	4933      	ldr	r1, [pc, #204]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002de0:	6a0a      	ldr	r2, [r1, #32]
 8002de2:	f002 020f 	and.w	r2, r2, #15
 8002de6:	4282      	cmp	r2, r0
 8002de8:	d99c      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x100>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002dea:	6a0a      	ldr	r2, [r1, #32]
 8002dec:	f022 020f 	bic.w	r2, r2, #15
 8002df0:	4302      	orrs	r2, r0
 8002df2:	620a      	str	r2, [r1, #32]
 8002df4:	e796      	b.n	8002d24 <HAL_RCC_ClockConfig+0x100>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df6:	0392      	lsls	r2, r2, #14
 8002df8:	f53f af7e 	bmi.w	8002cf8 <HAL_RCC_ClockConfig+0xd4>
 8002dfc:	e72a      	b.n	8002c54 <HAL_RCC_ClockConfig+0x30>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfe:	f7ff fb2f 	bl	8002460 <HAL_GetTick>
 8002e02:	1bc0      	subs	r0, r0, r7
 8002e04:	4540      	cmp	r0, r8
 8002e06:	d81a      	bhi.n	8002e3e <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e08:	69f3      	ldr	r3, [r6, #28]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d1f5      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1da>
 8002e12:	e7e0      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7ff fb24 	bl	8002460 <HAL_GetTick>
 8002e18:	1bc0      	subs	r0, r0, r7
 8002e1a:	4540      	cmp	r0, r8
 8002e1c:	d80f      	bhi.n	8002e3e <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e1e:	69f3      	ldr	r3, [r6, #28]
 8002e20:	f013 0f0c 	tst.w	r3, #12
 8002e24:	d1f6      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x1f0>
 8002e26:	e7d6      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7ff fb1a 	bl	8002460 <HAL_GetTick>
 8002e2c:	1bc0      	subs	r0, r0, r7
 8002e2e:	4540      	cmp	r0, r8
 8002e30:	d805      	bhi.n	8002e3e <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e32:	69f3      	ldr	r3, [r6, #28]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d1f5      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x204>
 8002e3c:	e7cb      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x1b2>
            return HAL_TIMEOUT;
 8002e3e:	2003      	movs	r0, #3
}
 8002e40:	b002      	add	sp, #8
 8002e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002e46:	2001      	movs	r0, #1
}
 8002e48:	4770      	bx	lr
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002e4c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002e50:	0752      	lsls	r2, r2, #29
 8002e52:	d511      	bpl.n	8002e78 <HAL_RCC_ClockConfig+0x254>
      tickstart = HAL_GetTick();
 8002e54:	f7ff fb04 	bl	8002460 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002e58:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 8002e5a:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	035b      	lsls	r3, r3, #13
 8002e60:	d441      	bmi.n	8002ee6 <HAL_RCC_ClockConfig+0x2c2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e62:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <HAL_RCC_ClockConfig+0x288>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0199      	lsls	r1, r3, #6
 8002e68:	f57f aef4 	bpl.w	8002c54 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002e6c:	6863      	ldr	r3, [r4, #4]
 8002e6e:	e743      	b.n	8002cf8 <HAL_RCC_ClockConfig+0xd4>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e70:	0556      	lsls	r6, r2, #21
 8002e72:	f57f aeef 	bpl.w	8002c54 <HAL_RCC_ClockConfig+0x30>
 8002e76:	e73f      	b.n	8002cf8 <HAL_RCC_ClockConfig+0xd4>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002e7c:	f042 0204 	orr.w	r2, r2, #4
 8002e80:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	9b01      	ldr	r3, [sp, #4]
      tickstart = HAL_GetTick();
 8002e90:	f7ff fae6 	bl	8002460 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002e94:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 8002e96:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	035f      	lsls	r7, r3, #13
 8002e9c:	d51b      	bpl.n	8002ed6 <HAL_RCC_ClockConfig+0x2b2>
        pwrclkchanged = SET;
 8002e9e:	f04f 0801 	mov.w	r8, #1
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002ea2:	4f06      	ldr	r7, [pc, #24]	@ (8002ebc <HAL_RCC_ClockConfig+0x298>)
 8002ea4:	e011      	b.n	8002eca <HAL_RCC_ClockConfig+0x2a6>
 8002ea6:	bf00      	nop
 8002ea8:	40022000 	.word	0x40022000
 8002eac:	46020c00 	.word	0x46020c00
 8002eb0:	08006b80 	.word	0x08006b80
 8002eb4:	20000064 	.word	0x20000064
 8002eb8:	2000005c 	.word	0x2000005c
 8002ebc:	46020800 	.word	0x46020800
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002ec0:	f7ff face 	bl	8002460 <HAL_GetTick>
 8002ec4:	1b80      	subs	r0, r0, r6
 8002ec6:	2802      	cmp	r0, #2
 8002ec8:	d8b9      	bhi.n	8002e3e <HAL_RCC_ClockConfig+0x21a>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	0458      	lsls	r0, r3, #17
 8002ece:	d5f7      	bpl.n	8002ec0 <HAL_RCC_ClockConfig+0x29c>
      if (pwrclkchanged == SET)
 8002ed0:	f1b8 0f00 	cmp.w	r8, #0
 8002ed4:	d0c5      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x23e>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <HAL_RCC_ClockConfig+0x2c8>)
 8002ed8:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002ee4:	e7bd      	b.n	8002e62 <HAL_RCC_ClockConfig+0x23e>
    FlagStatus  pwrclkchanged = RESET;
 8002ee6:	f04f 0800 	mov.w	r8, #0
 8002eea:	e7da      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x27e>
 8002eec:	46020c00 	.word	0x46020c00

08002ef0 <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	f000 82a4 	beq.w	800343e <HAL_RCC_OscConfig+0x54e>
{
 8002ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efa:	4aae      	ldr	r2, [pc, #696]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002efc:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efe:	69d5      	ldr	r5, [r2, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f00:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f02:	06da      	lsls	r2, r3, #27
 8002f04:	4604      	mov	r4, r0
{
 8002f06:	b084      	sub	sp, #16
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f08:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0c:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f10:	d531      	bpl.n	8002f76 <HAL_RCC_OscConfig+0x86>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	f000 81b2 	beq.w	800327c <HAL_RCC_OscConfig+0x38c>
 8002f18:	2d0c      	cmp	r5, #12
 8002f1a:	f000 81ac 	beq.w	8003276 <HAL_RCC_OscConfig+0x386>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f1e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8002f20:	4fa4      	ldr	r7, [pc, #656]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 822b 	beq.w	800337e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_MSI_ENABLE();
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002f30:	f7ff fa96 	bl	8002460 <HAL_GetTick>
 8002f34:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002f36:	e006      	b.n	8002f46 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f38:	f7ff fa92 	bl	8002460 <HAL_GetTick>
 8002f3c:	eba0 0008 	sub.w	r0, r0, r8
 8002f40:	2802      	cmp	r0, #2
 8002f42:	f200 820e 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	075a      	lsls	r2, r3, #29
 8002f4a:	d5f5      	bpl.n	8002f38 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002f58:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002f60:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8002f64:	6a21      	ldr	r1, [r4, #32]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f0c0 8367 	bcc.w	800363a <HAL_RCC_OscConfig+0x74a>
 8002f6c:	f023 031f 	bic.w	r3, r3, #31
 8002f70:	430b      	orrs	r3, r1
 8002f72:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	07df      	lsls	r7, r3, #31
 8002f78:	d531      	bpl.n	8002fde <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f7a:	2d08      	cmp	r5, #8
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f7c:	6862      	ldr	r2, [r4, #4]
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f7e:	f000 81bd 	beq.w	80032fc <HAL_RCC_OscConfig+0x40c>
 8002f82:	2d0c      	cmp	r5, #12
 8002f84:	f000 81b7 	beq.w	80032f6 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002f88:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002f8c:	f000 825b 	beq.w	8003446 <HAL_RCC_OscConfig+0x556>
 8002f90:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8002f94:	f000 833c 	beq.w	8003610 <HAL_RCC_OscConfig+0x720>
 8002f98:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 8002f9c:	f000 82fb 	beq.w	8003596 <HAL_RCC_OscConfig+0x6a6>
 8002fa0:	4f84      	ldr	r7, [pc, #528]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002fb8:	603b      	str	r3, [r7, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	f040 8248 	bne.w	8003450 <HAL_RCC_OscConfig+0x560>
        tickstart = HAL_GetTick();
 8002fc0:	f7ff fa4e 	bl	8002460 <HAL_GetTick>
 8002fc4:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fc6:	e006      	b.n	8002fd6 <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7ff fa4a 	bl	8002460 <HAL_GetTick>
 8002fcc:	eba0 0008 	sub.w	r0, r0, r8
 8002fd0:	2864      	cmp	r0, #100	@ 0x64
 8002fd2:	f200 81c6 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	0399      	lsls	r1, r3, #14
 8002fda:	d4f5      	bmi.n	8002fc8 <HAL_RCC_OscConfig+0xd8>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	079a      	lsls	r2, r3, #30
 8002fe0:	d50f      	bpl.n	8003002 <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fe2:	2d04      	cmp	r5, #4
 8002fe4:	f040 81c4 	bne.w	8003370 <HAL_RCC_OscConfig+0x480>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fe8:	68e3      	ldr	r3, [r4, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 817f 	beq.w	80032ee <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4a70      	ldr	r2, [pc, #448]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 8002ff2:	6921      	ldr	r1, [r4, #16]
 8002ff4:	6913      	ldr	r3, [r2, #16]
 8002ff6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ffa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ffe:	6113      	str	r3, [r2, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	0718      	lsls	r0, r3, #28
 8003004:	d54d      	bpl.n	80030a2 <HAL_RCC_OscConfig+0x1b2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4b6b      	ldr	r3, [pc, #428]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 8003008:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800300c:	0751      	lsls	r1, r2, #29
 800300e:	f100 81b4 	bmi.w	800337a <HAL_RCC_OscConfig+0x48a>
      pwrclkchanged = SET;
 8003012:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003018:	f042 0204 	orr.w	r2, r2, #4
 800301c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800302c:	4e62      	ldr	r6, [pc, #392]	@ (80031b8 <HAL_RCC_OscConfig+0x2c8>)
 800302e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8003030:	07da      	lsls	r2, r3, #31
 8003032:	f140 8186 	bpl.w	8003342 <HAL_RCC_OscConfig+0x452>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003036:	6963      	ldr	r3, [r4, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 825d 	beq.w	80034f8 <HAL_RCC_OscConfig+0x608>
      uint32_t bdcr_temp = RCC->BDCR;
 800303e:	4e5d      	ldr	r6, [pc, #372]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003040:	69a2      	ldr	r2, [r4, #24]
      uint32_t bdcr_temp = RCC->BDCR;
 8003042:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003046:	f003 5180 	and.w	r1, r3, #268435456	@ 0x10000000
 800304a:	428a      	cmp	r2, r1
 800304c:	d010      	beq.n	8003070 <HAL_RCC_OscConfig+0x180>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800304e:	f003 6140 	and.w	r1, r3, #201326592	@ 0xc000000
 8003052:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8003056:	f000 814a 	beq.w	80032ee <HAL_RCC_OscConfig+0x3fe>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800305a:	0158      	lsls	r0, r3, #5
 800305c:	f100 82b1 	bmi.w	80035c2 <HAL_RCC_OscConfig+0x6d2>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003060:	4954      	ldr	r1, [pc, #336]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 8003062:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8003066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      __HAL_RCC_LSI_ENABLE();
 8003070:	4e50      	ldr	r6, [pc, #320]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 8003072:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003076:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800307a:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800307e:	f7ff f9ef 	bl	8002460 <HAL_GetTick>
 8003082:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003084:	e005      	b.n	8003092 <HAL_RCC_OscConfig+0x1a2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003086:	f7ff f9eb 	bl	8002460 <HAL_GetTick>
 800308a:	1bc0      	subs	r0, r0, r7
 800308c:	2805      	cmp	r0, #5
 800308e:	f200 8168 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003092:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8003096:	011a      	lsls	r2, r3, #4
 8003098:	d5f5      	bpl.n	8003086 <HAL_RCC_OscConfig+0x196>
    if (pwrclkchanged == SET)
 800309a:	2d00      	cmp	r5, #0
 800309c:	f040 8289 	bne.w	80035b2 <HAL_RCC_OscConfig+0x6c2>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	075d      	lsls	r5, r3, #29
 80030a4:	d55e      	bpl.n	8003164 <HAL_RCC_OscConfig+0x274>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a6:	4b43      	ldr	r3, [pc, #268]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 80030a8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80030ac:	0750      	lsls	r0, r2, #29
 80030ae:	f100 81c8 	bmi.w	8003442 <HAL_RCC_OscConfig+0x552>
      pwrclkchanged = SET;
 80030b2:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80030b8:	f042 0204 	orr.w	r2, r2, #4
 80030bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	9302      	str	r3, [sp, #8]
 80030ca:	9b02      	ldr	r3, [sp, #8]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030cc:	4e3a      	ldr	r6, [pc, #232]	@ (80031b8 <HAL_RCC_OscConfig+0x2c8>)
 80030ce:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80030d0:	07d9      	lsls	r1, r3, #31
 80030d2:	f140 828c 	bpl.w	80035ee <HAL_RCC_OscConfig+0x6fe>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80030d6:	68a3      	ldr	r3, [r4, #8]
 80030d8:	07da      	lsls	r2, r3, #31
 80030da:	f140 81d3 	bpl.w	8003484 <HAL_RCC_OscConfig+0x594>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80030de:	075e      	lsls	r6, r3, #29
 80030e0:	f140 8251 	bpl.w	8003586 <HAL_RCC_OscConfig+0x696>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030e4:	4b33      	ldr	r3, [pc, #204]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 80030e6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80030ea:	f042 0204 	orr.w	r2, r2, #4
 80030ee:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030f2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80030fe:	f7ff f9af 	bl	8002460 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003106:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003108:	4f2a      	ldr	r7, [pc, #168]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 800310a:	e005      	b.n	8003118 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7ff f9a8 	bl	8002460 <HAL_GetTick>
 8003110:	1b80      	subs	r0, r0, r6
 8003112:	4540      	cmp	r0, r8
 8003114:	f200 8125 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003118:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800311c:	0798      	lsls	r0, r3, #30
 800311e:	d5f5      	bpl.n	800310c <HAL_RCC_OscConfig+0x21c>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003120:	68a3      	ldr	r3, [r4, #8]
 8003122:	f013 0f80 	tst.w	r3, #128	@ 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003126:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800312a:	f000 82c7 	beq.w	80036bc <HAL_RCC_OscConfig+0x7cc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800312e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003132:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800313a:	4f1e      	ldr	r7, [pc, #120]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 800313c:	e005      	b.n	800314a <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7ff f98f 	bl	8002460 <HAL_GetTick>
 8003142:	1b80      	subs	r0, r0, r6
 8003144:	4540      	cmp	r0, r8
 8003146:	f200 810c 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800314a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800314e:	0519      	lsls	r1, r3, #20
 8003150:	d5f5      	bpl.n	800313e <HAL_RCC_OscConfig+0x24e>
    if (pwrclkchanged == SET)
 8003152:	b135      	cbz	r5, 8003162 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003154:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
 8003156:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800315a:	f023 0304 	bic.w	r3, r3, #4
 800315e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	069a      	lsls	r2, r3, #26
 8003166:	d516      	bpl.n	8003196 <HAL_RCC_OscConfig+0x2a6>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003168:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      __HAL_RCC_HSI48_ENABLE();
 800316a:	4d12      	ldr	r5, [pc, #72]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 81dc 	beq.w	800352a <HAL_RCC_OscConfig+0x63a>
      __HAL_RCC_HSI48_ENABLE();
 8003172:	682b      	ldr	r3, [r5, #0]
 8003174:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003178:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800317a:	f7ff f971 	bl	8002460 <HAL_GetTick>
 800317e:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003180:	e005      	b.n	800318e <HAL_RCC_OscConfig+0x29e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003182:	f7ff f96d 	bl	8002460 <HAL_GetTick>
 8003186:	1b80      	subs	r0, r0, r6
 8003188:	2802      	cmp	r0, #2
 800318a:	f200 80ea 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800318e:	682b      	ldr	r3, [r5, #0]
 8003190:	049b      	lsls	r3, r3, #18
 8003192:	d5f6      	bpl.n	8003182 <HAL_RCC_OscConfig+0x292>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	061d      	lsls	r5, r3, #24
 8003198:	d51a      	bpl.n	80031d0 <HAL_RCC_OscConfig+0x2e0>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800319a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      __HAL_RCC_SHSI_ENABLE();
 800319c:	4d05      	ldr	r5, [pc, #20]	@ (80031b4 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 81df 	beq.w	8003562 <HAL_RCC_OscConfig+0x672>
      __HAL_RCC_SHSI_ENABLE();
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031aa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80031ac:	f7ff f958 	bl	8002460 <HAL_GetTick>
 80031b0:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80031b2:	e009      	b.n	80031c8 <HAL_RCC_OscConfig+0x2d8>
 80031b4:	46020c00 	.word	0x46020c00
 80031b8:	46020800 	.word	0x46020800
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80031bc:	f7ff f950 	bl	8002460 <HAL_GetTick>
 80031c0:	1b80      	subs	r0, r0, r6
 80031c2:	2802      	cmp	r0, #2
 80031c4:	f200 80cd 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80031c8:	682b      	ldr	r3, [r5, #0]
 80031ca:	0418      	lsls	r0, r3, #16
 80031cc:	d5f6      	bpl.n	80031bc <HAL_RCC_OscConfig+0x2cc>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	065a      	lsls	r2, r3, #25
 80031d2:	d52b      	bpl.n	800322c <HAL_RCC_OscConfig+0x33c>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80031d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8257 	beq.w	800368a <HAL_RCC_OscConfig+0x79a>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80031dc:	4ba5      	ldr	r3, [pc, #660]	@ (8003474 <HAL_RCC_OscConfig+0x584>)
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80031ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80031f2:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 80031f6:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 80031fa:	f0c0 8235 	bcc.w	8003668 <HAL_RCC_OscConfig+0x778>
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	f022 021f 	bic.w	r2, r2, #31
 8003204:	430a      	orrs	r2, r1
 8003206:	60da      	str	r2, [r3, #12]
      __HAL_RCC_MSIK_ENABLE();
 8003208:	4d9a      	ldr	r5, [pc, #616]	@ (8003474 <HAL_RCC_OscConfig+0x584>)
 800320a:	682b      	ldr	r3, [r5, #0]
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003212:	f7ff f925 	bl	8002460 <HAL_GetTick>
 8003216:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003218:	e005      	b.n	8003226 <HAL_RCC_OscConfig+0x336>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800321a:	f7ff f921 	bl	8002460 <HAL_GetTick>
 800321e:	1b80      	subs	r0, r0, r6
 8003220:	2802      	cmp	r0, #2
 8003222:	f200 809e 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003226:	682b      	ldr	r3, [r5, #0]
 8003228:	069b      	lsls	r3, r3, #26
 800322a:	d5f6      	bpl.n	800321a <HAL_RCC_OscConfig+0x32a>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800322e:	b303      	cbz	r3, 8003272 <HAL_RCC_OscConfig+0x382>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003230:	4d90      	ldr	r5, [pc, #576]	@ (8003474 <HAL_RCC_OscConfig+0x584>)
 8003232:	69ea      	ldr	r2, [r5, #28]
 8003234:	f002 020c 	and.w	r2, r2, #12
 8003238:	2a0c      	cmp	r2, #12
 800323a:	f000 8255 	beq.w	80036e8 <HAL_RCC_OscConfig+0x7f8>
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323e:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003246:	602b      	str	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003248:	f000 82a6 	beq.w	8003798 <HAL_RCC_OscConfig+0x8a8>
        tickstart = HAL_GetTick();
 800324c:	f7ff f908 	bl	8002460 <HAL_GetTick>
 8003250:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003252:	e005      	b.n	8003260 <HAL_RCC_OscConfig+0x370>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7ff f904 	bl	8002460 <HAL_GetTick>
 8003258:	1b00      	subs	r0, r0, r4
 800325a:	2802      	cmp	r0, #2
 800325c:	f200 8081 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	0199      	lsls	r1, r3, #6
 8003264:	d4f6      	bmi.n	8003254 <HAL_RCC_OscConfig+0x364>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003266:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003268:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800326c:	f023 0303 	bic.w	r3, r3, #3
 8003270:	62ab      	str	r3, [r5, #40]	@ 0x28
  return HAL_OK;
 8003272:	2000      	movs	r0, #0
 8003274:	e03c      	b.n	80032f0 <HAL_RCC_OscConfig+0x400>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003276:	2e01      	cmp	r6, #1
 8003278:	f47f ae51 	bne.w	8002f1e <HAL_RCC_OscConfig+0x2e>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800327c:	69e3      	ldr	r3, [r4, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d035      	beq.n	80032ee <HAL_RCC_OscConfig+0x3fe>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003282:	4b7c      	ldr	r3, [pc, #496]	@ (8003474 <HAL_RCC_OscConfig+0x584>)
 8003284:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	0217      	lsls	r7, r2, #8
 800328a:	bf56      	itet	pl
 800328c:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
 8003290:	689b      	ldrmi	r3, [r3, #8]
 8003292:	041b      	lslpl	r3, r3, #16
 8003294:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003298:	4298      	cmp	r0, r3
 800329a:	f240 8083 	bls.w	80033a4 <HAL_RCC_OscConfig+0x4b4>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800329e:	2d00      	cmp	r5, #0
 80032a0:	f000 81c4 	beq.w	800362c <HAL_RCC_OscConfig+0x73c>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80032a4:	4b73      	ldr	r3, [pc, #460]	@ (8003474 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80032a6:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80032b8:	ea42 0200 	orr.w	r2, r2, r0
 80032bc:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80032be:	6a21      	ldr	r1, [r4, #32]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	f080 8149 	bcs.w	8003558 <HAL_RCC_OscConfig+0x668>
 80032c6:	2800      	cmp	r0, #0
 80032c8:	f2c0 81f2 	blt.w	80036b0 <HAL_RCC_OscConfig+0x7c0>
 80032cc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80032d0:	bf2b      	itete	cs
 80032d2:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 80032d6:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 80032da:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 80032de:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 80032e2:	60da      	str	r2, [r3, #12]
 80032e4:	e081      	b.n	80033ea <HAL_RCC_OscConfig+0x4fa>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032e6:	f7ff fbb1 	bl	8002a4c <RCC_SetFlashLatencyFromMSIRange>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d07d      	beq.n	80033ea <HAL_RCC_OscConfig+0x4fa>
    return HAL_ERROR;
 80032ee:	2001      	movs	r0, #1
}
 80032f0:	b004      	add	sp, #16
 80032f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032f6:	2e03      	cmp	r6, #3
 80032f8:	f47f ae46 	bne.w	8002f88 <HAL_RCC_OscConfig+0x98>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80032fc:	2a00      	cmp	r2, #0
 80032fe:	d0f6      	beq.n	80032ee <HAL_RCC_OscConfig+0x3fe>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003300:	079d      	lsls	r5, r3, #30
 8003302:	f57f ae7e 	bpl.w	8003002 <HAL_RCC_OscConfig+0x112>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003306:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8003308:	4d5a      	ldr	r5, [pc, #360]	@ (8003474 <HAL_RCC_OscConfig+0x584>)
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8085 	beq.w	800341a <HAL_RCC_OscConfig+0x52a>
        __HAL_RCC_HSI_ENABLE();
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003316:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003318:	f7ff f8a2 	bl	8002460 <HAL_GetTick>
 800331c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331e:	e004      	b.n	800332a <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003320:	f7ff f89e 	bl	8002460 <HAL_GetTick>
 8003324:	1b80      	subs	r0, r0, r6
 8003326:	2802      	cmp	r0, #2
 8003328:	d81b      	bhi.n	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800332a:	682b      	ldr	r3, [r5, #0]
 800332c:	055b      	lsls	r3, r3, #21
 800332e:	d5f7      	bpl.n	8003320 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003330:	692b      	ldr	r3, [r5, #16]
 8003332:	6922      	ldr	r2, [r4, #16]
 8003334:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800333c:	612b      	str	r3, [r5, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	e65f      	b.n	8003002 <HAL_RCC_OscConfig+0x112>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003342:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 800334a:	f7ff f889 	bl	8002460 <HAL_GetTick>
 800334e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003350:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8003352:	07db      	lsls	r3, r3, #31
 8003354:	f53f ae6f 	bmi.w	8003036 <HAL_RCC_OscConfig+0x146>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7ff f882 	bl	8002460 <HAL_GetTick>
 800335c:	1bc0      	subs	r0, r0, r7
 800335e:	2802      	cmp	r0, #2
 8003360:	d9f6      	bls.n	8003350 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8003362:	2003      	movs	r0, #3
}
 8003364:	b004      	add	sp, #16
 8003366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336a:	079a      	lsls	r2, r3, #30
 800336c:	f57f ae49 	bpl.w	8003002 <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003370:	2d0c      	cmp	r5, #12
 8003372:	d1c8      	bne.n	8003306 <HAL_RCC_OscConfig+0x416>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003374:	2e02      	cmp	r6, #2
 8003376:	d1c6      	bne.n	8003306 <HAL_RCC_OscConfig+0x416>
 8003378:	e636      	b.n	8002fe8 <HAL_RCC_OscConfig+0xf8>
    FlagStatus  pwrclkchanged = RESET;
 800337a:	2500      	movs	r5, #0
 800337c:	e656      	b.n	800302c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_DISABLE();
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003386:	f7ff f86b 	bl	8002460 <HAL_GetTick>
 800338a:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800338c:	e005      	b.n	800339a <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800338e:	f7ff f867 	bl	8002460 <HAL_GetTick>
 8003392:	eba0 0008 	sub.w	r0, r0, r8
 8003396:	2802      	cmp	r0, #2
 8003398:	d8e3      	bhi.n	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	075b      	lsls	r3, r3, #29
 800339e:	d4f6      	bmi.n	800338e <HAL_RCC_OscConfig+0x49e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	e5e8      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80033a4:	4b33      	ldr	r3, [pc, #204]	@ (8003474 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033a6:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80033b8:	ea42 0200 	orr.w	r2, r2, r0
 80033bc:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033be:	6a21      	ldr	r1, [r4, #32]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	f080 80c4 	bcs.w	800354e <HAL_RCC_OscConfig+0x65e>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	f2c0 8148 	blt.w	800365c <HAL_RCC_OscConfig+0x76c>
 80033cc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80033d0:	bf2b      	itete	cs
 80033d2:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 80033d6:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 80033da:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 80033de:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 80033e2:	60da      	str	r2, [r3, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033e4:	2d00      	cmp	r5, #0
 80033e6:	f43f af7e 	beq.w	80032e6 <HAL_RCC_OscConfig+0x3f6>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80033ea:	f7ff fb8d 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4a20      	ldr	r2, [pc, #128]	@ (8003474 <HAL_RCC_OscConfig+0x584>)
 80033f2:	4921      	ldr	r1, [pc, #132]	@ (8003478 <HAL_RCC_OscConfig+0x588>)
 80033f4:	6a12      	ldr	r2, [r2, #32]
 80033f6:	f002 020f 	and.w	r2, r2, #15
 80033fa:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 80033fc:	4a1f      	ldr	r2, [pc, #124]	@ (800347c <HAL_RCC_OscConfig+0x58c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80033fe:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 8003400:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003402:	4a1f      	ldr	r2, [pc, #124]	@ (8003480 <HAL_RCC_OscConfig+0x590>)
 8003404:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003406:	f7fe ffa3 	bl	8002350 <HAL_InitTick>
        if (status != HAL_OK)
 800340a:	2800      	cmp	r0, #0
 800340c:	f47f af70 	bne.w	80032f0 <HAL_RCC_OscConfig+0x400>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	07d9      	lsls	r1, r3, #31
 8003414:	d5a9      	bpl.n	800336a <HAL_RCC_OscConfig+0x47a>
 8003416:	6862      	ldr	r2, [r4, #4]
 8003418:	e5b3      	b.n	8002f82 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_DISABLE();
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003420:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003422:	f7ff f81d 	bl	8002460 <HAL_GetTick>
 8003426:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003428:	e004      	b.n	8003434 <HAL_RCC_OscConfig+0x544>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342a:	f7ff f819 	bl	8002460 <HAL_GetTick>
 800342e:	1b80      	subs	r0, r0, r6
 8003430:	2802      	cmp	r0, #2
 8003432:	d896      	bhi.n	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	055f      	lsls	r7, r3, #21
 8003438:	d4f7      	bmi.n	800342a <HAL_RCC_OscConfig+0x53a>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	e5e1      	b.n	8003002 <HAL_RCC_OscConfig+0x112>
    return HAL_ERROR;
 800343e:	2001      	movs	r0, #1
}
 8003440:	4770      	bx	lr
    FlagStatus pwrclkchanged = RESET;
 8003442:	2500      	movs	r5, #0
 8003444:	e642      	b.n	80030cc <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003446:	4a0b      	ldr	r2, [pc, #44]	@ (8003474 <HAL_RCC_OscConfig+0x584>)
 8003448:	6813      	ldr	r3, [r2, #0]
 800344a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003450:	f7ff f806 	bl	8002460 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003454:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8003474 <HAL_RCC_OscConfig+0x584>
        tickstart = HAL_GetTick();
 8003458:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800345a:	e005      	b.n	8003468 <HAL_RCC_OscConfig+0x578>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7ff f800 	bl	8002460 <HAL_GetTick>
 8003460:	1bc0      	subs	r0, r0, r7
 8003462:	2864      	cmp	r0, #100	@ 0x64
 8003464:	f63f af7d 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003468:	f8d8 3000 	ldr.w	r3, [r8]
 800346c:	0398      	lsls	r0, r3, #14
 800346e:	d5f5      	bpl.n	800345c <HAL_RCC_OscConfig+0x56c>
 8003470:	e5b4      	b.n	8002fdc <HAL_RCC_OscConfig+0xec>
 8003472:	bf00      	nop
 8003474:	46020c00 	.word	0x46020c00
 8003478:	08006b80 	.word	0x08006b80
 800347c:	20000064 	.word	0x20000064
 8003480:	2000005c 	.word	0x2000005c
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003484:	4e97      	ldr	r6, [pc, #604]	@ (80036e4 <HAL_RCC_OscConfig+0x7f4>)
 8003486:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003492:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8003496:	f022 0204 	bic.w	r2, r2, #4
 800349a:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f47f ae2d 	bne.w	80030fe <HAL_RCC_OscConfig+0x20e>
      tickstart = HAL_GetTick();
 80034a4:	f7fe ffdc 	bl	8002460 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80034ac:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ae:	e005      	b.n	80034bc <HAL_RCC_OscConfig+0x5cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fe ffd6 	bl	8002460 <HAL_GetTick>
 80034b4:	1bc0      	subs	r0, r0, r7
 80034b6:	4540      	cmp	r0, r8
 80034b8:	f63f af53 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034bc:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80034c0:	079b      	lsls	r3, r3, #30
 80034c2:	d4f5      	bmi.n	80034b0 <HAL_RCC_OscConfig+0x5c0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80034c4:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80034c8:	0618      	lsls	r0, r3, #24
 80034ca:	f57f ae42 	bpl.w	8003152 <HAL_RCC_OscConfig+0x262>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034ce:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f241 3888 	movw	r8, #5000	@ 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034da:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034de:	4e81      	ldr	r6, [pc, #516]	@ (80036e4 <HAL_RCC_OscConfig+0x7f4>)
 80034e0:	e005      	b.n	80034ee <HAL_RCC_OscConfig+0x5fe>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fe ffbd 	bl	8002460 <HAL_GetTick>
 80034e6:	1bc0      	subs	r0, r0, r7
 80034e8:	4540      	cmp	r0, r8
 80034ea:	f63f af3a 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034ee:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80034f2:	0519      	lsls	r1, r3, #20
 80034f4:	d4f5      	bmi.n	80034e2 <HAL_RCC_OscConfig+0x5f2>
 80034f6:	e62c      	b.n	8003152 <HAL_RCC_OscConfig+0x262>
      __HAL_RCC_LSI_DISABLE();
 80034f8:	4e7a      	ldr	r6, [pc, #488]	@ (80036e4 <HAL_RCC_OscConfig+0x7f4>)
 80034fa:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80034fe:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003502:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8003506:	f7fe ffab 	bl	8002460 <HAL_GetTick>
 800350a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800350c:	e005      	b.n	800351a <HAL_RCC_OscConfig+0x62a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7fe ffa7 	bl	8002460 <HAL_GetTick>
 8003512:	1bc0      	subs	r0, r0, r7
 8003514:	2805      	cmp	r0, #5
 8003516:	f63f af24 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800351a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	d4f5      	bmi.n	800350e <HAL_RCC_OscConfig+0x61e>
    if (pwrclkchanged == SET)
 8003522:	2d00      	cmp	r5, #0
 8003524:	f43f adbc 	beq.w	80030a0 <HAL_RCC_OscConfig+0x1b0>
 8003528:	e043      	b.n	80035b2 <HAL_RCC_OscConfig+0x6c2>
      __HAL_RCC_HSI48_DISABLE();
 800352a:	682b      	ldr	r3, [r5, #0]
 800352c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003530:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003532:	f7fe ff95 	bl	8002460 <HAL_GetTick>
 8003536:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003538:	e005      	b.n	8003546 <HAL_RCC_OscConfig+0x656>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800353a:	f7fe ff91 	bl	8002460 <HAL_GetTick>
 800353e:	1b80      	subs	r0, r0, r6
 8003540:	2802      	cmp	r0, #2
 8003542:	f63f af0e 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	049f      	lsls	r7, r3, #18
 800354a:	d4f6      	bmi.n	800353a <HAL_RCC_OscConfig+0x64a>
 800354c:	e622      	b.n	8003194 <HAL_RCC_OscConfig+0x2a4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800354e:	f022 021f 	bic.w	r2, r2, #31
 8003552:	430a      	orrs	r2, r1
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	e745      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003558:	f022 021f 	bic.w	r2, r2, #31
 800355c:	430a      	orrs	r2, r1
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	e743      	b.n	80033ea <HAL_RCC_OscConfig+0x4fa>
      __HAL_RCC_SHSI_DISABLE();
 8003562:	682b      	ldr	r3, [r5, #0]
 8003564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003568:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800356a:	f7fe ff79 	bl	8002460 <HAL_GetTick>
 800356e:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003570:	e005      	b.n	800357e <HAL_RCC_OscConfig+0x68e>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003572:	f7fe ff75 	bl	8002460 <HAL_GetTick>
 8003576:	1b80      	subs	r0, r0, r6
 8003578:	2802      	cmp	r0, #2
 800357a:	f63f aef2 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	0419      	lsls	r1, r3, #16
 8003582:	d4f6      	bmi.n	8003572 <HAL_RCC_OscConfig+0x682>
 8003584:	e623      	b.n	80031ce <HAL_RCC_OscConfig+0x2de>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003586:	4a57      	ldr	r2, [pc, #348]	@ (80036e4 <HAL_RCC_OscConfig+0x7f4>)
 8003588:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003594:	e5b3      	b.n	80030fe <HAL_RCC_OscConfig+0x20e>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003596:	4b53      	ldr	r3, [pc, #332]	@ (80036e4 <HAL_RCC_OscConfig+0x7f4>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80035ae:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b0:	e74e      	b.n	8003450 <HAL_RCC_OscConfig+0x560>
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4a4c      	ldr	r2, [pc, #304]	@ (80036e4 <HAL_RCC_OscConfig+0x7f4>)
 80035b4:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80035c0:	e56e      	b.n	80030a0 <HAL_RCC_OscConfig+0x1b0>
          __HAL_RCC_LSI_DISABLE();
 80035c2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80035c6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80035ca:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
          tickstart = HAL_GetTick();
 80035ce:	f7fe ff47 	bl	8002460 <HAL_GetTick>
 80035d2:	4607      	mov	r7, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80035d4:	e005      	b.n	80035e2 <HAL_RCC_OscConfig+0x6f2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fe ff43 	bl	8002460 <HAL_GetTick>
 80035da:	1bc0      	subs	r0, r0, r7
 80035dc:	2805      	cmp	r0, #5
 80035de:	f63f aec0 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80035e2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80035e6:	0119      	lsls	r1, r3, #4
 80035e8:	d4f5      	bmi.n	80035d6 <HAL_RCC_OscConfig+0x6e6>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80035ea:	69a2      	ldr	r2, [r4, #24]
 80035ec:	e538      	b.n	8003060 <HAL_RCC_OscConfig+0x170>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80035ee:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 80035f6:	f7fe ff33 	bl	8002460 <HAL_GetTick>
 80035fa:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035fc:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80035fe:	07db      	lsls	r3, r3, #31
 8003600:	f53f ad69 	bmi.w	80030d6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003604:	f7fe ff2c 	bl	8002460 <HAL_GetTick>
 8003608:	1bc0      	subs	r0, r0, r7
 800360a:	2802      	cmp	r0, #2
 800360c:	d9f6      	bls.n	80035fc <HAL_RCC_OscConfig+0x70c>
 800360e:	e6a8      	b.n	8003362 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003610:	4b34      	ldr	r3, [pc, #208]	@ (80036e4 <HAL_RCC_OscConfig+0x7f4>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003628:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800362a:	e711      	b.n	8003450 <HAL_RCC_OscConfig+0x560>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800362c:	f7ff fa0e 	bl	8002a4c <RCC_SetFlashLatencyFromMSIRange>
 8003630:	2800      	cmp	r0, #0
 8003632:	f47f ae5c 	bne.w	80032ee <HAL_RCC_OscConfig+0x3fe>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003636:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003638:	e634      	b.n	80032a4 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800363a:	2a00      	cmp	r2, #0
 800363c:	f2c0 80a4 	blt.w	8003788 <HAL_RCC_OscConfig+0x898>
 8003640:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003644:	bf2b      	itete	cs
 8003646:	f423 43f8 	biccs.w	r3, r3, #31744	@ 0x7c00
 800364a:	f423 2378 	biccc.w	r3, r3, #1015808	@ 0xf8000
 800364e:	ea43 2381 	orrcs.w	r3, r3, r1, lsl #10
 8003652:	ea43 33c1 	orrcc.w	r3, r3, r1, lsl #15
 8003656:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	e48c      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800365c:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8003660:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	e6bd      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f4>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003668:	2a00      	cmp	r2, #0
 800366a:	f2c0 811e 	blt.w	80038aa <HAL_RCC_OscConfig+0x9ba>
 800366e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	bf2b      	itete	cs
 8003676:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 800367a:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 800367e:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8003682:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	e5be      	b.n	8003208 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_MSIK_DISABLE();
 800368a:	4d16      	ldr	r5, [pc, #88]	@ (80036e4 <HAL_RCC_OscConfig+0x7f4>)
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	f023 0310 	bic.w	r3, r3, #16
 8003692:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003694:	f7fe fee4 	bl	8002460 <HAL_GetTick>
 8003698:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800369a:	e005      	b.n	80036a8 <HAL_RCC_OscConfig+0x7b8>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800369c:	f7fe fee0 	bl	8002460 <HAL_GetTick>
 80036a0:	1b80      	subs	r0, r0, r6
 80036a2:	2802      	cmp	r0, #2
 80036a4:	f63f ae5d 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	069f      	lsls	r7, r3, #26
 80036ac:	d4f6      	bmi.n	800369c <HAL_RCC_OscConfig+0x7ac>
 80036ae:	e5bd      	b.n	800322c <HAL_RCC_OscConfig+0x33c>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80036b0:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 80036b4:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	e696      	b.n	80033ea <HAL_RCC_OscConfig+0x4fa>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036c8:	4f06      	ldr	r7, [pc, #24]	@ (80036e4 <HAL_RCC_OscConfig+0x7f4>)
 80036ca:	e005      	b.n	80036d8 <HAL_RCC_OscConfig+0x7e8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fe fec8 	bl	8002460 <HAL_GetTick>
 80036d0:	1b80      	subs	r0, r0, r6
 80036d2:	4540      	cmp	r0, r8
 80036d4:	f63f ae45 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80036dc:	051a      	lsls	r2, r3, #20
 80036de:	d4f5      	bmi.n	80036cc <HAL_RCC_OscConfig+0x7dc>
 80036e0:	e537      	b.n	8003152 <HAL_RCC_OscConfig+0x262>
 80036e2:	bf00      	nop
 80036e4:	46020c00 	.word	0x46020c00
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e8:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 80036ea:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036ec:	6b68      	ldr	r0, [r5, #52]	@ 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ee:	f43f adfe 	beq.w	80032ee <HAL_RCC_OscConfig+0x3fe>
 80036f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80036f4:	f002 0103 	and.w	r1, r2, #3
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f8:	4299      	cmp	r1, r3
 80036fa:	f47f adf8 	bne.w	80032ee <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80036fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003700:	f3c2 2103 	ubfx	r1, r2, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003704:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	4299      	cmp	r1, r3
 8003708:	f47f adf1 	bne.w	80032ee <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800370c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800370e:	f402 4270 	and.w	r2, r2, #61440	@ 0xf000
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	f47f adeb 	bne.w	80032ee <HAL_RCC_OscConfig+0x3fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003718:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800371a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800371e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	f47f ade4 	bne.w	80032ee <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003726:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003728:	f3c0 2246 	ubfx	r2, r0, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800372c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	f47f addd 	bne.w	80032ee <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003734:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003736:	f3c0 4206 	ubfx	r2, r0, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800373a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	f47f add6 	bne.w	80032ee <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003742:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003744:	f3c0 6006 	ubfx	r0, r0, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003748:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800374a:	4298      	cmp	r0, r3
 800374c:	f47f adcf 	bne.w	80032ee <HAL_RCC_OscConfig+0x3fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003750:	4b59      	ldr	r3, [pc, #356]	@ (80038b8 <HAL_RCC_OscConfig+0x9c8>)
 8003752:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003756:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 800375a:	428a      	cmp	r2, r1
 800375c:	f43f ad89 	beq.w	8003272 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003760:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003762:	f022 0210 	bic.w	r2, r2, #16
 8003766:	629a      	str	r2, [r3, #40]	@ 0x28
        tickstart = HAL_GetTick();
 8003768:	f7fe fe7a 	bl	8002460 <HAL_GetTick>
 800376c:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800376e:	f7fe fe77 	bl	8002460 <HAL_GetTick>
 8003772:	42a8      	cmp	r0, r5
 8003774:	d0fb      	beq.n	800376e <HAL_RCC_OscConfig+0x87e>
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003776:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003778:	4b4f      	ldr	r3, [pc, #316]	@ (80038b8 <HAL_RCC_OscConfig+0x9c8>)
 800377a:	00d2      	lsls	r2, r2, #3
 800377c:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 800377e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003780:	f042 0210 	orr.w	r2, r2, #16
 8003784:	629a      	str	r2, [r3, #40]	@ 0x28
 8003786:	e574      	b.n	8003272 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003788:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 800378c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8003790:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	f7ff bbef 	b.w	8002f76 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003798:	f7fe fe62 	bl	8002460 <HAL_GetTick>
 800379c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800379e:	e005      	b.n	80037ac <HAL_RCC_OscConfig+0x8bc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fe5e 	bl	8002460 <HAL_GetTick>
 80037a4:	1b80      	subs	r0, r0, r6
 80037a6:	2802      	cmp	r0, #2
 80037a8:	f63f addb 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	d1f5      	bne.n	80037a0 <HAL_RCC_OscConfig+0x8b0>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b4:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 80037b8:	0756      	lsls	r6, r2, #29
 80037ba:	d40c      	bmi.n	80037d6 <HAL_RCC_OscConfig+0x8e6>
          pwrclkchanged = SET;
 80037bc:	2301      	movs	r3, #1
          __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 80037c2:	f042 0204 	orr.w	r2, r2, #4
 80037c6:	f8c5 2094 	str.w	r2, [r5, #148]	@ 0x94
 80037ca:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 80037ce:	f002 0204 	and.w	r2, r2, #4
 80037d2:	9203      	str	r2, [sp, #12]
 80037d4:	9a03      	ldr	r2, [sp, #12]
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80037d6:	4d39      	ldr	r5, [pc, #228]	@ (80038bc <HAL_RCC_OscConfig+0x9cc>)
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80037d8:	4937      	ldr	r1, [pc, #220]	@ (80038b8 <HAL_RCC_OscConfig+0x9c8>)
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80037da:	68ee      	ldr	r6, [r5, #12]
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80037dc:	68ea      	ldr	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80037de:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 80038c0 <HAL_RCC_OscConfig+0x9d0>
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80037e2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80037e6:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80037e8:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 80037ea:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80037ec:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80037ee:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 80037f2:	f020 0003 	bic.w	r0, r0, #3
 80037f6:	433a      	orrs	r2, r7
 80037f8:	4302      	orrs	r2, r0
 80037fa:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80037fc:	3801      	subs	r0, #1
 80037fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003802:	628a      	str	r2, [r1, #40]	@ 0x28
 8003804:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003806:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003808:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 800380c:	1e47      	subs	r7, r0, #1
 800380e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003810:	3a01      	subs	r2, #1
 8003812:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003816:	027f      	lsls	r7, r7, #9
 8003818:	3801      	subs	r0, #1
 800381a:	ea0e 0c0c 	and.w	ip, lr, ip
 800381e:	b2bf      	uxth	r7, r7
 8003820:	0400      	lsls	r0, r0, #16
 8003822:	ea42 020c 	orr.w	r2, r2, ip
 8003826:	f400 00fe 	and.w	r0, r0, #8323072	@ 0x7f0000
 800382a:	433a      	orrs	r2, r7
 800382c:	4302      	orrs	r2, r0
 800382e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003830:	3801      	subs	r0, #1
 8003832:	0600      	lsls	r0, r0, #24
 8003834:	f000 40fe 	and.w	r0, r0, #2130706432	@ 0x7f000000
 8003838:	4302      	orrs	r2, r0
 800383a:	634a      	str	r2, [r1, #52]	@ 0x34
        __HAL_RCC_PLL_FRACN_DISABLE();
 800383c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800383e:	f022 0210 	bic.w	r2, r2, #16
 8003842:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003844:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003846:	00d2      	lsls	r2, r2, #3
 8003848:	638a      	str	r2, [r1, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 800384a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800384c:	f042 0210 	orr.w	r2, r2, #16
 8003850:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003852:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003856:	f022 020c 	bic.w	r2, r2, #12
 800385a:	4302      	orrs	r2, r0
        if (pwrboosten == SET)
 800385c:	0374      	lsls	r4, r6, #13
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800385e:	628a      	str	r2, [r1, #40]	@ 0x28
        if (pwrboosten == SET)
 8003860:	d41e      	bmi.n	80038a0 <HAL_RCC_OscConfig+0x9b0>
        if (pwrclkchanged == SET)
 8003862:	b133      	cbz	r3, 8003872 <HAL_RCC_OscConfig+0x982>
          __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4a14      	ldr	r2, [pc, #80]	@ (80038b8 <HAL_RCC_OscConfig+0x9c8>)
 8003866:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800386a:	f023 0304 	bic.w	r3, r3, #4
 800386e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        __HAL_RCC_PLL_ENABLE();
 8003872:	4c11      	ldr	r4, [pc, #68]	@ (80038b8 <HAL_RCC_OscConfig+0x9c8>)
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800387a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800387c:	f7fe fdf0 	bl	8002460 <HAL_GetTick>
 8003880:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003882:	e005      	b.n	8003890 <HAL_RCC_OscConfig+0x9a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003884:	f7fe fdec 	bl	8002460 <HAL_GetTick>
 8003888:	1b40      	subs	r0, r0, r5
 800388a:	2802      	cmp	r0, #2
 800388c:	f63f ad69 	bhi.w	8003362 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	0198      	lsls	r0, r3, #6
 8003894:	d5f6      	bpl.n	8003884 <HAL_RCC_OscConfig+0x994>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003896:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800389c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800389e:	e4e8      	b.n	8003272 <HAL_RCC_OscConfig+0x382>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80038a0:	68ea      	ldr	r2, [r5, #12]
 80038a2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80038a6:	60ea      	str	r2, [r5, #12]
 80038a8:	e7db      	b.n	8003862 <HAL_RCC_OscConfig+0x972>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 80038b0:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	e4a7      	b.n	8003208 <HAL_RCC_OscConfig+0x318>
 80038b8:	46020c00 	.word	0x46020c00
 80038bc:	46020800 	.word	0x46020800
 80038c0:	80800000 	.word	0x80800000

080038c4 <HAL_RCC_GetHCLKFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c4:	4a47      	ldr	r2, [pc, #284]	@ (80039e4 <HAL_RCC_GetHCLKFreq+0x120>)
{
 80038c6:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c8:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038cc:	f013 030c 	ands.w	r3, r3, #12
 80038d0:	d016      	beq.n	8003900 <HAL_RCC_GetHCLKFreq+0x3c>
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d06a      	beq.n	80039ac <HAL_RCC_GetHCLKFreq+0xe8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038d6:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 80038d8:	4843      	ldr	r0, [pc, #268]	@ (80039e8 <HAL_RCC_GetHCLKFreq+0x124>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038da:	f002 020c 	and.w	r2, r2, #12
 80038de:	2a04      	cmp	r2, #4
 80038e0:	d002      	beq.n	80038e8 <HAL_RCC_GetHCLKFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	bf18      	it	ne
 80038e6:	2000      	movne	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80038e8:	4b3e      	ldr	r3, [pc, #248]	@ (80039e4 <HAL_RCC_GetHCLKFreq+0x120>)
 80038ea:	4940      	ldr	r1, [pc, #256]	@ (80039ec <HAL_RCC_GetHCLKFreq+0x128>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a40      	ldr	r2, [pc, #256]	@ (80039f0 <HAL_RCC_GetHCLKFreq+0x12c>)
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	5ccb      	ldrb	r3, [r1, r3]
}
 80038f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80038fa:	40d8      	lsrs	r0, r3
 80038fc:	6010      	str	r0, [r2, #0]
}
 80038fe:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003900:	4a38      	ldr	r2, [pc, #224]	@ (80039e4 <HAL_RCC_GetHCLKFreq+0x120>)
 8003902:	6891      	ldr	r1, [r2, #8]
 8003904:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003906:	bf54      	ite	pl
 8003908:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800390c:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 800390e:	4939      	ldr	r1, [pc, #228]	@ (80039f4 <HAL_RCC_GetHCLKFreq+0x130>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003910:	bf54      	ite	pl
 8003912:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003916:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8003918:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0e3      	beq.n	80038e8 <HAL_RCC_GetHCLKFreq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003920:	4930      	ldr	r1, [pc, #192]	@ (80039e4 <HAL_RCC_GetHCLKFreq+0x120>)
 8003922:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003924:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003926:	f004 0c03 	and.w	ip, r4, #3
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800392a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800392c:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800392e:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003932:	f3c4 04cc 	ubfx	r4, r4, #3, #13
 8003936:	fb04 f303 	mul.w	r3, r4, r3
 800393a:	ee07 3a90 	vmov	s15, r3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800393e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    switch (pllsource)
 8003942:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800394a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800394e:	d002      	beq.n	8003956 <HAL_RCC_GetHCLKFreq+0x92>
 8003950:	f1bc 0f03 	cmp.w	ip, #3
 8003954:	d131      	bne.n	80039ba <HAL_RCC_GetHCLKFreq+0xf6>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003956:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8003958:	ee07 2a10 	vmov	s14, r2
 800395c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003960:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003968:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800396c:	eddf 5a22 	vldr	s11, [pc, #136]	@ 80039f8 <HAL_RCC_GetHCLKFreq+0x134>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003970:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003974:	ed9f 5a21 	vldr	s10, [pc, #132]	@ 80039fc <HAL_RCC_GetHCLKFreq+0x138>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003978:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800397c:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003980:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003984:	4b17      	ldr	r3, [pc, #92]	@ (80039e4 <HAL_RCC_GetHCLKFreq+0x120>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003986:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800398a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800398c:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003990:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003994:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800399e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039a2:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80039a6:	ee17 0a90 	vmov	r0, s15
 80039aa:	e79d      	b.n	80038e8 <HAL_RCC_GetHCLKFreq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ac:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039b0:	2901      	cmp	r1, #1
 80039b2:	d0a5      	beq.n	8003900 <HAL_RCC_GetHCLKFreq+0x3c>
  uint32_t msirange = 0U;
 80039b4:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039b6:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b8:	e7b2      	b.n	8003920 <HAL_RCC_GetHCLKFreq+0x5c>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039ba:	ee07 0a10 	vmov	s14, r0
 80039be:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80039c0:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	ee06 3a10 	vmov	s12, r3
 80039cc:	ee07 2a10 	vmov	s14, r2
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80039d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039d4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80039d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80039dc:	eddf 5a06 	vldr	s11, [pc, #24]	@ 80039f8 <HAL_RCC_GetHCLKFreq+0x134>
 80039e0:	e7ca      	b.n	8003978 <HAL_RCC_GetHCLKFreq+0xb4>
 80039e2:	bf00      	nop
 80039e4:	46020c00 	.word	0x46020c00
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	08006b80 	.word	0x08006b80
 80039f0:	2000005c 	.word	0x2000005c
 80039f4:	08006b38 	.word	0x08006b38
 80039f8:	39000000 	.word	0x39000000
 80039fc:	4b742400 	.word	0x4b742400

08003a00 <HAL_RCC_GetPCLK1Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a00:	4949      	ldr	r1, [pc, #292]	@ (8003b28 <HAL_RCC_GetPCLK1Freq+0x128>)
{
 8003a02:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a04:	69ca      	ldr	r2, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a06:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a08:	f012 020c 	ands.w	r2, r2, #12
 8003a0c:	d01c      	beq.n	8003a48 <HAL_RCC_GetPCLK1Freq+0x48>
 8003a0e:	2a0c      	cmp	r2, #12
 8003a10:	d06e      	beq.n	8003af0 <HAL_RCC_GetPCLK1Freq+0xf0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a12:	69cb      	ldr	r3, [r1, #28]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b04      	cmp	r3, #4
    sysclockfreq = HSI_VALUE;
 8003a1a:	4b44      	ldr	r3, [pc, #272]	@ (8003b2c <HAL_RCC_GetPCLK1Freq+0x12c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a1c:	d002      	beq.n	8003a24 <HAL_RCC_GetPCLK1Freq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a1e:	2a08      	cmp	r2, #8
 8003a20:	bf18      	it	ne
 8003a22:	2300      	movne	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003a24:	4940      	ldr	r1, [pc, #256]	@ (8003b28 <HAL_RCC_GetPCLK1Freq+0x128>)
 8003a26:	4c42      	ldr	r4, [pc, #264]	@ (8003b30 <HAL_RCC_GetPCLK1Freq+0x130>)
 8003a28:	6a0a      	ldr	r2, [r1, #32]
 8003a2a:	4842      	ldr	r0, [pc, #264]	@ (8003b34 <HAL_RCC_GetPCLK1Freq+0x134>)
 8003a2c:	f002 020f 	and.w	r2, r2, #15
 8003a30:	5ca2      	ldrb	r2, [r4, r2]
}
 8003a32:	bc30      	pop	{r4, r5}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003a34:	40d3      	lsrs	r3, r2
 8003a36:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003a38:	6a0a      	ldr	r2, [r1, #32]
 8003a3a:	493f      	ldr	r1, [pc, #252]	@ (8003b38 <HAL_RCC_GetPCLK1Freq+0x138>)
 8003a3c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003a40:	5c88      	ldrb	r0, [r1, r2]
}
 8003a42:	fa23 f000 	lsr.w	r0, r3, r0
 8003a46:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003a48:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <HAL_RCC_GetPCLK1Freq+0x128>)
 8003a4a:	6899      	ldr	r1, [r3, #8]
 8003a4c:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003a4e:	bf54      	ite	pl
 8003a50:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003a54:	689b      	ldrmi	r3, [r3, #8]
    msirange = MSIRangeTable[msirange];
 8003a56:	4939      	ldr	r1, [pc, #228]	@ (8003b3c <HAL_RCC_GetPCLK1Freq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003a58:	bf54      	ite	pl
 8003a5a:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003a5e:	0f1b      	lsrmi	r3, r3, #28
    msirange = MSIRangeTable[msirange];
 8003a60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d0dd      	beq.n	8003a24 <HAL_RCC_GetPCLK1Freq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003a68:	482f      	ldr	r0, [pc, #188]	@ (8003b28 <HAL_RCC_GetPCLK1Freq+0x128>)
 8003a6a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003a6c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003a6e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a70:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003a72:	f3c2 1200 	ubfx	r2, r2, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a76:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8003a7a:	fb0c f202 	mul.w	r2, ip, r2
 8003a7e:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003a82:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003a86:	f3c1 2103 	ubfx	r1, r1, #8, #4
    switch (pllsource)
 8003a8a:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003a90:	f101 0101 	add.w	r1, r1, #1
    switch (pllsource)
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_GetPCLK1Freq+0x9a>
 8003a96:	2c03      	cmp	r4, #3
 8003a98:	d131      	bne.n	8003afe <HAL_RCC_GetPCLK1Freq+0xfe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a9a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003a9c:	ee07 1a10 	vmov	s14, r1
 8003aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa4:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003aa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ab0:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8003b40 <HAL_RCC_GetPCLK1Freq+0x140>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ab4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ab8:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 8003b44 <HAL_RCC_GetPCLK1Freq+0x144>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003abc:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ac0:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ac4:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003ac8:	4b17      	ldr	r3, [pc, #92]	@ (8003b28 <HAL_RCC_GetPCLK1Freq+0x128>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003aca:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ad0:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003ad4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003ad8:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ae6:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003aea:	ee17 3a90 	vmov	r3, s15
 8003aee:	e799      	b.n	8003a24 <HAL_RCC_GetPCLK1Freq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af0:	f000 0003 	and.w	r0, r0, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003af4:	2801      	cmp	r0, #1
 8003af6:	d0a7      	beq.n	8003a48 <HAL_RCC_GetPCLK1Freq+0x48>
  uint32_t msirange = 0U;
 8003af8:	2300      	movs	r3, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003afa:	69ca      	ldr	r2, [r1, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003afc:	e7b4      	b.n	8003a68 <HAL_RCC_GetPCLK1Freq+0x68>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003afe:	ee07 3a10 	vmov	s14, r3
 8003b02:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8003b04:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8003b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b0c:	ee06 2a10 	vmov	s12, r2
 8003b10:	ee07 1a10 	vmov	s14, r1
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b18:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003b1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b20:	eddf 5a07 	vldr	s11, [pc, #28]	@ 8003b40 <HAL_RCC_GetPCLK1Freq+0x140>
 8003b24:	e7ca      	b.n	8003abc <HAL_RCC_GetPCLK1Freq+0xbc>
 8003b26:	bf00      	nop
 8003b28:	46020c00 	.word	0x46020c00
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	08006b80 	.word	0x08006b80
 8003b34:	2000005c 	.word	0x2000005c
 8003b38:	08006b78 	.word	0x08006b78
 8003b3c:	08006b38 	.word	0x08006b38
 8003b40:	39000000 	.word	0x39000000
 8003b44:	4b742400 	.word	0x4b742400

08003b48 <HAL_RCC_GetPCLK2Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b48:	4949      	ldr	r1, [pc, #292]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x128>)
{
 8003b4a:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4c:	69ca      	ldr	r2, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b4e:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b50:	f012 020c 	ands.w	r2, r2, #12
 8003b54:	d01c      	beq.n	8003b90 <HAL_RCC_GetPCLK2Freq+0x48>
 8003b56:	2a0c      	cmp	r2, #12
 8003b58:	d06e      	beq.n	8003c38 <HAL_RCC_GetPCLK2Freq+0xf0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b5a:	69cb      	ldr	r3, [r1, #28]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b04      	cmp	r3, #4
    sysclockfreq = HSI_VALUE;
 8003b62:	4b44      	ldr	r3, [pc, #272]	@ (8003c74 <HAL_RCC_GetPCLK2Freq+0x12c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b64:	d002      	beq.n	8003b6c <HAL_RCC_GetPCLK2Freq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b66:	2a08      	cmp	r2, #8
 8003b68:	bf18      	it	ne
 8003b6a:	2300      	movne	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b6c:	4940      	ldr	r1, [pc, #256]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x128>)
 8003b6e:	4c42      	ldr	r4, [pc, #264]	@ (8003c78 <HAL_RCC_GetPCLK2Freq+0x130>)
 8003b70:	6a0a      	ldr	r2, [r1, #32]
 8003b72:	4842      	ldr	r0, [pc, #264]	@ (8003c7c <HAL_RCC_GetPCLK2Freq+0x134>)
 8003b74:	f002 020f 	and.w	r2, r2, #15
 8003b78:	5ca2      	ldrb	r2, [r4, r2]
}
 8003b7a:	bc30      	pop	{r4, r5}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b7c:	40d3      	lsrs	r3, r2
 8003b7e:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003b80:	6a0a      	ldr	r2, [r1, #32]
 8003b82:	493f      	ldr	r1, [pc, #252]	@ (8003c80 <HAL_RCC_GetPCLK2Freq+0x138>)
 8003b84:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8003b88:	5c88      	ldrb	r0, [r1, r2]
}
 8003b8a:	fa23 f000 	lsr.w	r0, r3, r0
 8003b8e:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003b90:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x128>)
 8003b92:	6899      	ldr	r1, [r3, #8]
 8003b94:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003b96:	bf54      	ite	pl
 8003b98:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003b9c:	689b      	ldrmi	r3, [r3, #8]
    msirange = MSIRangeTable[msirange];
 8003b9e:	4939      	ldr	r1, [pc, #228]	@ (8003c84 <HAL_RCC_GetPCLK2Freq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003ba0:	bf54      	ite	pl
 8003ba2:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003ba6:	0f1b      	lsrmi	r3, r3, #28
    msirange = MSIRangeTable[msirange];
 8003ba8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bac:	2a00      	cmp	r2, #0
 8003bae:	d0dd      	beq.n	8003b6c <HAL_RCC_GetPCLK2Freq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003bb0:	482f      	ldr	r0, [pc, #188]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x128>)
 8003bb2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003bb4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003bb6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bb8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003bba:	f3c2 1200 	ubfx	r2, r2, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bbe:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8003bc2:	fb0c f202 	mul.w	r2, ip, r2
 8003bc6:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003bca:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003bce:	f3c1 2103 	ubfx	r1, r1, #8, #4
    switch (pllsource)
 8003bd2:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003bd8:	f101 0101 	add.w	r1, r1, #1
    switch (pllsource)
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_GetPCLK2Freq+0x9a>
 8003bde:	2c03      	cmp	r4, #3
 8003be0:	d131      	bne.n	8003c46 <HAL_RCC_GetPCLK2Freq+0xfe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003be2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003be4:	ee07 1a10 	vmov	s14, r1
 8003be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bec:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003bf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bf4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003bf8:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8003c88 <HAL_RCC_GetPCLK2Freq+0x140>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003c00:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 8003c8c <HAL_RCC_GetPCLK2Freq+0x144>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c04:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c08:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c0c:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003c10:	4b17      	ldr	r3, [pc, #92]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x128>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c12:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c18:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003c1c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003c20:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c2e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003c32:	ee17 3a90 	vmov	r3, s15
 8003c36:	e799      	b.n	8003b6c <HAL_RCC_GetPCLK2Freq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c38:	f000 0003 	and.w	r0, r0, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c3c:	2801      	cmp	r0, #1
 8003c3e:	d0a7      	beq.n	8003b90 <HAL_RCC_GetPCLK2Freq+0x48>
  uint32_t msirange = 0U;
 8003c40:	2300      	movs	r3, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c42:	69ca      	ldr	r2, [r1, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c44:	e7b4      	b.n	8003bb0 <HAL_RCC_GetPCLK2Freq+0x68>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c46:	ee07 3a10 	vmov	s14, r3
 8003c4a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8003c4c:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8003c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c54:	ee06 2a10 	vmov	s12, r2
 8003c58:	ee07 1a10 	vmov	s14, r1
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c60:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003c64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c68:	eddf 5a07 	vldr	s11, [pc, #28]	@ 8003c88 <HAL_RCC_GetPCLK2Freq+0x140>
 8003c6c:	e7ca      	b.n	8003c04 <HAL_RCC_GetPCLK2Freq+0xbc>
 8003c6e:	bf00      	nop
 8003c70:	46020c00 	.word	0x46020c00
 8003c74:	00f42400 	.word	0x00f42400
 8003c78:	08006b80 	.word	0x08006b80
 8003c7c:	2000005c 	.word	0x2000005c
 8003c80:	08006b78 	.word	0x08006b78
 8003c84:	08006b38 	.word	0x08006b38
 8003c88:	39000000 	.word	0x39000000
 8003c8c:	4b742400 	.word	0x4b742400

08003c90 <HAL_RCC_GetPCLK3Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c90:	4949      	ldr	r1, [pc, #292]	@ (8003db8 <HAL_RCC_GetPCLK3Freq+0x128>)
{
 8003c92:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c94:	69ca      	ldr	r2, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c96:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c98:	f012 020c 	ands.w	r2, r2, #12
 8003c9c:	d01c      	beq.n	8003cd8 <HAL_RCC_GetPCLK3Freq+0x48>
 8003c9e:	2a0c      	cmp	r2, #12
 8003ca0:	d06e      	beq.n	8003d80 <HAL_RCC_GetPCLK3Freq+0xf0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca2:	69cb      	ldr	r3, [r1, #28]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b04      	cmp	r3, #4
    sysclockfreq = HSI_VALUE;
 8003caa:	4b44      	ldr	r3, [pc, #272]	@ (8003dbc <HAL_RCC_GetPCLK3Freq+0x12c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetPCLK3Freq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cae:	2a08      	cmp	r2, #8
 8003cb0:	bf18      	it	ne
 8003cb2:	2300      	movne	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003cb4:	4940      	ldr	r1, [pc, #256]	@ (8003db8 <HAL_RCC_GetPCLK3Freq+0x128>)
 8003cb6:	4c42      	ldr	r4, [pc, #264]	@ (8003dc0 <HAL_RCC_GetPCLK3Freq+0x130>)
 8003cb8:	6a0a      	ldr	r2, [r1, #32]
 8003cba:	4842      	ldr	r0, [pc, #264]	@ (8003dc4 <HAL_RCC_GetPCLK3Freq+0x134>)
 8003cbc:	f002 020f 	and.w	r2, r2, #15
 8003cc0:	5ca2      	ldrb	r2, [r4, r2]
}
 8003cc2:	bc30      	pop	{r4, r5}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003cc4:	40d3      	lsrs	r3, r2
 8003cc6:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003cc8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8003cca:	493f      	ldr	r1, [pc, #252]	@ (8003dc8 <HAL_RCC_GetPCLK3Freq+0x138>)
 8003ccc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003cd0:	5c88      	ldrb	r0, [r1, r2]
}
 8003cd2:	fa23 f000 	lsr.w	r0, r3, r0
 8003cd6:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003cd8:	4b37      	ldr	r3, [pc, #220]	@ (8003db8 <HAL_RCC_GetPCLK3Freq+0x128>)
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003cde:	bf54      	ite	pl
 8003ce0:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003ce4:	689b      	ldrmi	r3, [r3, #8]
    msirange = MSIRangeTable[msirange];
 8003ce6:	4939      	ldr	r1, [pc, #228]	@ (8003dcc <HAL_RCC_GetPCLK3Freq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003ce8:	bf54      	ite	pl
 8003cea:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003cee:	0f1b      	lsrmi	r3, r3, #28
    msirange = MSIRangeTable[msirange];
 8003cf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cf4:	2a00      	cmp	r2, #0
 8003cf6:	d0dd      	beq.n	8003cb4 <HAL_RCC_GetPCLK3Freq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003cf8:	482f      	ldr	r0, [pc, #188]	@ (8003db8 <HAL_RCC_GetPCLK3Freq+0x128>)
 8003cfa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003cfc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003cfe:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d00:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003d02:	f3c2 1200 	ubfx	r2, r2, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d06:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8003d0a:	fb0c f202 	mul.w	r2, ip, r2
 8003d0e:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003d12:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003d16:	f3c1 2103 	ubfx	r1, r1, #8, #4
    switch (pllsource)
 8003d1a:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003d20:	f101 0101 	add.w	r1, r1, #1
    switch (pllsource)
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_GetPCLK3Freq+0x9a>
 8003d26:	2c03      	cmp	r4, #3
 8003d28:	d131      	bne.n	8003d8e <HAL_RCC_GetPCLK3Freq+0xfe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d2a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003d2c:	ee07 1a10 	vmov	s14, r1
 8003d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d34:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003d38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d3c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003d40:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8003dd0 <HAL_RCC_GetPCLK3Freq+0x140>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d48:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 8003dd4 <HAL_RCC_GetPCLK3Freq+0x144>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003d4c:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d50:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003d54:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003d58:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <HAL_RCC_GetPCLK3Freq+0x128>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003d5a:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d60:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003d64:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003d68:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d76:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003d7a:	ee17 3a90 	vmov	r3, s15
 8003d7e:	e799      	b.n	8003cb4 <HAL_RCC_GetPCLK3Freq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d80:	f000 0003 	and.w	r0, r0, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d84:	2801      	cmp	r0, #1
 8003d86:	d0a7      	beq.n	8003cd8 <HAL_RCC_GetPCLK3Freq+0x48>
  uint32_t msirange = 0U;
 8003d88:	2300      	movs	r3, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d8a:	69ca      	ldr	r2, [r1, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8c:	e7b4      	b.n	8003cf8 <HAL_RCC_GetPCLK3Freq+0x68>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d8e:	ee07 3a10 	vmov	s14, r3
 8003d92:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8003d94:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8003d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9c:	ee06 2a10 	vmov	s12, r2
 8003da0:	ee07 1a10 	vmov	s14, r1
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003da4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003da8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003dac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003db0:	eddf 5a07 	vldr	s11, [pc, #28]	@ 8003dd0 <HAL_RCC_GetPCLK3Freq+0x140>
 8003db4:	e7ca      	b.n	8003d4c <HAL_RCC_GetPCLK3Freq+0xbc>
 8003db6:	bf00      	nop
 8003db8:	46020c00 	.word	0x46020c00
 8003dbc:	00f42400 	.word	0x00f42400
 8003dc0:	08006b80 	.word	0x08006b80
 8003dc4:	2000005c 	.word	0x2000005c
 8003dc8:	08006b78 	.word	0x08006b78
 8003dcc:	08006b38 	.word	0x08006b38
 8003dd0:	39000000 	.word	0x39000000
 8003dd4:	4b742400 	.word	0x4b742400

08003dd8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8003dd8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8003dda:	4c33      	ldr	r4, [pc, #204]	@ (8003ea8 <RCCEx_PLL3_Config+0xd0>)
{
 8003ddc:	4606      	mov	r6, r0
  __HAL_RCC_PLL3_DISABLE();
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003de6:	f7fe fb3b 	bl	8002460 <HAL_GetTick>
 8003dea:	4605      	mov	r5, r0

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003dec:	e004      	b.n	8003df8 <RCCEx_PLL3_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003dee:	f7fe fb37 	bl	8002460 <HAL_GetTick>
 8003df2:	1b40      	subs	r0, r0, r5
 8003df4:	2802      	cmp	r0, #2
 8003df6:	d854      	bhi.n	8003ea2 <RCCEx_PLL3_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	009a      	lsls	r2, r3, #2
 8003dfc:	d4f7      	bmi.n	8003dee <RCCEx_PLL3_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8003dfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e00:	e9d6 1200 	ldrd	r1, r2, [r6]
 8003e04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e08:	f023 0303 	bic.w	r3, r3, #3
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e14:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e16:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003e18:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003e1c:	4d23      	ldr	r5, [pc, #140]	@ (8003eac <RCCEx_PLL3_Config+0xd4>)
 8003e1e:	1e51      	subs	r1, r2, #1
 8003e20:	6932      	ldr	r2, [r6, #16]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	4005      	ands	r5, r0
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	0249      	lsls	r1, r1, #9
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	b289      	uxth	r1, r1
 8003e30:	432b      	orrs	r3, r5
 8003e32:	0412      	lsls	r2, r2, #16
 8003e34:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	6972      	ldr	r2, [r6, #20]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e3e:	4d1a      	ldr	r5, [pc, #104]	@ (8003ea8 <RCCEx_PLL3_Config+0xd0>)
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8003e40:	3a01      	subs	r2, #1
 8003e42:	0612      	lsls	r2, r2, #24
 8003e44:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8003e4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e4e:	69b2      	ldr	r2, [r6, #24]
 8003e50:	f023 030c 	bic.w	r3, r3, #12
 8003e54:	4313      	orrs	r3, r2
 8003e56:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003e58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e5a:	6a32      	ldr	r2, [r6, #32]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_DISABLE();
 8003e60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e62:	f023 0310 	bic.w	r3, r3, #16
 8003e66:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e68:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003e6a:	69f2      	ldr	r2, [r6, #28]
 8003e6c:	f36f 03cf 	bfc	r3, #3, #13
 8003e70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e74:	64a3      	str	r3, [r4, #72]	@ 0x48
  __HAL_RCC_PLL3FRACN_ENABLE();
 8003e76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e78:	f043 0310 	orr.w	r3, r3, #16
 8003e7c:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_ENABLE();
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e84:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003e86:	f7fe faeb 	bl	8002460 <HAL_GetTick>
 8003e8a:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e8c:	e004      	b.n	8003e98 <RCCEx_PLL3_Config+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e8e:	f7fe fae7 	bl	8002460 <HAL_GetTick>
 8003e92:	1b00      	subs	r0, r0, r4
 8003e94:	2802      	cmp	r0, #2
 8003e96:	d804      	bhi.n	8003ea2 <RCCEx_PLL3_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	d5f7      	bpl.n	8003e8e <RCCEx_PLL3_Config+0xb6>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003e9e:	2000      	movs	r0, #0
}
 8003ea0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003ea2:	2003      	movs	r0, #3
}
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
 8003ea6:	bf00      	nop
 8003ea8:	46020c00 	.word	0x46020c00
 8003eac:	80800000 	.word	0x80800000

08003eb0 <RCCEx_PLL2_Config>:
{
 8003eb0:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLL2_DISABLE();
 8003eb2:	4c33      	ldr	r4, [pc, #204]	@ (8003f80 <RCCEx_PLL2_Config+0xd0>)
{
 8003eb4:	4606      	mov	r6, r0
  __HAL_RCC_PLL2_DISABLE();
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ebc:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003ebe:	f7fe facf 	bl	8002460 <HAL_GetTick>
 8003ec2:	4605      	mov	r5, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ec4:	e004      	b.n	8003ed0 <RCCEx_PLL2_Config+0x20>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ec6:	f7fe facb 	bl	8002460 <HAL_GetTick>
 8003eca:	1b40      	subs	r0, r0, r5
 8003ecc:	2802      	cmp	r0, #2
 8003ece:	d854      	bhi.n	8003f7a <RCCEx_PLL2_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	011a      	lsls	r2, r3, #4
 8003ed4:	d4f7      	bmi.n	8003ec6 <RCCEx_PLL2_Config+0x16>
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003ed6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ed8:	e9d6 1200 	ldrd	r1, r2, [r6]
 8003edc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ee0:	f023 0303 	bic.w	r3, r3, #3
 8003ee4:	3a01      	subs	r2, #1
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003eec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003eee:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003ef0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003ef4:	4d23      	ldr	r5, [pc, #140]	@ (8003f84 <RCCEx_PLL2_Config+0xd4>)
 8003ef6:	1e51      	subs	r1, r2, #1
 8003ef8:	6932      	ldr	r2, [r6, #16]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	4005      	ands	r5, r0
 8003efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f02:	0249      	lsls	r1, r1, #9
 8003f04:	3a01      	subs	r2, #1
 8003f06:	b289      	uxth	r1, r1
 8003f08:	432b      	orrs	r3, r5
 8003f0a:	0412      	lsls	r2, r2, #16
 8003f0c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003f10:	430b      	orrs	r3, r1
 8003f12:	4313      	orrs	r3, r2
 8003f14:	6972      	ldr	r2, [r6, #20]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f16:	4d1a      	ldr	r5, [pc, #104]	@ (8003f80 <RCCEx_PLL2_Config+0xd0>)
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003f18:	3a01      	subs	r2, #1
 8003f1a:	0612      	lsls	r2, r2, #24
 8003f1c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003f20:	4313      	orrs	r3, r2
 8003f22:	63e3      	str	r3, [r4, #60]	@ 0x3c
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003f24:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003f26:	69b2      	ldr	r2, [r6, #24]
 8003f28:	f023 030c 	bic.w	r3, r3, #12
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003f30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003f32:	6a32      	ldr	r2, [r6, #32]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_DISABLE();
 8003f38:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003f3a:	f023 0310 	bic.w	r3, r3, #16
 8003f3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f42:	69f2      	ldr	r2, [r6, #28]
 8003f44:	f36f 03cf 	bfc	r3, #3, #13
 8003f48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003f4c:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_RCC_PLL2FRACN_ENABLE();
 8003f4e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003f50:	f043 0310 	orr.w	r3, r3, #16
 8003f54:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f5c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003f5e:	f7fe fa7f 	bl	8002460 <HAL_GetTick>
 8003f62:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f64:	e004      	b.n	8003f70 <RCCEx_PLL2_Config+0xc0>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f66:	f7fe fa7b 	bl	8002460 <HAL_GetTick>
 8003f6a:	1b00      	subs	r0, r0, r4
 8003f6c:	2802      	cmp	r0, #2
 8003f6e:	d804      	bhi.n	8003f7a <RCCEx_PLL2_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	d5f7      	bpl.n	8003f66 <RCCEx_PLL2_Config+0xb6>
  return HAL_OK;
 8003f76:	2000      	movs	r0, #0
}
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003f7a:	2003      	movs	r0, #3
}
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	bf00      	nop
 8003f80:	46020c00 	.word	0x46020c00
 8003f84:	80800000 	.word	0x80800000

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8c:	6803      	ldr	r3, [r0, #0]
{
 8003f8e:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f90:	07d8      	lsls	r0, r3, #31
{
 8003f92:	b082      	sub	sp, #8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f94:	d508      	bpl.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003f96:	499d      	ldr	r1, [pc, #628]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f98:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003f9a:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003f9e:	f022 0203 	bic.w	r2, r2, #3
 8003fa2:	4302      	orrs	r2, r0
 8003fa4:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa8:	0799      	lsls	r1, r3, #30
 8003faa:	d508      	bpl.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003fac:	4997      	ldr	r1, [pc, #604]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fae:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003fb0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003fb4:	f022 020c 	bic.w	r2, r2, #12
 8003fb8:	4302      	orrs	r2, r0
 8003fba:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fbe:	075a      	lsls	r2, r3, #29
 8003fc0:	d508      	bpl.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003fc2:	4992      	ldr	r1, [pc, #584]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fc6:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003fca:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003fce:	4302      	orrs	r2, r0
 8003fd0:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fd4:	071f      	lsls	r7, r3, #28
 8003fd6:	d508      	bpl.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003fd8:	498c      	ldr	r1, [pc, #560]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fda:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003fdc:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003fe0:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8003fe4:	4302      	orrs	r2, r0
 8003fe6:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fea:	06de      	lsls	r6, r3, #27
 8003fec:	d508      	bpl.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x78>
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003fee:	4987      	ldr	r1, [pc, #540]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ff0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003ff2:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003ff6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ffa:	4302      	orrs	r2, r0
 8003ffc:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004000:	069d      	lsls	r5, r3, #26
 8004002:	d508      	bpl.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004004:	4981      	ldr	r1, [pc, #516]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004006:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004008:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 800400c:	f022 0207 	bic.w	r2, r2, #7
 8004010:	4302      	orrs	r2, r0
 8004012:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004016:	0658      	lsls	r0, r3, #25
 8004018:	d508      	bpl.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800401a:	497c      	ldr	r1, [pc, #496]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800401c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800401e:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8004022:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004026:	4302      	orrs	r2, r0
 8004028:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800402c:	0619      	lsls	r1, r3, #24
 800402e:	d508      	bpl.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004030:	4976      	ldr	r1, [pc, #472]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004032:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8004034:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8004038:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800403c:	4302      	orrs	r2, r0
 800403e:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004042:	05da      	lsls	r2, r3, #23
 8004044:	d508      	bpl.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004046:	4971      	ldr	r1, [pc, #452]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004048:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800404a:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 800404e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004052:	4302      	orrs	r2, r0
 8004054:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004058:	025f      	lsls	r7, r3, #9
 800405a:	d508      	bpl.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800405c:	496b      	ldr	r1, [pc, #428]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800405e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004060:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8004064:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004068:	4302      	orrs	r2, r0
 800406a:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800406e:	059e      	lsls	r6, r3, #22
 8004070:	d508      	bpl.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004072:	4966      	ldr	r1, [pc, #408]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004074:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8004076:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 800407a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800407e:	4302      	orrs	r2, r0
 8004080:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004084:	055d      	lsls	r5, r3, #21
 8004086:	d508      	bpl.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004088:	4960      	ldr	r1, [pc, #384]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800408a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800408c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8004090:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004094:	4302      	orrs	r2, r0
 8004096:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800409a:	0518      	lsls	r0, r3, #20
 800409c:	d509      	bpl.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800409e:	495b      	ldr	r1, [pc, #364]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80040a4:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80040a8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80040ac:	4302      	orrs	r2, r0
 80040ae:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040b2:	0499      	lsls	r1, r3, #18
 80040b4:	f403 5600 	and.w	r6, r3, #8192	@ 0x2000
 80040b8:	d51e      	bpl.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80040ba:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80040be:	2a40      	cmp	r2, #64	@ 0x40
 80040c0:	f000 8235 	beq.w	800452e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80040c4:	f200 8254 	bhi.w	8004570 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80040c8:	2a00      	cmp	r2, #0
 80040ca:	f000 8248 	beq.w	800455e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 80040ce:	2a20      	cmp	r2, #32
 80040d0:	f040 8254 	bne.w	800457c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040d4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80040d8:	f7ff fe7e 	bl	8003dd8 <RCCEx_PLL3_Config>
 80040dc:	4606      	mov	r6, r0
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040de:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80040e0:	b956      	cbnz	r6, 80040f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80040e2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040e6:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80040e8:	4848      	ldr	r0, [pc, #288]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040ea:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 80040ee:	f021 01e0 	bic.w	r1, r1, #224	@ 0xe0
 80040f2:	430a      	orrs	r2, r1
 80040f4:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040f8:	045a      	lsls	r2, r3, #17
 80040fa:	d539      	bpl.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (pPeriphClkInit->Sai2ClockSelection)
 80040fc:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 8004100:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8004104:	f000 8219 	beq.w	800453a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8004108:	d829      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800410a:	2a00      	cmp	r2, #0
 800410c:	f000 8220 	beq.w	8004550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004110:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8004114:	d12b      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004116:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800411a:	f7ff fe5d 	bl	8003dd8 <RCCEx_PLL3_Config>
 800411e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004120:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8004122:	2d00      	cmp	r5, #0
 8004124:	f040 8212 	bne.w	800454c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004128:	4938      	ldr	r1, [pc, #224]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800412a:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800412e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004132:	041f      	lsls	r7, r3, #16
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004134:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004138:	ea42 0200 	orr.w	r2, r2, r0
 800413c:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004140:	d419      	bmi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004142:	03d8      	lsls	r0, r3, #15
 8004144:	d52d      	bpl.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004146:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 800414a:	2a04      	cmp	r2, #4
 800414c:	f200 822c 	bhi.w	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x620>
 8004150:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004154:	0145014a 	.word	0x0145014a
 8004158:	014a01e4 	.word	0x014a01e4
 800415c:	014a      	.short	0x014a
    switch (pPeriphClkInit->Sai2ClockSelection)
 800415e:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004162:	f000 81ef 	beq.w	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004166:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800416a:	f000 81eb 	beq.w	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800416e:	2601      	movs	r6, #1
 8004170:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004172:	041f      	lsls	r7, r3, #16
 8004174:	d5e5      	bpl.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8004176:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 800417a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800417e:	f000 8191 	beq.w	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8004182:	f240 81a1 	bls.w	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8004186:	f422 5180 	bic.w	r1, r2, #4096	@ 0x1000
 800418a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800418e:	f000 818f 	beq.w	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004192:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8004196:	f000 818b 	beq.w	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800419a:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800419c:	03d8      	lsls	r0, r3, #15
    switch (pPeriphClkInit->AdcDacClockSelection)
 800419e:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80041a0:	d4d1      	bmi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80041a2:	0399      	lsls	r1, r3, #14
 80041a4:	d51e      	bpl.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (pPeriphClkInit->Adf1ClockSelection)
 80041a6:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80041aa:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 80041ae:	f000 81a4 	beq.w	80044fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041b2:	f200 81e5 	bhi.w	8004580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80041b6:	b142      	cbz	r2, 80041ca <HAL_RCCEx_PeriphCLKConfig+0x242>
 80041b8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80041bc:	f040 81e8 	bne.w	8004590 <HAL_RCCEx_PeriphCLKConfig+0x608>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041c0:	4912      	ldr	r1, [pc, #72]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80041c2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80041c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80041c8:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80041ca:	2d00      	cmp	r5, #0
 80041cc:	f040 8156 	bne.w	800447c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80041d0:	490e      	ldr	r1, [pc, #56]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80041d2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80041d6:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80041da:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80041de:	4302      	orrs	r2, r0
 80041e0:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e4:	035a      	lsls	r2, r3, #13
 80041e6:	d560      	bpl.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x322>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e8:	4b08      	ldr	r3, [pc, #32]	@ (800420c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80041ea:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80041ee:	0757      	lsls	r7, r2, #29
 80041f0:	f140 8107 	bpl.w	8004402 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    FlagStatus       pwrclkchanged = RESET;
 80041f4:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80041f8:	4f05      	ldr	r7, [pc, #20]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	62bb      	str	r3, [r7, #40]	@ 0x28
    tickstart = HAL_GetTick();
 8004202:	f7fe f92d 	bl	8002460 <HAL_GetTick>
 8004206:	4681      	mov	r9, r0
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004208:	e00b      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800420a:	bf00      	nop
 800420c:	46020c00 	.word	0x46020c00
 8004210:	46020800 	.word	0x46020800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004214:	f7fe f924 	bl	8002460 <HAL_GetTick>
 8004218:	eba0 0309 	sub.w	r3, r0, r9
 800421c:	2b02      	cmp	r3, #2
 800421e:	f200 811e 	bhi.w	800445e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004224:	07d8      	lsls	r0, r3, #31
 8004226:	d5f5      	bpl.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    if (ret == HAL_OK)
 8004228:	2d00      	cmp	r5, #0
 800422a:	f040 81bb 	bne.w	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800422e:	f8df a33c 	ldr.w	sl, [pc, #828]	@ 800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004232:	f8d4 20bc 	ldr.w	r2, [r4, #188]	@ 0xbc
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004236:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800423a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800423e:	d027      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004240:	4293      	cmp	r3, r2
 8004242:	d025      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x308>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004244:	f8da 10f0 	ldr.w	r1, [sl, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 8004248:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 800424c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004250:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004254:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 8004258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800425c:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004260:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004264:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8004266:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800426a:	d511      	bpl.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x308>
        tickstart = HAL_GetTick();
 800426c:	f7fe f8f8 	bl	8002460 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004270:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004274:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004276:	e005      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fe f8f2 	bl	8002460 <HAL_GetTick>
 800427c:	1bc0      	subs	r0, r0, r7
 800427e:	4548      	cmp	r0, r9
 8004280:	f200 80ed 	bhi.w	800445e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004284:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 8004288:	079b      	lsls	r3, r3, #30
 800428a:	d5f5      	bpl.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800428c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	@ 0xbc
 8004290:	49b6      	ldr	r1, [pc, #728]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004292:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8004296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80042a0:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80042a2:	f1b8 0f00 	cmp.w	r8, #0
 80042a6:	f040 80e1 	bne.w	800446c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80042aa:	02df      	lsls	r7, r3, #11
 80042ac:	d51f      	bpl.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x366>
    switch (pPeriphClkInit->IclkClockSelection)
 80042ae:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 80042b2:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 80042b6:	f000 8116 	beq.w	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80042ba:	f200 816c 	bhi.w	8004596 <HAL_RCCEx_PeriphCLKConfig+0x60e>
 80042be:	b14a      	cbz	r2, 80042d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80042c0:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 80042c4:	f040 816b 	bne.w	800459e <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042c8:	f104 0008 	add.w	r0, r4, #8
 80042cc:	f7ff fdf0 	bl	8003eb0 <RCCEx_PLL2_Config>
 80042d0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042d2:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80042d4:	2d00      	cmp	r5, #0
 80042d6:	f040 80d3 	bne.w	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80042da:	49a4      	ldr	r1, [pc, #656]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80042dc:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80042e0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80042e4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80042e8:	4302      	orrs	r2, r0
 80042ea:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042ee:	0318      	lsls	r0, r3, #12
 80042f0:	d50b      	bpl.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch (pPeriphClkInit->RngClockSelection)
 80042f2:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80042f6:	f432 5180 	bics.w	r1, r2, #4096	@ 0x1000
 80042fa:	f000 80a3 	beq.w	8004444 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80042fe:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004302:	f000 809f 	beq.w	8004444 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004306:	2601      	movs	r6, #1
 8004308:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800430a:	0299      	lsls	r1, r3, #10
 800430c:	d50d      	bpl.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800430e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8004312:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8004316:	f000 80b9 	beq.w	800448c <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800431a:	4994      	ldr	r1, [pc, #592]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800431c:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 8004320:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004324:	4302      	orrs	r2, r0
 8004326:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800432a:	021a      	lsls	r2, r3, #8
 800432c:	d509      	bpl.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800432e:	498f      	ldr	r1, [pc, #572]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004330:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8004334:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8004338:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800433c:	4302      	orrs	r2, r0
 800433e:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004342:	01df      	lsls	r7, r3, #7
 8004344:	d509      	bpl.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004346:	4989      	ldr	r1, [pc, #548]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004348:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 800434c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8004350:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004354:	4302      	orrs	r2, r0
 8004356:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800435a:	0198      	lsls	r0, r3, #6
 800435c:	d509      	bpl.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800435e:	4983      	ldr	r1, [pc, #524]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004360:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 8004364:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8004368:	f022 0218 	bic.w	r2, r2, #24
 800436c:	4302      	orrs	r2, r0
 800436e:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004372:	0159      	lsls	r1, r3, #5
 8004374:	d515      	bpl.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004376:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 800437a:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800437e:	f000 808b 	beq.w	8004498 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004382:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8004386:	f000 80a7 	beq.w	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    if (ret == HAL_OK)
 800438a:	2d00      	cmp	r5, #0
 800438c:	d165      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800438e:	4977      	ldr	r1, [pc, #476]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004390:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8004394:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 8004398:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800439c:	4302      	orrs	r2, r0
 800439e:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80043a2:	011a      	lsls	r2, r3, #4
 80043a4:	d50b      	bpl.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x436>
    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80043a6:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 80043aa:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80043ae:	f000 80ad 	beq.w	800450c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80043b2:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 80043b6:	d033      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	d037      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80043bc:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	d509      	bpl.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80043c2:	4a6a      	ldr	r2, [pc, #424]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043c4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80043c8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80043cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043d0:	430b      	orrs	r3, r1
 80043d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 80043d6:	4630      	mov	r0, r6
 80043d8:	b002      	add	sp, #8
 80043da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043de:	4963      	ldr	r1, [pc, #396]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043e0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80043e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80043e6:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80043e8:	2d00      	cmp	r5, #0
 80043ea:	d14d      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x500>
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80043ec:	495f      	ldr	r1, [pc, #380]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043ee:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80043f2:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 80043f6:	f022 0207 	bic.w	r2, r2, #7
 80043fa:	4302      	orrs	r2, r0
 80043fc:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
 8004400:	e6cf      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004402:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
      pwrclkchanged = SET;
 8004406:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	f042 0204 	orr.w	r2, r2, #4
 800440e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800441e:	e6eb      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x270>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004420:	f104 0008 	add.w	r0, r4, #8
 8004424:	f7ff fd44 	bl	8003eb0 <RCCEx_PLL2_Config>
 8004428:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800442a:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 800442c:	bb55      	cbnz	r5, 8004484 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800442e:	494f      	ldr	r1, [pc, #316]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004430:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004434:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8004438:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800443c:	4302      	orrs	r2, r0
 800443e:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
 8004442:	e7bc      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x436>
    if (ret == HAL_OK)
 8004444:	2d00      	cmp	r5, #0
 8004446:	d156      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004448:	4848      	ldr	r0, [pc, #288]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800444a:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 800444e:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8004452:	430a      	orrs	r2, r1
 8004454:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
 8004458:	e757      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x382>
      status = ret;
 800445a:	462e      	mov	r6, r5
 800445c:	e7a1      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
        ret = HAL_TIMEOUT;
 800445e:	2603      	movs	r6, #3
 8004460:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004462:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8004464:	f1b8 0f00 	cmp.w	r8, #0
 8004468:	f43f af1f 	beq.w	80042aa <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PWR_CLK_DISABLE();
 800446c:	493f      	ldr	r1, [pc, #252]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800446e:	f8d1 2094 	ldr.w	r2, [r1, #148]	@ 0x94
 8004472:	f022 0204 	bic.w	r2, r2, #4
 8004476:	f8c1 2094 	str.w	r2, [r1, #148]	@ 0x94
 800447a:	e716      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x322>
      status = ret;
 800447c:	462e      	mov	r6, r5
 800447e:	e6b1      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      status = ret;
 8004480:	462e      	mov	r6, r5
 8004482:	e734      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x366>
      status = ret;
 8004484:	462e      	mov	r6, r5
 8004486:	e79a      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x436>
      status = ret;
 8004488:	462e      	mov	r6, r5
 800448a:	e68a      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800448c:	4937      	ldr	r1, [pc, #220]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800448e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004490:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004494:	628a      	str	r2, [r1, #40]	@ 0x28
 8004496:	e740      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004498:	4934      	ldr	r1, [pc, #208]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800449a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800449c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80044a0:	628a      	str	r2, [r1, #40]	@ 0x28
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80044a2:	e772      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x402>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044a4:	f104 0008 	add.w	r0, r4, #8
 80044a8:	f7ff fd02 	bl	8003eb0 <RCCEx_PLL2_Config>
 80044ac:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80044ae:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80044b0:	b985      	cbnz	r5, 80044d4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80044b2:	492e      	ldr	r1, [pc, #184]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044b4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 80044b8:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80044bc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80044c0:	4302      	orrs	r2, r0
 80044c2:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
 80044c6:	e63c      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (pPeriphClkInit->AdcDacClockSelection)
 80044c8:	f432 5280 	bics.w	r2, r2, #4096	@ 0x1000
 80044cc:	f47f ae65 	bne.w	800419a <HAL_RCCEx_PeriphCLKConfig+0x212>
    if (ret == HAL_OK)
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	d0ee      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      status = ret;
 80044d4:	462e      	mov	r6, r5
 80044d6:	e634      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044d8:	f104 0008 	add.w	r0, r4, #8
 80044dc:	f7ff fce8 	bl	8003eb0 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80044e0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044e2:	4605      	mov	r5, r0
 80044e4:	e751      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x402>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e6:	4921      	ldr	r1, [pc, #132]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044e8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80044ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80044ee:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80044f0:	2d00      	cmp	r5, #0
 80044f2:	d1c5      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80044f4:	e6f1      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x352>
      status = ret;
 80044f6:	462e      	mov	r6, r5
 80044f8:	e707      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x382>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044fa:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80044fe:	f7ff fc6b 	bl	8003dd8 <RCCEx_PLL3_Config>
 8004502:	4605      	mov	r5, r0
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004504:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8004506:	2d00      	cmp	r5, #0
 8004508:	d1b8      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800450a:	e661      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450c:	4917      	ldr	r1, [pc, #92]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800450e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004510:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004514:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8004516:	2d00      	cmp	r5, #0
 8004518:	d1b4      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800451a:	e788      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800451c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8004520:	f7ff fc5a 	bl	8003dd8 <RCCEx_PLL3_Config>
 8004524:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004526:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8004528:	2d00      	cmp	r5, #0
 800452a:	d1ad      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800452c:	e75e      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800452e:	480f      	ldr	r0, [pc, #60]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004530:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8004532:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8004536:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8004538:	e5d5      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800453a:	490c      	ldr	r1, [pc, #48]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800453c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800453e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004542:	628a      	str	r2, [r1, #40]	@ 0x28
    switch (pPeriphClkInit->Sai1ClockSelection)
 8004544:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004546:	2d00      	cmp	r5, #0
 8004548:	f43f adee 	beq.w	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      status = ret;
 800454c:	462e      	mov	r6, r5
 800454e:	e610      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004550:	f104 0008 	add.w	r0, r4, #8
 8004554:	f7ff fcac 	bl	8003eb0 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004558:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800455a:	4605      	mov	r5, r0
        break;
 800455c:	e5e1      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800455e:	f104 0008 	add.w	r0, r4, #8
 8004562:	f7ff fca5 	bl	8003eb0 <RCCEx_PLL2_Config>
 8004566:	4606      	mov	r6, r0
        break;
 8004568:	e5b9      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x156>
 800456a:	bf00      	nop
 800456c:	46020c00 	.word	0x46020c00
    switch (pPeriphClkInit->Sai1ClockSelection)
 8004570:	2a60      	cmp	r2, #96	@ 0x60
 8004572:	f43f adb8 	beq.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004576:	2a80      	cmp	r2, #128	@ 0x80
 8004578:	f43f adb5 	beq.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800457c:	2601      	movs	r6, #1
 800457e:	e5bb      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004580:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8004584:	f43f ae21 	beq.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004588:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800458c:	f43f ae1d 	beq.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004590:	2601      	movs	r6, #1
 8004592:	4635      	mov	r5, r6
 8004594:	e626      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (pPeriphClkInit->IclkClockSelection)
 8004596:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800459a:	f43f ae9b 	beq.w	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800459e:	2601      	movs	r6, #1
 80045a0:	4635      	mov	r5, r6
 80045a2:	e6a4      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x366>
      status = ret;
 80045a4:	462e      	mov	r6, r5
 80045a6:	e75c      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x4da>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 80045a8:	2601      	movs	r6, #1
 80045aa:	4635      	mov	r5, r6
 80045ac:	e5f9      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80045ae:	bf00      	nop

080045b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80045b0:	4953      	ldr	r1, [pc, #332]	@ (8004700 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
{
 80045b2:	b510      	push	{r4, lr}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80045b4:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80045b6:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80045b8:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80045ba:	f002 0c03 	and.w	ip, r2, #3
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80045be:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80045c0:	f3c3 2303 	ubfx	r3, r3, #8, #4
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80045c4:	f3c2 1e00 	ubfx	lr, r2, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80045c8:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
  switch (pll1source)
 80045ca:	f1bc 0f02 	cmp.w	ip, #2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80045ce:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80045d2:	fb0e f202 	mul.w	r2, lr, r2
 80045d6:	ee07 2a90 	vmov	s15, r2
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80045da:	f103 0301 	add.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80045de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pll1source)
 80045e2:	d02c      	beq.n	800463e <HAL_RCCEx_GetPLL1ClockFreq+0x8e>
 80045e4:	f1bc 0f03 	cmp.w	ip, #3
 80045e8:	d029      	beq.n	800463e <HAL_RCCEx_GetPLL1ClockFreq+0x8e>
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80045ea:	f3c4 0408 	ubfx	r4, r4, #0, #9
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ee:	ee07 4a90 	vmov	s15, r4
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045f2:	688a      	ldr	r2, [r1, #8]
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045f8:	0212      	lsls	r2, r2, #8
 80045fa:	bf4c      	ite	mi
 80045fc:	688a      	ldrmi	r2, [r1, #8]
 80045fe:	f8d1 20f4 	ldrpl.w	r2, [r1, #244]	@ 0xf4
 8004602:	4940      	ldr	r1, [pc, #256]	@ (8004704 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
 8004604:	bf4c      	ite	mi
 8004606:	0f12      	lsrmi	r2, r2, #28
 8004608:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eb01 0382 	add.w	r3, r1, r2, lsl #2
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004614:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004618:	edd3 5a00 	vldr	s11, [r3]
 800461c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004620:	ee76 6a86 	vadd.f32	s13, s13, s12
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004624:	eef8 5a65 	vcvt.f32.u32	s11, s11
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004628:	ed9f 5a37 	vldr	s10, [pc, #220]	@ 8004708 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800462c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004630:	eef0 7a66 	vmov.f32	s15, s13
 8004634:	eee7 7a05 	vfma.f32	s15, s14, s10
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004638:	ee26 7a27 	vmul.f32	s14, s12, s15
      break;
 800463c:	e01a      	b.n	8004674 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800463e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004640:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004648:	ee06 2a10 	vmov	s12, r2
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004658:	ee36 6a26 	vadd.f32	s12, s12, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800465c:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 800470c <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004660:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8004708 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004664:	eec5 6a27 	vdiv.f32	s13, s10, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004668:	eef0 7a46 	vmov.f32	s15, s12
 800466c:	eee7 7a25 	vfma.f32	s15, s14, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004670:	ee26 7aa7 	vmul.f32	s14, s13, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004674:	4a22      	ldr	r2, [pc, #136]	@ (8004700 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 8004676:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004678:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800467c:	d010      	beq.n	80046a0 <HAL_RCCEx_GetPLL1ClockFreq+0xf0>
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800467e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004680:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004684:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004688:	ee06 3a90 	vmov	s13, r3
 800468c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004690:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469c:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80046a0:	4a17      	ldr	r2, [pc, #92]	@ (8004700 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 80046a2:	6003      	str	r3, [r0, #0]
 80046a4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80046a6:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80046aa:	d010      	beq.n	80046ce <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046ac:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80046ae:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046b2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80046b6:	ee06 3a90 	vmov	s13, r3
 80046ba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80046be:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ca:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80046ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004700 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 80046d0:	6043      	str	r3, [r0, #4]
 80046d2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80046d4:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
 80046d8:	d010      	beq.n	80046fc <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046da:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80046dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046e0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80046e4:	ee06 3a90 	vmov	s13, r3
 80046e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80046ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f8:	ee17 3a90 	vmov	r3, s15
 80046fc:	6083      	str	r3, [r0, #8]
}
 80046fe:	bd10      	pop	{r4, pc}
 8004700:	46020c00 	.word	0x46020c00
 8004704:	08006b38 	.word	0x08006b38
 8004708:	39000000 	.word	0x39000000
 800470c:	4b742400 	.word	0x4b742400

08004710 <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004710:	4953      	ldr	r1, [pc, #332]	@ (8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
{
 8004712:	b510      	push	{r4, lr}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004714:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004716:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004718:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800471a:	f002 0c03 	and.w	ip, r2, #3
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800471e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004720:	f3c3 2303 	ubfx	r3, r3, #8, #4
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004724:	f3c2 1e00 	ubfx	lr, r2, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004728:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
  switch (pll2source)
 800472a:	f1bc 0f02 	cmp.w	ip, #2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800472e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8004732:	fb0e f202 	mul.w	r2, lr, r2
 8004736:	ee07 2a90 	vmov	s15, r2
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800473a:	f103 0301 	add.w	r3, r3, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800473e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pll2source)
 8004742:	d02c      	beq.n	800479e <HAL_RCCEx_GetPLL2ClockFreq+0x8e>
 8004744:	f1bc 0f03 	cmp.w	ip, #3
 8004748:	d029      	beq.n	800479e <HAL_RCCEx_GetPLL2ClockFreq+0x8e>
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800474a:	f3c4 0408 	ubfx	r4, r4, #0, #9
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800474e:	ee07 4a90 	vmov	s15, r4
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004752:	688a      	ldr	r2, [r1, #8]
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004754:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004758:	0212      	lsls	r2, r2, #8
 800475a:	bf4c      	ite	mi
 800475c:	688a      	ldrmi	r2, [r1, #8]
 800475e:	f8d1 20f4 	ldrpl.w	r2, [r1, #244]	@ 0xf4
 8004762:	4940      	ldr	r1, [pc, #256]	@ (8004864 <HAL_RCCEx_GetPLL2ClockFreq+0x154>)
 8004764:	bf4c      	ite	mi
 8004766:	0f12      	lsrmi	r2, r2, #28
 8004768:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eb01 0382 	add.w	r3, r1, r2, lsl #2
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004774:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004778:	edd3 5a00 	vldr	s11, [r3]
 800477c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004780:	ee76 6a86 	vadd.f32	s13, s13, s12
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004784:	eef8 5a65 	vcvt.f32.u32	s11, s11
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004788:	ed9f 5a37 	vldr	s10, [pc, #220]	@ 8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800478c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004790:	eef0 7a66 	vmov.f32	s15, s13
 8004794:	eee7 7a05 	vfma.f32	s15, s14, s10
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004798:	ee26 7a27 	vmul.f32	s14, s12, s15
      break;
 800479c:	e01a      	b.n	80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800479e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a8:	ee06 2a10 	vmov	s12, r2
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80047b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b8:	ee36 6a26 	vadd.f32	s12, s12, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047bc:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 800486c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c0:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047c4:	eec5 6a27 	vdiv.f32	s13, s10, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c8:	eef0 7a46 	vmov.f32	s15, s12
 80047cc:	eee7 7a25 	vfma.f32	s15, s14, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047d0:	ee26 7aa7 	vmul.f32	s14, s13, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80047d4:	4a22      	ldr	r2, [pc, #136]	@ (8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 80047d6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80047d8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80047dc:	d010      	beq.n	8004800 <HAL_RCCEx_GetPLL2ClockFreq+0xf0>
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80047de:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80047e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80047e4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80047e8:	ee06 3a90 	vmov	s13, r3
 80047ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80047f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80047f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fc:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004800:	4a17      	ldr	r2, [pc, #92]	@ (8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8004802:	6003      	str	r3, [r0, #0]
 8004804:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004806:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800480a:	d010      	beq.n	800482e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800480c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800480e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004812:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004816:	ee06 3a90 	vmov	s13, r3
 800481a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800481e:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482a:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800482e:	4a0c      	ldr	r2, [pc, #48]	@ (8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8004830:	6043      	str	r3, [r0, #4]
 8004832:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004834:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
 8004838:	d010      	beq.n	800485c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800483a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800483c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004840:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004844:	ee06 3a90 	vmov	s13, r3
 8004848:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800484c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004858:	ee17 3a90 	vmov	r3, s15
 800485c:	6083      	str	r3, [r0, #8]
}
 800485e:	bd10      	pop	{r4, pc}
 8004860:	46020c00 	.word	0x46020c00
 8004864:	08006b38 	.word	0x08006b38
 8004868:	39000000 	.word	0x39000000
 800486c:	4b742400 	.word	0x4b742400

08004870 <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004870:	4953      	ldr	r1, [pc, #332]	@ (80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
{
 8004872:	b510      	push	{r4, lr}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004874:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004876:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004878:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800487a:	f002 0c03 	and.w	ip, r2, #3
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800487e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004880:	f3c3 2303 	ubfx	r3, r3, #8, #4
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004884:	f3c2 1e00 	ubfx	lr, r2, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004888:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
  switch (pll3source)
 800488a:	f1bc 0f02 	cmp.w	ip, #2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800488e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8004892:	fb0e f202 	mul.w	r2, lr, r2
 8004896:	ee07 2a90 	vmov	s15, r2
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800489a:	f103 0301 	add.w	r3, r3, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800489e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pll3source)
 80048a2:	d02c      	beq.n	80048fe <HAL_RCCEx_GetPLL3ClockFreq+0x8e>
 80048a4:	f1bc 0f03 	cmp.w	ip, #3
 80048a8:	d029      	beq.n	80048fe <HAL_RCCEx_GetPLL3ClockFreq+0x8e>
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80048aa:	f3c4 0408 	ubfx	r4, r4, #0, #9
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048ae:	ee07 4a90 	vmov	s15, r4
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048b2:	688a      	ldr	r2, [r1, #8]
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048b8:	0212      	lsls	r2, r2, #8
 80048ba:	bf4c      	ite	mi
 80048bc:	688a      	ldrmi	r2, [r1, #8]
 80048be:	f8d1 20f4 	ldrpl.w	r2, [r1, #244]	@ 0xf4
 80048c2:	4940      	ldr	r1, [pc, #256]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>)
 80048c4:	bf4c      	ite	mi
 80048c6:	0f12      	lsrmi	r2, r2, #28
 80048c8:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048d4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048d8:	edd3 5a00 	vldr	s11, [r3]
 80048dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048e0:	ee76 6a86 	vadd.f32	s13, s13, s12
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048e4:	eef8 5a65 	vcvt.f32.u32	s11, s11
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048e8:	ed9f 5a37 	vldr	s10, [pc, #220]	@ 80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048ec:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048f0:	eef0 7a66 	vmov.f32	s15, s13
 80048f4:	eee7 7a05 	vfma.f32	s15, s14, s10
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048f8:	ee26 7a27 	vmul.f32	s14, s12, s15
      break;
 80048fc:	e01a      	b.n	8004934 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80048fe:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004900:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004908:	ee06 2a10 	vmov	s12, r2
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004918:	ee36 6a26 	vadd.f32	s12, s12, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800491c:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004920:	eddf 5a29 	vldr	s11, [pc, #164]	@ 80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004924:	eec5 6a27 	vdiv.f32	s13, s10, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004928:	eef0 7a46 	vmov.f32	s15, s12
 800492c:	eee7 7a25 	vfma.f32	s15, s14, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004930:	ee26 7aa7 	vmul.f32	s14, s13, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004934:	4a22      	ldr	r2, [pc, #136]	@ (80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8004936:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004938:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800493c:	d010      	beq.n	8004960 <HAL_RCCEx_GetPLL3ClockFreq+0xf0>
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800493e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004940:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004944:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004948:	ee06 3a90 	vmov	s13, r3
 800494c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004950:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495c:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004960:	4a17      	ldr	r2, [pc, #92]	@ (80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8004962:	6003      	str	r3, [r0, #0]
 8004964:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004966:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800496a:	d010      	beq.n	800498e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800496c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800496e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004972:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004976:	ee06 3a90 	vmov	s13, r3
 800497a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800497e:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004982:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498a:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800498e:	4a0c      	ldr	r2, [pc, #48]	@ (80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8004990:	6043      	str	r3, [r0, #4]
 8004992:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004994:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
 8004998:	d010      	beq.n	80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800499a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800499c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049a0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80049a4:	ee06 3a90 	vmov	s13, r3
 80049a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80049ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b8:	ee17 3a90 	vmov	r3, s15
 80049bc:	6083      	str	r3, [r0, #8]
}
 80049be:	bd10      	pop	{r4, pc}
 80049c0:	46020c00 	.word	0x46020c00
 80049c4:	08006b38 	.word	0x08006b38
 80049c8:	39000000 	.word	0x39000000
 80049cc:	4b742400 	.word	0x4b742400

080049d0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80049d0:	b500      	push	{lr}
 80049d2:	f5a0 4300 	sub.w	r3, r0, #32768	@ 0x8000
 80049d6:	430b      	orrs	r3, r1
 80049d8:	b085      	sub	sp, #20
 80049da:	f000 83df 	beq.w	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80049de:	f248 0301 	movw	r3, #32769	@ 0x8001
 80049e2:	4298      	cmp	r0, r3
 80049e4:	f171 0300 	sbcs.w	r3, r1, #0
 80049e8:	d21d      	bcs.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80049ea:	f1a0 0380 	sub.w	r3, r0, #128	@ 0x80
 80049ee:	430b      	orrs	r3, r1
 80049f0:	f000 83fb 	beq.w	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 80049f4:	2881      	cmp	r0, #129	@ 0x81
 80049f6:	f171 0300 	sbcs.w	r3, r1, #0
 80049fa:	d248      	bcs.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80049fc:	2821      	cmp	r0, #33	@ 0x21
 80049fe:	f171 0300 	sbcs.w	r3, r1, #0
 8004a02:	f080 83a8 	bcs.w	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8004a06:	ea50 0301 	orrs.w	r3, r0, r1
 8004a0a:	f000 85d0 	beq.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xbde>
 8004a0e:	3801      	subs	r0, #1
 8004a10:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 8004a14:	2820      	cmp	r0, #32
 8004a16:	f171 0100 	sbcs.w	r1, r1, #0
 8004a1a:	f0c0 8104 	bcc.w	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = 0U;
 8004a1e:	2000      	movs	r0, #0
}
 8004a20:	b005      	add	sp, #20
 8004a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a26:	f5a0 0380 	sub.w	r3, r0, #4194304	@ 0x400000
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	f000 8412 	beq.w	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8004a30:	4bbd      	ldr	r3, [pc, #756]	@ (8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8004a32:	4298      	cmp	r0, r3
 8004a34:	f171 0300 	sbcs.w	r3, r1, #0
 8004a38:	d254      	bcs.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8004a3a:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	f000 8138 	beq.w	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004a44:	4bb9      	ldr	r3, [pc, #740]	@ (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8004a46:	4298      	cmp	r0, r3
 8004a48:	f171 0300 	sbcs.w	r3, r1, #0
 8004a4c:	f080 809e 	bcs.w	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004a50:	f5a0 3300 	sub.w	r3, r0, #131072	@ 0x20000
 8004a54:	430b      	orrs	r3, r1
 8004a56:	f000 825f 	beq.w	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004a5a:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	f000 81a6 	beq.w	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8004a64:	f5a0 3080 	sub.w	r0, r0, #65536	@ 0x10000
 8004a68:	4308      	orrs	r0, r1
          frequency = 0U;
 8004a6a:	bf18      	it	ne
 8004a6c:	2000      	movne	r0, #0
 8004a6e:	d1d7      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004a70:	4baf      	ldr	r3, [pc, #700]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004a72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a76:	f003 0307 	and.w	r3, r3, #7
    switch (srcclk)
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	f200 8650 	bhi.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
 8004a80:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004a84:	0255025a 	.word	0x0255025a
 8004a88:	0264025f 	.word	0x0264025f
 8004a8c:	0267      	.short	0x0267
 8004a8e:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8004a92:	430b      	orrs	r3, r1
 8004a94:	f000 812d 	beq.w	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004a98:	f640 0301 	movw	r3, #2049	@ 0x801
 8004a9c:	4298      	cmp	r0, r3
 8004a9e:	f171 0300 	sbcs.w	r3, r1, #0
 8004aa2:	d24c      	bcs.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004aa4:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	f000 83bc 	beq.w	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8004aae:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	f000 81dc 	beq.w	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 8004ab8:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8004abc:	4308      	orrs	r0, r1
          frequency = 0U;
 8004abe:	bf18      	it	ne
 8004ac0:	2000      	movne	r0, #0
 8004ac2:	d1ad      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ac4:	4b9a      	ldr	r3, [pc, #616]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004aca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
    switch (srcclk)
 8004ace:	2b80      	cmp	r3, #128	@ 0x80
 8004ad0:	f000 84fa 	beq.w	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8004ad4:	f200 8482 	bhi.w	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 8004ad8:	bb63      	cbnz	r3, 8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
}
 8004ada:	b005      	add	sp, #20
 8004adc:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK3Freq();
 8004ae0:	f7ff b8d6 	b.w	8003c90 <HAL_RCC_GetPCLK3Freq>
 8004ae4:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	f000 813e 	beq.w	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004aee:	4b91      	ldr	r3, [pc, #580]	@ (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004af0:	4298      	cmp	r0, r3
 8004af2:	f171 0300 	sbcs.w	r3, r1, #0
 8004af6:	d26d      	bcs.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8004af8:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
 8004afc:	430b      	orrs	r3, r1
 8004afe:	f000 8317 	beq.w	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8004b02:	f100 437e 	add.w	r3, r0, #4261412864	@ 0xfe000000
 8004b06:	430b      	orrs	r3, r1
 8004b08:	f000 8174 	beq.w	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004b0c:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 8004b10:	4308      	orrs	r0, r1
          frequency = 0U;
 8004b12:	bf18      	it	ne
 8004b14:	2000      	movne	r0, #0
 8004b16:	d183      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004b18:	4b85      	ldr	r3, [pc, #532]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b1e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (srcclk)
 8004b22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b26:	f000 84c6 	beq.w	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8004b2a:	f200 8477 	bhi.w	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 83bd 	beq.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
}
 8004b34:	b005      	add	sp, #20
 8004b36:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fd bfe5 	b.w	8002b08 <HAL_RCC_GetSysClockFreq>
 8004b3e:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8004b42:	430b      	orrs	r3, r1
 8004b44:	f000 81cf 	beq.w	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004b48:	f5a0 4080 	sub.w	r0, r0, #16384	@ 0x4000
 8004b4c:	4308      	orrs	r0, r1
          frequency = 0U;
 8004b4e:	bf18      	it	ne
 8004b50:	2000      	movne	r0, #0
 8004b52:	f47f af65 	bne.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004b56:	4b76      	ldr	r3, [pc, #472]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004b58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    switch (srcclk)
 8004b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b64:	f000 81e3 	beq.w	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 8004b68:	f240 8393 	bls.w	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b70:	f000 84e5 	beq.w	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b78:	f040 855c 	bne.w	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
          frequency = 0U;
 8004b7e:	486e      	ldr	r0, [pc, #440]	@ (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b80:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8004b82:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004b86:	bf08      	it	eq
 8004b88:	2000      	moveq	r0, #0
 8004b8a:	e749      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004b8c:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
 8004b90:	430b      	orrs	r3, r1
 8004b92:	f000 8192 	beq.w	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004b96:	f5a0 1000 	sub.w	r0, r0, #2097152	@ 0x200000
 8004b9a:	4308      	orrs	r0, r1
 8004b9c:	bf18      	it	ne
 8004b9e:	2000      	movne	r0, #0
 8004ba0:	f47f af3e 	bne.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004ba4:	4b62      	ldr	r3, [pc, #392]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004ba6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004baa:	0452      	lsls	r2, r2, #17
 8004bac:	f100 83f6 	bmi.w	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
      switch (srcclk)
 8004bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bbc:	f000 8371 	beq.w	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004bc0:	f200 848b 	bhi.w	80054da <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 84e3 	beq.w	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bca:	a801      	add	r0, sp, #4
 8004bcc:	f7ff fda0 	bl	8004710 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bd0:	9802      	ldr	r0, [sp, #8]
        break;
 8004bd2:	e725      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004bd4:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	f000 80b1 	beq.w	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004bde:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
 8004be2:	4308      	orrs	r0, r1
          frequency = 0U;
 8004be4:	bf18      	it	ne
 8004be6:	2000      	movne	r0, #0
 8004be8:	f47f af1a 	bne.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004bec:	4b50      	ldr	r3, [pc, #320]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004bee:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004bf2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004bf6:	f400 4000 	and.w	r0, r0, #32768	@ 0x8000
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004bfa:	0792      	lsls	r2, r2, #30
 8004bfc:	f140 83a1 	bpl.w	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f000 848a 	beq.w	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004c06:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8004c0a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004c0e:	f43f af07 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c12:	4b47      	ldr	r3, [pc, #284]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8004c18:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004c1c:	bf14      	ite	ne
 8004c1e:	20fa      	movne	r0, #250	@ 0xfa
 8004c20:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8004c24:	e6fc      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004c26:	281f      	cmp	r0, #31
 8004c28:	f63f aef9 	bhi.w	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8004c2c:	a301      	add	r3, pc, #4	@ (adr r3, 8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004c2e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	0800507f 	.word	0x0800507f
 8004c38:	08005045 	.word	0x08005045
 8004c3c:	08004a1f 	.word	0x08004a1f
 8004c40:	08005009 	.word	0x08005009
 8004c44:	08004a1f 	.word	0x08004a1f
 8004c48:	08004a1f 	.word	0x08004a1f
 8004c4c:	08004a1f 	.word	0x08004a1f
 8004c50:	08004fb7 	.word	0x08004fb7
 8004c54:	08004a1f 	.word	0x08004a1f
 8004c58:	08004a1f 	.word	0x08004a1f
 8004c5c:	08004a1f 	.word	0x08004a1f
 8004c60:	08004a1f 	.word	0x08004a1f
 8004c64:	08004a1f 	.word	0x08004a1f
 8004c68:	08004a1f 	.word	0x08004a1f
 8004c6c:	08004a1f 	.word	0x08004a1f
 8004c70:	080050f3 	.word	0x080050f3
 8004c74:	08004a1f 	.word	0x08004a1f
 8004c78:	08004a1f 	.word	0x08004a1f
 8004c7c:	08004a1f 	.word	0x08004a1f
 8004c80:	08004a1f 	.word	0x08004a1f
 8004c84:	08004a1f 	.word	0x08004a1f
 8004c88:	08004a1f 	.word	0x08004a1f
 8004c8c:	08004a1f 	.word	0x08004a1f
 8004c90:	08004a1f 	.word	0x08004a1f
 8004c94:	08004a1f 	.word	0x08004a1f
 8004c98:	08004a1f 	.word	0x08004a1f
 8004c9c:	08004a1f 	.word	0x08004a1f
 8004ca0:	08004a1f 	.word	0x08004a1f
 8004ca4:	08004a1f 	.word	0x08004a1f
 8004ca8:	08004a1f 	.word	0x08004a1f
 8004cac:	08004a1f 	.word	0x08004a1f
 8004cb0:	080050ad 	.word	0x080050ad
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004cb6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004cba:	6812      	ldr	r2, [r2, #0]
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004cbc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004cc0:	0491      	lsls	r1, r2, #18
 8004cc2:	d502      	bpl.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8422 	beq.w	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8004cca:	4a19      	ldr	r2, [pc, #100]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	0492      	lsls	r2, r2, #18
 8004cd0:	d503      	bpl.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd6:	f000 8496 	beq.w	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8004cda:	4a15      	ldr	r2, [pc, #84]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004cdc:	6810      	ldr	r0, [r2, #0]
 8004cde:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 8004ce2:	f43f ae9d 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cea:	4813      	ldr	r0, [pc, #76]	@ (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8004cec:	bf18      	it	ne
 8004cee:	2000      	movne	r0, #0
 8004cf0:	e696      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004cf2:	490f      	ldr	r1, [pc, #60]	@ (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004cf4:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004cf8:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8004cfc:	f040 8302 	bne.w	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d00:	6808      	ldr	r0, [r1, #0]
 8004d02:	f010 0020 	ands.w	r0, r0, #32
 8004d06:	f43f ae8b 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d0a:	688b      	ldr	r3, [r1, #8]
 8004d0c:	021a      	lsls	r2, r3, #8
 8004d0e:	bf4c      	ite	mi
 8004d10:	688b      	ldrmi	r3, [r1, #8]
 8004d12:	f8d1 30f4 	ldrpl.w	r3, [r1, #244]	@ 0xf4
 8004d16:	4a09      	ldr	r2, [pc, #36]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8004d18:	bf4c      	ite	mi
 8004d1a:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004d1e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004d22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d26:	e67b      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004d28:	00400001 	.word	0x00400001
 8004d2c:	00080001 	.word	0x00080001
 8004d30:	46020c00 	.word	0x46020c00
 8004d34:	04000001 	.word	0x04000001
 8004d38:	00f42400 	.word	0x00f42400
 8004d3c:	08006b38 	.word	0x08006b38
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004d40:	4aac      	ldr	r2, [pc, #688]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004d42:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004d46:	6812      	ldr	r2, [r2, #0]
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004d48:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004d4c:	0392      	lsls	r2, r2, #14
 8004d4e:	d502      	bpl.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 83df 	beq.w	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d5a:	f000 83e2 	beq.w	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004d5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d62:	f000 841e 	beq.w	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
          frequency = 0U;
 8004d66:	2000      	movs	r0, #0
 8004d68:	e65a      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004d6a:	4aa2      	ldr	r2, [pc, #648]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004d6c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8004d70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (srcclk)
 8004d74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d78:	f000 8293 	beq.w	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004d7c:	f200 8347 	bhi.w	800540e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f43f aed7 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d86:	6810      	ldr	r0, [r2, #0]
 8004d88:	f010 0020 	ands.w	r0, r0, #32
 8004d8c:	f43f ae48 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d90:	6893      	ldr	r3, [r2, #8]
 8004d92:	4a99      	ldr	r2, [pc, #612]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8004d94:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8004d98:	4b96      	ldr	r3, [pc, #600]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004d9a:	bf15      	itete	ne
 8004d9c:	689b      	ldrne	r3, [r3, #8]
 8004d9e:	f8d3 30f4 	ldreq.w	r3, [r3, #244]	@ 0xf4
 8004da2:	f3c3 6303 	ubfxne	r3, r3, #24, #4
 8004da6:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 8004daa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004dae:	e637      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004db0:	4a90      	ldr	r2, [pc, #576]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004db2:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004db6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004dbe:	0792      	lsls	r2, r2, #30
 8004dc0:	d503      	bpl.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dc6:	f000 840e 	beq.w	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004dca:	4a8a      	ldr	r2, [pc, #552]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004dcc:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 8004dd0:	0109      	lsls	r1, r1, #4
 8004dd2:	d503      	bpl.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd8:	f000 83bb 	beq.w	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004ddc:	4a85      	ldr	r2, [pc, #532]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004dde:	6810      	ldr	r0, [r2, #0]
 8004de0:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004de4:	f43f ae1c 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8004de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dec:	4883      	ldr	r0, [pc, #524]	@ (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8004dee:	bf18      	it	ne
 8004df0:	2000      	movne	r0, #0
 8004df2:	e615      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004df4:	4b7f      	ldr	r3, [pc, #508]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dfa:	f003 0318 	and.w	r3, r3, #24
    switch (srcclk)
 8004dfe:	2b18      	cmp	r3, #24
 8004e00:	f200 8088 	bhi.w	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004e04:	a201      	add	r2, pc, #4	@ (adr r2, 8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004adb 	.word	0x08004adb
 8004e10:	08004f15 	.word	0x08004f15
 8004e14:	08004f15 	.word	0x08004f15
 8004e18:	08004f15 	.word	0x08004f15
 8004e1c:	08004f15 	.word	0x08004f15
 8004e20:	08004f15 	.word	0x08004f15
 8004e24:	08004f15 	.word	0x08004f15
 8004e28:	08004f15 	.word	0x08004f15
 8004e2c:	08004b35 	.word	0x08004b35
 8004e30:	08004f15 	.word	0x08004f15
 8004e34:	08004f15 	.word	0x08004f15
 8004e38:	08004f15 	.word	0x08004f15
 8004e3c:	08004f15 	.word	0x08004f15
 8004e40:	08004f15 	.word	0x08004f15
 8004e44:	08004f15 	.word	0x08004f15
 8004e48:	08004f15 	.word	0x08004f15
 8004e4c:	08004f7d 	.word	0x08004f7d
 8004e50:	08004f15 	.word	0x08004f15
 8004e54:	08004f15 	.word	0x08004f15
 8004e58:	08004f15 	.word	0x08004f15
 8004e5c:	08004f15 	.word	0x08004f15
 8004e60:	08004f15 	.word	0x08004f15
 8004e64:	08004f15 	.word	0x08004f15
 8004e68:	08004f15 	.word	0x08004f15
 8004e6c:	08004f8d 	.word	0x08004f8d
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004e70:	4a60      	ldr	r2, [pc, #384]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004e72:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004e76:	f413 2340 	ands.w	r3, r3, #786432	@ 0xc0000
 8004e7a:	f000 8167 	beq.w	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004e7e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	d503      	bpl.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004e86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e8a:	f000 83a1 	beq.w	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc00>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004e8e:	4a59      	ldr	r2, [pc, #356]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	0551      	lsls	r1, r2, #21
 8004e94:	d503      	bpl.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8004e96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e9a:	f000 8416 	beq.w	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0xcfa>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004e9e:	4a55      	ldr	r2, [pc, #340]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004ea0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8004ea4:	f010 0002 	ands.w	r0, r0, #2
 8004ea8:	f43f adba 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004eac:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004eb0:	fab3 f383 	clz	r3, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	03d8      	lsls	r0, r3, #15
 8004eb8:	e5b2      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004eba:	4b4e      	ldr	r3, [pc, #312]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ec0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
    switch (srcclk)
 8004ec4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ec8:	f000 81eb 	beq.w	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004ecc:	f200 82c0 	bhi.w	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f47f ae7a 	bne.w	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004ed6:	4b47      	ldr	r3, [pc, #284]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
          frequency = 0U;
 8004ed8:	4849      	ldr	r0, [pc, #292]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004eda:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8004edc:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8004ee0:	bf08      	it	eq
 8004ee2:	2000      	moveq	r0, #0
 8004ee4:	e59c      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004ee6:	4b43      	ldr	r3, [pc, #268]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004ee8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004eec:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
    switch (srcclk)
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d01c      	beq.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 8004ef4:	f240 81cd 	bls.w	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004ef8:	2b60      	cmp	r3, #96	@ 0x60
 8004efa:	f000 831c 	beq.w	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
 8004efe:	2b80      	cmp	r3, #128	@ 0x80
 8004f00:	f040 839e 	bne.w	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f04:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
          frequency = 0U;
 8004f06:	483f      	ldr	r0, [pc, #252]	@ (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f08:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8004f0a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004f0e:	bf08      	it	eq
 8004f10:	2000      	moveq	r0, #0
 8004f12:	e585      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004f14:	2000      	movs	r0, #0
 8004f16:	e583      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004f18:	4b36      	ldr	r3, [pc, #216]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f1e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8004f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f26:	d00c      	beq.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8004f28:	f200 8214 	bhi.w	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8004f2c:	b123      	cbz	r3, 8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f2e:	a801      	add	r0, sp, #4
 8004f30:	f7ff fb3e 	bl	80045b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004f34:	9801      	ldr	r0, [sp, #4]
        break;
 8004f36:	e573      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
}
 8004f38:	b005      	add	sp, #20
 8004f3a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetHCLKFreq();
 8004f3e:	f7fe bcc1 	b.w	80038c4 <HAL_RCC_GetHCLKFreq>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f42:	a801      	add	r0, sp, #4
 8004f44:	f7ff fc94 	bl	8004870 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f48:	9802      	ldr	r0, [sp, #8]
        break;
 8004f4a:	e569      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004f4c:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8004f50:	e566      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f52:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004f54:	6810      	ldr	r0, [r2, #0]
 8004f56:	f010 0020 	ands.w	r0, r0, #32
 8004f5a:	f43f ad61 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f5e:	6893      	ldr	r3, [r2, #8]
 8004f60:	0218      	lsls	r0, r3, #8
 8004f62:	bf4c      	ite	mi
 8004f64:	6893      	ldrmi	r3, [r2, #8]
 8004f66:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8004f6a:	4a23      	ldr	r2, [pc, #140]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8004f6c:	bf4c      	ite	mi
 8004f6e:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004f72:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004f76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004f7a:	e551      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
          frequency = 0U;
 8004f7e:	4821      	ldr	r0, [pc, #132]	@ (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f80:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8004f82:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004f86:	bf08      	it	eq
 8004f88:	2000      	moveq	r0, #0
 8004f8a:	e549      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f8c:	4a19      	ldr	r2, [pc, #100]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004f8e:	6810      	ldr	r0, [r2, #0]
 8004f90:	f010 0020 	ands.w	r0, r0, #32
 8004f94:	f43f ad44 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f98:	6893      	ldr	r3, [r2, #8]
 8004f9a:	0219      	lsls	r1, r3, #8
 8004f9c:	bf4c      	ite	mi
 8004f9e:	6893      	ldrmi	r3, [r2, #8]
 8004fa0:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8004fa4:	4a14      	ldr	r2, [pc, #80]	@ (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8004fa6:	bf4c      	ite	mi
 8004fa8:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004fac:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004fb4:	e534      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004fb8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004fbc:	f013 03c0 	ands.w	r3, r3, #192	@ 0xc0
 8004fc0:	f000 80c4 	beq.w	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004fc4:	2b40      	cmp	r3, #64	@ 0x40
 8004fc6:	f43f adb5 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	0552      	lsls	r2, r2, #21
 8004fce:	d502      	bpl.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8004fd0:	2b80      	cmp	r3, #128	@ 0x80
 8004fd2:	f000 8392 	beq.w	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004fd6:	4a07      	ldr	r2, [pc, #28]	@ (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004fd8:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8004fdc:	f010 0002 	ands.w	r0, r0, #2
 8004fe0:	f43f ad1e 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004fe4:	f1a3 03c0 	sub.w	r3, r3, #192	@ 0xc0
 8004fe8:	fab3 f383 	clz	r3, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	03d8      	lsls	r0, r3, #15
 8004ff0:	e516      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004ff2:	bf00      	nop
 8004ff4:	46020c00 	.word	0x46020c00
 8004ff8:	08006b38 	.word	0x08006b38
 8004ffc:	0007a120 	.word	0x0007a120
 8005000:	02dc6c00 	.word	0x02dc6c00
 8005004:	00f42400 	.word	0x00f42400
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005008:	4aab      	ldr	r2, [pc, #684]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800500a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800500e:	f013 0330 	ands.w	r3, r3, #48	@ 0x30
 8005012:	f000 809b 	beq.w	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005016:	2b10      	cmp	r3, #16
 8005018:	f43f ad8c 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	0551      	lsls	r1, r2, #21
 8005020:	d502      	bpl.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005022:	2b20      	cmp	r3, #32
 8005024:	f000 8366 	beq.w	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005028:	4aa3      	ldr	r2, [pc, #652]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800502a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 800502e:	f010 0002 	ands.w	r0, r0, #2
 8005032:	f43f acf5 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005036:	f1a3 0330 	sub.w	r3, r3, #48	@ 0x30
 800503a:	fab3 f383 	clz	r3, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	03d8      	lsls	r0, r3, #15
 8005042:	e4ed      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005044:	4a9c      	ldr	r2, [pc, #624]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005046:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800504a:	f013 030c 	ands.w	r3, r3, #12
 800504e:	d07d      	beq.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005050:	2b04      	cmp	r3, #4
 8005052:	f43f ad6f 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	0550      	lsls	r0, r2, #21
 800505a:	d502      	bpl.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800505c:	2b08      	cmp	r3, #8
 800505e:	f000 8346 	beq.w	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005062:	4a95      	ldr	r2, [pc, #596]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005064:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8005068:	f010 0002 	ands.w	r0, r0, #2
 800506c:	f43f acd8 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005070:	f1a3 030c 	sub.w	r3, r3, #12
 8005074:	fab3 f383 	clz	r3, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	03d8      	lsls	r0, r3, #15
 800507c:	e4d0      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800507e:	498e      	ldr	r1, [pc, #568]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005080:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005084:	f012 0203 	ands.w	r2, r2, #3
 8005088:	f000 8111 	beq.w	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800508c:	2a01      	cmp	r2, #1
 800508e:	f43f ad51 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005092:	680b      	ldr	r3, [r1, #0]
 8005094:	0558      	lsls	r0, r3, #21
 8005096:	f140 81f5 	bpl.w	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800509a:	2a02      	cmp	r2, #2
 800509c:	f000 8318 	beq.w	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80050a0:	f8d1 00f0 	ldr.w	r0, [r1, #240]	@ 0xf0
 80050a4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80050a8:	03c0      	lsls	r0, r0, #15
 80050aa:	e4b9      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80050ac:	4982      	ldr	r1, [pc, #520]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80050ae:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80050b2:	f012 0207 	ands.w	r2, r2, #7
 80050b6:	f43f ad10 	beq.w	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80050ba:	2a01      	cmp	r2, #1
 80050bc:	f43f ad3a 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80050c0:	680b      	ldr	r3, [r1, #0]
 80050c2:	0559      	lsls	r1, r3, #21
 80050c4:	d502      	bpl.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80050c6:	2a02      	cmp	r2, #2
 80050c8:	f000 830e 	beq.w	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80050cc:	4b7a      	ldr	r3, [pc, #488]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80050ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050d2:	079b      	lsls	r3, r3, #30
 80050d4:	d502      	bpl.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80050d6:	2a03      	cmp	r2, #3
 80050d8:	f000 8315 	beq.w	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80050dc:	4976      	ldr	r1, [pc, #472]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80050de:	6808      	ldr	r0, [r1, #0]
 80050e0:	f010 0020 	ands.w	r0, r0, #32
 80050e4:	f43f ac9c 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80050e8:	2a04      	cmp	r2, #4
 80050ea:	f000 82dc 	beq.w	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
          frequency = 0U;
 80050ee:	2000      	movs	r0, #0
 80050f0:	e496      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80050f2:	4a71      	ldr	r2, [pc, #452]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80050f4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80050f8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80050fc:	d026      	beq.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80050fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005102:	f43f ad17 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	0550      	lsls	r0, r2, #21
 800510a:	d503      	bpl.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800510c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005110:	f000 82e4 	beq.w	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005114:	4a68      	ldr	r2, [pc, #416]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005116:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 800511a:	f010 0002 	ands.w	r0, r0, #2
 800511e:	f43f ac7f 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005122:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8005126:	fab3 f383 	clz	r3, r3
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	03d8      	lsls	r0, r3, #15
 800512e:	e477      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005130:	4a61      	ldr	r2, [pc, #388]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005132:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8005136:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 800513a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800513e:	f000 81b2 	beq.w	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8005142:	f200 8131 	bhi.w	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8005146:	2b00      	cmp	r3, #0
 8005148:	f47f acf4 	bne.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
}
 800514c:	b005      	add	sp, #20
 800514e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8005152:	f7fe bc55 	b.w	8003a00 <HAL_RCC_GetPCLK1Freq>
 8005156:	3840      	subs	r0, #64	@ 0x40
 8005158:	4308      	orrs	r0, r1
          frequency = 0U;
 800515a:	bf18      	it	ne
 800515c:	2000      	movne	r0, #0
 800515e:	f47f ac5f 	bne.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005162:	4a55      	ldr	r2, [pc, #340]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005164:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005168:	f413 6340 	ands.w	r3, r3, #3072	@ 0xc00
 800516c:	d0ee      	beq.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005172:	f43f acdf 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	0552      	lsls	r2, r2, #21
 800517a:	d503      	bpl.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 800517c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005180:	f000 82be 	beq.w	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005184:	4a4c      	ldr	r2, [pc, #304]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005186:	6810      	ldr	r0, [r2, #0]
 8005188:	f010 0020 	ands.w	r0, r0, #32
 800518c:	f43f ac48 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005190:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005194:	f000 8257 	beq.w	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8005198:	2000      	movs	r0, #0
 800519a:	e441      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800519c:	4946      	ldr	r1, [pc, #280]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800519e:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80051a2:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80051a6:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80051aa:	f43f acc3 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80051ae:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80051b2:	f000 81c8 	beq.w	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	f43f aebe 	beq.w	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80051bc:	f5b2 4fa0 	cmp.w	r2, #20480	@ 0x5000
 80051c0:	f000 81d1 	beq.w	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0xb96>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80051c4:	680b      	ldr	r3, [r1, #0]
 80051c6:	039b      	lsls	r3, r3, #14
 80051c8:	d503      	bpl.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 80051ca:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 80051ce:	f000 82a4 	beq.w	800571a <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80051d2:	4b39      	ldr	r3, [pc, #228]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 80051da:	f43f ac21 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 80051de:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 80051e2:	4836      	ldr	r0, [pc, #216]	@ (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 80051e4:	bf18      	it	ne
 80051e6:	2000      	movne	r0, #0
 80051e8:	e41a      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80051ea:	4a33      	ldr	r2, [pc, #204]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80051ec:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80051f0:	f413 5340 	ands.w	r3, r3, #12288	@ 0x3000
 80051f4:	d0aa      	beq.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051fa:	f43f ac9b 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	0550      	lsls	r0, r2, #21
 8005202:	d503      	bpl.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8005204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005208:	f000 8265 	beq.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800520c:	4a2a      	ldr	r2, [pc, #168]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800520e:	6810      	ldr	r0, [r2, #0]
 8005210:	f010 0020 	ands.w	r0, r0, #32
 8005214:	f43f ac04 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005218:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800521c:	f000 8223 	beq.w	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = 0U;
 8005220:	2000      	movs	r0, #0
 8005222:	f7ff bbfd 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005226:	4924      	ldr	r1, [pc, #144]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005228:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800522c:	f412 6240 	ands.w	r2, r2, #3072	@ 0xc00
 8005230:	d148      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005232:	6808      	ldr	r0, [r1, #0]
 8005234:	f010 0020 	ands.w	r0, r0, #32
 8005238:	f43f abf2 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800523c:	688b      	ldr	r3, [r1, #8]
 800523e:	0218      	lsls	r0, r3, #8
 8005240:	f140 81b8 	bpl.w	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005244:	688b      	ldr	r3, [r1, #8]
 8005246:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800524a:	4a1d      	ldr	r2, [pc, #116]	@ (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
 800524c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005250:	f7ff bbe6 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005254:	4a18      	ldr	r2, [pc, #96]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8005256:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800525a:	f413 4340 	ands.w	r3, r3, #49152	@ 0xc000
 800525e:	f43f af75 	beq.w	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005266:	f43f ac65 	beq.w	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	0550      	lsls	r0, r2, #21
 800526e:	d503      	bpl.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005274:	f000 8235 	beq.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd12>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005278:	4a0f      	ldr	r2, [pc, #60]	@ (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800527a:	6810      	ldr	r0, [r2, #0]
 800527c:	f010 0020 	ands.w	r0, r0, #32
 8005280:	f43f abce 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005284:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005288:	f000 81fd 	beq.w	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
          frequency = 0U;
 800528c:	2000      	movs	r0, #0
 800528e:	f7ff bbc7 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 8005292:	2b00      	cmp	r3, #0
 8005294:	d07c      	beq.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x9c0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005296:	a801      	add	r0, sp, #4
 8005298:	f7ff faea 	bl	8004870 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800529c:	9801      	ldr	r0, [sp, #4]
        break;
 800529e:	f7ff bbbf 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052a2:	a801      	add	r0, sp, #4
 80052a4:	f7ff f984 	bl	80045b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80052a8:	9802      	ldr	r0, [sp, #8]
        break;
 80052aa:	f7ff bbb9 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
}
 80052ae:	b005      	add	sp, #20
 80052b0:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7fe bc48 	b.w	8003b48 <HAL_RCC_GetPCLK2Freq>
 80052b8:	46020c00 	.word	0x46020c00
 80052bc:	00f42400 	.word	0x00f42400
 80052c0:	08006b38 	.word	0x08006b38
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80052c4:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 80052c8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052cc:	4bbc      	ldr	r3, [pc, #752]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80052ce:	d003      	beq.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
 80052d0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80052d4:	f000 81a4 	beq.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xc50>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	0559      	lsls	r1, r3, #21
 80052dc:	d503      	bpl.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 80052de:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80052e2:	f000 8214 	beq.w	800570e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80052e6:	4bb6      	ldr	r3, [pc, #728]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80052e8:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80052ec:	f010 0002 	ands.w	r0, r0, #2
 80052f0:	f43f ab96 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80052f4:	f5a2 6340 	sub.w	r3, r2, #3072	@ 0xc00
 80052f8:	fab3 f383 	clz	r3, r3
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	03d8      	lsls	r0, r3, #15
 8005300:	f7ff bb8e 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005304:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	d503      	bpl.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800530c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005310:	f000 817c 	beq.w	800560c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005314:	4baa      	ldr	r3, [pc, #680]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	055b      	lsls	r3, r3, #21
 800531a:	d503      	bpl.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 800531c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005320:	f000 81f8 	beq.w	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005324:	4ba6      	ldr	r3, [pc, #664]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8005326:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 800532a:	f010 0002 	ands.w	r0, r0, #2
 800532e:	f43f ab77 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005332:	f5a2 7340 	sub.w	r3, r2, #768	@ 0x300
 8005336:	fab3 f383 	clz	r3, r3
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	03d8      	lsls	r0, r3, #15
 800533e:	f7ff bb6f 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	f140 80aa 	bpl.w	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
 800534c:	2800      	cmp	r0, #0
 800534e:	f43f ab67 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005352:	e45e      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
    switch (srcclk)
 8005354:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005358:	f000 80e9 	beq.w	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800535c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005360:	f040 816b 	bne.w	800563a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005364:	4a96      	ldr	r2, [pc, #600]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8005366:	6810      	ldr	r0, [r2, #0]
 8005368:	f010 0020 	ands.w	r0, r0, #32
 800536c:	f43f ab58 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005370:	6893      	ldr	r3, [r2, #8]
 8005372:	0219      	lsls	r1, r3, #8
 8005374:	bf4c      	ite	mi
 8005376:	6893      	ldrmi	r3, [r2, #8]
 8005378:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 800537c:	4a91      	ldr	r2, [pc, #580]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 800537e:	bf4c      	ite	mi
 8005380:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8005384:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8005388:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800538c:	f7ff bb48 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005390:	a801      	add	r0, sp, #4
 8005392:	f7ff f9bd 	bl	8004710 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005396:	9801      	ldr	r0, [sp, #4]
        break;
 8005398:	f7ff bb42 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800539c:	a801      	add	r0, sp, #4
 800539e:	f7ff f907 	bl	80045b0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80053a2:	9801      	ldr	r0, [sp, #4]
 80053a4:	f7ff bb3c 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 80053a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053ac:	f040 8128 	bne.w	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053b0:	4a83      	ldr	r2, [pc, #524]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80053b2:	6810      	ldr	r0, [r2, #0]
 80053b4:	f010 0020 	ands.w	r0, r0, #32
 80053b8:	f43f ab32 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053bc:	6893      	ldr	r3, [r2, #8]
 80053be:	0218      	lsls	r0, r3, #8
 80053c0:	bf4c      	ite	mi
 80053c2:	6893      	ldrmi	r3, [r2, #8]
 80053c4:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80053c8:	4a7e      	ldr	r2, [pc, #504]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 80053ca:	bf4c      	ite	mi
 80053cc:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80053d0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80053d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80053d8:	f7ff bb22 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 80053dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80053de:	f040 8109 	bne.w	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053e2:	4a77      	ldr	r2, [pc, #476]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80053e4:	6810      	ldr	r0, [r2, #0]
 80053e6:	f010 0020 	ands.w	r0, r0, #32
 80053ea:	f43f ab19 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053ee:	6893      	ldr	r3, [r2, #8]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	bf4c      	ite	mi
 80053f4:	6893      	ldrmi	r3, [r2, #8]
 80053f6:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80053fa:	4a72      	ldr	r2, [pc, #456]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 80053fc:	bf4c      	ite	mi
 80053fe:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8005402:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8005406:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800540a:	f7ff bb09 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 800540e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005412:	f43f abda 	beq.w	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
          frequency = 0U;
 8005416:	2000      	movs	r0, #0
 8005418:	f7ff bb02 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 800541c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005420:	f040 80e5 	bne.w	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0xc1e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005424:	4a66      	ldr	r2, [pc, #408]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8005426:	6810      	ldr	r0, [r2, #0]
 8005428:	f010 0020 	ands.w	r0, r0, #32
 800542c:	f43f aaf8 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005430:	6893      	ldr	r3, [r2, #8]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	bf4c      	ite	mi
 8005436:	6893      	ldrmi	r3, [r2, #8]
 8005438:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 800543c:	4a61      	ldr	r2, [pc, #388]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 800543e:	bf4c      	ite	mi
 8005440:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8005444:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8005448:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800544c:	f7ff bae8 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 8005450:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005454:	f040 80d1 	bne.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005458:	4a59      	ldr	r2, [pc, #356]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 800545a:	6810      	ldr	r0, [r2, #0]
 800545c:	f010 0020 	ands.w	r0, r0, #32
 8005460:	f43f aade 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005464:	6893      	ldr	r3, [r2, #8]
 8005466:	0219      	lsls	r1, r3, #8
 8005468:	bf4c      	ite	mi
 800546a:	6893      	ldrmi	r3, [r2, #8]
 800546c:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8005470:	4a54      	ldr	r2, [pc, #336]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 8005472:	bf4c      	ite	mi
 8005474:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8005478:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800547c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005480:	f7ff bace 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005484:	f8d1 00f0 	ldr.w	r0, [r1, #240]	@ 0xf0
 8005488:	f010 0002 	ands.w	r0, r0, #2
 800548c:	f43f aac8 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005490:	f1a2 0303 	sub.w	r3, r2, #3
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	03d8      	lsls	r0, r3, #15
 800549c:	f7ff bac0 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 80054a0:	2000      	movs	r0, #0
 80054a2:	f7ff babd 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054a6:	6813      	ldr	r3, [r2, #0]
          frequency = 0U;
 80054a8:	4847      	ldr	r0, [pc, #284]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
 80054aa:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80054ae:	bf08      	it	eq
 80054b0:	2000      	moveq	r0, #0
 80054b2:	f7ff bab5 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054b6:	4b42      	ldr	r3, [pc, #264]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
          frequency = 0U;
 80054b8:	4843      	ldr	r0, [pc, #268]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054ba:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 80054bc:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80054c0:	bf08      	it	eq
 80054c2:	2000      	moveq	r0, #0
 80054c4:	f7ff baac 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054c8:	4b3d      	ldr	r3, [pc, #244]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
          frequency = 0U;
 80054ca:	483f      	ldr	r0, [pc, #252]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054cc:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 80054ce:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80054d2:	bf08      	it	eq
 80054d4:	2000      	moveq	r0, #0
 80054d6:	f7ff baa3 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      switch (srcclk)
 80054da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80054de:	f040 80f1 	bne.w	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf4>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054e2:	4a37      	ldr	r2, [pc, #220]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80054e4:	6810      	ldr	r0, [r2, #0]
 80054e6:	f010 0020 	ands.w	r0, r0, #32
 80054ea:	f43f aa99 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054ee:	6893      	ldr	r3, [r2, #8]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	bf4c      	ite	mi
 80054f4:	6893      	ldrmi	r3, [r2, #8]
 80054f6:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80054fa:	4a32      	ldr	r2, [pc, #200]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 80054fc:	bf4c      	ite	mi
 80054fe:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8005502:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8005506:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800550a:	f7ff ba89 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI48_VALUE;
 800550e:	482f      	ldr	r0, [pc, #188]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>)
 8005510:	f7ff ba86 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI_VALUE;
 8005514:	482c      	ldr	r0, [pc, #176]	@ (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
 8005516:	f7ff ba83 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = LSE_VALUE;
 800551a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800551e:	f7ff ba7f 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005522:	a801      	add	r0, sp, #4
 8005524:	f7ff f844 	bl	80045b0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005528:	9802      	ldr	r0, [sp, #8]
 800552a:	f7ff ba79 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800552e:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8005532:	f7ff ba75 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005536:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800553a:	f7ff ba71 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800553e:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8005542:	f7ff ba6d 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005546:	a801      	add	r0, sp, #4
 8005548:	f7ff f8e2 	bl	8004710 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800554c:	9803      	ldr	r0, [sp, #12]
 800554e:	f7ff ba67 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005552:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8005556:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800555a:	bf14      	ite	ne
 800555c:	20fa      	movne	r0, #250	@ 0xfa
 800555e:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8005562:	f7ff ba5d 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005566:	6808      	ldr	r0, [r1, #0]
 8005568:	f010 0020 	ands.w	r0, r0, #32
 800556c:	f43f aa58 	beq.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005570:	688b      	ldr	r3, [r1, #8]
 8005572:	021a      	lsls	r2, r3, #8
 8005574:	bf4c      	ite	mi
 8005576:	688b      	ldrmi	r3, [r1, #8]
 8005578:	f8d1 30f4 	ldrpl.w	r3, [r1, #244]	@ 0xf4
 800557c:	4a11      	ldr	r2, [pc, #68]	@ (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 800557e:	bf4c      	ite	mi
 8005580:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8005584:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8005588:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800558c:	f7ff ba48 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005590:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
          frequency = 0U;
 8005592:	480e      	ldr	r0, [pc, #56]	@ (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>)
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005594:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8005596:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800559a:	bf08      	it	eq
 800559c:	2000      	moveq	r0, #0
 800559e:	f7ff ba3f 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055a2:	a801      	add	r0, sp, #4
 80055a4:	f7ff f8b4 	bl	8004710 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80055a8:	9801      	ldr	r0, [sp, #4]
 80055aa:	f7ff ba39 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 80055ae:	2000      	movs	r0, #0
 80055b0:	f7ff ba36 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055b4:	4b02      	ldr	r3, [pc, #8]	@ (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80055b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055ba:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80055be:	e644      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 80055c0:	46020c00 	.word	0x46020c00
 80055c4:	08006b38 	.word	0x08006b38
 80055c8:	00f42400 	.word	0x00f42400
 80055cc:	02dc6c00 	.word	0x02dc6c00
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80055d0:	4b55      	ldr	r3, [pc, #340]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 80055d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = LSI_VALUE;
 80055d6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80055da:	bf14      	ite	ne
 80055dc:	20fa      	movne	r0, #250	@ 0xfa
 80055de:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 80055e2:	f7ff ba1d 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = LSE_VALUE;
 80055e6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80055ea:	f7ff ba19 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 80055ee:	2000      	movs	r0, #0
 80055f0:	f7ff ba16 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80055f4:	2000      	movs	r0, #0
 80055f6:	f7ff ba13 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80055fa:	2000      	movs	r0, #0
 80055fc:	f7ff ba10 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005600:	2000      	movs	r0, #0
 8005602:	f7ff ba0d 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = HSI48_VALUE >> 1U ;
 8005606:	4849      	ldr	r0, [pc, #292]	@ (800572c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005608:	f7ff ba0a 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800560c:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8005610:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005614:	bf14      	ite	ne
 8005616:	20fa      	movne	r0, #250	@ 0xfa
 8005618:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 800561c:	f7ff ba00 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8005624:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005628:	bf14      	ite	ne
 800562a:	20fa      	movne	r0, #250	@ 0xfa
 800562c:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8005630:	f7ff b9f6 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8005634:	2000      	movs	r0, #0
 8005636:	f7ff b9f3 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800563a:	2000      	movs	r0, #0
 800563c:	f7ff b9f0 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005640:	2000      	movs	r0, #0
 8005642:	f7ff b9ed 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005646:	6893      	ldr	r3, [r2, #8]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	bf4c      	ite	mi
 800564c:	6893      	ldrmi	r3, [r2, #8]
 800564e:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8005652:	4a37      	ldr	r2, [pc, #220]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005654:	bf4c      	ite	mi
 8005656:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 800565a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800565e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005662:	f7ff b9dd 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005666:	6893      	ldr	r3, [r2, #8]
 8005668:	0219      	lsls	r1, r3, #8
 800566a:	bf4c      	ite	mi
 800566c:	6893      	ldrmi	r3, [r2, #8]
 800566e:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8005672:	4a2f      	ldr	r2, [pc, #188]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005674:	bf4c      	ite	mi
 8005676:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 800567a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800567e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005682:	f7ff b9cd 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005686:	6893      	ldr	r3, [r2, #8]
 8005688:	0219      	lsls	r1, r3, #8
 800568a:	bf4c      	ite	mi
 800568c:	6893      	ldrmi	r3, [r2, #8]
 800568e:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8005692:	4a27      	ldr	r2, [pc, #156]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005694:	bf4c      	ite	mi
 8005696:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 800569a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800569e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80056a2:	f7ff b9bd 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056a6:	688b      	ldr	r3, [r1, #8]
 80056a8:	4a21      	ldr	r2, [pc, #132]	@ (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80056aa:	0218      	lsls	r0, r3, #8
 80056ac:	bf4b      	itete	mi
 80056ae:	688b      	ldrmi	r3, [r1, #8]
 80056b0:	f8d1 30f4 	ldrpl.w	r3, [r1, #244]	@ 0xf4
 80056b4:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80056b8:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80056bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80056c0:	f7ff b9ae 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 80056c4:	2000      	movs	r0, #0
 80056c6:	f7ff b9ab 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI_VALUE;
 80056ca:	481a      	ldr	r0, [pc, #104]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056cc:	f7ff b9a8 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80056d0:	4818      	ldr	r0, [pc, #96]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056d2:	f7ff b9a5 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80056d6:	4817      	ldr	r0, [pc, #92]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056d8:	f7ff b9a2 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80056dc:	4815      	ldr	r0, [pc, #84]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056de:	f7ff b99f 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80056e2:	4814      	ldr	r0, [pc, #80]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056e4:	f7ff b99c 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80056e8:	4812      	ldr	r0, [pc, #72]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056ea:	f7ff b999 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80056ee:	4811      	ldr	r0, [pc, #68]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056f0:	f7ff b996 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80056f4:	480f      	ldr	r0, [pc, #60]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056f6:	f7ff b993 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80056fa:	480e      	ldr	r0, [pc, #56]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056fc:	f7ff b990 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005700:	480c      	ldr	r0, [pc, #48]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005702:	f7ff b98d 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = LSE_VALUE;
 8005706:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800570a:	f7ff b989 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI_VALUE;
 800570e:	4809      	ldr	r0, [pc, #36]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005710:	f7ff b986 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005714:	4807      	ldr	r0, [pc, #28]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005716:	f7ff b983 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800571a:	4806      	ldr	r0, [pc, #24]	@ (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800571c:	f7ff b980 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8005720:	2000      	movs	r0, #0
 8005722:	f7ff b97d 	b.w	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8005726:	bf00      	nop
 8005728:	46020c00 	.word	0x46020c00
 800572c:	016e3600 	.word	0x016e3600
 8005730:	08006b38 	.word	0x08006b38
 8005734:	00f42400 	.word	0x00f42400

08005738 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005738:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573a:	6a02      	ldr	r2, [r0, #32]
{
 800573c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573e:	f022 0201 	bic.w	r2, r2, #1
 8005742:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005746:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005748:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800574a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800574e:	4c1f      	ldr	r4, [pc, #124]	@ (80057cc <TIM_OC1_SetConfig+0x94>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005750:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005754:	4332      	orrs	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8005756:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005758:	f023 0302 	bic.w	r3, r3, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800575c:	42a0      	cmp	r0, r4
  tmpccer |= OC_Config->OCPolarity;
 800575e:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005762:	d01f      	beq.n	80057a4 <TIM_OC1_SetConfig+0x6c>
 8005764:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8005768:	42a0      	cmp	r0, r4
 800576a:	d01b      	beq.n	80057a4 <TIM_OC1_SetConfig+0x6c>
 800576c:	4c18      	ldr	r4, [pc, #96]	@ (80057d0 <TIM_OC1_SetConfig+0x98>)
 800576e:	42a0      	cmp	r0, r4
 8005770:	d018      	beq.n	80057a4 <TIM_OC1_SetConfig+0x6c>
 8005772:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8005776:	42a0      	cmp	r0, r4
 8005778:	d014      	beq.n	80057a4 <TIM_OC1_SetConfig+0x6c>
 800577a:	4c16      	ldr	r4, [pc, #88]	@ (80057d4 <TIM_OC1_SetConfig+0x9c>)
 800577c:	42a0      	cmp	r0, r4
 800577e:	d011      	beq.n	80057a4 <TIM_OC1_SetConfig+0x6c>
 8005780:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8005784:	42a0      	cmp	r0, r4
 8005786:	d00d      	beq.n	80057a4 <TIM_OC1_SetConfig+0x6c>
 8005788:	4c13      	ldr	r4, [pc, #76]	@ (80057d8 <TIM_OC1_SetConfig+0xa0>)
 800578a:	42a0      	cmp	r0, r4
 800578c:	d00a      	beq.n	80057a4 <TIM_OC1_SetConfig+0x6c>
 800578e:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8005792:	42a0      	cmp	r0, r4
 8005794:	d006      	beq.n	80057a4 <TIM_OC1_SetConfig+0x6c>
 8005796:	4c11      	ldr	r4, [pc, #68]	@ (80057dc <TIM_OC1_SetConfig+0xa4>)
 8005798:	42a0      	cmp	r0, r4
 800579a:	d003      	beq.n	80057a4 <TIM_OC1_SetConfig+0x6c>
 800579c:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 80057a0:	42a0      	cmp	r0, r4
 80057a2:	d10d      	bne.n	80057c0 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057a4:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80057a6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80057aa:	4323      	orrs	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ac:	f425 7e40 	bic.w	lr, r5, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057b0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
 80057b4:	ea44 0c05 	orr.w	ip, r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80057b8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80057bc:	ea4c 050e 	orr.w	r5, ip, lr

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057c0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80057c2:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80057c4:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80057c6:	6341      	str	r1, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c8:	6203      	str	r3, [r0, #32]
}
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40013400 	.word	0x40013400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800

080057e0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057e2:	6a02      	ldr	r2, [r0, #32]
{
 80057e4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057ea:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f0:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057f6:	4d20      	ldr	r5, [pc, #128]	@ (8005878 <TIM_OC3_SetConfig+0x98>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80057fc:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057fe:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005804:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005806:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800580a:	d01f      	beq.n	800584c <TIM_OC3_SetConfig+0x6c>
 800580c:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005810:	42a8      	cmp	r0, r5
 8005812:	d01b      	beq.n	800584c <TIM_OC3_SetConfig+0x6c>
 8005814:	4d19      	ldr	r5, [pc, #100]	@ (800587c <TIM_OC3_SetConfig+0x9c>)
 8005816:	42a8      	cmp	r0, r5
 8005818:	d018      	beq.n	800584c <TIM_OC3_SetConfig+0x6c>
 800581a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 800581e:	42a8      	cmp	r0, r5
 8005820:	d014      	beq.n	800584c <TIM_OC3_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005822:	4d17      	ldr	r5, [pc, #92]	@ (8005880 <TIM_OC3_SetConfig+0xa0>)
 8005824:	42a8      	cmp	r0, r5
 8005826:	d018      	beq.n	800585a <TIM_OC3_SetConfig+0x7a>
 8005828:	4d16      	ldr	r5, [pc, #88]	@ (8005884 <TIM_OC3_SetConfig+0xa4>)
 800582a:	42a8      	cmp	r0, r5
 800582c:	d015      	beq.n	800585a <TIM_OC3_SetConfig+0x7a>
 800582e:	4d16      	ldr	r5, [pc, #88]	@ (8005888 <TIM_OC3_SetConfig+0xa8>)
 8005830:	42a8      	cmp	r0, r5
 8005832:	d012      	beq.n	800585a <TIM_OC3_SetConfig+0x7a>
 8005834:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005838:	42a8      	cmp	r0, r5
 800583a:	d00e      	beq.n	800585a <TIM_OC3_SetConfig+0x7a>
 800583c:	4d13      	ldr	r5, [pc, #76]	@ (800588c <TIM_OC3_SetConfig+0xac>)
 800583e:	42a8      	cmp	r0, r5
 8005840:	d00b      	beq.n	800585a <TIM_OC3_SetConfig+0x7a>
 8005842:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005846:	42a8      	cmp	r0, r5
 8005848:	d10f      	bne.n	800586a <TIM_OC3_SetConfig+0x8a>
 800584a:	e006      	b.n	800585a <TIM_OC3_SetConfig+0x7a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800584c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800584e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005852:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005856:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800585a:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800585e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8005862:	ea46 0c05 	orr.w	ip, r6, r5
 8005866:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800586a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800586c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800586e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005870:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8005872:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8005874:	6203      	str	r3, [r0, #32]
}
 8005876:	4770      	bx	lr
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40013400 	.word	0x40013400
 8005880:	40014000 	.word	0x40014000
 8005884:	50014000 	.word	0x50014000
 8005888:	40014400 	.word	0x40014400
 800588c:	40014800 	.word	0x40014800

08005890 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005890:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005892:	6a02      	ldr	r2, [r0, #32]
{
 8005894:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005896:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800589a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800589e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a0:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058a2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058a6:	4d21      	ldr	r5, [pc, #132]	@ (800592c <TIM_OC4_SetConfig+0x9c>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058a8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058ac:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058b0:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80058b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058b6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058b8:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058bc:	d01f      	beq.n	80058fe <TIM_OC4_SetConfig+0x6e>
 80058be:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80058c2:	42a8      	cmp	r0, r5
 80058c4:	d01b      	beq.n	80058fe <TIM_OC4_SetConfig+0x6e>
 80058c6:	4d1a      	ldr	r5, [pc, #104]	@ (8005930 <TIM_OC4_SetConfig+0xa0>)
 80058c8:	42a8      	cmp	r0, r5
 80058ca:	d018      	beq.n	80058fe <TIM_OC4_SetConfig+0x6e>
 80058cc:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80058d0:	42a8      	cmp	r0, r5
 80058d2:	d014      	beq.n	80058fe <TIM_OC4_SetConfig+0x6e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d4:	4d17      	ldr	r5, [pc, #92]	@ (8005934 <TIM_OC4_SetConfig+0xa4>)
 80058d6:	42a8      	cmp	r0, r5
 80058d8:	d018      	beq.n	800590c <TIM_OC4_SetConfig+0x7c>
 80058da:	4d17      	ldr	r5, [pc, #92]	@ (8005938 <TIM_OC4_SetConfig+0xa8>)
 80058dc:	42a8      	cmp	r0, r5
 80058de:	d015      	beq.n	800590c <TIM_OC4_SetConfig+0x7c>
 80058e0:	4d16      	ldr	r5, [pc, #88]	@ (800593c <TIM_OC4_SetConfig+0xac>)
 80058e2:	42a8      	cmp	r0, r5
 80058e4:	d012      	beq.n	800590c <TIM_OC4_SetConfig+0x7c>
 80058e6:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80058ea:	42a8      	cmp	r0, r5
 80058ec:	d00e      	beq.n	800590c <TIM_OC4_SetConfig+0x7c>
 80058ee:	4d14      	ldr	r5, [pc, #80]	@ (8005940 <TIM_OC4_SetConfig+0xb0>)
 80058f0:	42a8      	cmp	r0, r5
 80058f2:	d00b      	beq.n	800590c <TIM_OC4_SetConfig+0x7c>
 80058f4:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80058f8:	42a8      	cmp	r0, r5
 80058fa:	d10f      	bne.n	800591c <TIM_OC4_SetConfig+0x8c>
 80058fc:	e006      	b.n	800590c <TIM_OC4_SetConfig+0x7c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005900:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005904:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005908:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800590c:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005910:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8005914:	ea46 0c05 	orr.w	ip, r6, r5
 8005918:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800591c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800591e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005920:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005922:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8005924:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8005926:	6203      	str	r3, [r0, #32]
}
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40013400 	.word	0x40013400
 8005934:	40014000 	.word	0x40014000
 8005938:	50014000 	.word	0x50014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800

08005944 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005944:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005946:	6a02      	ldr	r2, [r0, #32]
{
 8005948:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800594a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800594e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005950:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005952:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005954:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005956:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595a:	4d1b      	ldr	r5, [pc, #108]	@ (80059c8 <TIM_OC5_SetConfig+0x84>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800595c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005960:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005962:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005964:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005968:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800596a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	d01f      	beq.n	80059b0 <TIM_OC5_SetConfig+0x6c>
 8005970:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005974:	42a8      	cmp	r0, r5
 8005976:	d01b      	beq.n	80059b0 <TIM_OC5_SetConfig+0x6c>
 8005978:	4d14      	ldr	r5, [pc, #80]	@ (80059cc <TIM_OC5_SetConfig+0x88>)
 800597a:	42a8      	cmp	r0, r5
 800597c:	d018      	beq.n	80059b0 <TIM_OC5_SetConfig+0x6c>
 800597e:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005982:	42a8      	cmp	r0, r5
 8005984:	d014      	beq.n	80059b0 <TIM_OC5_SetConfig+0x6c>
 8005986:	4d12      	ldr	r5, [pc, #72]	@ (80059d0 <TIM_OC5_SetConfig+0x8c>)
 8005988:	42a8      	cmp	r0, r5
 800598a:	d011      	beq.n	80059b0 <TIM_OC5_SetConfig+0x6c>
 800598c:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005990:	42a8      	cmp	r0, r5
 8005992:	d00d      	beq.n	80059b0 <TIM_OC5_SetConfig+0x6c>
 8005994:	4d0f      	ldr	r5, [pc, #60]	@ (80059d4 <TIM_OC5_SetConfig+0x90>)
 8005996:	42a8      	cmp	r0, r5
 8005998:	d00a      	beq.n	80059b0 <TIM_OC5_SetConfig+0x6c>
 800599a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 800599e:	42a8      	cmp	r0, r5
 80059a0:	d006      	beq.n	80059b0 <TIM_OC5_SetConfig+0x6c>
 80059a2:	4d0d      	ldr	r5, [pc, #52]	@ (80059d8 <TIM_OC5_SetConfig+0x94>)
 80059a4:	42a8      	cmp	r0, r5
 80059a6:	d003      	beq.n	80059b0 <TIM_OC5_SetConfig+0x6c>
 80059a8:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80059ac:	42a8      	cmp	r0, r5
 80059ae:	d104      	bne.n	80059ba <TIM_OC5_SetConfig+0x76>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059b0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059b2:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059b6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059ba:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80059bc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 80059be:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80059c0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR5 = OC_Config->Pulse;
 80059c2:	6481      	str	r1, [r0, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 80059c4:	6203      	str	r3, [r0, #32]
}
 80059c6:	4770      	bx	lr
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40013400 	.word	0x40013400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40014400 	.word	0x40014400
 80059d8:	40014800 	.word	0x40014800

080059dc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059dc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059de:	6a02      	ldr	r2, [r0, #32]
{
 80059e0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059e2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80059e6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ea:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ec:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059ee:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f2:	4d1c      	ldr	r5, [pc, #112]	@ (8005a64 <TIM_OC6_SetConfig+0x88>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059f4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059fc:	688e      	ldr	r6, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a04:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a08:	d01f      	beq.n	8005a4a <TIM_OC6_SetConfig+0x6e>
 8005a0a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005a0e:	42a8      	cmp	r0, r5
 8005a10:	d01b      	beq.n	8005a4a <TIM_OC6_SetConfig+0x6e>
 8005a12:	4d15      	ldr	r5, [pc, #84]	@ (8005a68 <TIM_OC6_SetConfig+0x8c>)
 8005a14:	42a8      	cmp	r0, r5
 8005a16:	d018      	beq.n	8005a4a <TIM_OC6_SetConfig+0x6e>
 8005a18:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005a1c:	42a8      	cmp	r0, r5
 8005a1e:	d014      	beq.n	8005a4a <TIM_OC6_SetConfig+0x6e>
 8005a20:	4d12      	ldr	r5, [pc, #72]	@ (8005a6c <TIM_OC6_SetConfig+0x90>)
 8005a22:	42a8      	cmp	r0, r5
 8005a24:	d011      	beq.n	8005a4a <TIM_OC6_SetConfig+0x6e>
 8005a26:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005a2a:	42a8      	cmp	r0, r5
 8005a2c:	d00d      	beq.n	8005a4a <TIM_OC6_SetConfig+0x6e>
 8005a2e:	4d10      	ldr	r5, [pc, #64]	@ (8005a70 <TIM_OC6_SetConfig+0x94>)
 8005a30:	42a8      	cmp	r0, r5
 8005a32:	d00a      	beq.n	8005a4a <TIM_OC6_SetConfig+0x6e>
 8005a34:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005a38:	42a8      	cmp	r0, r5
 8005a3a:	d006      	beq.n	8005a4a <TIM_OC6_SetConfig+0x6e>
 8005a3c:	4d0d      	ldr	r5, [pc, #52]	@ (8005a74 <TIM_OC6_SetConfig+0x98>)
 8005a3e:	42a8      	cmp	r0, r5
 8005a40:	d003      	beq.n	8005a4a <TIM_OC6_SetConfig+0x6e>
 8005a42:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8005a46:	42a8      	cmp	r0, r5
 8005a48:	d104      	bne.n	8005a54 <TIM_OC6_SetConfig+0x78>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a4a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a4c:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a50:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a54:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005a56:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005a58:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005a5a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR6 = OC_Config->Pulse;
 8005a5c:	64c1      	str	r1, [r0, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8005a5e:	6203      	str	r3, [r0, #32]
}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40013400 	.word	0x40013400
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40014400 	.word	0x40014400
 8005a74:	40014800 	.word	0x40014800

08005a78 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f000 80a8 	beq.w	8005bce <HAL_TIM_Base_Init+0x156>
{
 8005a7e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a80:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005a84:	4604      	mov	r4, r0
 8005a86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 809a 	beq.w	8005bc4 <HAL_TIM_Base_Init+0x14c>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	2202      	movs	r2, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a92:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a94:	495d      	ldr	r1, [pc, #372]	@ (8005c0c <HAL_TIM_Base_Init+0x194>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005a96:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a9a:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005a9c:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a9e:	d048      	beq.n	8005b32 <HAL_TIM_Base_Init+0xba>
 8005aa0:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005aa4:	428b      	cmp	r3, r1
 8005aa6:	d044      	beq.n	8005b32 <HAL_TIM_Base_Init+0xba>
 8005aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aac:	d078      	beq.n	8005ba0 <HAL_TIM_Base_Init+0x128>
 8005aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ab2:	d075      	beq.n	8005ba0 <HAL_TIM_Base_Init+0x128>
 8005ab4:	4956      	ldr	r1, [pc, #344]	@ (8005c10 <HAL_TIM_Base_Init+0x198>)
 8005ab6:	428b      	cmp	r3, r1
 8005ab8:	d072      	beq.n	8005ba0 <HAL_TIM_Base_Init+0x128>
 8005aba:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005abe:	428b      	cmp	r3, r1
 8005ac0:	d06e      	beq.n	8005ba0 <HAL_TIM_Base_Init+0x128>
 8005ac2:	4954      	ldr	r1, [pc, #336]	@ (8005c14 <HAL_TIM_Base_Init+0x19c>)
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	d06b      	beq.n	8005ba0 <HAL_TIM_Base_Init+0x128>
 8005ac8:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005acc:	428b      	cmp	r3, r1
 8005ace:	d067      	beq.n	8005ba0 <HAL_TIM_Base_Init+0x128>
 8005ad0:	4951      	ldr	r1, [pc, #324]	@ (8005c18 <HAL_TIM_Base_Init+0x1a0>)
 8005ad2:	428b      	cmp	r3, r1
 8005ad4:	d064      	beq.n	8005ba0 <HAL_TIM_Base_Init+0x128>
 8005ad6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005ada:	428b      	cmp	r3, r1
 8005adc:	d07f      	beq.n	8005bde <HAL_TIM_Base_Init+0x166>
 8005ade:	494f      	ldr	r1, [pc, #316]	@ (8005c1c <HAL_TIM_Base_Init+0x1a4>)
 8005ae0:	428b      	cmp	r3, r1
 8005ae2:	f000 8081 	beq.w	8005be8 <HAL_TIM_Base_Init+0x170>
 8005ae6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005aea:	428b      	cmp	r3, r1
 8005aec:	d021      	beq.n	8005b32 <HAL_TIM_Base_Init+0xba>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aee:	494c      	ldr	r1, [pc, #304]	@ (8005c20 <HAL_TIM_Base_Init+0x1a8>)
 8005af0:	428b      	cmp	r3, r1
 8005af2:	d059      	beq.n	8005ba8 <HAL_TIM_Base_Init+0x130>
 8005af4:	494b      	ldr	r1, [pc, #300]	@ (8005c24 <HAL_TIM_Base_Init+0x1ac>)
 8005af6:	428b      	cmp	r3, r1
 8005af8:	d06b      	beq.n	8005bd2 <HAL_TIM_Base_Init+0x15a>
 8005afa:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005afe:	428b      	cmp	r3, r1
 8005b00:	d067      	beq.n	8005bd2 <HAL_TIM_Base_Init+0x15a>
 8005b02:	4949      	ldr	r1, [pc, #292]	@ (8005c28 <HAL_TIM_Base_Init+0x1b0>)
 8005b04:	428b      	cmp	r3, r1
 8005b06:	d064      	beq.n	8005bd2 <HAL_TIM_Base_Init+0x15a>
 8005b08:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005b0c:	428b      	cmp	r3, r1
 8005b0e:	d060      	beq.n	8005bd2 <HAL_TIM_Base_Init+0x15a>
 8005b10:	4946      	ldr	r1, [pc, #280]	@ (8005c2c <HAL_TIM_Base_Init+0x1b4>)
 8005b12:	428b      	cmp	r3, r1
 8005b14:	d05d      	beq.n	8005bd2 <HAL_TIM_Base_Init+0x15a>
 8005b16:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005b1a:	428b      	cmp	r3, r1
 8005b1c:	d059      	beq.n	8005bd2 <HAL_TIM_Base_Init+0x15a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1e:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8005b20:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b22:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b28:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005b2a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b2c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b2e:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b30:	e012      	b.n	8005b58 <HAL_TIM_Base_Init+0xe0>
    tmpcr1 |= Structure->CounterMode;
 8005b32:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b34:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b38:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8005b3a:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b40:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b42:	69a1      	ldr	r1, [r4, #24]
 8005b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b48:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005b4a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b4c:	68e2      	ldr	r2, [r4, #12]
 8005b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b50:	6862      	ldr	r2, [r4, #4]
 8005b52:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005b54:	6962      	ldr	r2, [r4, #20]
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005b58:	2201      	movs	r2, #1
 8005b5a:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	07d2      	lsls	r2, r2, #31
 8005b60:	d503      	bpl.n	8005b6a <HAL_TIM_Base_Init+0xf2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b70:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005b74:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005b78:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005b7c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005b80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b88:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005b8c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005b90:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005b94:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005b9c:	2000      	movs	r0, #0
}
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005ba0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ba2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ba6:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ba8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005baa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bae:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb0:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb8:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005bba:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005bbc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bbe:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bc0:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc2:	e7c9      	b.n	8005b58 <HAL_TIM_Base_Init+0xe0>
    htim->Lock = HAL_UNLOCKED;
 8005bc4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005bc8:	f7fc fa7a 	bl	80020c0 <HAL_TIM_Base_MspInit>
 8005bcc:	e760      	b.n	8005a90 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8005bce:	2001      	movs	r0, #1
}
 8005bd0:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bd2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bd4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bda:	4302      	orrs	r2, r0
 8005bdc:	e7b2      	b.n	8005b44 <HAL_TIM_Base_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8005bde:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005be0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005be4:	430a      	orrs	r2, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be6:	e782      	b.n	8005aee <HAL_TIM_Base_Init+0x76>
    tmpcr1 |= Structure->CounterMode;
 8005be8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bee:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8005bf0:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf6:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf8:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bfe:	4302      	orrs	r2, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c00:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8005c02:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8005c04:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c06:	62d9      	str	r1, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c08:	629a      	str	r2, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c0a:	e7a3      	b.n	8005b54 <HAL_TIM_Base_Init+0xdc>
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40000800 	.word	0x40000800
 8005c18:	40000c00 	.word	0x40000c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	50000c00 	.word	0x50000c00
 8005c24:	40014000 	.word	0x40014000
 8005c28:	40014400 	.word	0x40014400
 8005c2c:	40014800 	.word	0x40014800

08005c30 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop

08005c34 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005c34:	2800      	cmp	r0, #0
 8005c36:	f000 80a8 	beq.w	8005d8a <HAL_TIM_PWM_Init+0x156>
{
 8005c3a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005c40:	4604      	mov	r4, r0
 8005c42:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 809a 	beq.w	8005d80 <HAL_TIM_PWM_Init+0x14c>
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4c:	2202      	movs	r2, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c4e:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	495d      	ldr	r1, [pc, #372]	@ (8005dc8 <HAL_TIM_PWM_Init+0x194>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005c52:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c56:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005c58:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c5a:	d048      	beq.n	8005cee <HAL_TIM_PWM_Init+0xba>
 8005c5c:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005c60:	428b      	cmp	r3, r1
 8005c62:	d044      	beq.n	8005cee <HAL_TIM_PWM_Init+0xba>
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c68:	d078      	beq.n	8005d5c <HAL_TIM_PWM_Init+0x128>
 8005c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c6e:	d075      	beq.n	8005d5c <HAL_TIM_PWM_Init+0x128>
 8005c70:	4956      	ldr	r1, [pc, #344]	@ (8005dcc <HAL_TIM_PWM_Init+0x198>)
 8005c72:	428b      	cmp	r3, r1
 8005c74:	d072      	beq.n	8005d5c <HAL_TIM_PWM_Init+0x128>
 8005c76:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005c7a:	428b      	cmp	r3, r1
 8005c7c:	d06e      	beq.n	8005d5c <HAL_TIM_PWM_Init+0x128>
 8005c7e:	4954      	ldr	r1, [pc, #336]	@ (8005dd0 <HAL_TIM_PWM_Init+0x19c>)
 8005c80:	428b      	cmp	r3, r1
 8005c82:	d06b      	beq.n	8005d5c <HAL_TIM_PWM_Init+0x128>
 8005c84:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	d067      	beq.n	8005d5c <HAL_TIM_PWM_Init+0x128>
 8005c8c:	4951      	ldr	r1, [pc, #324]	@ (8005dd4 <HAL_TIM_PWM_Init+0x1a0>)
 8005c8e:	428b      	cmp	r3, r1
 8005c90:	d064      	beq.n	8005d5c <HAL_TIM_PWM_Init+0x128>
 8005c92:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005c96:	428b      	cmp	r3, r1
 8005c98:	d07f      	beq.n	8005d9a <HAL_TIM_PWM_Init+0x166>
 8005c9a:	494f      	ldr	r1, [pc, #316]	@ (8005dd8 <HAL_TIM_PWM_Init+0x1a4>)
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	f000 8081 	beq.w	8005da4 <HAL_TIM_PWM_Init+0x170>
 8005ca2:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005ca6:	428b      	cmp	r3, r1
 8005ca8:	d021      	beq.n	8005cee <HAL_TIM_PWM_Init+0xba>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005caa:	494c      	ldr	r1, [pc, #304]	@ (8005ddc <HAL_TIM_PWM_Init+0x1a8>)
 8005cac:	428b      	cmp	r3, r1
 8005cae:	d059      	beq.n	8005d64 <HAL_TIM_PWM_Init+0x130>
 8005cb0:	494b      	ldr	r1, [pc, #300]	@ (8005de0 <HAL_TIM_PWM_Init+0x1ac>)
 8005cb2:	428b      	cmp	r3, r1
 8005cb4:	d06b      	beq.n	8005d8e <HAL_TIM_PWM_Init+0x15a>
 8005cb6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005cba:	428b      	cmp	r3, r1
 8005cbc:	d067      	beq.n	8005d8e <HAL_TIM_PWM_Init+0x15a>
 8005cbe:	4949      	ldr	r1, [pc, #292]	@ (8005de4 <HAL_TIM_PWM_Init+0x1b0>)
 8005cc0:	428b      	cmp	r3, r1
 8005cc2:	d064      	beq.n	8005d8e <HAL_TIM_PWM_Init+0x15a>
 8005cc4:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005cc8:	428b      	cmp	r3, r1
 8005cca:	d060      	beq.n	8005d8e <HAL_TIM_PWM_Init+0x15a>
 8005ccc:	4946      	ldr	r1, [pc, #280]	@ (8005de8 <HAL_TIM_PWM_Init+0x1b4>)
 8005cce:	428b      	cmp	r3, r1
 8005cd0:	d05d      	beq.n	8005d8e <HAL_TIM_PWM_Init+0x15a>
 8005cd2:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8005cd6:	428b      	cmp	r3, r1
 8005cd8:	d059      	beq.n	8005d8e <HAL_TIM_PWM_Init+0x15a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cda:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8005cdc:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cde:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ce4:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005ce6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce8:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cea:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cec:	e012      	b.n	8005d14 <HAL_TIM_PWM_Init+0xe0>
    tmpcr1 |= Structure->CounterMode;
 8005cee:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cf4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8005cf6:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfc:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cfe:	69a1      	ldr	r1, [r4, #24]
 8005d00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d04:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005d06:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d08:	68e2      	ldr	r2, [r4, #12]
 8005d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d0c:	6862      	ldr	r2, [r4, #4]
 8005d0e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005d10:	6962      	ldr	r2, [r4, #20]
 8005d12:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005d14:	2201      	movs	r2, #1
 8005d16:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	07d2      	lsls	r2, r2, #31
 8005d1c:	d503      	bpl.n	8005d26 <HAL_TIM_PWM_Init+0xf2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005d30:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005d34:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005d38:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005d48:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005d4c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005d50:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005d58:	2000      	movs	r0, #0
}
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005d5c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d62:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d64:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d6a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6c:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d72:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d74:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005d76:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005d78:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d7a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d7c:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d7e:	e7c9      	b.n	8005d14 <HAL_TIM_PWM_Init+0xe0>
    htim->Lock = HAL_UNLOCKED;
 8005d80:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005d84:	f7ff ff54 	bl	8005c30 <HAL_TIM_PWM_MspInit>
 8005d88:	e760      	b.n	8005c4c <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 8005d8a:	2001      	movs	r0, #1
}
 8005d8c:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d8e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d90:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d94:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d96:	4302      	orrs	r2, r0
 8005d98:	e7b2      	b.n	8005d00 <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8005d9a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d9c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005da0:	430a      	orrs	r2, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da2:	e782      	b.n	8005caa <HAL_TIM_PWM_Init+0x76>
    tmpcr1 |= Structure->CounterMode;
 8005da4:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005daa:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db2:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db4:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dba:	4302      	orrs	r2, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dbc:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8005dbe:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8005dc0:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc2:	62d9      	str	r1, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc6:	e7a3      	b.n	8005d10 <HAL_TIM_PWM_Init+0xdc>
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800
 8005dd4:	40000c00 	.word	0x40000c00
 8005dd8:	40013400 	.word	0x40013400
 8005ddc:	50000c00 	.word	0x50000c00
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800

08005dec <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005dec:	2910      	cmp	r1, #16
 8005dee:	d80a      	bhi.n	8005e06 <HAL_TIM_PWM_Start+0x1a>
 8005df0:	e8df f001 	tbb	[pc, r1]
 8005df4:	0909091a 	.word	0x0909091a
 8005df8:	09090969 	.word	0x09090969
 8005dfc:	09090971 	.word	0x09090971
 8005e00:	09090979 	.word	0x09090979
 8005e04:	81          	.byte	0x81
 8005e05:	00          	.byte	0x00
 8005e06:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	f040 808c 	bne.w	8005f28 <HAL_TIM_PWM_Start+0x13c>
 8005e10:	1f0b      	subs	r3, r1, #4
 8005e12:	2b0c      	cmp	r3, #12
 8005e14:	d877      	bhi.n	8005f06 <HAL_TIM_PWM_Start+0x11a>
 8005e16:	e8df f003 	tbb	[pc, r3]
 8005e1a:	765a      	.short	0x765a
 8005e1c:	76627676 	.word	0x76627676
 8005e20:	766a7676 	.word	0x766a7676
 8005e24:	7676      	.short	0x7676
 8005e26:	72          	.byte	0x72
 8005e27:	00          	.byte	0x00
 8005e28:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d17b      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x13c>
 8005e30:	2302      	movs	r3, #2
 8005e32:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8005e36:	2201      	movs	r2, #1
 8005e38:	6803      	ldr	r3, [r0, #0]
 8005e3a:	f001 011f 	and.w	r1, r1, #31
 8005e3e:	6a18      	ldr	r0, [r3, #32]
 8005e40:	408a      	lsls	r2, r1
 8005e42:	ea20 0002 	bic.w	r0, r0, r2
 8005e46:	b410      	push	{r4}
 8005e48:	6218      	str	r0, [r3, #32]
 8005e4a:	6a19      	ldr	r1, [r3, #32]
 8005e4c:	4c4e      	ldr	r4, [pc, #312]	@ (8005f88 <HAL_TIM_PWM_Start+0x19c>)
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	621a      	str	r2, [r3, #32]
 8005e54:	d063      	beq.n	8005f1e <HAL_TIM_PWM_Start+0x132>
 8005e56:	4a4d      	ldr	r2, [pc, #308]	@ (8005f8c <HAL_TIM_PWM_Start+0x1a0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d060      	beq.n	8005f1e <HAL_TIM_PWM_Start+0x132>
 8005e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8005f90 <HAL_TIM_PWM_Start+0x1a4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d05d      	beq.n	8005f1e <HAL_TIM_PWM_Start+0x132>
 8005e62:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d051      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x122>
 8005e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8005f94 <HAL_TIM_PWM_Start+0x1a8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d05d      	beq.n	8005f2c <HAL_TIM_PWM_Start+0x140>
 8005e70:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d04a      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x122>
 8005e78:	4a47      	ldr	r2, [pc, #284]	@ (8005f98 <HAL_TIM_PWM_Start+0x1ac>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d062      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x158>
 8005e7e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d043      	beq.n	8005f0e <HAL_TIM_PWM_Start+0x122>
 8005e86:	4a45      	ldr	r2, [pc, #276]	@ (8005f9c <HAL_TIM_PWM_Start+0x1b0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d067      	beq.n	8005f5c <HAL_TIM_PWM_Start+0x170>
 8005e8c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d06b      	beq.n	8005f6c <HAL_TIM_PWM_Start+0x180>
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e98:	d005      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e9e:	d002      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005ea0:	4a3f      	ldr	r2, [pc, #252]	@ (8005fa0 <HAL_TIM_PWM_Start+0x1b4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d168      	bne.n	8005f78 <HAL_TIM_PWM_Start+0x18c>
 8005ea6:	6899      	ldr	r1, [r3, #8]
 8005ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8005fa4 <HAL_TIM_PWM_Start+0x1b8>)
 8005eaa:	400a      	ands	r2, r1
 8005eac:	2a06      	cmp	r2, #6
 8005eae:	d006      	beq.n	8005ebe <HAL_TIM_PWM_Start+0xd2>
 8005eb0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_PWM_Start+0xd2>
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	f042 0201 	orr.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d12c      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x13c>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8005ed4:	e7af      	b.n	8005e36 <HAL_TIM_PWM_Start+0x4a>
 8005ed6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d124      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x13c>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8005ee4:	e7a7      	b.n	8005e36 <HAL_TIM_PWM_Start+0x4a>
 8005ee6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d11c      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x13c>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8005ef4:	e79f      	b.n	8005e36 <HAL_TIM_PWM_Start+0x4a>
 8005ef6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d114      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x13c>
 8005efe:	2302      	movs	r3, #2
 8005f00:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 8005f04:	e797      	b.n	8005e36 <HAL_TIM_PWM_Start+0x4a>
 8005f06:	2302      	movs	r3, #2
 8005f08:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 8005f0c:	e793      	b.n	8005e36 <HAL_TIM_PWM_Start+0x4a>
 8005f0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f16:	4a24      	ldr	r2, [pc, #144]	@ (8005fa8 <HAL_TIM_PWM_Start+0x1bc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d0c4      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005f1c:	e00a      	b.n	8005f34 <HAL_TIM_PWM_Start+0x148>
 8005f1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f26:	e7be      	b.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005f28:	2001      	movs	r0, #1
 8005f2a:	4770      	bx	lr
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f32:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f34:	4a17      	ldr	r2, [pc, #92]	@ (8005f94 <HAL_TIM_PWM_Start+0x1a8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d0b5      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005f3a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d1b9      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0xca>
 8005f42:	e7b0      	b.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f4c:	4a17      	ldr	r2, [pc, #92]	@ (8005fac <HAL_TIM_PWM_Start+0x1c0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d0a9      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005f52:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d1dd      	bne.n	8005f16 <HAL_TIM_PWM_Start+0x12a>
 8005f5a:	e7a4      	b.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f62:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f64:	4a12      	ldr	r2, [pc, #72]	@ (8005fb0 <HAL_TIM_PWM_Start+0x1c4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d09d      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005f6a:	e7ef      	b.n	8005f4c <HAL_TIM_PWM_Start+0x160>
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005f70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f74:	644a      	str	r2, [r1, #68]	@ 0x44
 8005f76:	e7dd      	b.n	8005f34 <HAL_TIM_PWM_Start+0x148>
 8005f78:	4a0e      	ldr	r2, [pc, #56]	@ (8005fb4 <HAL_TIM_PWM_Start+0x1c8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d093      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8005fb8 <HAL_TIM_PWM_Start+0x1cc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d1ef      	bne.n	8005f64 <HAL_TIM_PWM_Start+0x178>
 8005f84:	e78f      	b.n	8005ea6 <HAL_TIM_PWM_Start+0xba>
 8005f86:	bf00      	nop
 8005f88:	40012c00 	.word	0x40012c00
 8005f8c:	50012c00 	.word	0x50012c00
 8005f90:	40013400 	.word	0x40013400
 8005f94:	40014000 	.word	0x40014000
 8005f98:	40014400 	.word	0x40014400
 8005f9c:	40014800 	.word	0x40014800
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	00010007 	.word	0x00010007
 8005fa8:	50013400 	.word	0x50013400
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	50000800 	.word	0x50000800
 8005fb4:	50000400 	.word	0x50000400
 8005fb8:	40000800 	.word	0x40000800

08005fbc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005fbc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005fc0:	2a01      	cmp	r2, #1
 8005fc2:	d075      	beq.n	80060b0 <HAL_TIM_ConfigClockSource+0xf4>
 8005fc4:	4603      	mov	r3, r0
{
 8005fc6:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8005fc8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005fca:	2502      	movs	r5, #2
  tmpsmcr = htim->Instance->SMCR;
 8005fcc:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(htim);
 8005fce:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd2:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005fd6:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd8:	4c5e      	ldr	r4, [pc, #376]	@ (8006154 <HAL_TIM_ConfigClockSource+0x198>)
 8005fda:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8005fdc:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005fde:	680c      	ldr	r4, [r1, #0]
 8005fe0:	2c70      	cmp	r4, #112	@ 0x70
 8005fe2:	f000 8091 	beq.w	8006108 <HAL_TIM_ConfigClockSource+0x14c>
 8005fe6:	d827      	bhi.n	8006038 <HAL_TIM_ConfigClockSource+0x7c>
 8005fe8:	2c50      	cmp	r4, #80	@ 0x50
 8005fea:	d063      	beq.n	80060b4 <HAL_TIM_ConfigClockSource+0xf8>
 8005fec:	d82d      	bhi.n	800604a <HAL_TIM_ConfigClockSource+0x8e>
 8005fee:	2c40      	cmp	r4, #64	@ 0x40
 8005ff0:	f040 809a 	bne.w	8006128 <HAL_TIM_ConfigClockSource+0x16c>
                               sClockSourceConfig->ClockPolarity,
 8005ff4:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff6:	68cc      	ldr	r4, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff8:	6a11      	ldr	r1, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ffa:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005ffe:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006000:	6a11      	ldr	r1, [r2, #32]
 8006002:	f021 0101 	bic.w	r1, r1, #1
 8006006:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006008:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800600a:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800600e:	ea41 1104 	orr.w	r1, r1, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006012:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006014:	6210      	str	r0, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006016:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006018:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800601c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006020:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006024:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006026:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006028:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800602a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800602c:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006034:	bc30      	pop	{r4, r5}
 8006036:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006038:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 800603c:	d054      	beq.n	80060e8 <HAL_TIM_ConfigClockSource+0x12c>
 800603e:	d821      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0xc8>
 8006040:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8006044:	bf18      	it	ne
 8006046:	2001      	movne	r0, #1
 8006048:	e7ee      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x6c>
 800604a:	2c60      	cmp	r4, #96	@ 0x60
 800604c:	d1ec      	bne.n	8006028 <HAL_TIM_ConfigClockSource+0x6c>
                               sClockSourceConfig->ClockPolarity,
 800604e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006050:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8006052:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006054:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006058:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605c:	6a10      	ldr	r0, [r2, #32]
 800605e:	f020 0010 	bic.w	r0, r0, #16
 8006062:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006064:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006066:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800606a:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800606e:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006070:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006072:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006074:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006078:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800607c:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006080:	6091      	str	r1, [r2, #8]
}
 8006082:	e7d0      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8006084:	4934      	ldr	r1, [pc, #208]	@ (8006158 <HAL_TIM_ConfigClockSource+0x19c>)
 8006086:	428c      	cmp	r4, r1
 8006088:	d008      	beq.n	800609c <HAL_TIM_ConfigClockSource+0xe0>
 800608a:	d857      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x180>
 800608c:	f024 0110 	bic.w	r1, r4, #16
 8006090:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006094:	d002      	beq.n	800609c <HAL_TIM_ConfigClockSource+0xe0>
 8006096:	4931      	ldr	r1, [pc, #196]	@ (800615c <HAL_TIM_ConfigClockSource+0x1a0>)
 8006098:	428c      	cmp	r4, r1
 800609a:	d1c5      	bne.n	8006028 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 800609c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800609e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80060a2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060a6:	4321      	orrs	r1, r4
 80060a8:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 80060ac:	6091      	str	r1, [r2, #8]
}
 80060ae:	e7ba      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 80060b0:	2002      	movs	r0, #2
}
 80060b2:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 80060b4:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80060b6:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80060b8:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ba:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80060be:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c0:	6a11      	ldr	r1, [r2, #32]
 80060c2:	f021 0101 	bic.w	r1, r1, #1
 80060c6:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c8:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ca:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060ce:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80060d2:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80060d4:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80060d6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d8:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80060dc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060e0:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80060e4:	6091      	str	r1, [r2, #8]
}
 80060e6:	e79e      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060e8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80060ec:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060ee:	4328      	orrs	r0, r5
 80060f0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f2:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80060fa:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060fc:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060fe:	6891      	ldr	r1, [r2, #8]
 8006100:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8006104:	6091      	str	r1, [r2, #8]
      break;
 8006106:	e78e      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006108:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800610c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800610e:	4328      	orrs	r0, r5
 8006110:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006112:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006116:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800611a:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800611c:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800611e:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006120:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006124:	6091      	str	r1, [r2, #8]
      break;
 8006126:	e77e      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8006128:	f63f af7e 	bhi.w	8006028 <HAL_TIM_ConfigClockSource+0x6c>
 800612c:	2c20      	cmp	r4, #32
 800612e:	d0b5      	beq.n	800609c <HAL_TIM_ConfigClockSource+0xe0>
 8006130:	d80c      	bhi.n	800614c <HAL_TIM_ConfigClockSource+0x190>
 8006132:	f034 0110 	bics.w	r1, r4, #16
 8006136:	f47f af77 	bne.w	8006028 <HAL_TIM_ConfigClockSource+0x6c>
 800613a:	e7af      	b.n	800609c <HAL_TIM_ConfigClockSource+0xe0>
 800613c:	4908      	ldr	r1, [pc, #32]	@ (8006160 <HAL_TIM_ConfigClockSource+0x1a4>)
 800613e:	428c      	cmp	r4, r1
 8006140:	d0ac      	beq.n	800609c <HAL_TIM_ConfigClockSource+0xe0>
 8006142:	3130      	adds	r1, #48	@ 0x30
 8006144:	428c      	cmp	r4, r1
 8006146:	f47f af6f 	bne.w	8006028 <HAL_TIM_ConfigClockSource+0x6c>
 800614a:	e7a7      	b.n	800609c <HAL_TIM_ConfigClockSource+0xe0>
 800614c:	2c30      	cmp	r4, #48	@ 0x30
 800614e:	d0a5      	beq.n	800609c <HAL_TIM_ConfigClockSource+0xe0>
      status = HAL_ERROR;
 8006150:	2001      	movs	r0, #1
 8006152:	e769      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x6c>
 8006154:	ffce0088 	.word	0xffce0088
 8006158:	00100030 	.word	0x00100030
 800615c:	00100020 	.word	0x00100020
 8006160:	00100040 	.word	0x00100040

08006164 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8006164:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006166:	6a02      	ldr	r2, [r0, #32]
{
 8006168:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616a:	f022 0210 	bic.w	r2, r2, #16
 800616e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006170:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006172:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006174:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006176:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800617a:	4d21      	ldr	r5, [pc, #132]	@ (8006200 <TIM_OC2_SetConfig+0x9c>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800617c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006180:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006184:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006186:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800618a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800618c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006190:	d01f      	beq.n	80061d2 <TIM_OC2_SetConfig+0x6e>
 8006192:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8006196:	42a8      	cmp	r0, r5
 8006198:	d01b      	beq.n	80061d2 <TIM_OC2_SetConfig+0x6e>
 800619a:	4d1a      	ldr	r5, [pc, #104]	@ (8006204 <TIM_OC2_SetConfig+0xa0>)
 800619c:	42a8      	cmp	r0, r5
 800619e:	d018      	beq.n	80061d2 <TIM_OC2_SetConfig+0x6e>
 80061a0:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80061a4:	42a8      	cmp	r0, r5
 80061a6:	d014      	beq.n	80061d2 <TIM_OC2_SetConfig+0x6e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a8:	4d17      	ldr	r5, [pc, #92]	@ (8006208 <TIM_OC2_SetConfig+0xa4>)
 80061aa:	42a8      	cmp	r0, r5
 80061ac:	d018      	beq.n	80061e0 <TIM_OC2_SetConfig+0x7c>
 80061ae:	4d17      	ldr	r5, [pc, #92]	@ (800620c <TIM_OC2_SetConfig+0xa8>)
 80061b0:	42a8      	cmp	r0, r5
 80061b2:	d015      	beq.n	80061e0 <TIM_OC2_SetConfig+0x7c>
 80061b4:	4d16      	ldr	r5, [pc, #88]	@ (8006210 <TIM_OC2_SetConfig+0xac>)
 80061b6:	42a8      	cmp	r0, r5
 80061b8:	d012      	beq.n	80061e0 <TIM_OC2_SetConfig+0x7c>
 80061ba:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80061be:	42a8      	cmp	r0, r5
 80061c0:	d00e      	beq.n	80061e0 <TIM_OC2_SetConfig+0x7c>
 80061c2:	4d14      	ldr	r5, [pc, #80]	@ (8006214 <TIM_OC2_SetConfig+0xb0>)
 80061c4:	42a8      	cmp	r0, r5
 80061c6:	d00b      	beq.n	80061e0 <TIM_OC2_SetConfig+0x7c>
 80061c8:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80061cc:	42a8      	cmp	r0, r5
 80061ce:	d10f      	bne.n	80061f0 <TIM_OC2_SetConfig+0x8c>
 80061d0:	e006      	b.n	80061e0 <TIM_OC2_SetConfig+0x7c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80061d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80061dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061e0:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061e4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 80061e8:	ea46 0c05 	orr.w	ip, r6, r5
 80061ec:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80061f0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80061f2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80061f4:	6182      	str	r2, [r0, #24]
}
 80061f6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80061f8:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80061fa:	6203      	str	r3, [r0, #32]
}
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40013400 	.word	0x40013400
 8006208:	40014000 	.word	0x40014000
 800620c:	50014000 	.word	0x50014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800

08006218 <HAL_TIM_PWM_ConfigChannel>:
{
 8006218:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800621a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800621e:	2b01      	cmp	r3, #1
 8006220:	d07c      	beq.n	800631c <HAL_TIM_PWM_ConfigChannel+0x104>
 8006222:	2301      	movs	r3, #1
 8006224:	4604      	mov	r4, r0
 8006226:	460d      	mov	r5, r1
 8006228:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800622c:	2a14      	cmp	r2, #20
 800622e:	d80c      	bhi.n	800624a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006230:	e8df f002 	tbb	[pc, r2]
 8006234:	0b0b0b22 	.word	0x0b0b0b22
 8006238:	0b0b0b32 	.word	0x0b0b0b32
 800623c:	0b0b0b43 	.word	0x0b0b0b43
 8006240:	0b0b0b53 	.word	0x0b0b0b53
 8006244:	0b0b0b64 	.word	0x0b0b0b64
 8006248:	10          	.byte	0x10
 8006249:	00          	.byte	0x00
 800624a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800624c:	2300      	movs	r3, #0
 800624e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006252:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006254:	6800      	ldr	r0, [r0, #0]
 8006256:	f7ff fbc1 	bl	80059dc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800625a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800625c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800625e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006262:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006264:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006266:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800626a:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800626c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800626e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006272:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8006274:	2000      	movs	r0, #0
 8006276:	e7e9      	b.n	800624c <HAL_TIM_PWM_ConfigChannel+0x34>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006278:	6800      	ldr	r0, [r0, #0]
 800627a:	f7ff fa5d 	bl	8005738 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800627e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006280:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006282:	f043 0308 	orr.w	r3, r3, #8
 8006286:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006288:	6983      	ldr	r3, [r0, #24]
 800628a:	f023 0304 	bic.w	r3, r3, #4
 800628e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006290:	6983      	ldr	r3, [r0, #24]
 8006292:	4313      	orrs	r3, r2
 8006294:	6183      	str	r3, [r0, #24]
      break;
 8006296:	e7ed      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006298:	6800      	ldr	r0, [r0, #0]
 800629a:	f7ff ff63 	bl	8006164 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800629e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062a0:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062a6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062a8:	6983      	ldr	r3, [r0, #24]
 80062aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062ae:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062b0:	6983      	ldr	r3, [r0, #24]
 80062b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062b6:	6183      	str	r3, [r0, #24]
      break;
 80062b8:	e7dc      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ba:	6800      	ldr	r0, [r0, #0]
 80062bc:	f7ff fa90 	bl	80057e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062c0:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c2:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062c4:	f043 0308 	orr.w	r3, r3, #8
 80062c8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ca:	69c3      	ldr	r3, [r0, #28]
 80062cc:	f023 0304 	bic.w	r3, r3, #4
 80062d0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062d2:	69c3      	ldr	r3, [r0, #28]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61c3      	str	r3, [r0, #28]
      break;
 80062d8:	e7cc      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	f7ff fad8 	bl	8005890 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062e0:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062e2:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062e8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ea:	69c3      	ldr	r3, [r0, #28]
 80062ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062f0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062f2:	69c3      	ldr	r3, [r0, #28]
 80062f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062f8:	61c3      	str	r3, [r0, #28]
      break;
 80062fa:	e7bb      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062fc:	6800      	ldr	r0, [r0, #0]
 80062fe:	f7ff fb21 	bl	8005944 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006302:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006304:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006306:	f043 0308 	orr.w	r3, r3, #8
 800630a:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800630c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800630e:	f023 0304 	bic.w	r3, r3, #4
 8006312:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006314:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006316:	4313      	orrs	r3, r2
 8006318:	6503      	str	r3, [r0, #80]	@ 0x50
      break;
 800631a:	e7ab      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x5c>
  __HAL_LOCK(htim);
 800631c:	2002      	movs	r0, #2
}
 800631e:	bd38      	pop	{r3, r4, r5, pc}

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006320:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006324:	2b01      	cmp	r3, #1
 8006326:	d062      	beq.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xce>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	2302      	movs	r3, #2
{
 800632a:	b430      	push	{r4, r5}

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800632c:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800632e:	4d31      	ldr	r5, [pc, #196]	@ (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006334:	42aa      	cmp	r2, r5
 8006336:	4684      	mov	ip, r0
  tmpcr2 = htim->Instance->CR2;
 8006338:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800633a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800633c:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800633e:	d040      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006340:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8006344:	42aa      	cmp	r2, r5
 8006346:	d047      	beq.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006348:	4d2b      	ldr	r5, [pc, #172]	@ (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800634a:	42aa      	cmp	r2, r5
 800634c:	d039      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634e:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8006352:	42aa      	cmp	r2, r5
 8006354:	d035      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
  tmpcr2 &= ~TIM_CR2_MMS;
 8006356:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800635a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800635e:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006360:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006364:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006366:	d01e      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006368:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800636c:	d01b      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800636e:	4b23      	ldr	r3, [pc, #140]	@ (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006370:	429a      	cmp	r2, r3
 8006372:	d018      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006374:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8006378:	429a      	cmp	r2, r3
 800637a:	d014      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800637c:	4b20      	ldr	r3, [pc, #128]	@ (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800637e:	429a      	cmp	r2, r3
 8006380:	d011      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006382:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8006386:	429a      	cmp	r2, r3
 8006388:	d00d      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800638a:	4b1e      	ldr	r3, [pc, #120]	@ (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800638c:	429a      	cmp	r2, r3
 800638e:	d00a      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006390:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8006394:	429a      	cmp	r2, r3
 8006396:	d006      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006398:	4b1b      	ldr	r3, [pc, #108]	@ (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800639a:	429a      	cmp	r2, r3
 800639c:	d003      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800639e:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d104      	bne.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a6:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063a8:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ac:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063ae:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80063b0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80063b2:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80063b4:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	f88c 203d 	strb.w	r2, [ip, #61]	@ 0x3d

  return HAL_OK;
 80063bc:	4618      	mov	r0, r3
}
 80063be:	bc30      	pop	{r4, r5}
 80063c0:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063c2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063c8:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80063ca:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80063ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d2:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80063d4:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d6:	e7e6      	b.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d8:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063de:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80063e0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80063e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063e8:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 80063ea:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ec:	e7db      	b.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
  __HAL_LOCK(htim);
 80063ee:	2002      	movs	r0, #2
}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40012c00 	.word	0x40012c00
 80063f8:	40013400 	.word	0x40013400
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	40014000 	.word	0x40014000

0800640c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800640c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800640e:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006410:	071a      	lsls	r2, r3, #28
 8006412:	d506      	bpl.n	8006422 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006414:	6801      	ldr	r1, [r0, #0]
 8006416:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006418:	684a      	ldr	r2, [r1, #4]
 800641a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800641e:	4322      	orrs	r2, r4
 8006420:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006422:	07dc      	lsls	r4, r3, #31
 8006424:	d506      	bpl.n	8006434 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006426:	6801      	ldr	r1, [r0, #0]
 8006428:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800642a:	684a      	ldr	r2, [r1, #4]
 800642c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006430:	4322      	orrs	r2, r4
 8006432:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006434:	0799      	lsls	r1, r3, #30
 8006436:	d506      	bpl.n	8006446 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006438:	6801      	ldr	r1, [r0, #0]
 800643a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800643c:	684a      	ldr	r2, [r1, #4]
 800643e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006442:	4322      	orrs	r2, r4
 8006444:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006446:	075a      	lsls	r2, r3, #29
 8006448:	d506      	bpl.n	8006458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800644a:	6801      	ldr	r1, [r0, #0]
 800644c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800644e:	684a      	ldr	r2, [r1, #4]
 8006450:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006454:	4322      	orrs	r2, r4
 8006456:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006458:	06dc      	lsls	r4, r3, #27
 800645a:	d506      	bpl.n	800646a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800645c:	6801      	ldr	r1, [r0, #0]
 800645e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006460:	688a      	ldr	r2, [r1, #8]
 8006462:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006466:	4322      	orrs	r2, r4
 8006468:	608a      	str	r2, [r1, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800646a:	0699      	lsls	r1, r3, #26
 800646c:	d506      	bpl.n	800647c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800646e:	6801      	ldr	r1, [r0, #0]
 8006470:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006472:	688a      	ldr	r2, [r1, #8]
 8006474:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006478:	4322      	orrs	r2, r4
 800647a:	608a      	str	r2, [r1, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800647c:	065a      	lsls	r2, r3, #25
 800647e:	d50a      	bpl.n	8006496 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006480:	6801      	ldr	r1, [r0, #0]
 8006482:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006484:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006486:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800648a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800648e:	ea42 0204 	orr.w	r2, r2, r4
 8006492:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006494:	d00b      	beq.n	80064ae <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006496:	061b      	lsls	r3, r3, #24
 8006498:	d506      	bpl.n	80064a8 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800649a:	6802      	ldr	r2, [r0, #0]
 800649c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800649e:	6853      	ldr	r3, [r2, #4]
 80064a0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6053      	str	r3, [r2, #4]
  }
}
 80064a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ac:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064ae:	684a      	ldr	r2, [r1, #4]
 80064b0:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80064b2:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80064b6:	4322      	orrs	r2, r4
 80064b8:	604a      	str	r2, [r1, #4]
 80064ba:	e7ec      	b.n	8006496 <UART_AdvFeatureConfig+0x8a>

080064bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064bc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064be:	2300      	movs	r3, #0
{
 80064c0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c2:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064c6:	f7fb ffcb 	bl	8002460 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ca:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80064cc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ce:	6813      	ldr	r3, [r2, #0]
 80064d0:	071b      	lsls	r3, r3, #28
 80064d2:	d40f      	bmi.n	80064f4 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064d4:	6813      	ldr	r3, [r2, #0]
 80064d6:	0759      	lsls	r1, r3, #29
 80064d8:	d431      	bmi.n	800653e <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80064dc:	2220      	movs	r2, #32
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 80064de:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80064e0:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064e4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ea:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80064ec:	2300      	movs	r3, #0
 80064ee:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f4:	69d3      	ldr	r3, [r2, #28]
 80064f6:	0298      	lsls	r0, r3, #10
 80064f8:	d4ec      	bmi.n	80064d4 <UART_CheckIdleState+0x18>
 80064fa:	e00c      	b.n	8006516 <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064fc:	6819      	ldr	r1, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	0749      	lsls	r1, r1, #29
 8006502:	d505      	bpl.n	8006510 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006504:	69d9      	ldr	r1, [r3, #28]
 8006506:	0708      	lsls	r0, r1, #28
 8006508:	d44a      	bmi.n	80065a0 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800650a:	69d9      	ldr	r1, [r3, #28]
 800650c:	0509      	lsls	r1, r1, #20
 800650e:	d475      	bmi.n	80065fc <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	0298      	lsls	r0, r3, #10
 8006514:	d4de      	bmi.n	80064d4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006516:	f7fb ffa3 	bl	8002460 <HAL_GetTick>
 800651a:	1b43      	subs	r3, r0, r5
 800651c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006520:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006522:	d3eb      	bcc.n	80064fc <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	e843 2100 	strex	r1, r2, [r3]
 8006530:	2900      	cmp	r1, #0
 8006532:	d1f7      	bne.n	8006524 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8006534:	2320      	movs	r3, #32
 8006536:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800653a:	2003      	movs	r0, #3
 800653c:	e7d6      	b.n	80064ec <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653e:	69d3      	ldr	r3, [r2, #28]
 8006540:	025b      	lsls	r3, r3, #9
 8006542:	d4ca      	bmi.n	80064da <UART_CheckIdleState+0x1e>
 8006544:	e00d      	b.n	8006562 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	0750      	lsls	r0, r2, #29
 800654a:	d507      	bpl.n	800655c <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	0711      	lsls	r1, r2, #28
 8006550:	f100 8082 	bmi.w	8006658 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006554:	69da      	ldr	r2, [r3, #28]
 8006556:	0512      	lsls	r2, r2, #20
 8006558:	f100 80ac 	bmi.w	80066b4 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	025b      	lsls	r3, r3, #9
 8006560:	d4bb      	bmi.n	80064da <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006562:	f7fb ff7d 	bl	8002460 <HAL_GetTick>
 8006566:	1b43      	subs	r3, r0, r5
 8006568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	d3ea      	bcc.n	8006546 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006574:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	e843 2100 	strex	r1, r2, [r3]
 800657c:	2900      	cmp	r1, #0
 800657e:	d1f7      	bne.n	8006570 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	f103 0208 	add.w	r2, r3, #8
 8006584:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006588:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	f103 0008 	add.w	r0, r3, #8
 8006590:	e840 2100 	strex	r1, r2, [r0]
 8006594:	2900      	cmp	r1, #0
 8006596:	d1f3      	bne.n	8006580 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8006598:	2320      	movs	r3, #32
 800659a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800659e:	e7cc      	b.n	800653a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a0:	2208      	movs	r2, #8
 80065a2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065a8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	e843 2100 	strex	r1, r2, [r3]
 80065b0:	2900      	cmp	r1, #0
 80065b2:	d1f7      	bne.n	80065a4 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065b4:	4856      	ldr	r0, [pc, #344]	@ (8006710 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	f103 0208 	add.w	r2, r3, #8
 80065ba:	e852 2f00 	ldrex	r2, [r2]
 80065be:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	f103 0508 	add.w	r5, r3, #8
 80065c4:	e845 2100 	strex	r1, r2, [r5]
 80065c8:	2900      	cmp	r1, #0
 80065ca:	d1f4      	bne.n	80065b6 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065cc:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80065ce:	2a01      	cmp	r2, #1
 80065d0:	d00b      	beq.n	80065ea <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80065d4:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065d6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80065d8:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065dc:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065de:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80065e0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065e4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80065e8:	e79c      	b.n	8006524 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ee:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	e843 2100 	strex	r1, r2, [r3]
 80065f6:	2900      	cmp	r1, #0
 80065f8:	d1f7      	bne.n	80065ea <UART_CheckIdleState+0x12e>
 80065fa:	e7ea      	b.n	80065d2 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006600:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006606:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	e843 2100 	strex	r1, r2, [r3]
 800660e:	2900      	cmp	r1, #0
 8006610:	d1f7      	bne.n	8006602 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006612:	483f      	ldr	r0, [pc, #252]	@ (8006710 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	f103 0208 	add.w	r2, r3, #8
 8006618:	e852 2f00 	ldrex	r2, [r2]
 800661c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	f103 0508 	add.w	r5, r3, #8
 8006622:	e845 2100 	strex	r1, r2, [r5]
 8006626:	2900      	cmp	r1, #0
 8006628:	d1f4      	bne.n	8006614 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800662c:	2a01      	cmp	r2, #1
 800662e:	d00a      	beq.n	8006646 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006630:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006632:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8006634:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006636:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800663a:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006640:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8006644:	e76e      	b.n	8006524 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	e843 2100 	strex	r1, r2, [r3]
 8006652:	2900      	cmp	r1, #0
 8006654:	d1f7      	bne.n	8006646 <UART_CheckIdleState+0x18a>
 8006656:	e7eb      	b.n	8006630 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006658:	2208      	movs	r2, #8
 800665a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006660:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	e843 2100 	strex	r1, r2, [r3]
 8006668:	2900      	cmp	r1, #0
 800666a:	d1f7      	bne.n	800665c <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800666c:	4828      	ldr	r0, [pc, #160]	@ (8006710 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	f103 0208 	add.w	r2, r3, #8
 8006672:	e852 2f00 	ldrex	r2, [r2]
 8006676:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	f103 0508 	add.w	r5, r3, #8
 800667c:	e845 2100 	strex	r1, r2, [r5]
 8006680:	2900      	cmp	r1, #0
 8006682:	d1f4      	bne.n	800666e <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006686:	2a01      	cmp	r2, #1
 8006688:	d00b      	beq.n	80066a2 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800668c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800668e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006690:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8006694:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006696:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8006698:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800669c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80066a0:	e766      	b.n	8006570 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	e843 2100 	strex	r1, r2, [r3]
 80066ae:	2900      	cmp	r1, #0
 80066b0:	d1f7      	bne.n	80066a2 <UART_CheckIdleState+0x1e6>
 80066b2:	e7ea      	b.n	800668a <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066b8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066be:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	e843 2100 	strex	r1, r2, [r3]
 80066c6:	2900      	cmp	r1, #0
 80066c8:	d1f7      	bne.n	80066ba <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ca:	4811      	ldr	r0, [pc, #68]	@ (8006710 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	f103 0208 	add.w	r2, r3, #8
 80066d0:	e852 2f00 	ldrex	r2, [r2]
 80066d4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	f103 0508 	add.w	r5, r3, #8
 80066da:	e845 2100 	strex	r1, r2, [r5]
 80066de:	2900      	cmp	r1, #0
 80066e0:	d1f4      	bne.n	80066cc <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80066e4:	2a01      	cmp	r2, #1
 80066e6:	d00a      	beq.n	80066fe <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80066ea:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 80066ec:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80066ee:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 80066f2:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066f8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80066fc:	e738      	b.n	8006570 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fe:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006702:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	e843 2100 	strex	r1, r2, [r3]
 800670a:	2900      	cmp	r1, #0
 800670c:	d1f7      	bne.n	80066fe <UART_CheckIdleState+0x242>
 800670e:	e7eb      	b.n	80066e8 <UART_CheckIdleState+0x22c>
 8006710:	effffffe 	.word	0xeffffffe

08006714 <HAL_UART_Init>:
  if (huart == NULL)
 8006714:	2800      	cmp	r0, #0
 8006716:	f000 8113 	beq.w	8006940 <HAL_UART_Init+0x22c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800671a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800671e:	b570      	push	{r4, r5, r6, lr}
 8006720:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 8088 	beq.w	8006838 <HAL_UART_Init+0x124>
  huart->gState = HAL_UART_STATE_BUSY;
 8006728:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800672a:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800672c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8006730:	682b      	ldr	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006732:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  __HAL_UART_DISABLE(huart);
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800673a:	2a00      	cmp	r2, #0
 800673c:	d178      	bne.n	8006830 <HAL_UART_Init+0x11c>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800673e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8006742:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006744:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006746:	4313      	orrs	r3, r2
 8006748:	430b      	orrs	r3, r1
 800674a:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800674c:	4989      	ldr	r1, [pc, #548]	@ (8006974 <HAL_UART_Init+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800674e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006750:	4001      	ands	r1, r0
 8006752:	430b      	orrs	r3, r1
 8006754:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006756:	686b      	ldr	r3, [r5, #4]
 8006758:	68e1      	ldr	r1, [r4, #12]
 800675a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800675e:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006760:	4985      	ldr	r1, [pc, #532]	@ (8006978 <HAL_UART_Init+0x264>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006762:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006764:	428d      	cmp	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006766:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006768:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800676a:	f000 80f3 	beq.w	8006954 <HAL_UART_Init+0x240>
 800676e:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006772:	428d      	cmp	r5, r1
 8006774:	d065      	beq.n	8006842 <HAL_UART_Init+0x12e>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006776:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8006778:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800677a:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800677e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006782:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006784:	430b      	orrs	r3, r1
 8006786:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006788:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800678a:	497c      	ldr	r1, [pc, #496]	@ (800697c <HAL_UART_Init+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800678c:	f023 030f 	bic.w	r3, r3, #15
 8006790:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006792:	428d      	cmp	r5, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006794:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006796:	d010      	beq.n	80067ba <HAL_UART_Init+0xa6>
 8006798:	4b79      	ldr	r3, [pc, #484]	@ (8006980 <HAL_UART_Init+0x26c>)
 800679a:	429d      	cmp	r5, r3
 800679c:	f000 80cd 	beq.w	800693a <HAL_UART_Init+0x226>
 80067a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067a4:	429d      	cmp	r5, r3
 80067a6:	f000 808c 	beq.w	80068c2 <HAL_UART_Init+0x1ae>
 80067aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067ae:	429d      	cmp	r5, r3
 80067b0:	f040 80c8 	bne.w	8006944 <HAL_UART_Init+0x230>
 80067b4:	2008      	movs	r0, #8
 80067b6:	2100      	movs	r1, #0
 80067b8:	e001      	b.n	80067be <HAL_UART_Init+0xaa>
 80067ba:	2001      	movs	r0, #1
 80067bc:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067be:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80067c2:	f000 8086 	beq.w	80068d2 <HAL_UART_Init+0x1be>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80067c6:	f7fe f903 	bl	80049d0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 80067ca:	b1d0      	cbz	r0, 8006802 <HAL_UART_Init+0xee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067cc:	4a6d      	ldr	r2, [pc, #436]	@ (8006984 <HAL_UART_Init+0x270>)
 80067ce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067da:	fbb0 f0f1 	udiv	r0, r0, r1
 80067de:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80067e2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e6:	f1a0 0310 	sub.w	r3, r0, #16
 80067ea:	4293      	cmp	r3, r2
 80067ec:	f200 8096 	bhi.w	800691c <HAL_UART_Init+0x208>
  huart->RxISR = NULL;
 80067f0:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80067f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80067fa:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80067fc:	66a1      	str	r1, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80067fe:	67a3      	str	r3, [r4, #120]	@ 0x78
  return ret;
 8006800:	e005      	b.n	800680e <HAL_UART_Init+0xfa>
  huart->NbRxDataToProcess = 1;
 8006802:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  huart->TxISR = NULL;
 8006806:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
        huart->Instance->BRR = brrtemp;
 800680a:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800680c:	66a3      	str	r3, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800680e:	6853      	ldr	r3, [r2, #4]
  return (UART_CheckIdleState(huart));
 8006810:	4620      	mov	r0, r4
}
 8006812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006816:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800681a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800681c:	6893      	ldr	r3, [r2, #8]
 800681e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8006822:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006824:	6813      	ldr	r3, [r2, #0]
 8006826:	f043 0301 	orr.w	r3, r3, #1
 800682a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800682c:	f7ff be46 	b.w	80064bc <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8006830:	4620      	mov	r0, r4
 8006832:	f7ff fdeb 	bl	800640c <UART_AdvFeatureConfig>
 8006836:	e782      	b.n	800673e <HAL_UART_Init+0x2a>
    huart->Lock = HAL_UNLOCKED;
 8006838:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800683c:	f7fb fc90 	bl	8002160 <HAL_UART_MspInit>
 8006840:	e772      	b.n	8006728 <HAL_UART_Init+0x14>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006842:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006844:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006846:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800684a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800684e:	431a      	orrs	r2, r3
 8006850:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006852:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006854:	f023 030f 	bic.w	r3, r3, #15
 8006858:	4303      	orrs	r3, r0
 800685a:	2000      	movs	r0, #0
 800685c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800685e:	f7fe f8b7 	bl	80049d0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8006862:	2800      	cmp	r0, #0
 8006864:	d062      	beq.n	800692c <HAL_UART_Init+0x218>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006866:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006868:	4a46      	ldr	r2, [pc, #280]	@ (8006984 <HAL_UART_Init+0x270>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800686a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800686c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006870:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006874:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006878:	428b      	cmp	r3, r1
 800687a:	d34f      	bcc.n	800691c <HAL_UART_Init+0x208>
 800687c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006880:	d84c      	bhi.n	800691c <HAL_UART_Init+0x208>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006882:	2600      	movs	r6, #0
 8006884:	4633      	mov	r3, r6
 8006886:	4631      	mov	r1, r6
 8006888:	f7fb f910 	bl	8001aac <__aeabi_uldivmod>
 800688c:	0209      	lsls	r1, r1, #8
 800688e:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8006892:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006896:	0200      	lsls	r0, r0, #8
 8006898:	eb10 000c 	adds.w	r0, r0, ip
 800689c:	462a      	mov	r2, r5
 800689e:	4633      	mov	r3, r6
 80068a0:	f141 0100 	adc.w	r1, r1, #0
 80068a4:	f7fb f902 	bl	8001aac <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068a8:	4b37      	ldr	r3, [pc, #220]	@ (8006988 <HAL_UART_Init+0x274>)
 80068aa:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d834      	bhi.n	800691c <HAL_UART_Init+0x208>
  huart->NbRxDataToProcess = 1;
 80068b2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
          huart->Instance->BRR = usartdiv;
 80068b6:	6822      	ldr	r2, [r4, #0]
 80068b8:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80068ba:	e9c4 661d 	strd	r6, r6, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80068be:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 80068c0:	e7a5      	b.n	800680e <HAL_UART_Init+0xfa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068c2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80068c6:	f04f 0004 	mov.w	r0, #4
 80068ca:	f04f 0100 	mov.w	r1, #0
 80068ce:	f47f af7a 	bne.w	80067c6 <HAL_UART_Init+0xb2>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80068d2:	f7fe f87d 	bl	80049d0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d093      	beq.n	8006802 <HAL_UART_Init+0xee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068da:	4b2a      	ldr	r3, [pc, #168]	@ (8006984 <HAL_UART_Init+0x270>)
 80068dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80068de:	6862      	ldr	r2, [r4, #4]
 80068e0:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80068e4:	0853      	lsrs	r3, r2, #1
 80068e6:	fbb0 f0f1 	udiv	r0, r0, r1
 80068ea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80068ee:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f2:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 80068f6:	f1a3 0210 	sub.w	r2, r3, #16
 80068fa:	428a      	cmp	r2, r1
 80068fc:	d80e      	bhi.n	800691c <HAL_UART_Init+0x208>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068fe:	f023 010f 	bic.w	r1, r3, #15
 8006902:	b289      	uxth	r1, r1
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006904:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006908:	430b      	orrs	r3, r1
  huart->NbRxDataToProcess = 1;
 800690a:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
  huart->RxISR = NULL;
 800690e:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8006910:	6822      	ldr	r2, [r4, #0]
 8006912:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8006914:	6761      	str	r1, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8006916:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8006918:	67a1      	str	r1, [r4, #120]	@ 0x78
  return ret;
 800691a:	e778      	b.n	800680e <HAL_UART_Init+0xfa>
  huart->RxISR = NULL;
 800691c:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800691e:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
}
 8006922:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006924:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8006926:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8006928:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800692a:	bd70      	pop	{r4, r5, r6, pc}
  huart->NbRxDataToProcess = 1;
 800692c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  huart->TxISR = NULL;
 8006930:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
          huart->Instance->BRR = usartdiv;
 8006934:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8006936:	66a1      	str	r1, [r4, #104]	@ 0x68
  return ret;
 8006938:	e769      	b.n	800680e <HAL_UART_Init+0xfa>
 800693a:	2002      	movs	r0, #2
 800693c:	2100      	movs	r1, #0
 800693e:	e73e      	b.n	80067be <HAL_UART_Init+0xaa>
}
 8006940:	2001      	movs	r0, #1
 8006942:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006944:	4811      	ldr	r0, [pc, #68]	@ (800698c <HAL_UART_Init+0x278>)
 8006946:	2100      	movs	r1, #0
 8006948:	1a28      	subs	r0, r5, r0
 800694a:	fab0 f080 	clz	r0, r0
 800694e:	0940      	lsrs	r0, r0, #5
 8006950:	0100      	lsls	r0, r0, #4
 8006952:	e734      	b.n	80067be <HAL_UART_Init+0xaa>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006954:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006956:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006958:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800695c:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8006960:	431a      	orrs	r2, r3
 8006962:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006964:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006966:	f023 030f 	bic.w	r3, r3, #15
 800696a:	4303      	orrs	r3, r0
 800696c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800696e:	2020      	movs	r0, #32
 8006970:	e775      	b.n	800685e <HAL_UART_Init+0x14a>
 8006972:	bf00      	nop
 8006974:	cfff69f3 	.word	0xcfff69f3
 8006978:	46002400 	.word	0x46002400
 800697c:	40013800 	.word	0x40013800
 8006980:	40004400 	.word	0x40004400
 8006984:	08006c10 	.word	0x08006c10
 8006988:	000ffcff 	.word	0x000ffcff
 800698c:	40005000 	.word	0x40005000

08006990 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006990:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8006994:	2a01      	cmp	r2, #1
 8006996:	d017      	beq.n	80069c8 <HAL_UARTEx_DisableFifoMode+0x38>
 8006998:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 800699a:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800699c:	2100      	movs	r1, #0
{
 800699e:	b430      	push	{r4, r5}

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80069a0:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069a2:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80069a4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069a8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80069aa:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069ac:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80069b0:	f024 0401 	bic.w	r4, r4, #1
 80069b4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069b6:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069b8:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ba:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84

  return HAL_OK;
 80069be:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80069c0:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80069c4:	bc30      	pop	{r4, r5}
 80069c6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80069c8:	2002      	movs	r0, #2
}
 80069ca:	4770      	bx	lr

080069cc <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069cc:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80069d0:	2a01      	cmp	r2, #1
 80069d2:	d037      	beq.n	8006a44 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80069d4:	4603      	mov	r3, r0
 80069d6:	2024      	movs	r0, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069d8:	681a      	ldr	r2, [r3, #0]
{
 80069da:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80069dc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069e0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069e2:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069e4:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 80069e6:	f020 0001 	bic.w	r0, r0, #1
 80069ea:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069ec:	6890      	ldr	r0, [r2, #8]
 80069ee:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 80069f2:	4301      	orrs	r1, r0
 80069f4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069f6:	b315      	cbz	r5, 8006a3e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069f8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069fa:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069fc:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a00:	4911      	ldr	r1, [pc, #68]	@ (8006a48 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a02:	4d12      	ldr	r5, [pc, #72]	@ (8006a4c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a04:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a08:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a0c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a10:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a14:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a18:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a1a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a1c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a20:	fbb1 f1f5 	udiv	r1, r1, r5
 8006a24:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8006a28:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8006a2a:	2520      	movs	r5, #32
 8006a2c:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a30:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006a32:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8006a36:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006a38:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8006a3c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006a3e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006a40:	4608      	mov	r0, r1
 8006a42:	e7ef      	b.n	8006a24 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006a44:	2002      	movs	r0, #2
}
 8006a46:	4770      	bx	lr
 8006a48:	08006c30 	.word	0x08006c30
 8006a4c:	08006c28 	.word	0x08006c28

08006a50 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006a50:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8006a54:	2a01      	cmp	r2, #1
 8006a56:	d037      	beq.n	8006ac8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a5c:	681a      	ldr	r2, [r3, #0]
{
 8006a5e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006a60:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a64:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006a66:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a68:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 8006a6a:	f020 0001 	bic.w	r0, r0, #1
 8006a6e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a70:	6890      	ldr	r0, [r2, #8]
 8006a72:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8006a76:	4301      	orrs	r1, r0
 8006a78:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a7a:	b315      	cbz	r5, 8006ac2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a7c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a7e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a80:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a84:	4911      	ldr	r1, [pc, #68]	@ (8006acc <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a86:	4d12      	ldr	r5, [pc, #72]	@ (8006ad0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a88:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a8c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a90:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a94:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a98:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a9c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a9e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aa0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aa4:	fbb1 f1f5 	udiv	r1, r1, r5
 8006aa8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8006aac:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8006aae:	2520      	movs	r5, #32
 8006ab0:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8006ab6:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8006aba:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006abc:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8006ac0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8006ac2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	e7ef      	b.n	8006aa8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006ac8:	2002      	movs	r0, #2
}
 8006aca:	4770      	bx	lr
 8006acc:	08006c30 	.word	0x08006c30
 8006ad0:	08006c28 	.word	0x08006c28

08006ad4 <_init>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	bf00      	nop
 8006ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ada:	bc08      	pop	{r3}
 8006adc:	469e      	mov	lr, r3
 8006ade:	4770      	bx	lr

08006ae0 <_fini>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	bf00      	nop
 8006ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	469e      	mov	lr, r3
 8006aea:	4770      	bx	lr
