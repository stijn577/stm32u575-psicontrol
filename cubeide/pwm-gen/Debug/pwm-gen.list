
pwm-gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002708  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002940  08002940  00003940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a10  08002a10  00003a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002a14  08002a14  00003a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  20000000  08002a18  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  2000000c  08002a24  0000400c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000078  08002a24  00004078  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
  9 .comment      00000026  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012f86  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002376  00000000  00000000  00016fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000ccf8  00000000  00000000  00019364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d28  00000000  00000000  00026060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000125d  00000000  00000000  00026d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00030861  00000000  00000000  00027fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001294c  00000000  00000000  00058846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00137ce1  00000000  00000000  0006b192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000230c  00000000  00000000  001a2e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001a5180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <deregister_tm_clones>:
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <deregister_tm_clones+0x10>)
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <deregister_tm_clones+0x14>)
 800023c:	4283      	cmp	r3, r0
 800023e:	d002      	beq.n	8000246 <deregister_tm_clones+0xe>
 8000240:	4b03      	ldr	r3, [pc, #12]	@ (8000250 <deregister_tm_clones+0x18>)
 8000242:	b103      	cbz	r3, 8000246 <deregister_tm_clones+0xe>
 8000244:	4718      	bx	r3
 8000246:	4770      	bx	lr
 8000248:	2000000c 	.word	0x2000000c
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000

08000254 <register_tm_clones>:
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <register_tm_clones+0x1c>)
 8000256:	4907      	ldr	r1, [pc, #28]	@ (8000274 <register_tm_clones+0x20>)
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	1089      	asrs	r1, r1, #2
 800025c:	bf48      	it	mi
 800025e:	3101      	addmi	r1, #1
 8000260:	1049      	asrs	r1, r1, #1
 8000262:	d003      	beq.n	800026c <register_tm_clones+0x18>
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <register_tm_clones+0x24>)
 8000266:	b10b      	cbz	r3, 800026c <register_tm_clones+0x18>
 8000268:	4801      	ldr	r0, [pc, #4]	@ (8000270 <register_tm_clones+0x1c>)
 800026a:	4718      	bx	r3
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	2000000c 	.word	0x2000000c
 8000274:	2000000c 	.word	0x2000000c
 8000278:	00000000 	.word	0x00000000

0800027c <__do_global_dtors_aux>:
 800027c:	b510      	push	{r4, lr}
 800027e:	4c06      	ldr	r4, [pc, #24]	@ (8000298 <__do_global_dtors_aux+0x1c>)
 8000280:	7823      	ldrb	r3, [r4, #0]
 8000282:	b943      	cbnz	r3, 8000296 <__do_global_dtors_aux+0x1a>
 8000284:	f7ff ffd8 	bl	8000238 <deregister_tm_clones>
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <__do_global_dtors_aux+0x20>)
 800028a:	b113      	cbz	r3, 8000292 <__do_global_dtors_aux+0x16>
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x24>)
 800028e:	f3af 8000 	nop.w
 8000292:	2301      	movs	r3, #1
 8000294:	7023      	strb	r3, [r4, #0]
 8000296:	bd10      	pop	{r4, pc}
 8000298:	2000000c 	.word	0x2000000c
 800029c:	00000000 	.word	0x00000000
 80002a0:	08002928 	.word	0x08002928

080002a4 <frame_dummy>:
 80002a4:	b508      	push	{r3, lr}
 80002a6:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <frame_dummy+0x14>)
 80002a8:	b11b      	cbz	r3, 80002b2 <frame_dummy+0xe>
 80002aa:	4904      	ldr	r1, [pc, #16]	@ (80002bc <frame_dummy+0x18>)
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <frame_dummy+0x1c>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002b6:	e7cd      	b.n	8000254 <register_tm_clones>
 80002b8:	00000000 	.word	0x00000000
 80002bc:	20000010 	.word	0x20000010
 80002c0:	08002928 	.word	0x08002928

080002c4 <__libc_init_array>:
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <__libc_init_array+0x40>)
 80002c6:	b570      	push	{r4, r5, r6, lr}
 80002c8:	4d0f      	ldr	r5, [pc, #60]	@ (8000308 <__libc_init_array+0x44>)
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	eba3 0605 	sub.w	r6, r3, r5
 80002d0:	d007      	beq.n	80002e2 <__libc_init_array+0x1e>
 80002d2:	10b6      	asrs	r6, r6, #2
 80002d4:	2400      	movs	r4, #0
 80002d6:	3401      	adds	r4, #1
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d8f9      	bhi.n	80002d6 <__libc_init_array+0x12>
 80002e2:	4d0a      	ldr	r5, [pc, #40]	@ (800030c <__libc_init_array+0x48>)
 80002e4:	f002 fb20 	bl	8002928 <_init>
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <__libc_init_array+0x4c>)
 80002ea:	1b5e      	subs	r6, r3, r5
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80002f2:	d006      	beq.n	8000302 <__libc_init_array+0x3e>
 80002f4:	2400      	movs	r4, #0
 80002f6:	3401      	adds	r4, #1
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d8f9      	bhi.n	80002f6 <__libc_init_array+0x32>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	08002a10 	.word	0x08002a10
 8000308:	08002a10 	.word	0x08002a10
 800030c:	08002a10 	.word	0x08002a10
 8000310:	08002a14 	.word	0x08002a14

08000314 <memset>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	0786      	lsls	r6, r0, #30
 8000318:	d047      	beq.n	80003aa <memset+0x96>
 800031a:	1e54      	subs	r4, r2, #1
 800031c:	2a00      	cmp	r2, #0
 800031e:	d03e      	beq.n	800039e <memset+0x8a>
 8000320:	b2ca      	uxtb	r2, r1
 8000322:	4603      	mov	r3, r0
 8000324:	e001      	b.n	800032a <memset+0x16>
 8000326:	3c01      	subs	r4, #1
 8000328:	d339      	bcc.n	800039e <memset+0x8a>
 800032a:	f803 2b01 	strb.w	r2, [r3], #1
 800032e:	079d      	lsls	r5, r3, #30
 8000330:	d1f9      	bne.n	8000326 <memset+0x12>
 8000332:	2c03      	cmp	r4, #3
 8000334:	d92c      	bls.n	8000390 <memset+0x7c>
 8000336:	b2cd      	uxtb	r5, r1
 8000338:	2c0f      	cmp	r4, #15
 800033a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800033e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8000342:	d935      	bls.n	80003b0 <memset+0x9c>
 8000344:	f1a4 0c10 	sub.w	ip, r4, #16
 8000348:	f103 0e10 	add.w	lr, r3, #16
 800034c:	461a      	mov	r2, r3
 800034e:	f02c 060f 	bic.w	r6, ip, #15
 8000352:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8000356:	44b6      	add	lr, r6
 8000358:	e9c2 5500 	strd	r5, r5, [r2]
 800035c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000360:	3210      	adds	r2, #16
 8000362:	4572      	cmp	r2, lr
 8000364:	d1f8      	bne.n	8000358 <memset+0x44>
 8000366:	f10c 0201 	add.w	r2, ip, #1
 800036a:	f014 0f0c 	tst.w	r4, #12
 800036e:	f004 0c0f 	and.w	ip, r4, #15
 8000372:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000376:	d013      	beq.n	80003a0 <memset+0x8c>
 8000378:	f1ac 0304 	sub.w	r3, ip, #4
 800037c:	f023 0303 	bic.w	r3, r3, #3
 8000380:	3304      	adds	r3, #4
 8000382:	4413      	add	r3, r2
 8000384:	f842 5b04 	str.w	r5, [r2], #4
 8000388:	4293      	cmp	r3, r2
 800038a:	d1fb      	bne.n	8000384 <memset+0x70>
 800038c:	f00c 0403 	and.w	r4, ip, #3
 8000390:	b12c      	cbz	r4, 800039e <memset+0x8a>
 8000392:	b2c9      	uxtb	r1, r1
 8000394:	441c      	add	r4, r3
 8000396:	f803 1b01 	strb.w	r1, [r3], #1
 800039a:	42a3      	cmp	r3, r4
 800039c:	d1fb      	bne.n	8000396 <memset+0x82>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	4664      	mov	r4, ip
 80003a2:	4613      	mov	r3, r2
 80003a4:	2c00      	cmp	r4, #0
 80003a6:	d1f4      	bne.n	8000392 <memset+0x7e>
 80003a8:	e7f9      	b.n	800039e <memset+0x8a>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4614      	mov	r4, r2
 80003ae:	e7c0      	b.n	8000332 <memset+0x1e>
 80003b0:	461a      	mov	r2, r3
 80003b2:	46a4      	mov	ip, r4
 80003b4:	e7e0      	b.n	8000378 <memset+0x64>
 80003b6:	bf00      	nop

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b530      	push	{r4, r5, lr}
 80003ba:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003bc:	2260      	movs	r2, #96	@ 0x60
 80003be:	2100      	movs	r1, #0
 80003c0:	a806      	add	r0, sp, #24
 80003c2:	f7ff ffa7 	bl	8000314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c6:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003c8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	e9cd 3300 	strd	r3, r3, [sp]
 80003d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80003d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003d8:	f000 fc6c 	bl	8000cb4 <HAL_PWREx_ControlVoltageScaling>
 80003dc:	b108      	cbz	r0, 80003e2 <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003de:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003e0:	e7fe      	b.n	80003e0 <SystemClock_Config+0x28>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e2:	4603      	mov	r3, r0
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80003e4:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003e6:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e8:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80003ee:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8000448 <SystemClock_Config+0x90>
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003f2:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 1;
 80003f4:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f6:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003f8:	230a      	movs	r3, #10
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003fc:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80003fe:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000402:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000406:	e9cd 2219 	strd	r2, r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040e:	9109      	str	r1, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000410:	f000 ff36 	bl	8001280 <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	b108      	cbz	r0, 800041c <SystemClock_Config+0x64>
 8000418:	b672      	cpsid	i
	while (1) {
 800041a:	e7fe      	b.n	800041a <SystemClock_Config+0x62>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041c:	251f      	movs	r5, #31
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041e:	2403      	movs	r4, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000420:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000422:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000426:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000428:	4668      	mov	r0, sp
 800042a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	e9cd 5400 	strd	r5, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000434:	f000 fdbe 	bl	8000fb4 <HAL_RCC_ClockConfig>
 8000438:	b108      	cbz	r0, 800043e <SystemClock_Config+0x86>
 800043a:	b672      	cpsid	i
	while (1) {
 800043c:	e7fe      	b.n	800043c <SystemClock_Config+0x84>
}
 800043e:	b01f      	add	sp, #124	@ 0x7c
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	bf00      	nop
 8000444:	f3af 8000 	nop.w
 8000448:	0000000c 	.word	0x0000000c
 800044c:	00000000 	.word	0x00000000

08000450 <main>:
{
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	b090      	sub	sp, #64	@ 0x40
  HAL_Init();
 8000454:	f000 f994 	bl	8000780 <HAL_Init>
  SystemClock_Config();
 8000458:	f7ff ffae 	bl	80003b8 <SystemClock_Config>
  HAL_PWREx_DisableUCPDDeadBattery();
 800045c:	f000 fcb6 	bl	8000dcc <HAL_PWREx_DisableUCPDDeadBattery>
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000460:	2002      	movs	r0, #2
 8000462:	f000 fc79 	bl	8000d58 <HAL_PWREx_ConfigSupply>
 8000466:	b108      	cbz	r0, 800046c <main+0x1c>
 8000468:	b672      	cpsid	i
	while (1) {
 800046a:	e7fe      	b.n	800046a <main+0x1a>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b39      	ldr	r3, [pc, #228]	@ (8000554 <main+0x104>)
 800046e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000472:	f042 0202 	orr.w	r2, r2, #2
 8000476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800047a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800047e:	f003 0302 	and.w	r3, r3, #2
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	9b00      	ldr	r3, [sp, #0]
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000486:	f000 fc0b 	bl	8000ca0 <HAL_ICACHE_Enable>
 800048a:	4603      	mov	r3, r0
 800048c:	b108      	cbz	r0, 8000492 <main+0x42>
 800048e:	b672      	cpsid	i
	while (1) {
 8000490:	e7fe      	b.n	8000490 <main+0x40>
  htim4.Init.Period = 1000;
 8000492:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
  htim4.Instance = TIM4;
 8000496:	4c30      	ldr	r4, [pc, #192]	@ (8000558 <main+0x108>)
 8000498:	4d30      	ldr	r5, [pc, #192]	@ (800055c <main+0x10c>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800049a:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 0;
 800049c:	e9c4 5300 	strd	r5, r3, [r4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a0:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a8:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 80004ac:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 80004b0:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b4:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b6:	9301      	str	r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b8:	9308      	str	r3, [sp, #32]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ba:	60a3      	str	r3, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004bc:	6123      	str	r3, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004be:	61a3      	str	r3, [r4, #24]
  htim4.Init.Period = 1000;
 80004c0:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004c4:	f001 fd66 	bl	8001f94 <HAL_TIM_Base_Init>
 80004c8:	b108      	cbz	r0, 80004ce <main+0x7e>
 80004ca:	b672      	cpsid	i
	while (1) {
 80004cc:	e7fe      	b.n	80004cc <main+0x7c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004d2:	4620      	mov	r0, r4
 80004d4:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004d8:	f001 fffe 	bl	80024d8 <HAL_TIM_ConfigClockSource>
 80004dc:	b108      	cbz	r0, 80004e2 <main+0x92>
 80004de:	b672      	cpsid	i
	while (1) {
 80004e0:	e7fe      	b.n	80004e0 <main+0x90>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80004e2:	4620      	mov	r0, r4
 80004e4:	f001 fe34 	bl	8002150 <HAL_TIM_PWM_Init>
 80004e8:	b108      	cbz	r0, 80004ee <main+0x9e>
 80004ea:	b672      	cpsid	i
	while (1) {
 80004ec:	e7fe      	b.n	80004ec <main+0x9c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ee:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004f2:	a901      	add	r1, sp, #4
 80004f4:	4620      	mov	r0, r4
 80004f6:	f002 f9a1 	bl	800283c <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	b108      	cbz	r0, 8000500 <main+0xb0>
 80004fc:	b672      	cpsid	i
	while (1) {
 80004fe:	e7fe      	b.n	80004fe <main+0xae>
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000500:	2604      	movs	r6, #4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000502:	2260      	movs	r2, #96	@ 0x60
 8000504:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000506:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000508:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800050c:	4620      	mov	r0, r4
 800050e:	4632      	mov	r2, r6
 8000510:	a908      	add	r1, sp, #32
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000512:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000514:	f002 f90e 	bl	8002734 <HAL_TIM_PWM_ConfigChannel>
 8000518:	b108      	cbz	r0, 800051e <main+0xce>
 800051a:	b672      	cpsid	i
	while (1) {
 800051c:	e7fe      	b.n	800051c <main+0xcc>
  HAL_TIM_MspPostInit(&htim4);
 800051e:	4620      	mov	r0, r4
 8000520:	f000 f84a 	bl	80005b8 <HAL_TIM_MspPostInit>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000524:	4631      	mov	r1, r6
 8000526:	4620      	mov	r0, r4
 8000528:	f001 feee 	bl	8002308 <HAL_TIM_PWM_Start>
		for (int i = 0; i <= 1000; i++) {
 800052c:	f240 36e9 	movw	r6, #1001	@ 0x3e9
 8000530:	2400      	movs	r4, #0
			TIM4->CCR2 = i;
 8000532:	63ac      	str	r4, [r5, #56]	@ 0x38
			HAL_Delay(1);
 8000534:	2001      	movs	r0, #1
		for (int i = 0; i <= 1000; i++) {
 8000536:	3401      	adds	r4, #1
			HAL_Delay(1);
 8000538:	f000 f960 	bl	80007fc <HAL_Delay>
		for (int i = 0; i <= 1000; i++) {
 800053c:	42b4      	cmp	r4, r6
 800053e:	d1f8      	bne.n	8000532 <main+0xe2>
		for (int i = 1000; i >= 0; i--){
 8000540:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
			TIM4->CCR2 = i;
 8000544:	63ac      	str	r4, [r5, #56]	@ 0x38
			HAL_Delay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f000 f958 	bl	80007fc <HAL_Delay>
		for (int i = 1000; i >= 0; i--){
 800054c:	3c01      	subs	r4, #1
 800054e:	d2f9      	bcs.n	8000544 <main+0xf4>
 8000550:	e7ee      	b.n	8000530 <main+0xe0>
 8000552:	bf00      	nop
 8000554:	46020c00 	.word	0x46020c00
 8000558:	20000028 	.word	0x20000028
 800055c:	40000800 	.word	0x40000800

08000560 <HAL_MspInit>:

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000560:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <HAL_MspInit+0x20>)
{
 8000564:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800056a:	4302      	orrs	r2, r0
 800056c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8000570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000574:	4003      	ands	r3, r0
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800057c:	f000 b950 	b.w	8000820 <HAL_NVIC_SetPriorityGrouping>
 8000580:	46020c00 	.word	0x46020c00

08000584 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_TIM_Base_MspInit+0x2c>)
 8000586:	6802      	ldr	r2, [r0, #0]
 8000588:	429a      	cmp	r2, r3
 800058a:	d000      	beq.n	800058e <HAL_TIM_Base_MspInit+0xa>
 800058c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <HAL_TIM_Base_MspInit+0x30>)
{
 8000590:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000592:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8000596:	f042 0204 	orr.w	r2, r2, #4
 800059a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800059e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80005aa:	b002      	add	sp, #8
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40000800 	.word	0x40000800
 80005b4:	46020c00 	.word	0x46020c00

080005b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	2300      	movs	r3, #0
{
 80005ba:	b510      	push	{r4, lr}
  if(htim->Instance==TIM4)
 80005bc:	4a14      	ldr	r2, [pc, #80]	@ (8000610 <HAL_TIM_MspPostInit+0x58>)
 80005be:	6801      	ldr	r1, [r0, #0]
{
 80005c0:	b088      	sub	sp, #32
  if(htim->Instance==TIM4)
 80005c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80005c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80005cc:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM4)
 80005ce:	d001      	beq.n	80005d4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80005d0:	b008      	add	sp, #32
 80005d2:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80005d4:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005d6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8000608 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <HAL_TIM_MspPostInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	480e      	ldr	r0, [pc, #56]	@ (8000618 <HAL_TIM_MspPostInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	4322      	orrs	r2, r4
 80005e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80005ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005ee:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4023      	ands	r3, r4
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80005f8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	f000 f9c7 	bl	800098c <HAL_GPIO_Init>
}
 80005fe:	b008      	add	sp, #32
 8000600:	bd10      	pop	{r4, pc}
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	00000080 	.word	0x00000080
 800060c:	00000002 	.word	0x00000002
 8000610:	40000800 	.word	0x40000800
 8000614:	46020c00 	.word	0x46020c00
 8000618:	42020400 	.word	0x42020400

0800061c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler>
 800061e:	bf00      	nop

08000620 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <HardFault_Handler>
 8000622:	bf00      	nop

08000624 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <MemManage_Handler>
 8000626:	bf00      	nop

08000628 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <BusFault_Handler>
 800062a:	bf00      	nop

0800062c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler>
 800062e:	bf00      	nop

08000630 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 b8cc 	b.w	80007d8 <HAL_IncTick>

08000640 <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000640:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_MSISON;
 8000642:	2101      	movs	r1, #1
{
 8000644:	b410      	push	{r4}

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000646:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800064a:	480e      	ldr	r0, [pc, #56]	@ (8000684 <SystemInit+0x44>)
 800064c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8000650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000654:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  RCC->CR = RCC_CR_MSISON;
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <SystemInit+0x48>)
 800065a:	6019      	str	r1, [r3, #0]
  RCC->CFGR1 = 0U;
 800065c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800065e:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000660:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000662:	6819      	ldr	r1, [r3, #0]
 8000664:	f021 51a8 	bic.w	r1, r1, #352321536	@ 0x15000000
 8000668:	f421 2110 	bic.w	r1, r1, #589824	@ 0x90000
 800066c:	6019      	str	r1, [r3, #0]
  RCC->PLL1CFGR = 0U;
 800066e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000670:	6819      	ldr	r1, [r3, #0]
 8000672:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000676:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0U;
 8000678:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800067a:	6084      	str	r4, [r0, #8]
  #endif
}
 800067c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00
 8000688:	46020c00 	.word	0x46020c00

0800068c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800068c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006c4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000690:	f7ff ffd6 	bl	8000640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000694:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000696:	e003      	b.n	80006a0 <LoopCopyDataInit>

08000698 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800069a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800069c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800069e:	3104      	adds	r1, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006a0:	480a      	ldr	r0, [pc, #40]	@ (80006cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006a8:	d3f6      	bcc.n	8000698 <CopyDataInit>
	ldr	r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006ac:	e002      	b.n	80006b4 <LoopFillZerobss>

080006ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006b0:	f842 3b04 	str.w	r3, [r2], #4

080006b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <LoopForever+0x16>)
	cmp	r2, r3
 80006b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006b8:	d3f9      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ba:	f7ff fe03 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006be:	f7ff fec7 	bl	8000450 <main>

080006c2 <LoopForever>:

LoopForever:
    b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80006c4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80006c8:	08002a18 	.word	0x08002a18
	ldr	r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006d0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006d4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006d8:	20000078 	.word	0x20000078

080006dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_IRQHandler>
	...

080006e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80006e2:	4e24      	ldr	r6, [pc, #144]	@ (8000774 <HAL_InitTick+0x94>)
 80006e4:	7832      	ldrb	r2, [r6, #0]
 80006e6:	b1ea      	cbz	r2, 8000724 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80006e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80006ec:	691c      	ldr	r4, [r3, #16]
 80006ee:	4605      	mov	r5, r0
 80006f0:	f014 0404 	ands.w	r4, r4, #4
 80006f4:	d018      	beq.n	8000728 <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80006f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006fa:	fbb1 f2f2 	udiv	r2, r1, r2
 80006fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <HAL_InitTick+0x98>)
 8000700:	681c      	ldr	r4, [r3, #0]
 8000702:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000706:	4620      	mov	r0, r4
 8000708:	f000 f8d8 	bl	80008bc <HAL_SYSTICK_Config>
 800070c:	4604      	mov	r4, r0
 800070e:	b948      	cbnz	r0, 8000724 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000710:	4602      	mov	r2, r0
 8000712:	4629      	mov	r1, r5
 8000714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000718:	f000 f894 	bl	8000844 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <HAL_InitTick+0x9c>)
 800071e:	4620      	mov	r0, r4
 8000720:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000722:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000724:	2001      	movs	r0, #1
}
 8000726:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000728:	f000 f916 	bl	8000958 <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 800072c:	2801      	cmp	r0, #1
 800072e:	d00d      	beq.n	800074c <HAL_InitTick+0x6c>
 8000730:	2802      	cmp	r0, #2
 8000732:	d015      	beq.n	8000760 <HAL_InitTick+0x80>
 8000734:	2800      	cmp	r0, #0
 8000736:	d1e6      	bne.n	8000706 <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000738:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800073c:	7831      	ldrb	r1, [r6, #0]
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <HAL_InitTick+0x98>)
 8000740:	fbb2 f2f1 	udiv	r2, r2, r1
 8000744:	681c      	ldr	r4, [r3, #0]
 8000746:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 800074a:	e7dc      	b.n	8000706 <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800074c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000750:	7831      	ldrb	r1, [r6, #0]
 8000752:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000756:	fbb2 f2f1 	udiv	r2, r2, r1
 800075a:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 800075e:	e7d2      	b.n	8000706 <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000760:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000764:	7831      	ldrb	r1, [r6, #0]
 8000766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800076a:	fbb2 f2f1 	udiv	r2, r2, r1
 800076e:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8000772:	e7c8      	b.n	8000706 <HAL_InitTick+0x26>
 8000774:	20000004 	.word	0x20000004
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008

08000780 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4a11      	ldr	r2, [pc, #68]	@ (80007c8 <HAL_Init+0x48>)
{
 8000782:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000786:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800078c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078e:	f000 f847 	bl	8000820 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000792:	f000 fb81 	bl	8000e98 <HAL_RCC_GetSysClockFreq>
 8000796:	4603      	mov	r3, r0
 8000798:	4a0c      	ldr	r2, [pc, #48]	@ (80007cc <HAL_Init+0x4c>)
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <HAL_Init+0x50>)
 800079c:	6a12      	ldr	r2, [r2, #32]
 800079e:	490d      	ldr	r1, [pc, #52]	@ (80007d4 <HAL_Init+0x54>)
 80007a0:	f002 020f 	and.w	r2, r2, #15
 80007a4:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007a6:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80007a8:	40d3      	lsrs	r3, r2
 80007aa:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007ac:	f000 f896 	bl	80008dc <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff ff95 	bl	80006e0 <HAL_InitTick>
 80007b6:	b110      	cbz	r0, 80007be <HAL_Init+0x3e>
    return HAL_ERROR;
 80007b8:	2401      	movs	r4, #1
}
 80007ba:	4620      	mov	r0, r4
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	4604      	mov	r4, r0
  HAL_MspInit();
 80007c0:	f7ff fece 	bl	8000560 <HAL_MspInit>
}
 80007c4:	4620      	mov	r0, r4
 80007c6:	bd10      	pop	{r4, pc}
 80007c8:	40022000 	.word	0x40022000
 80007cc:	46020c00 	.word	0x46020c00
 80007d0:	08002980 	.word	0x08002980
 80007d4:	20000000 	.word	0x20000000

080007d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80007d8:	4a03      	ldr	r2, [pc, #12]	@ (80007e8 <HAL_IncTick+0x10>)
 80007da:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <HAL_IncTick+0x14>)
 80007dc:	6811      	ldr	r1, [r2, #0]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	440b      	add	r3, r1
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000074 	.word	0x20000074
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007f0:	4b01      	ldr	r3, [pc, #4]	@ (80007f8 <HAL_GetTick+0x8>)
 80007f2:	6818      	ldr	r0, [r3, #0]
}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000074 	.word	0x20000074

080007fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b538      	push	{r3, r4, r5, lr}
 80007fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000800:	f7ff fff6 	bl	80007f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000804:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000806:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000808:	d002      	beq.n	8000810 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <HAL_Delay+0x20>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000810:	f7ff ffee 	bl	80007f0 <HAL_GetTick>
 8000814:	1b40      	subs	r0, r0, r5
 8000816:	42a0      	cmp	r0, r4
 8000818:	d3fa      	bcc.n	8000810 <HAL_Delay+0x14>
  {
  }
}
 800081a:	bd38      	pop	{r3, r4, r5, pc}
 800081c:	20000004 	.word	0x20000004

08000820 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000820:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000824:	4906      	ldr	r1, [pc, #24]	@ (8000840 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000826:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800082a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800083c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000846:	b500      	push	{lr}
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800084e:	f1c3 0e07 	rsb	lr, r3, #7
 8000852:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085a:	bf28      	it	cs
 800085c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000860:	f1bc 0f06 	cmp.w	ip, #6
 8000864:	d91c      	bls.n	80008a0 <HAL_NVIC_SetPriority+0x5c>
 8000866:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800086e:	fa03 f30c 	lsl.w	r3, r3, ip
 8000872:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800087a:	fa03 f30e 	lsl.w	r3, r3, lr
 800087e:	ea21 0303 	bic.w	r3, r1, r3
 8000882:	fa03 f30c 	lsl.w	r3, r3, ip
 8000886:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800088a:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800088e:	db0a      	blt.n	80008a6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000894:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000898:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800089c:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a2:	4694      	mov	ip, r2
 80008a4:	e7e7      	b.n	8000876 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a6:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <HAL_NVIC_SetPriority+0x74>)
 80008a8:	f000 000f 	and.w	r0, r0, #15
 80008ac:	4402      	add	r2, r0
 80008ae:	7613      	strb	r3, [r2, #24]
 80008b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80008b4:	e000ed00 	.word	0xe000ed00
 80008b8:	e000ecfc 	.word	0xe000ecfc

080008bc <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	1e43      	subs	r3, r0, #1
 80008be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c2:	d209      	bcs.n	80008d8 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80008c4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80008c8:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80008ca:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 80008cc:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80008ce:	6913      	ldr	r3, [r2, #16]
 80008d0:	f043 0303 	orr.w	r3, r3, #3
 80008d4:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 80008d6:	4770      	bx	lr
    return (1UL);
 80008d8:	2001      	movs	r0, #1
}
 80008da:	4770      	bx	lr

080008dc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80008dc:	2804      	cmp	r0, #4
 80008de:	d813      	bhi.n	8000908 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 80008e0:	e8df f000 	tbb	[pc, r0]
 80008e4:	12031a2a 	.word	0x12031a2a
 80008e8:	13          	.byte	0x13
 80008e9:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80008ea:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 80008ee:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80008f0:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80008f2:	f023 0304 	bic.w	r3, r3, #4
 80008f6:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80008f8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 80008fc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000900:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000904:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8000908:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800090a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800090e:	6913      	ldr	r3, [r2, #16]
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6113      	str	r3, [r2, #16]
      break;
 8000916:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000918:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 800091c:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800091e:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000920:	f023 0304 	bic.w	r3, r3, #4
 8000924:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000926:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800092a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800092e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000936:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000938:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 800093c:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000940:	f023 0304 	bic.w	r3, r3, #4
 8000944:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000946:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 800094a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000952:	4770      	bx	lr
 8000954:	46020c00 	.word	0x46020c00

08000958 <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000958:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	075b      	lsls	r3, r3, #29
 8000960:	d410      	bmi.n	8000984 <HAL_SYSTICK_GetCLKSourceConfig+0x2c>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 8000964:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000968:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000

    switch (systick_rcc_source)
 800096c:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8000970:	d006      	beq.n	8000980 <HAL_SYSTICK_GetCLKSourceConfig+0x28>
 8000972:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 8000976:	fab0 f080 	clz	r0, r0
 800097a:	0940      	lsrs	r0, r0, #5
 800097c:	0040      	lsls	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 8000982:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000984:	2004      	movs	r0, #4
 8000986:	4770      	bx	lr
 8000988:	46020c00 	.word	0x46020c00

0800098c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800098c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Save GPIO port address */
  p_gpio = GPIOx;

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000990:	f8d1 b000 	ldr.w	fp, [r1]
{
 8000994:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000996:	f1bb 0f00 	cmp.w	fp, #0
 800099a:	f000 80b4 	beq.w	8000b06 <HAL_GPIO_Init+0x17a>
 800099e:	4bbb      	ldr	r3, [pc, #748]	@ (8000c8c <HAL_GPIO_Init+0x300>)
 80009a0:	468a      	mov	sl, r1
 80009a2:	4298      	cmp	r0, r3
 80009a4:	f000 80be 	beq.w	8000b24 <HAL_GPIO_Init+0x198>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80009a8:	4bb9      	ldr	r3, [pc, #740]	@ (8000c90 <HAL_GPIO_Init+0x304>)
  uint32_t position = 0U;
 80009aa:	2200      	movs	r2, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80009ac:	ea03 2390 	and.w	r3, r3, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80009b0:	f04f 0801 	mov.w	r8, #1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80009b4:	9303      	str	r3, [sp, #12]
 80009b6:	e029      	b.n	8000a0c <HAL_GPIO_Init+0x80>
        tmp = p_gpio->MODER;
 80009b8:	6806      	ldr	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ba:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80009be:	ea05 0c06 	and.w	ip, r5, r6
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80009c2:	f003 0603 	and.w	r6, r3, #3
 80009c6:	fa06 f607 	lsl.w	r6, r6, r7
 80009ca:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->MODER = tmp;
 80009ce:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d0:	d901      	bls.n	80009d6 <HAL_GPIO_Init+0x4a>
 80009d2:	2b11      	cmp	r3, #17
 80009d4:	d153      	bne.n	8000a7e <HAL_GPIO_Init+0xf2>
        tmp = p_gpio->OSPEEDR;
 80009d6:	6886      	ldr	r6, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80009d8:	091b      	lsrs	r3, r3, #4
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80009da:	ea06 0c05 	and.w	ip, r6, r5
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80009de:	f8da 600c 	ldr.w	r6, [sl, #12]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80009e2:	4093      	lsls	r3, r2
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80009e4:	40be      	lsls	r6, r7
 80009e6:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->OSPEEDR = tmp;
 80009ea:	6086      	str	r6, [r0, #8]
        tmp = p_gpio->OTYPER;
 80009ec:	6846      	ldr	r6, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80009ee:	ea26 0101 	bic.w	r1, r6, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80009f2:	430b      	orrs	r3, r1
        p_gpio->OTYPER = tmp;
 80009f4:	6043      	str	r3, [r0, #4]
        tmp = p_gpio->PUPDR;
 80009f6:	68c1      	ldr	r1, [r0, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80009f8:	f8da 3008 	ldr.w	r3, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80009fc:	4029      	ands	r1, r5
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80009fe:	40bb      	lsls	r3, r7
 8000a00:	430b      	orrs	r3, r1
        p_gpio->PUPDR = tmp;
 8000a02:	60c3      	str	r3, [r0, #12]
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
      }
    }
    position++;
 8000a04:	3201      	adds	r2, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000a06:	fa3b f302 	lsrs.w	r3, fp, r2
 8000a0a:	d07c      	beq.n	8000b06 <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000a0c:	fa08 f102 	lsl.w	r1, r8, r2
    if (iocurrent != 0U)
 8000a10:	ea1b 0e01 	ands.w	lr, fp, r1
 8000a14:	d0f6      	beq.n	8000a04 <HAL_GPIO_Init+0x78>
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a16:	2403      	movs	r4, #3
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000a18:	f8da 3004 	ldr.w	r3, [sl, #4]
 8000a1c:	0057      	lsls	r7, r2, #1
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a1e:	f023 0610 	bic.w	r6, r3, #16
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a22:	fa04 f507 	lsl.w	r5, r4, r7
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a26:	2e02      	cmp	r6, #2
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a28:	ea6f 0505 	mvn.w	r5, r5
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a2c:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a30:	d1c2      	bne.n	80009b8 <HAL_GPIO_Init+0x2c>
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a32:	fa06 f407 	lsl.w	r4, r6, r7
        tmp = GPIOx->AFR[position >> 3U];
 8000a36:	08d6      	lsrs	r6, r2, #3
 8000a38:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a3c:	9402      	str	r4, [sp, #8]
 8000a3e:	4634      	mov	r4, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000a40:	f8da 6010 	ldr.w	r6, [sl, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000a44:	f002 0c07 	and.w	ip, r2, #7
 8000a48:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000a4c:	f006 060f 	and.w	r6, r6, #15
 8000a50:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a54:	9601      	str	r6, [sp, #4]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000a56:	260f      	movs	r6, #15
 8000a58:	fa06 fc0c 	lsl.w	ip, r6, ip
        tmp = GPIOx->AFR[position >> 3U];
 8000a5c:	6a26      	ldr	r6, [r4, #32]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5e:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000a62:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000a66:	9e01      	ldr	r6, [sp, #4]
 8000a68:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8000a6c:	6226      	str	r6, [r4, #32]
        tmp = p_gpio->MODER;
 8000a6e:	6806      	ldr	r6, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a70:	9c02      	ldr	r4, [sp, #8]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a72:	ea06 0605 	and.w	r6, r6, r5
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000a76:	ea46 0604 	orr.w	r6, r6, r4
        p_gpio->MODER = tmp;
 8000a7a:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a7c:	d0ab      	beq.n	80009d6 <HAL_GPIO_Init+0x4a>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d0a9      	beq.n	80009d6 <HAL_GPIO_Init+0x4a>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d0be      	beq.n	8000a04 <HAL_GPIO_Init+0x78>
        tmp = p_gpio->PUPDR;
 8000a86:	68c1      	ldr	r1, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000a88:	400d      	ands	r5, r1
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000a8a:	f8da 1008 	ldr.w	r1, [sl, #8]
 8000a8e:	40b9      	lsls	r1, r7
 8000a90:	4329      	orrs	r1, r5
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a92:	00dd      	lsls	r5, r3, #3
        p_gpio->PUPDR = tmp;
 8000a94:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a96:	d5b5      	bpl.n	8000a04 <HAL_GPIO_Init+0x78>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000a98:	240f      	movs	r4, #15
 8000a9a:	f022 0503 	bic.w	r5, r2, #3
 8000a9e:	f105 458c 	add.w	r5, r5, #1174405120	@ 0x46000000
 8000aa2:	f002 0103 	and.w	r1, r2, #3
 8000aa6:	f505 3508 	add.w	r5, r5, #139264	@ 0x22000
 8000aaa:	00c9      	lsls	r1, r1, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8000aac:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000aae:	fa04 f701 	lsl.w	r7, r4, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000ab2:	9c03      	ldr	r4, [sp, #12]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000ab4:	ea26 0607 	bic.w	r6, r6, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000ab8:	fa04 f101 	lsl.w	r1, r4, r1
 8000abc:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2U] = tmp;
 8000abe:	6629      	str	r1, [r5, #96]	@ 0x60
        tmp = EXTI->RTSR1;
 8000ac0:	4974      	ldr	r1, [pc, #464]	@ (8000c94 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac2:	02dc      	lsls	r4, r3, #11
        tmp &= ~((uint32_t)iocurrent);
 8000ac4:	ea6f 050e 	mvn.w	r5, lr
        tmp = EXTI->RTSR1;
 8000ac8:	6809      	ldr	r1, [r1, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aca:	d428      	bmi.n	8000b1e <HAL_GPIO_Init+0x192>
        tmp &= ~((uint32_t)iocurrent);
 8000acc:	4029      	ands	r1, r5
        EXTI->RTSR1 = tmp;
 8000ace:	4c71      	ldr	r4, [pc, #452]	@ (8000c94 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad0:	029f      	lsls	r7, r3, #10
        EXTI->RTSR1 = tmp;
 8000ad2:	6021      	str	r1, [r4, #0]
        tmp = EXTI->FTSR1;
 8000ad4:	6861      	ldr	r1, [r4, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad6:	d41f      	bmi.n	8000b18 <HAL_GPIO_Init+0x18c>
        tmp &= ~((uint32_t)iocurrent);
 8000ad8:	4029      	ands	r1, r5
        EXTI->FTSR1 = tmp;
 8000ada:	4c6e      	ldr	r4, [pc, #440]	@ (8000c94 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000adc:	039e      	lsls	r6, r3, #14
        EXTI->FTSR1 = tmp;
 8000ade:	6061      	str	r1, [r4, #4]
        tmp = EXTI->EMR1;
 8000ae0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae4:	d415      	bmi.n	8000b12 <HAL_GPIO_Init+0x186>
        tmp &= ~((uint32_t)iocurrent);
 8000ae6:	4029      	ands	r1, r5
        EXTI->EMR1 = tmp;
 8000ae8:	4c6a      	ldr	r4, [pc, #424]	@ (8000c94 <HAL_GPIO_Init+0x308>)
 8000aea:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8000aee:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af2:	03dc      	lsls	r4, r3, #15
 8000af4:	d40a      	bmi.n	8000b0c <HAL_GPIO_Init+0x180>
        tmp &= ~((uint32_t)iocurrent);
 8000af6:	4029      	ands	r1, r5
        EXTI->IMR1 = tmp;
 8000af8:	4b66      	ldr	r3, [pc, #408]	@ (8000c94 <HAL_GPIO_Init+0x308>)
    position++;
 8000afa:	3201      	adds	r2, #1
        EXTI->IMR1 = tmp;
 8000afc:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b00:	fa3b f302 	lsrs.w	r3, fp, r2
 8000b04:	d182      	bne.n	8000a0c <HAL_GPIO_Init+0x80>
  }
}
 8000b06:	b005      	add	sp, #20
 8000b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          tmp |= iocurrent;
 8000b0c:	ea41 010e 	orr.w	r1, r1, lr
 8000b10:	e7f2      	b.n	8000af8 <HAL_GPIO_Init+0x16c>
          tmp |= iocurrent;
 8000b12:	ea41 010e 	orr.w	r1, r1, lr
 8000b16:	e7e7      	b.n	8000ae8 <HAL_GPIO_Init+0x15c>
          tmp |= iocurrent;
 8000b18:	ea41 010e 	orr.w	r1, r1, lr
 8000b1c:	e7dd      	b.n	8000ada <HAL_GPIO_Init+0x14e>
          tmp |= iocurrent;
 8000b1e:	ea4e 0101 	orr.w	r1, lr, r1
 8000b22:	e7d4      	b.n	8000ace <HAL_GPIO_Init+0x142>
  uint32_t position = 0U;
 8000b24:	2300      	movs	r3, #0
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b26:	2701      	movs	r7, #1
        tmp = EXTI->RTSR1;
 8000b28:	4e5a      	ldr	r6, [pc, #360]	@ (8000c94 <HAL_GPIO_Init+0x308>)
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b2a:	fa07 f103 	lsl.w	r1, r7, r3
    if (iocurrent != 0U)
 8000b2e:	ea11 050b 	ands.w	r5, r1, fp
 8000b32:	d059      	beq.n	8000be8 <HAL_GPIO_Init+0x25c>
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000b34:	f04f 090f 	mov.w	r9, #15
        tmp = GPIOx->MODER;
 8000b38:	6804      	ldr	r4, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000b3a:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000b3e:	ea24 0401 	bic.w	r4, r4, r1
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000b42:	4955      	ldr	r1, [pc, #340]	@ (8000c98 <HAL_GPIO_Init+0x30c>)
 8000b44:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000b48:	f002 0101 	and.w	r1, r2, #1
 8000b4c:	4099      	lsls	r1, r3
 8000b4e:	4321      	orrs	r1, r4
        GPIOx->MODER = tmp;
 8000b50:	6001      	str	r1, [r0, #0]
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000b52:	4952      	ldr	r1, [pc, #328]	@ (8000c9c <HAL_GPIO_Init+0x310>)
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000b54:	ea4f 0edc 	mov.w	lr, ip, lsr #3
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000b58:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000b5c:	f00c 0407 	and.w	r4, ip, #7
 8000b60:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000b64:	f8de 8020 	ldr.w	r8, [lr, #32]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000b68:	00a4      	lsls	r4, r4, #2
 8000b6a:	fa09 f904 	lsl.w	r9, r9, r4
 8000b6e:	ea28 0809 	bic.w	r8, r8, r9
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000b72:	f04f 090b 	mov.w	r9, #11
 8000b76:	fa09 f404 	lsl.w	r4, r9, r4
 8000b7a:	ea44 0408 	orr.w	r4, r4, r8
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000b7e:	f04f 0803 	mov.w	r8, #3
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000b82:	f8ce 4020 	str.w	r4, [lr, #32]
        tmp = p_gpio->MODER;
 8000b86:	680c      	ldr	r4, [r1, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000b88:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8000b8c:	fa08 f80e 	lsl.w	r8, r8, lr
 8000b90:	ea24 0908 	bic.w	r9, r4, r8
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000b94:	2402      	movs	r4, #2
 8000b96:	fa04 f40e 	lsl.w	r4, r4, lr
 8000b9a:	ea44 0409 	orr.w	r4, r4, r9
        p_gpio->MODER = tmp;
 8000b9e:	600c      	str	r4, [r1, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba0:	1e54      	subs	r4, r2, #1
 8000ba2:	2c01      	cmp	r4, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000ba4:	ea6f 0808 	mvn.w	r8, r8
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba8:	d901      	bls.n	8000bae <HAL_GPIO_Init+0x222>
 8000baa:	2a11      	cmp	r2, #17
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x26a>
        tmp = p_gpio->OSPEEDR;
 8000bae:	688c      	ldr	r4, [r1, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000bb0:	0912      	lsrs	r2, r2, #4
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000bb2:	fa07 f50c 	lsl.w	r5, r7, ip
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000bb6:	fa02 f20c 	lsl.w	r2, r2, ip
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000bba:	ea08 0c04 	and.w	ip, r8, r4
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000bbe:	f8da 400c 	ldr.w	r4, [sl, #12]
 8000bc2:	fa04 f40e 	lsl.w	r4, r4, lr
 8000bc6:	ea44 040c 	orr.w	r4, r4, ip
        p_gpio->OSPEEDR = tmp;
 8000bca:	608c      	str	r4, [r1, #8]
        tmp = p_gpio->OTYPER;
 8000bcc:	684c      	ldr	r4, [r1, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000bce:	ea24 0405 	bic.w	r4, r4, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000bd2:	4322      	orrs	r2, r4
        p_gpio->OTYPER = tmp;
 8000bd4:	604a      	str	r2, [r1, #4]
        tmp = p_gpio->PUPDR;
 8000bd6:	68cc      	ldr	r4, [r1, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000bd8:	f8da 2008 	ldr.w	r2, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000bdc:	ea08 0404 	and.w	r4, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000be0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000be4:	4322      	orrs	r2, r4
        p_gpio->PUPDR = tmp;
 8000be6:	60ca      	str	r2, [r1, #12]
    position++;
 8000be8:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000bea:	fa3b f203 	lsrs.w	r2, fp, r3
 8000bee:	d19c      	bne.n	8000b2a <HAL_GPIO_Init+0x19e>
}
 8000bf0:	b005      	add	sp, #20
 8000bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf6:	2a12      	cmp	r2, #18
 8000bf8:	d0d9      	beq.n	8000bae <HAL_GPIO_Init+0x222>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000bfa:	2a03      	cmp	r2, #3
 8000bfc:	d0f4      	beq.n	8000be8 <HAL_GPIO_Init+0x25c>
        tmp = p_gpio->PUPDR;
 8000bfe:	68cc      	ldr	r4, [r1, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000c00:	ea08 0804 	and.w	r8, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000c04:	f8da 4008 	ldr.w	r4, [sl, #8]
 8000c08:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c0c:	ea44 0408 	orr.w	r4, r4, r8
        p_gpio->PUPDR = tmp;
 8000c10:	60cc      	str	r4, [r1, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c12:	00d1      	lsls	r1, r2, #3
 8000c14:	d5e8      	bpl.n	8000be8 <HAL_GPIO_Init+0x25c>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000c16:	f04f 080f 	mov.w	r8, #15
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000c1a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8000c1e:	f023 0103 	bic.w	r1, r3, #3
 8000c22:	f101 418c 	add.w	r1, r1, #1174405120	@ 0x46000000
 8000c26:	f501 3108 	add.w	r1, r1, #139264	@ 0x22000
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000c2a:	f003 0c03 	and.w	ip, r3, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8000c2e:	f8d1 e060 	ldr.w	lr, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000c32:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000c36:	fa08 f80c 	lsl.w	r8, r8, ip
 8000c3a:	ea2e 0e08 	bic.w	lr, lr, r8
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000c3e:	fa04 f40c 	lsl.w	r4, r4, ip
 8000c42:	ea44 040e 	orr.w	r4, r4, lr
        EXTI->EXTICR[position >> 2U] = tmp;
 8000c46:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 8000c48:	43ec      	mvns	r4, r5
        tmp = EXTI->RTSR1;
 8000c4a:	6831      	ldr	r1, [r6, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c4c:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
        tmp &= ~((uint32_t)iocurrent);
 8000c50:	bf0c      	ite	eq
 8000c52:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8000c54:	4329      	orrne	r1, r5
        EXTI->RTSR1 = tmp;
 8000c56:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 8000c58:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c5a:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8000c5e:	bf0c      	ite	eq
 8000c60:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8000c62:	4329      	orrne	r1, r5
        EXTI->FTSR1 = tmp;
 8000c64:	6071      	str	r1, [r6, #4]
        tmp = EXTI->EMR1;
 8000c66:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8000c6e:	bf0c      	ite	eq
 8000c70:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8000c72:	4329      	orrne	r1, r5
        EXTI->EMR1 = tmp;
 8000c74:	f8c6 1084 	str.w	r1, [r6, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8000c78:	f8d6 1080 	ldr.w	r1, [r6, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c7c:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 8000c7e:	bf54      	ite	pl
 8000c80:	4021      	andpl	r1, r4
          tmp |= iocurrent;
 8000c82:	4329      	orrmi	r1, r5
        EXTI->IMR1 = tmp;
 8000c84:	f8c6 1080 	str.w	r1, [r6, #128]	@ 0x80
 8000c88:	e7ae      	b.n	8000be8 <HAL_GPIO_Init+0x25c>
 8000c8a:	bf00      	nop
 8000c8c:	46020000 	.word	0x46020000
 8000c90:	002f7f7f 	.word	0x002f7f7f
 8000c94:	46022000 	.word	0x46022000
 8000c98:	08002994 	.word	0x08002994
 8000c9c:	08002990 	.word	0x08002990

08000ca0 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000ca0:	4a03      	ldr	r2, [pc, #12]	@ (8000cb0 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8000ca2:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000ca4:	6813      	ldr	r3, [r2, #0]
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40030400 	.word	0x40030400

08000cb4 <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000cb4:	4a21      	ldr	r2, [pc, #132]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000cb6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000cb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000cbc:	4283      	cmp	r3, r0
 8000cbe:	d034      	beq.n	8000d2a <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000cc0:	f04f 0c32 	mov.w	ip, #50	@ 0x32
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000cc4:	68d3      	ldr	r3, [r2, #12]
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000cc6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000cca:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8000cce:	ea43 0300 	orr.w	r3, r3, r0
 8000cd2:	bf88      	it	hi
 8000cd4:	f443 2380 	orrhi.w	r3, r3, #262144	@ 0x40000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000cd8:	60d3      	str	r3, [r2, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000cda:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8000cdc:	4a19      	ldr	r2, [pc, #100]	@ (8000d44 <HAL_PWREx_ControlVoltageScaling+0x90>)
 8000cde:	681b      	ldr	r3, [r3, #0]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000ce0:	4816      	ldr	r0, [pc, #88]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0x88>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000ce2:	fba2 1303 	umull	r1, r3, r2, r3
 8000ce6:	099b      	lsrs	r3, r3, #6
 8000ce8:	fb0c f303 	mul.w	r3, ip, r3
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000cf0:	68c1      	ldr	r1, [r0, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000cf2:	099b      	lsrs	r3, r3, #6
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000cf4:	040a      	lsls	r2, r1, #16
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000cf6:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000cfa:	d407      	bmi.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x58>
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	e000      	b.n	8000d02 <HAL_PWREx_ControlVoltageScaling+0x4e>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000d00:	b18a      	cbz	r2, 8000d26 <HAL_PWREx_ControlVoltageScaling+0x72>
 8000d02:	68c1      	ldr	r1, [r0, #12]
  {
    timeout--;
 8000d04:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000d06:	0409      	lsls	r1, r1, #16
 8000d08:	d5fa      	bpl.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }

  /* Check time out */
  if (timeout != 0U)
 8000d0a:	b162      	cbz	r2, 8000d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000d0c:	490b      	ldr	r1, [pc, #44]	@ (8000d3c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000d0e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000d10:	0410      	lsls	r0, r2, #16
 8000d12:	d406      	bmi.n	8000d22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000d14:	e000      	b.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0x64>
 8000d16:	b133      	cbz	r3, 8000d26 <HAL_PWREx_ControlVoltageScaling+0x72>
 8000d18:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
    {
      timeout--;
 8000d1a:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000d1c:	0412      	lsls	r2, r2, #16
 8000d1e:	d5fa      	bpl.n	8000d16 <HAL_PWREx_ControlVoltageScaling+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000d20:	b10b      	cbz	r3, 8000d26 <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 8000d22:	2000      	movs	r0, #0
 8000d24:	4770      	bx	lr
  {
    return HAL_TIMEOUT;
 8000d26:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8000d28:	4770      	bx	lr
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d2e:	d9f8      	bls.n	8000d22 <HAL_PWREx_ControlVoltageScaling+0x6e>
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000d30:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 8000d32:	2000      	movs	r0, #0
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d38:	60d3      	str	r3, [r2, #12]
 8000d3a:	4770      	bx	lr
 8000d3c:	46020800 	.word	0x46020800
 8000d40:	20000000 	.word	0x20000000
 8000d44:	10624dd3 	.word	0x10624dd3

08000d48 <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000d48:	4b02      	ldr	r3, [pc, #8]	@ (8000d54 <HAL_PWREx_GetVoltageRange+0xc>)
 8000d4a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
}
 8000d4c:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	46020800 	.word	0x46020800

08000d58 <HAL_PWREx_ConfigSupply>:

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000d58:	2132      	movs	r1, #50	@ 0x32
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <HAL_PWREx_ConfigSupply+0x68>)
 8000d5c:	4a19      	ldr	r2, [pc, #100]	@ (8000dc4 <HAL_PWREx_ConfigSupply+0x6c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	fba2 c303 	umull	ip, r3, r2, r3
 8000d64:	099b      	lsrs	r3, r3, #6
 8000d66:	fb01 f303 	mul.w	r3, r1, r3
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000d6e:	4916      	ldr	r1, [pc, #88]	@ (8000dc8 <HAL_PWREx_ConfigSupply+0x70>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000d70:	099b      	lsrs	r3, r3, #6
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000d72:	688a      	ldr	r2, [r1, #8]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000d74:	3301      	adds	r3, #1
  if (SupplySource == PWR_LDO_SUPPLY)
 8000d76:	b980      	cbnz	r0, 8000d9a <HAL_PWREx_ConfigSupply+0x42>
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000d78:	f022 0202 	bic.w	r2, r2, #2
 8000d7c:	608a      	str	r2, [r1, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000d7e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000d80:	0790      	lsls	r0, r2, #30
 8000d82:	d402      	bmi.n	8000d8a <HAL_PWREx_ConfigSupply+0x32>
  if (timeout == 0U)
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8000d84:	2000      	movs	r0, #0
 8000d86:	4770      	bx	lr
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000d88:	b12b      	cbz	r3, 8000d96 <HAL_PWREx_ConfigSupply+0x3e>
 8000d8a:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 8000d8c:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000d8e:	0792      	lsls	r2, r2, #30
 8000d90:	d4fa      	bmi.n	8000d88 <HAL_PWREx_ConfigSupply+0x30>
  if (timeout == 0U)
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f6      	bne.n	8000d84 <HAL_PWREx_ConfigSupply+0x2c>
    return HAL_TIMEOUT;
 8000d96:	2003      	movs	r0, #3
}
 8000d98:	4770      	bx	lr
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000d9a:	f042 0202 	orr.w	r2, r2, #2
 8000d9e:	608a      	str	r2, [r1, #8]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000da0:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000da2:	0790      	lsls	r0, r2, #30
 8000da4:	d4ee      	bmi.n	8000d84 <HAL_PWREx_ConfigSupply+0x2c>
 8000da6:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 8000da8:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000daa:	0792      	lsls	r2, r2, #30
 8000dac:	d4f1      	bmi.n	8000d92 <HAL_PWREx_ConfigSupply+0x3a>
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f1      	beq.n	8000d96 <HAL_PWREx_ConfigSupply+0x3e>
 8000db2:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 8000db4:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000db6:	0792      	lsls	r2, r2, #30
 8000db8:	d5f9      	bpl.n	8000dae <HAL_PWREx_ConfigSupply+0x56>
  if (timeout == 0U)
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1e2      	bne.n	8000d84 <HAL_PWREx_ConfigSupply+0x2c>
 8000dbe:	e7ea      	b.n	8000d96 <HAL_PWREx_ConfigSupply+0x3e>
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	10624dd3 	.word	0x10624dd3
 8000dc8:	46020800 	.word	0x46020800

08000dcc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8000dcc:	4a02      	ldr	r2, [pc, #8]	@ (8000dd8 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8000dce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000dd6:	4770      	bx	lr
 8000dd8:	46020800 	.word	0x46020800

08000ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000ddc:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000dde:	4d2c      	ldr	r5, [pc, #176]	@ (8000e90 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
{
 8000de0:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000de2:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
{
 8000de6:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000de8:	075b      	lsls	r3, r3, #29
 8000dea:	d52b      	bpl.n	8000e44 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000dec:	f7ff ffac 	bl	8000d48 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8000df0:	f420 3380 	bic.w	r3, r0, #65536	@ 0x10000
 8000df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000df8:	d007      	beq.n	8000e0a <RCC_SetFlashLatencyFromMSIRange+0x2e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8000dfa:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8000dfe:	d217      	bcs.n	8000e30 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8000e00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8000e04:	d133      	bne.n	8000e6e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8000e06:	2203      	movs	r2, #3
 8000e08:	e004      	b.n	8000e14 <RCC_SetFlashLatencyFromMSIRange+0x38>
    if (msirange < RCC_MSIRANGE_1)
 8000e0a:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8000e0e:	bf2c      	ite	cs
 8000e10:	2200      	movcs	r2, #0
 8000e12:	2201      	movcc	r2, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000e14:	491f      	ldr	r1, [pc, #124]	@ (8000e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000e16:	680b      	ldr	r3, [r1, #0]
 8000e18:	f023 030f 	bic.w	r3, r3, #15
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000e20:	6808      	ldr	r0, [r1, #0]
 8000e22:	f000 000f 	and.w	r0, r0, #15
 8000e26:	1a80      	subs	r0, r0, r2
 8000e28:	bf18      	it	ne
 8000e2a:	2001      	movne	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000e2c:	b003      	add	sp, #12
 8000e2e:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 8000e30:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8000e34:	d91e      	bls.n	8000e74 <RCC_SetFlashLatencyFromMSIRange+0x98>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8000e36:	bb10      	cbnz	r0, 8000e7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
          if (msirange > RCC_MSIRANGE_3)
 8000e38:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
 8000e3c:	bf8c      	ite	hi
 8000e3e:	2200      	movhi	r2, #0
 8000e40:	2201      	movls	r2, #1
 8000e42:	e7e7      	b.n	8000e14 <RCC_SetFlashLatencyFromMSIRange+0x38>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e44:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8000e50:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000e5c:	f7ff ff74 	bl	8000d48 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000e60:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8000e64:	f023 0304 	bic.w	r3, r3, #4
 8000e68:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8000e6c:	e7c0      	b.n	8000df0 <RCC_SetFlashLatencyFromMSIRange+0x14>
        return HAL_ERROR;
 8000e6e:	2001      	movs	r0, #1
}
 8000e70:	b003      	add	sp, #12
 8000e72:	bd30      	pop	{r4, r5, pc}
        if (msirange == RCC_MSIRANGE_1)
 8000e74:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8000e78:	d003      	beq.n	8000e82 <RCC_SetFlashLatencyFromMSIRange+0xa6>
          latency = FLASH_LATENCY_1; /* 1WS */
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	e7ca      	b.n	8000e14 <RCC_SetFlashLatencyFromMSIRange+0x38>
      latency = FLASH_LATENCY_0; /* 0WS */
 8000e7e:	2200      	movs	r2, #0
 8000e80:	e7c8      	b.n	8000e14 <RCC_SetFlashLatencyFromMSIRange+0x38>
            latency = FLASH_LATENCY_2; /* 2WS */
 8000e82:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8000e86:	bf0c      	ite	eq
 8000e88:	2201      	moveq	r2, #1
 8000e8a:	2202      	movne	r2, #2
 8000e8c:	e7c2      	b.n	8000e14 <RCC_SetFlashLatencyFromMSIRange+0x38>
 8000e8e:	bf00      	nop
 8000e90:	46020c00 	.word	0x46020c00
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e98:	4a41      	ldr	r2, [pc, #260]	@ (8000fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000e9a:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000e9e:	f013 030c 	ands.w	r3, r3, #12
 8000ea2:	d00b      	beq.n	8000ebc <HAL_RCC_GetSysClockFreq+0x24>
 8000ea4:	2b0c      	cmp	r3, #12
 8000ea6:	d05f      	beq.n	8000f68 <HAL_RCC_GetSysClockFreq+0xd0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea8:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 8000eaa:	483e      	ldr	r0, [pc, #248]	@ (8000fa4 <HAL_RCC_GetSysClockFreq+0x10c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eac:	f002 020c 	and.w	r2, r2, #12
 8000eb0:	2a04      	cmp	r2, #4
 8000eb2:	d072      	beq.n	8000f9a <HAL_RCC_GetSysClockFreq+0x102>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	bf18      	it	ne
 8000eb8:	2000      	movne	r0, #0
 8000eba:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8000ebc:	4a38      	ldr	r2, [pc, #224]	@ (8000fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000ebe:	6891      	ldr	r1, [r2, #8]
 8000ec0:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8000ec2:	bf54      	ite	pl
 8000ec4:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8000ec8:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8000eca:	4937      	ldr	r1, [pc, #220]	@ (8000fa8 <HAL_RCC_GetSysClockFreq+0x110>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8000ecc:	bf54      	ite	pl
 8000ece:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8000ed2:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8000ed4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d05f      	beq.n	8000f9c <HAL_RCC_GetSysClockFreq+0x104>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8000edc:	4930      	ldr	r1, [pc, #192]	@ (8000fa0 <HAL_RCC_GetSysClockFreq+0x108>)
{
 8000ede:	b510      	push	{r4, lr}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8000ee0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8000ee2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8000ee4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8000ee6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000eea:	3301      	adds	r3, #1
 8000eec:	ee07 3a10 	vmov	s14, r3
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8000ef0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8000ef2:	f3c4 1e00 	ubfx	lr, r4, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8000ef6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8000efa:	fb0e f303 	mul.w	r3, lr, r3
 8000efe:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8000f02:	f002 0c03 	and.w	ip, r2, #3
    switch (pllsource)
 8000f06:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8000f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 8000f0e:	d002      	beq.n	8000f16 <HAL_RCC_GetSysClockFreq+0x7e>
 8000f10:	f1bc 0f03 	cmp.w	ip, #3
 8000f14:	d12f      	bne.n	8000f76 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000f16:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000f18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f20:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000f24:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8000fac <HAL_RCC_GetSysClockFreq+0x114>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000f28:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000f2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f30:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 8000fb0 <HAL_RCC_GetSysClockFreq+0x118>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000f34:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000f38:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000f3c:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_RCC_GetSysClockFreq+0x108>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000f42:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8000f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000f48:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8000f4c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8000f50:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f5e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8000f62:	ee17 0a90 	vmov	r0, s15
}
 8000f66:	bd10      	pop	{r4, pc}
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f68:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f6c:	2901      	cmp	r1, #1
 8000f6e:	d0a5      	beq.n	8000ebc <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U;
 8000f70:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f72:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f74:	e7b2      	b.n	8000edc <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000f76:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8000f78:	ee05 0a90 	vmov	s11, r0
 8000f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f80:	ee06 3a10 	vmov	s12, r3
 8000f84:	eeb8 5a65 	vcvt.f32.u32	s10, s11
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000f88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8000f8c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000f90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8000f94:	eddf 5a05 	vldr	s11, [pc, #20]	@ 8000fac <HAL_RCC_GetSysClockFreq+0x114>
 8000f98:	e7cc      	b.n	8000f34 <HAL_RCC_GetSysClockFreq+0x9c>
 8000f9a:	4770      	bx	lr
}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	46020c00 	.word	0x46020c00
 8000fa4:	00f42400 	.word	0x00f42400
 8000fa8:	08002940 	.word	0x08002940
 8000fac:	39000000 	.word	0x39000000
 8000fb0:	4b742400 	.word	0x4b742400

08000fb4 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	f000 810e 	beq.w	80011d6 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fba:	4a9f      	ldr	r2, [pc, #636]	@ (8001238 <HAL_RCC_ClockConfig+0x284>)
{
 8000fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	460d      	mov	r5, r1
{
 8000fcc:	b082      	sub	sp, #8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fce:	d20d      	bcs.n	8000fec <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd0:	6813      	ldr	r3, [r2, #0]
 8000fd2:	f023 030f 	bic.w	r3, r3, #15
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	d003      	beq.n	8000fec <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
}
 8000fe6:	b002      	add	sp, #8
 8000fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	06df      	lsls	r7, r3, #27
 8000ff0:	d50b      	bpl.n	800100a <HAL_RCC_ClockConfig+0x56>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8000ff2:	4992      	ldr	r1, [pc, #584]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 8000ff4:	6960      	ldr	r0, [r4, #20]
 8000ff6:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8000ff8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8000ffc:	4290      	cmp	r0, r2
 8000ffe:	d904      	bls.n	800100a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001000:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8001002:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001006:	4302      	orrs	r2, r0
 8001008:	624a      	str	r2, [r1, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800100a:	071e      	lsls	r6, r3, #28
 800100c:	d50d      	bpl.n	800102a <HAL_RCC_ClockConfig+0x76>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800100e:	498b      	ldr	r1, [pc, #556]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 8001010:	6920      	ldr	r0, [r4, #16]
 8001012:	6a0a      	ldr	r2, [r1, #32]
 8001014:	0912      	lsrs	r2, r2, #4
 8001016:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800101a:	4290      	cmp	r0, r2
 800101c:	d905      	bls.n	800102a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800101e:	6a0a      	ldr	r2, [r1, #32]
 8001020:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001024:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8001028:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800102a:	0758      	lsls	r0, r3, #29
 800102c:	d50b      	bpl.n	8001046 <HAL_RCC_ClockConfig+0x92>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800102e:	4983      	ldr	r1, [pc, #524]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 8001030:	68e0      	ldr	r0, [r4, #12]
 8001032:	6a0a      	ldr	r2, [r1, #32]
 8001034:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8001038:	4290      	cmp	r0, r2
 800103a:	d904      	bls.n	8001046 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800103c:	6a0a      	ldr	r2, [r1, #32]
 800103e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001042:	4302      	orrs	r2, r0
 8001044:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001046:	0799      	lsls	r1, r3, #30
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001048:	f003 0201 	and.w	r2, r3, #1
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	d530      	bpl.n	80010b0 <HAL_RCC_ClockConfig+0xfc>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800104e:	4e7b      	ldr	r6, [pc, #492]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 8001050:	68a0      	ldr	r0, [r4, #8]
 8001052:	6a31      	ldr	r1, [r6, #32]
 8001054:	f001 010f 	and.w	r1, r1, #15
 8001058:	4288      	cmp	r0, r1
 800105a:	d904      	bls.n	8001066 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800105c:	6a31      	ldr	r1, [r6, #32]
 800105e:	f021 010f 	bic.w	r1, r1, #15
 8001062:	4301      	orrs	r1, r0
 8001064:	6231      	str	r1, [r6, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001066:	2a00      	cmp	r2, #0
 8001068:	f000 8081 	beq.w	800116e <HAL_RCC_ClockConfig+0x1ba>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	2b03      	cmp	r3, #3
 8001070:	f000 80b3 	beq.w	80011da <HAL_RCC_ClockConfig+0x226>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001074:	4a71      	ldr	r2, [pc, #452]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001076:	2b02      	cmp	r3, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001078:	6812      	ldr	r2, [r2, #0]
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800107a:	f000 8084 	beq.w	8001186 <HAL_RCC_ClockConfig+0x1d2>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 80be 	bne.w	8001200 <HAL_RCC_ClockConfig+0x24c>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001084:	0757      	lsls	r7, r2, #29
 8001086:	d5ad      	bpl.n	8000fe4 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001088:	4e6c      	ldr	r6, [pc, #432]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108a:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800108e:	69f2      	ldr	r2, [r6, #28]
 8001090:	f022 0203 	bic.w	r2, r2, #3
 8001094:	4313      	orrs	r3, r2
 8001096:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8001098:	f7ff fbaa 	bl	80007f0 <HAL_GetTick>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800109c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800109e:	4607      	mov	r7, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d05b      	beq.n	800115c <HAL_RCC_ClockConfig+0x1a8>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d077      	beq.n	8001198 <HAL_RCC_ClockConfig+0x1e4>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f040 808a 	bne.w	80011c2 <HAL_RCC_ClockConfig+0x20e>
 80010ae:	e07e      	b.n	80011ae <HAL_RCC_ClockConfig+0x1fa>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	d1db      	bne.n	800106c <HAL_RCC_ClockConfig+0xb8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010b4:	4960      	ldr	r1, [pc, #384]	@ (8001238 <HAL_RCC_ClockConfig+0x284>)
 80010b6:	680a      	ldr	r2, [r1, #0]
 80010b8:	f002 020f 	and.w	r2, r2, #15
 80010bc:	42aa      	cmp	r2, r5
 80010be:	d909      	bls.n	80010d4 <HAL_RCC_ClockConfig+0x120>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c0:	680a      	ldr	r2, [r1, #0]
 80010c2:	f022 020f 	bic.w	r2, r2, #15
 80010c6:	432a      	orrs	r2, r5
 80010c8:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ca:	680a      	ldr	r2, [r1, #0]
 80010cc:	f002 020f 	and.w	r2, r2, #15
 80010d0:	42aa      	cmp	r2, r5
 80010d2:	d187      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0x30>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d4:	0759      	lsls	r1, r3, #29
 80010d6:	d50b      	bpl.n	80010f0 <HAL_RCC_ClockConfig+0x13c>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80010d8:	4958      	ldr	r1, [pc, #352]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 80010da:	68e0      	ldr	r0, [r4, #12]
 80010dc:	6a0a      	ldr	r2, [r1, #32]
 80010de:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80010e2:	4290      	cmp	r0, r2
 80010e4:	d204      	bcs.n	80010f0 <HAL_RCC_ClockConfig+0x13c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80010e6:	6a0a      	ldr	r2, [r1, #32]
 80010e8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80010ec:	4302      	orrs	r2, r0
 80010ee:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	071a      	lsls	r2, r3, #28
 80010f2:	d50d      	bpl.n	8001110 <HAL_RCC_ClockConfig+0x15c>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80010f4:	4951      	ldr	r1, [pc, #324]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 80010f6:	6920      	ldr	r0, [r4, #16]
 80010f8:	6a0a      	ldr	r2, [r1, #32]
 80010fa:	0912      	lsrs	r2, r2, #4
 80010fc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8001100:	4290      	cmp	r0, r2
 8001102:	d205      	bcs.n	8001110 <HAL_RCC_ClockConfig+0x15c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001104:	6a0a      	ldr	r2, [r1, #32]
 8001106:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800110a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800110e:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001110:	06db      	lsls	r3, r3, #27
 8001112:	d50b      	bpl.n	800112c <HAL_RCC_ClockConfig+0x178>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001114:	4a49      	ldr	r2, [pc, #292]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 8001116:	6961      	ldr	r1, [r4, #20]
 8001118:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800111a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800111e:	4299      	cmp	r1, r3
 8001120:	d204      	bcs.n	800112c <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8001122:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001128:	430b      	orrs	r3, r1
 800112a:	6253      	str	r3, [r2, #36]	@ 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800112c:	f7ff feb4 	bl	8000e98 <HAL_RCC_GetSysClockFreq>
 8001130:	4603      	mov	r3, r0
 8001132:	4a42      	ldr	r2, [pc, #264]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 8001134:	4942      	ldr	r1, [pc, #264]	@ (8001240 <HAL_RCC_ClockConfig+0x28c>)
 8001136:	6a12      	ldr	r2, [r2, #32]
  status = HAL_InitTick(uwTickPrio);
 8001138:	4842      	ldr	r0, [pc, #264]	@ (8001244 <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800113a:	f002 020f 	and.w	r2, r2, #15
 800113e:	5c89      	ldrb	r1, [r1, r2]
  status = HAL_InitTick(uwTickPrio);
 8001140:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001142:	4a41      	ldr	r2, [pc, #260]	@ (8001248 <HAL_RCC_ClockConfig+0x294>)
 8001144:	40cb      	lsrs	r3, r1
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	b002      	add	sp, #8
 800114a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800114e:	f7ff bac7 	b.w	80006e0 <HAL_InitTick>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001152:	f7ff fb4d 	bl	80007f0 <HAL_GetTick>
 8001156:	1bc3      	subs	r3, r0, r7
 8001158:	4543      	cmp	r3, r8
 800115a:	d838      	bhi.n	80011ce <HAL_RCC_ClockConfig+0x21a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800115c:	69f3      	ldr	r3, [r6, #28]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b0c      	cmp	r3, #12
 8001164:	d1f5      	bne.n	8001152 <HAL_RCC_ClockConfig+0x19e>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	0798      	lsls	r0, r3, #30
 800116a:	d5a3      	bpl.n	80010b4 <HAL_RCC_ClockConfig+0x100>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800116c:	68a0      	ldr	r0, [r4, #8]
 800116e:	4933      	ldr	r1, [pc, #204]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 8001170:	6a0a      	ldr	r2, [r1, #32]
 8001172:	f002 020f 	and.w	r2, r2, #15
 8001176:	4282      	cmp	r2, r0
 8001178:	d99c      	bls.n	80010b4 <HAL_RCC_ClockConfig+0x100>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800117a:	6a0a      	ldr	r2, [r1, #32]
 800117c:	f022 020f 	bic.w	r2, r2, #15
 8001180:	4302      	orrs	r2, r0
 8001182:	620a      	str	r2, [r1, #32]
 8001184:	e796      	b.n	80010b4 <HAL_RCC_ClockConfig+0x100>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001186:	0392      	lsls	r2, r2, #14
 8001188:	f53f af7e 	bmi.w	8001088 <HAL_RCC_ClockConfig+0xd4>
 800118c:	e72a      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x30>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118e:	f7ff fb2f 	bl	80007f0 <HAL_GetTick>
 8001192:	1bc0      	subs	r0, r0, r7
 8001194:	4540      	cmp	r0, r8
 8001196:	d81a      	bhi.n	80011ce <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001198:	69f3      	ldr	r3, [r6, #28]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d1f5      	bne.n	800118e <HAL_RCC_ClockConfig+0x1da>
 80011a2:	e7e0      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f7ff fb24 	bl	80007f0 <HAL_GetTick>
 80011a8:	1bc0      	subs	r0, r0, r7
 80011aa:	4540      	cmp	r0, r8
 80011ac:	d80f      	bhi.n	80011ce <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80011ae:	69f3      	ldr	r3, [r6, #28]
 80011b0:	f013 0f0c 	tst.w	r3, #12
 80011b4:	d1f6      	bne.n	80011a4 <HAL_RCC_ClockConfig+0x1f0>
 80011b6:	e7d6      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b8:	f7ff fb1a 	bl	80007f0 <HAL_GetTick>
 80011bc:	1bc0      	subs	r0, r0, r7
 80011be:	4540      	cmp	r0, r8
 80011c0:	d805      	bhi.n	80011ce <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011c2:	69f3      	ldr	r3, [r6, #28]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d1f5      	bne.n	80011b8 <HAL_RCC_ClockConfig+0x204>
 80011cc:	e7cb      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b2>
            return HAL_TIMEOUT;
 80011ce:	2003      	movs	r0, #3
}
 80011d0:	b002      	add	sp, #8
 80011d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80011d6:	2001      	movs	r0, #1
}
 80011d8:	4770      	bx	lr
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 80011dc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80011e0:	0752      	lsls	r2, r2, #29
 80011e2:	d511      	bpl.n	8001208 <HAL_RCC_ClockConfig+0x254>
      tickstart = HAL_GetTick();
 80011e4:	f7ff fb04 	bl	80007f0 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 80011ea:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	035b      	lsls	r3, r3, #13
 80011f0:	d441      	bmi.n	8001276 <HAL_RCC_ClockConfig+0x2c2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_RCC_ClockConfig+0x288>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0199      	lsls	r1, r3, #6
 80011f8:	f57f aef4 	bpl.w	8000fe4 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80011fc:	6863      	ldr	r3, [r4, #4]
 80011fe:	e743      	b.n	8001088 <HAL_RCC_ClockConfig+0xd4>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001200:	0556      	lsls	r6, r2, #21
 8001202:	f57f aeef 	bpl.w	8000fe4 <HAL_RCC_ClockConfig+0x30>
 8001206:	e73f      	b.n	8001088 <HAL_RCC_ClockConfig+0xd4>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800120c:	f042 0204 	orr.w	r2, r2, #4
 8001210:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	9b01      	ldr	r3, [sp, #4]
      tickstart = HAL_GetTick();
 8001220:	f7ff fae6 	bl	80007f0 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001224:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 8001226:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	035f      	lsls	r7, r3, #13
 800122c:	d51b      	bpl.n	8001266 <HAL_RCC_ClockConfig+0x2b2>
        pwrclkchanged = SET;
 800122e:	f04f 0801 	mov.w	r8, #1
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001232:	4f06      	ldr	r7, [pc, #24]	@ (800124c <HAL_RCC_ClockConfig+0x298>)
 8001234:	e011      	b.n	800125a <HAL_RCC_ClockConfig+0x2a6>
 8001236:	bf00      	nop
 8001238:	40022000 	.word	0x40022000
 800123c:	46020c00 	.word	0x46020c00
 8001240:	08002980 	.word	0x08002980
 8001244:	20000008 	.word	0x20000008
 8001248:	20000000 	.word	0x20000000
 800124c:	46020800 	.word	0x46020800
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001250:	f7ff face 	bl	80007f0 <HAL_GetTick>
 8001254:	1b80      	subs	r0, r0, r6
 8001256:	2802      	cmp	r0, #2
 8001258:	d8b9      	bhi.n	80011ce <HAL_RCC_ClockConfig+0x21a>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	0458      	lsls	r0, r3, #17
 800125e:	d5f7      	bpl.n	8001250 <HAL_RCC_ClockConfig+0x29c>
      if (pwrclkchanged == SET)
 8001260:	f1b8 0f00 	cmp.w	r8, #0
 8001264:	d0c5      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x23e>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001266:	4a05      	ldr	r2, [pc, #20]	@ (800127c <HAL_RCC_ClockConfig+0x2c8>)
 8001268:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800126c:	f023 0304 	bic.w	r3, r3, #4
 8001270:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001274:	e7bd      	b.n	80011f2 <HAL_RCC_ClockConfig+0x23e>
    FlagStatus  pwrclkchanged = RESET;
 8001276:	f04f 0800 	mov.w	r8, #0
 800127a:	e7da      	b.n	8001232 <HAL_RCC_ClockConfig+0x27e>
 800127c:	46020c00 	.word	0x46020c00

08001280 <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 8001280:	2800      	cmp	r0, #0
 8001282:	f000 82a4 	beq.w	80017ce <HAL_RCC_OscConfig+0x54e>
{
 8001286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128a:	4aae      	ldr	r2, [pc, #696]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800128c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128e:	69d5      	ldr	r5, [r2, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001290:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001292:	06da      	lsls	r2, r3, #27
 8001294:	4604      	mov	r4, r0
{
 8001296:	b084      	sub	sp, #16
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001298:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129c:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012a0:	d531      	bpl.n	8001306 <HAL_RCC_OscConfig+0x86>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	f000 81b2 	beq.w	800160c <HAL_RCC_OscConfig+0x38c>
 80012a8:	2d0c      	cmp	r5, #12
 80012aa:	f000 81ac 	beq.w	8001606 <HAL_RCC_OscConfig+0x386>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ae:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 80012b0:	4fa4      	ldr	r7, [pc, #656]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 822b 	beq.w	800170e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_MSI_ENABLE();
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80012c0:	f7ff fa96 	bl	80007f0 <HAL_GetTick>
 80012c4:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80012c6:	e006      	b.n	80012d6 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c8:	f7ff fa92 	bl	80007f0 <HAL_GetTick>
 80012cc:	eba0 0008 	sub.w	r0, r0, r8
 80012d0:	2802      	cmp	r0, #2
 80012d2:	f200 820e 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	075a      	lsls	r2, r3, #29
 80012da:	d5f5      	bpl.n	80012c8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80012e8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80012f0:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 80012f4:	6a21      	ldr	r1, [r4, #32]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f0c0 8367 	bcc.w	80019ca <HAL_RCC_OscConfig+0x74a>
 80012fc:	f023 031f 	bic.w	r3, r3, #31
 8001300:	430b      	orrs	r3, r1
 8001302:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	07df      	lsls	r7, r3, #31
 8001308:	d531      	bpl.n	800136e <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800130a:	2d08      	cmp	r5, #8
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800130c:	6862      	ldr	r2, [r4, #4]
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800130e:	f000 81bd 	beq.w	800168c <HAL_RCC_OscConfig+0x40c>
 8001312:	2d0c      	cmp	r5, #12
 8001314:	f000 81b7 	beq.w	8001686 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001318:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800131c:	f000 825b 	beq.w	80017d6 <HAL_RCC_OscConfig+0x556>
 8001320:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8001324:	f000 833c 	beq.w	80019a0 <HAL_RCC_OscConfig+0x720>
 8001328:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 800132c:	f000 82fb 	beq.w	8001926 <HAL_RCC_OscConfig+0x6a6>
 8001330:	4f84      	ldr	r7, [pc, #528]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001348:	603b      	str	r3, [r7, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800134a:	2a00      	cmp	r2, #0
 800134c:	f040 8248 	bne.w	80017e0 <HAL_RCC_OscConfig+0x560>
        tickstart = HAL_GetTick();
 8001350:	f7ff fa4e 	bl	80007f0 <HAL_GetTick>
 8001354:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001356:	e006      	b.n	8001366 <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fa4a 	bl	80007f0 <HAL_GetTick>
 800135c:	eba0 0008 	sub.w	r0, r0, r8
 8001360:	2864      	cmp	r0, #100	@ 0x64
 8001362:	f200 81c6 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	0399      	lsls	r1, r3, #14
 800136a:	d4f5      	bmi.n	8001358 <HAL_RCC_OscConfig+0xd8>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	079a      	lsls	r2, r3, #30
 8001370:	d50f      	bpl.n	8001392 <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001372:	2d04      	cmp	r5, #4
 8001374:	f040 81c4 	bne.w	8001700 <HAL_RCC_OscConfig+0x480>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001378:	68e3      	ldr	r3, [r4, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 817f 	beq.w	800167e <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001380:	4a70      	ldr	r2, [pc, #448]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 8001382:	6921      	ldr	r1, [r4, #16]
 8001384:	6913      	ldr	r3, [r2, #16]
 8001386:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800138a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800138e:	6113      	str	r3, [r2, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	0718      	lsls	r0, r3, #28
 8001394:	d54d      	bpl.n	8001432 <HAL_RCC_OscConfig+0x1b2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001396:	4b6b      	ldr	r3, [pc, #428]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 8001398:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800139c:	0751      	lsls	r1, r2, #29
 800139e:	f100 81b4 	bmi.w	800170a <HAL_RCC_OscConfig+0x48a>
      pwrclkchanged = SET;
 80013a2:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80013a8:	f042 0204 	orr.w	r2, r2, #4
 80013ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80013b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80013bc:	4e62      	ldr	r6, [pc, #392]	@ (8001548 <HAL_RCC_OscConfig+0x2c8>)
 80013be:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80013c0:	07da      	lsls	r2, r3, #31
 80013c2:	f140 8186 	bpl.w	80016d2 <HAL_RCC_OscConfig+0x452>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c6:	6963      	ldr	r3, [r4, #20]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 825d 	beq.w	8001888 <HAL_RCC_OscConfig+0x608>
      uint32_t bdcr_temp = RCC->BDCR;
 80013ce:	4e5d      	ldr	r6, [pc, #372]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80013d0:	69a2      	ldr	r2, [r4, #24]
      uint32_t bdcr_temp = RCC->BDCR;
 80013d2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80013d6:	f003 5180 	and.w	r1, r3, #268435456	@ 0x10000000
 80013da:	428a      	cmp	r2, r1
 80013dc:	d010      	beq.n	8001400 <HAL_RCC_OscConfig+0x180>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80013de:	f003 6140 	and.w	r1, r3, #201326592	@ 0xc000000
 80013e2:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 80013e6:	f000 814a 	beq.w	800167e <HAL_RCC_OscConfig+0x3fe>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80013ea:	0158      	lsls	r0, r3, #5
 80013ec:	f100 82b1 	bmi.w	8001952 <HAL_RCC_OscConfig+0x6d2>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80013f0:	4954      	ldr	r1, [pc, #336]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 80013f2:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	4313      	orrs	r3, r2
 80013fc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      __HAL_RCC_LSI_ENABLE();
 8001400:	4e50      	ldr	r6, [pc, #320]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 8001402:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8001406:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800140a:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800140e:	f7ff f9ef 	bl	80007f0 <HAL_GetTick>
 8001412:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001414:	e005      	b.n	8001422 <HAL_RCC_OscConfig+0x1a2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff f9eb 	bl	80007f0 <HAL_GetTick>
 800141a:	1bc0      	subs	r0, r0, r7
 800141c:	2805      	cmp	r0, #5
 800141e:	f200 8168 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001422:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8001426:	011a      	lsls	r2, r3, #4
 8001428:	d5f5      	bpl.n	8001416 <HAL_RCC_OscConfig+0x196>
    if (pwrclkchanged == SET)
 800142a:	2d00      	cmp	r5, #0
 800142c:	f040 8289 	bne.w	8001942 <HAL_RCC_OscConfig+0x6c2>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	075d      	lsls	r5, r3, #29
 8001434:	d55e      	bpl.n	80014f4 <HAL_RCC_OscConfig+0x274>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001436:	4b43      	ldr	r3, [pc, #268]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 8001438:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800143c:	0750      	lsls	r0, r2, #29
 800143e:	f100 81c8 	bmi.w	80017d2 <HAL_RCC_OscConfig+0x552>
      pwrclkchanged = SET;
 8001442:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8001448:	f042 0204 	orr.w	r2, r2, #4
 800144c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	9b02      	ldr	r3, [sp, #8]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800145c:	4e3a      	ldr	r6, [pc, #232]	@ (8001548 <HAL_RCC_OscConfig+0x2c8>)
 800145e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8001460:	07d9      	lsls	r1, r3, #31
 8001462:	f140 828c 	bpl.w	800197e <HAL_RCC_OscConfig+0x6fe>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001466:	68a3      	ldr	r3, [r4, #8]
 8001468:	07da      	lsls	r2, r3, #31
 800146a:	f140 81d3 	bpl.w	8001814 <HAL_RCC_OscConfig+0x594>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800146e:	075e      	lsls	r6, r3, #29
 8001470:	f140 8251 	bpl.w	8001916 <HAL_RCC_OscConfig+0x696>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001474:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 8001476:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800147a:	f042 0204 	orr.w	r2, r2, #4
 800147e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001482:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800148e:	f7ff f9af 	bl	80007f0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001496:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001498:	4f2a      	ldr	r7, [pc, #168]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 800149a:	e005      	b.n	80014a8 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff f9a8 	bl	80007f0 <HAL_GetTick>
 80014a0:	1b80      	subs	r0, r0, r6
 80014a2:	4540      	cmp	r0, r8
 80014a4:	f200 8125 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80014ac:	0798      	lsls	r0, r3, #30
 80014ae:	d5f5      	bpl.n	800149c <HAL_RCC_OscConfig+0x21c>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80014b0:	68a3      	ldr	r3, [r4, #8]
 80014b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80014b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80014ba:	f000 82c7 	beq.w	8001a4c <HAL_RCC_OscConfig+0x7cc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80014be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80014ca:	4f1e      	ldr	r7, [pc, #120]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 80014cc:	e005      	b.n	80014da <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff f98f 	bl	80007f0 <HAL_GetTick>
 80014d2:	1b80      	subs	r0, r0, r6
 80014d4:	4540      	cmp	r0, r8
 80014d6:	f200 810c 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80014da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80014de:	0519      	lsls	r1, r3, #20
 80014e0:	d5f5      	bpl.n	80014ce <HAL_RCC_OscConfig+0x24e>
    if (pwrclkchanged == SET)
 80014e2:	b135      	cbz	r5, 80014f2 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e4:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
 80014e6:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80014ea:	f023 0304 	bic.w	r3, r3, #4
 80014ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	069a      	lsls	r2, r3, #26
 80014f6:	d516      	bpl.n	8001526 <HAL_RCC_OscConfig+0x2a6>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      __HAL_RCC_HSI48_ENABLE();
 80014fa:	4d12      	ldr	r5, [pc, #72]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 81dc 	beq.w	80018ba <HAL_RCC_OscConfig+0x63a>
      __HAL_RCC_HSI48_ENABLE();
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001508:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800150a:	f7ff f971 	bl	80007f0 <HAL_GetTick>
 800150e:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001510:	e005      	b.n	800151e <HAL_RCC_OscConfig+0x29e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001512:	f7ff f96d 	bl	80007f0 <HAL_GetTick>
 8001516:	1b80      	subs	r0, r0, r6
 8001518:	2802      	cmp	r0, #2
 800151a:	f200 80ea 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	049b      	lsls	r3, r3, #18
 8001522:	d5f6      	bpl.n	8001512 <HAL_RCC_OscConfig+0x292>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	061d      	lsls	r5, r3, #24
 8001528:	d51a      	bpl.n	8001560 <HAL_RCC_OscConfig+0x2e0>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800152a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      __HAL_RCC_SHSI_ENABLE();
 800152c:	4d05      	ldr	r5, [pc, #20]	@ (8001544 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 81df 	beq.w	80018f2 <HAL_RCC_OscConfig+0x672>
      __HAL_RCC_SHSI_ENABLE();
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800153a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800153c:	f7ff f958 	bl	80007f0 <HAL_GetTick>
 8001540:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001542:	e009      	b.n	8001558 <HAL_RCC_OscConfig+0x2d8>
 8001544:	46020c00 	.word	0x46020c00
 8001548:	46020800 	.word	0x46020800
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800154c:	f7ff f950 	bl	80007f0 <HAL_GetTick>
 8001550:	1b80      	subs	r0, r0, r6
 8001552:	2802      	cmp	r0, #2
 8001554:	f200 80cd 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001558:	682b      	ldr	r3, [r5, #0]
 800155a:	0418      	lsls	r0, r3, #16
 800155c:	d5f6      	bpl.n	800154c <HAL_RCC_OscConfig+0x2cc>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	065a      	lsls	r2, r3, #25
 8001562:	d52b      	bpl.n	80015bc <HAL_RCC_OscConfig+0x33c>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8257 	beq.w	8001a1a <HAL_RCC_OscConfig+0x79a>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800156c:	4ba5      	ldr	r3, [pc, #660]	@ (8001804 <HAL_RCC_OscConfig+0x584>)
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800157a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001582:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8001586:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 800158a:	f0c0 8235 	bcc.w	80019f8 <HAL_RCC_OscConfig+0x778>
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	f022 021f 	bic.w	r2, r2, #31
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]
      __HAL_RCC_MSIK_ENABLE();
 8001598:	4d9a      	ldr	r5, [pc, #616]	@ (8001804 <HAL_RCC_OscConfig+0x584>)
 800159a:	682b      	ldr	r3, [r5, #0]
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80015a2:	f7ff f925 	bl	80007f0 <HAL_GetTick>
 80015a6:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80015a8:	e005      	b.n	80015b6 <HAL_RCC_OscConfig+0x336>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80015aa:	f7ff f921 	bl	80007f0 <HAL_GetTick>
 80015ae:	1b80      	subs	r0, r0, r6
 80015b0:	2802      	cmp	r0, #2
 80015b2:	f200 809e 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	069b      	lsls	r3, r3, #26
 80015ba:	d5f6      	bpl.n	80015aa <HAL_RCC_OscConfig+0x32a>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80015be:	b303      	cbz	r3, 8001602 <HAL_RCC_OscConfig+0x382>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c0:	4d90      	ldr	r5, [pc, #576]	@ (8001804 <HAL_RCC_OscConfig+0x584>)
 80015c2:	69ea      	ldr	r2, [r5, #28]
 80015c4:	f002 020c 	and.w	r2, r2, #12
 80015c8:	2a0c      	cmp	r2, #12
 80015ca:	f000 8255 	beq.w	8001a78 <HAL_RCC_OscConfig+0x7f8>
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ce:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015d6:	602b      	str	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d8:	f000 82a6 	beq.w	8001b28 <HAL_RCC_OscConfig+0x8a8>
        tickstart = HAL_GetTick();
 80015dc:	f7ff f908 	bl	80007f0 <HAL_GetTick>
 80015e0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80015e2:	e005      	b.n	80015f0 <HAL_RCC_OscConfig+0x370>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff f904 	bl	80007f0 <HAL_GetTick>
 80015e8:	1b00      	subs	r0, r0, r4
 80015ea:	2802      	cmp	r0, #2
 80015ec:	f200 8081 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	0199      	lsls	r1, r3, #6
 80015f4:	d4f6      	bmi.n	80015e4 <HAL_RCC_OscConfig+0x364>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80015f6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80015f8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80015fc:	f023 0303 	bic.w	r3, r3, #3
 8001600:	62ab      	str	r3, [r5, #40]	@ 0x28
  return HAL_OK;
 8001602:	2000      	movs	r0, #0
 8001604:	e03c      	b.n	8001680 <HAL_RCC_OscConfig+0x400>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001606:	2e01      	cmp	r6, #1
 8001608:	f47f ae51 	bne.w	80012ae <HAL_RCC_OscConfig+0x2e>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800160c:	69e3      	ldr	r3, [r4, #28]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d035      	beq.n	800167e <HAL_RCC_OscConfig+0x3fe>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001612:	4b7c      	ldr	r3, [pc, #496]	@ (8001804 <HAL_RCC_OscConfig+0x584>)
 8001614:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	0217      	lsls	r7, r2, #8
 800161a:	bf56      	itet	pl
 800161c:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
 8001620:	689b      	ldrmi	r3, [r3, #8]
 8001622:	041b      	lslpl	r3, r3, #16
 8001624:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001628:	4298      	cmp	r0, r3
 800162a:	f240 8083 	bls.w	8001734 <HAL_RCC_OscConfig+0x4b4>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800162e:	2d00      	cmp	r5, #0
 8001630:	f000 81c4 	beq.w	80019bc <HAL_RCC_OscConfig+0x73c>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001634:	4b73      	ldr	r3, [pc, #460]	@ (8001804 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001636:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001648:	ea42 0200 	orr.w	r2, r2, r0
 800164c:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800164e:	6a21      	ldr	r1, [r4, #32]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	f080 8149 	bcs.w	80018e8 <HAL_RCC_OscConfig+0x668>
 8001656:	2800      	cmp	r0, #0
 8001658:	f2c0 81f2 	blt.w	8001a40 <HAL_RCC_OscConfig+0x7c0>
 800165c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001660:	bf2b      	itete	cs
 8001662:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8001666:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 800166a:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 800166e:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	e081      	b.n	800177a <HAL_RCC_OscConfig+0x4fa>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001676:	f7ff fbb1 	bl	8000ddc <RCC_SetFlashLatencyFromMSIRange>
 800167a:	2800      	cmp	r0, #0
 800167c:	d07d      	beq.n	800177a <HAL_RCC_OscConfig+0x4fa>
    return HAL_ERROR;
 800167e:	2001      	movs	r0, #1
}
 8001680:	b004      	add	sp, #16
 8001682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001686:	2e03      	cmp	r6, #3
 8001688:	f47f ae46 	bne.w	8001318 <HAL_RCC_OscConfig+0x98>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800168c:	2a00      	cmp	r2, #0
 800168e:	d0f6      	beq.n	800167e <HAL_RCC_OscConfig+0x3fe>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001690:	079d      	lsls	r5, r3, #30
 8001692:	f57f ae7e 	bpl.w	8001392 <HAL_RCC_OscConfig+0x112>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001696:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8001698:	4d5a      	ldr	r5, [pc, #360]	@ (8001804 <HAL_RCC_OscConfig+0x584>)
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8085 	beq.w	80017aa <HAL_RCC_OscConfig+0x52a>
        __HAL_RCC_HSI_ENABLE();
 80016a0:	682b      	ldr	r3, [r5, #0]
 80016a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016a8:	f7ff f8a2 	bl	80007f0 <HAL_GetTick>
 80016ac:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ae:	e004      	b.n	80016ba <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff f89e 	bl	80007f0 <HAL_GetTick>
 80016b4:	1b80      	subs	r0, r0, r6
 80016b6:	2802      	cmp	r0, #2
 80016b8:	d81b      	bhi.n	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ba:	682b      	ldr	r3, [r5, #0]
 80016bc:	055b      	lsls	r3, r3, #21
 80016be:	d5f7      	bpl.n	80016b0 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80016c0:	692b      	ldr	r3, [r5, #16]
 80016c2:	6922      	ldr	r2, [r4, #16]
 80016c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80016c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016cc:	612b      	str	r3, [r5, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	e65f      	b.n	8001392 <HAL_RCC_OscConfig+0x112>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80016d2:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 80016da:	f7ff f889 	bl	80007f0 <HAL_GetTick>
 80016de:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80016e0:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80016e2:	07db      	lsls	r3, r3, #31
 80016e4:	f53f ae6f 	bmi.w	80013c6 <HAL_RCC_OscConfig+0x146>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff f882 	bl	80007f0 <HAL_GetTick>
 80016ec:	1bc0      	subs	r0, r0, r7
 80016ee:	2802      	cmp	r0, #2
 80016f0:	d9f6      	bls.n	80016e0 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80016f2:	2003      	movs	r0, #3
}
 80016f4:	b004      	add	sp, #16
 80016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	079a      	lsls	r2, r3, #30
 80016fc:	f57f ae49 	bpl.w	8001392 <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001700:	2d0c      	cmp	r5, #12
 8001702:	d1c8      	bne.n	8001696 <HAL_RCC_OscConfig+0x416>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001704:	2e02      	cmp	r6, #2
 8001706:	d1c6      	bne.n	8001696 <HAL_RCC_OscConfig+0x416>
 8001708:	e636      	b.n	8001378 <HAL_RCC_OscConfig+0xf8>
    FlagStatus  pwrclkchanged = RESET;
 800170a:	2500      	movs	r5, #0
 800170c:	e656      	b.n	80013bc <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_DISABLE();
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8001716:	f7ff f86b 	bl	80007f0 <HAL_GetTick>
 800171a:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800171c:	e005      	b.n	800172a <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171e:	f7ff f867 	bl	80007f0 <HAL_GetTick>
 8001722:	eba0 0008 	sub.w	r0, r0, r8
 8001726:	2802      	cmp	r0, #2
 8001728:	d8e3      	bhi.n	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	075b      	lsls	r3, r3, #29
 800172e:	d4f6      	bmi.n	800171e <HAL_RCC_OscConfig+0x49e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	e5e8      	b.n	8001306 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001734:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001736:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001748:	ea42 0200 	orr.w	r2, r2, r0
 800174c:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800174e:	6a21      	ldr	r1, [r4, #32]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	f080 80c4 	bcs.w	80018de <HAL_RCC_OscConfig+0x65e>
 8001756:	2800      	cmp	r0, #0
 8001758:	f2c0 8148 	blt.w	80019ec <HAL_RCC_OscConfig+0x76c>
 800175c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001760:	bf2b      	itete	cs
 8001762:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8001766:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 800176a:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 800176e:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8001772:	60da      	str	r2, [r3, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001774:	2d00      	cmp	r5, #0
 8001776:	f43f af7e 	beq.w	8001676 <HAL_RCC_OscConfig+0x3f6>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800177a:	f7ff fb8d 	bl	8000e98 <HAL_RCC_GetSysClockFreq>
 800177e:	4603      	mov	r3, r0
 8001780:	4a20      	ldr	r2, [pc, #128]	@ (8001804 <HAL_RCC_OscConfig+0x584>)
 8001782:	4921      	ldr	r1, [pc, #132]	@ (8001808 <HAL_RCC_OscConfig+0x588>)
 8001784:	6a12      	ldr	r2, [r2, #32]
 8001786:	f002 020f 	and.w	r2, r2, #15
 800178a:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 800178c:	4a1f      	ldr	r2, [pc, #124]	@ (800180c <HAL_RCC_OscConfig+0x58c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800178e:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 8001790:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001792:	4a1f      	ldr	r2, [pc, #124]	@ (8001810 <HAL_RCC_OscConfig+0x590>)
 8001794:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8001796:	f7fe ffa3 	bl	80006e0 <HAL_InitTick>
        if (status != HAL_OK)
 800179a:	2800      	cmp	r0, #0
 800179c:	f47f af70 	bne.w	8001680 <HAL_RCC_OscConfig+0x400>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	07d9      	lsls	r1, r3, #31
 80017a4:	d5a9      	bpl.n	80016fa <HAL_RCC_OscConfig+0x47a>
 80017a6:	6862      	ldr	r2, [r4, #4]
 80017a8:	e5b3      	b.n	8001312 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_DISABLE();
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017b2:	f7ff f81d 	bl	80007f0 <HAL_GetTick>
 80017b6:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	e004      	b.n	80017c4 <HAL_RCC_OscConfig+0x544>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff f819 	bl	80007f0 <HAL_GetTick>
 80017be:	1b80      	subs	r0, r0, r6
 80017c0:	2802      	cmp	r0, #2
 80017c2:	d896      	bhi.n	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	055f      	lsls	r7, r3, #21
 80017c8:	d4f7      	bmi.n	80017ba <HAL_RCC_OscConfig+0x53a>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	e5e1      	b.n	8001392 <HAL_RCC_OscConfig+0x112>
    return HAL_ERROR;
 80017ce:	2001      	movs	r0, #1
}
 80017d0:	4770      	bx	lr
    FlagStatus pwrclkchanged = RESET;
 80017d2:	2500      	movs	r5, #0
 80017d4:	e642      	b.n	800145c <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80017d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001804 <HAL_RCC_OscConfig+0x584>)
 80017d8:	6813      	ldr	r3, [r2, #0]
 80017da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017e0:	f7ff f806 	bl	80007f0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e4:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8001804 <HAL_RCC_OscConfig+0x584>
        tickstart = HAL_GetTick();
 80017e8:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ea:	e005      	b.n	80017f8 <HAL_RCC_OscConfig+0x578>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff f800 	bl	80007f0 <HAL_GetTick>
 80017f0:	1bc0      	subs	r0, r0, r7
 80017f2:	2864      	cmp	r0, #100	@ 0x64
 80017f4:	f63f af7d 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f8:	f8d8 3000 	ldr.w	r3, [r8]
 80017fc:	0398      	lsls	r0, r3, #14
 80017fe:	d5f5      	bpl.n	80017ec <HAL_RCC_OscConfig+0x56c>
 8001800:	e5b4      	b.n	800136c <HAL_RCC_OscConfig+0xec>
 8001802:	bf00      	nop
 8001804:	46020c00 	.word	0x46020c00
 8001808:	08002980 	.word	0x08002980
 800180c:	20000008 	.word	0x20000008
 8001810:	20000000 	.word	0x20000000
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001814:	4e97      	ldr	r6, [pc, #604]	@ (8001a74 <HAL_RCC_OscConfig+0x7f4>)
 8001816:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001822:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8001826:	f022 0204 	bic.w	r2, r2, #4
 800182a:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182e:	2b00      	cmp	r3, #0
 8001830:	f47f ae2d 	bne.w	800148e <HAL_RCC_OscConfig+0x20e>
      tickstart = HAL_GetTick();
 8001834:	f7fe ffdc 	bl	80007f0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800183c:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800183e:	e005      	b.n	800184c <HAL_RCC_OscConfig+0x5cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7fe ffd6 	bl	80007f0 <HAL_GetTick>
 8001844:	1bc0      	subs	r0, r0, r7
 8001846:	4540      	cmp	r0, r8
 8001848:	f63f af53 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8001850:	079b      	lsls	r3, r3, #30
 8001852:	d4f5      	bmi.n	8001840 <HAL_RCC_OscConfig+0x5c0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001854:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8001858:	0618      	lsls	r0, r3, #24
 800185a:	f57f ae42 	bpl.w	80014e2 <HAL_RCC_OscConfig+0x262>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800185e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f241 3888 	movw	r8, #5000	@ 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800186a:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800186e:	4e81      	ldr	r6, [pc, #516]	@ (8001a74 <HAL_RCC_OscConfig+0x7f4>)
 8001870:	e005      	b.n	800187e <HAL_RCC_OscConfig+0x5fe>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7fe ffbd 	bl	80007f0 <HAL_GetTick>
 8001876:	1bc0      	subs	r0, r0, r7
 8001878:	4540      	cmp	r0, r8
 800187a:	f63f af3a 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800187e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8001882:	0519      	lsls	r1, r3, #20
 8001884:	d4f5      	bmi.n	8001872 <HAL_RCC_OscConfig+0x5f2>
 8001886:	e62c      	b.n	80014e2 <HAL_RCC_OscConfig+0x262>
      __HAL_RCC_LSI_DISABLE();
 8001888:	4e7a      	ldr	r6, [pc, #488]	@ (8001a74 <HAL_RCC_OscConfig+0x7f4>)
 800188a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800188e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001892:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8001896:	f7fe ffab 	bl	80007f0 <HAL_GetTick>
 800189a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800189c:	e005      	b.n	80018aa <HAL_RCC_OscConfig+0x62a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189e:	f7fe ffa7 	bl	80007f0 <HAL_GetTick>
 80018a2:	1bc0      	subs	r0, r0, r7
 80018a4:	2805      	cmp	r0, #5
 80018a6:	f63f af24 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80018aa:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	d4f5      	bmi.n	800189e <HAL_RCC_OscConfig+0x61e>
    if (pwrclkchanged == SET)
 80018b2:	2d00      	cmp	r5, #0
 80018b4:	f43f adbc 	beq.w	8001430 <HAL_RCC_OscConfig+0x1b0>
 80018b8:	e043      	b.n	8001942 <HAL_RCC_OscConfig+0x6c2>
      __HAL_RCC_HSI48_DISABLE();
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018c0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018c2:	f7fe ff95 	bl	80007f0 <HAL_GetTick>
 80018c6:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80018c8:	e005      	b.n	80018d6 <HAL_RCC_OscConfig+0x656>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ca:	f7fe ff91 	bl	80007f0 <HAL_GetTick>
 80018ce:	1b80      	subs	r0, r0, r6
 80018d0:	2802      	cmp	r0, #2
 80018d2:	f63f af0e 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	049f      	lsls	r7, r3, #18
 80018da:	d4f6      	bmi.n	80018ca <HAL_RCC_OscConfig+0x64a>
 80018dc:	e622      	b.n	8001524 <HAL_RCC_OscConfig+0x2a4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80018de:	f022 021f 	bic.w	r2, r2, #31
 80018e2:	430a      	orrs	r2, r1
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	e745      	b.n	8001774 <HAL_RCC_OscConfig+0x4f4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80018e8:	f022 021f 	bic.w	r2, r2, #31
 80018ec:	430a      	orrs	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	e743      	b.n	800177a <HAL_RCC_OscConfig+0x4fa>
      __HAL_RCC_SHSI_DISABLE();
 80018f2:	682b      	ldr	r3, [r5, #0]
 80018f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018fa:	f7fe ff79 	bl	80007f0 <HAL_GetTick>
 80018fe:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001900:	e005      	b.n	800190e <HAL_RCC_OscConfig+0x68e>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001902:	f7fe ff75 	bl	80007f0 <HAL_GetTick>
 8001906:	1b80      	subs	r0, r0, r6
 8001908:	2802      	cmp	r0, #2
 800190a:	f63f aef2 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800190e:	682b      	ldr	r3, [r5, #0]
 8001910:	0419      	lsls	r1, r3, #16
 8001912:	d4f6      	bmi.n	8001902 <HAL_RCC_OscConfig+0x682>
 8001914:	e623      	b.n	800155e <HAL_RCC_OscConfig+0x2de>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001916:	4a57      	ldr	r2, [pc, #348]	@ (8001a74 <HAL_RCC_OscConfig+0x7f4>)
 8001918:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001924:	e5b3      	b.n	800148e <HAL_RCC_OscConfig+0x20e>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001926:	4b53      	ldr	r3, [pc, #332]	@ (8001a74 <HAL_RCC_OscConfig+0x7f4>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800193e:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	e74e      	b.n	80017e0 <HAL_RCC_OscConfig+0x560>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001942:	4a4c      	ldr	r2, [pc, #304]	@ (8001a74 <HAL_RCC_OscConfig+0x7f4>)
 8001944:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001950:	e56e      	b.n	8001430 <HAL_RCC_OscConfig+0x1b0>
          __HAL_RCC_LSI_DISABLE();
 8001952:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8001956:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800195a:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
          tickstart = HAL_GetTick();
 800195e:	f7fe ff47 	bl	80007f0 <HAL_GetTick>
 8001962:	4607      	mov	r7, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001964:	e005      	b.n	8001972 <HAL_RCC_OscConfig+0x6f2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001966:	f7fe ff43 	bl	80007f0 <HAL_GetTick>
 800196a:	1bc0      	subs	r0, r0, r7
 800196c:	2805      	cmp	r0, #5
 800196e:	f63f aec0 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001972:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8001976:	0119      	lsls	r1, r3, #4
 8001978:	d4f5      	bmi.n	8001966 <HAL_RCC_OscConfig+0x6e6>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800197a:	69a2      	ldr	r2, [r4, #24]
 800197c:	e538      	b.n	80013f0 <HAL_RCC_OscConfig+0x170>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800197e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 8001986:	f7fe ff33 	bl	80007f0 <HAL_GetTick>
 800198a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800198c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800198e:	07db      	lsls	r3, r3, #31
 8001990:	f53f ad69 	bmi.w	8001466 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001994:	f7fe ff2c 	bl	80007f0 <HAL_GetTick>
 8001998:	1bc0      	subs	r0, r0, r7
 800199a:	2802      	cmp	r0, #2
 800199c:	d9f6      	bls.n	800198c <HAL_RCC_OscConfig+0x70c>
 800199e:	e6a8      	b.n	80016f2 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80019a0:	4b34      	ldr	r3, [pc, #208]	@ (8001a74 <HAL_RCC_OscConfig+0x7f4>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80019b8:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ba:	e711      	b.n	80017e0 <HAL_RCC_OscConfig+0x560>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019bc:	f7ff fa0e 	bl	8000ddc <RCC_SetFlashLatencyFromMSIRange>
 80019c0:	2800      	cmp	r0, #0
 80019c2:	f47f ae5c 	bne.w	800167e <HAL_RCC_OscConfig+0x3fe>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80019c6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80019c8:	e634      	b.n	8001634 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80019ca:	2a00      	cmp	r2, #0
 80019cc:	f2c0 80a4 	blt.w	8001b18 <HAL_RCC_OscConfig+0x898>
 80019d0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80019d4:	bf2b      	itete	cs
 80019d6:	f423 43f8 	biccs.w	r3, r3, #31744	@ 0x7c00
 80019da:	f423 2378 	biccc.w	r3, r3, #1015808	@ 0xf8000
 80019de:	ea43 2381 	orrcs.w	r3, r3, r1, lsl #10
 80019e2:	ea43 33c1 	orrcc.w	r3, r3, r1, lsl #15
 80019e6:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	e48c      	b.n	8001306 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80019ec:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 80019f0:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	e6bd      	b.n	8001774 <HAL_RCC_OscConfig+0x4f4>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80019f8:	2a00      	cmp	r2, #0
 80019fa:	f2c0 811e 	blt.w	8001c3a <HAL_RCC_OscConfig+0x9ba>
 80019fe:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	bf2b      	itete	cs
 8001a06:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8001a0a:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8001a0e:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8001a12:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	e5be      	b.n	8001598 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_MSIK_DISABLE();
 8001a1a:	4d16      	ldr	r5, [pc, #88]	@ (8001a74 <HAL_RCC_OscConfig+0x7f4>)
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	f023 0310 	bic.w	r3, r3, #16
 8001a22:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a24:	f7fe fee4 	bl	80007f0 <HAL_GetTick>
 8001a28:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001a2a:	e005      	b.n	8001a38 <HAL_RCC_OscConfig+0x7b8>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001a2c:	f7fe fee0 	bl	80007f0 <HAL_GetTick>
 8001a30:	1b80      	subs	r0, r0, r6
 8001a32:	2802      	cmp	r0, #2
 8001a34:	f63f ae5d 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	069f      	lsls	r7, r3, #26
 8001a3c:	d4f6      	bmi.n	8001a2c <HAL_RCC_OscConfig+0x7ac>
 8001a3e:	e5bd      	b.n	80015bc <HAL_RCC_OscConfig+0x33c>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a40:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8001a44:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	e696      	b.n	800177a <HAL_RCC_OscConfig+0x4fa>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a58:	4f06      	ldr	r7, [pc, #24]	@ (8001a74 <HAL_RCC_OscConfig+0x7f4>)
 8001a5a:	e005      	b.n	8001a68 <HAL_RCC_OscConfig+0x7e8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7fe fec8 	bl	80007f0 <HAL_GetTick>
 8001a60:	1b80      	subs	r0, r0, r6
 8001a62:	4540      	cmp	r0, r8
 8001a64:	f63f ae45 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001a6c:	051a      	lsls	r2, r3, #20
 8001a6e:	d4f5      	bmi.n	8001a5c <HAL_RCC_OscConfig+0x7dc>
 8001a70:	e537      	b.n	80014e2 <HAL_RCC_OscConfig+0x262>
 8001a72:	bf00      	nop
 8001a74:	46020c00 	.word	0x46020c00
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a78:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001a7a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a7c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7e:	f43f adfe 	beq.w	800167e <HAL_RCC_OscConfig+0x3fe>
 8001a82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001a84:	f002 0103 	and.w	r1, r2, #3
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a88:	4299      	cmp	r1, r3
 8001a8a:	f47f adf8 	bne.w	800167e <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001a8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001a90:	f3c2 2103 	ubfx	r1, r2, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001a94:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	4299      	cmp	r1, r3
 8001a98:	f47f adf1 	bne.w	800167e <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001a9c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001a9e:	f402 4270 	and.w	r2, r2, #61440	@ 0xf000
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	f47f adeb 	bne.w	800167e <HAL_RCC_OscConfig+0x3fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001aa8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001aaa:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8001aae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f47f ade4 	bne.w	800167e <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ab6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001ab8:	f3c0 2246 	ubfx	r2, r0, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001abc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	f47f addd 	bne.w	800167e <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ac4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001ac6:	f3c0 4206 	ubfx	r2, r0, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001aca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f47f add6 	bne.w	800167e <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ad2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001ad4:	f3c0 6006 	ubfx	r0, r0, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ad8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ada:	4298      	cmp	r0, r3
 8001adc:	f47f adcf 	bne.w	800167e <HAL_RCC_OscConfig+0x3fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001ae0:	4b59      	ldr	r3, [pc, #356]	@ (8001c48 <HAL_RCC_OscConfig+0x9c8>)
 8001ae2:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ae6:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001aea:	428a      	cmp	r2, r1
 8001aec:	f43f ad89 	beq.w	8001602 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001af0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001af2:	f022 0210 	bic.w	r2, r2, #16
 8001af6:	629a      	str	r2, [r3, #40]	@ 0x28
        tickstart = HAL_GetTick();
 8001af8:	f7fe fe7a 	bl	80007f0 <HAL_GetTick>
 8001afc:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001afe:	f7fe fe77 	bl	80007f0 <HAL_GetTick>
 8001b02:	42a8      	cmp	r0, r5
 8001b04:	d0fb      	beq.n	8001afe <HAL_RCC_OscConfig+0x87e>
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001b06:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001b08:	4b4f      	ldr	r3, [pc, #316]	@ (8001c48 <HAL_RCC_OscConfig+0x9c8>)
 8001b0a:	00d2      	lsls	r2, r2, #3
 8001b0c:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001b0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b10:	f042 0210 	orr.w	r2, r2, #16
 8001b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b16:	e574      	b.n	8001602 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001b18:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8001b1c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8001b20:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	f7ff bbef 	b.w	8001306 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001b28:	f7fe fe62 	bl	80007f0 <HAL_GetTick>
 8001b2c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001b2e:	e005      	b.n	8001b3c <HAL_RCC_OscConfig+0x8bc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7fe fe5e 	bl	80007f0 <HAL_GetTick>
 8001b34:	1b80      	subs	r0, r0, r6
 8001b36:	2802      	cmp	r0, #2
 8001b38:	f63f addb 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001b3c:	682b      	ldr	r3, [r5, #0]
 8001b3e:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	d1f5      	bne.n	8001b30 <HAL_RCC_OscConfig+0x8b0>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b44:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8001b48:	0756      	lsls	r6, r2, #29
 8001b4a:	d40c      	bmi.n	8001b66 <HAL_RCC_OscConfig+0x8e6>
          pwrclkchanged = SET;
 8001b4c:	2301      	movs	r3, #1
          __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8001b52:	f042 0204 	orr.w	r2, r2, #4
 8001b56:	f8c5 2094 	str.w	r2, [r5, #148]	@ 0x94
 8001b5a:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8001b5e:	f002 0204 	and.w	r2, r2, #4
 8001b62:	9203      	str	r2, [sp, #12]
 8001b64:	9a03      	ldr	r2, [sp, #12]
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001b66:	4d39      	ldr	r5, [pc, #228]	@ (8001c4c <HAL_RCC_OscConfig+0x9cc>)
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001b68:	4937      	ldr	r1, [pc, #220]	@ (8001c48 <HAL_RCC_OscConfig+0x9c8>)
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001b6a:	68ee      	ldr	r6, [r5, #12]
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001b6c:	68ea      	ldr	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001b6e:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8001c50 <HAL_RCC_OscConfig+0x9d0>
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001b72:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b76:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001b78:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8001b7a:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8001b7c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001b7e:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 8001b82:	f020 0003 	bic.w	r0, r0, #3
 8001b86:	433a      	orrs	r2, r7
 8001b88:	4302      	orrs	r2, r0
 8001b8a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8001b8c:	3801      	subs	r0, #1
 8001b8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001b92:	628a      	str	r2, [r1, #40]	@ 0x28
 8001b94:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8001b96:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001b98:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 8001b9c:	1e47      	subs	r7, r0, #1
 8001b9e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8001ba0:	3a01      	subs	r2, #1
 8001ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba6:	027f      	lsls	r7, r7, #9
 8001ba8:	3801      	subs	r0, #1
 8001baa:	ea0e 0c0c 	and.w	ip, lr, ip
 8001bae:	b2bf      	uxth	r7, r7
 8001bb0:	0400      	lsls	r0, r0, #16
 8001bb2:	ea42 020c 	orr.w	r2, r2, ip
 8001bb6:	f400 00fe 	and.w	r0, r0, #8323072	@ 0x7f0000
 8001bba:	433a      	orrs	r2, r7
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8001bc0:	3801      	subs	r0, #1
 8001bc2:	0600      	lsls	r0, r0, #24
 8001bc4:	f000 40fe 	and.w	r0, r0, #2130706432	@ 0x7f000000
 8001bc8:	4302      	orrs	r2, r0
 8001bca:	634a      	str	r2, [r1, #52]	@ 0x34
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001bcc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8001bce:	f022 0210 	bic.w	r2, r2, #16
 8001bd2:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001bd4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001bd6:	00d2      	lsls	r2, r2, #3
 8001bd8:	638a      	str	r2, [r1, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001bda:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8001bdc:	f042 0210 	orr.w	r2, r2, #16
 8001be0:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001be2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8001be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001be6:	f022 020c 	bic.w	r2, r2, #12
 8001bea:	4302      	orrs	r2, r0
        if (pwrboosten == SET)
 8001bec:	0374      	lsls	r4, r6, #13
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001bee:	628a      	str	r2, [r1, #40]	@ 0x28
        if (pwrboosten == SET)
 8001bf0:	d41e      	bmi.n	8001c30 <HAL_RCC_OscConfig+0x9b0>
        if (pwrclkchanged == SET)
 8001bf2:	b133      	cbz	r3, 8001c02 <HAL_RCC_OscConfig+0x982>
          __HAL_RCC_PWR_CLK_DISABLE();
 8001bf4:	4a14      	ldr	r2, [pc, #80]	@ (8001c48 <HAL_RCC_OscConfig+0x9c8>)
 8001bf6:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001bfa:	f023 0304 	bic.w	r3, r3, #4
 8001bfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        __HAL_RCC_PLL_ENABLE();
 8001c02:	4c11      	ldr	r4, [pc, #68]	@ (8001c48 <HAL_RCC_OscConfig+0x9c8>)
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fdf0 	bl	80007f0 <HAL_GetTick>
 8001c10:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001c12:	e005      	b.n	8001c20 <HAL_RCC_OscConfig+0x9a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7fe fdec 	bl	80007f0 <HAL_GetTick>
 8001c18:	1b40      	subs	r0, r0, r5
 8001c1a:	2802      	cmp	r0, #2
 8001c1c:	f63f ad69 	bhi.w	80016f2 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	0198      	lsls	r0, r3, #6
 8001c24:	d5f6      	bpl.n	8001c14 <HAL_RCC_OscConfig+0x994>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001c2e:	e4e8      	b.n	8001602 <HAL_RCC_OscConfig+0x382>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001c30:	68ea      	ldr	r2, [r5, #12]
 8001c32:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001c36:	60ea      	str	r2, [r5, #12]
 8001c38:	e7db      	b.n	8001bf2 <HAL_RCC_OscConfig+0x972>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8001c40:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e4a7      	b.n	8001598 <HAL_RCC_OscConfig+0x318>
 8001c48:	46020c00 	.word	0x46020c00
 8001c4c:	46020800 	.word	0x46020800
 8001c50:	80800000 	.word	0x80800000

08001c54 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c54:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c56:	6a02      	ldr	r2, [r0, #32]
{
 8001c58:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c60:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c62:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c64:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c6a:	4c1f      	ldr	r4, [pc, #124]	@ (8001ce8 <TIM_OC1_SetConfig+0x94>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c6c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c70:	4332      	orrs	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8001c72:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001c74:	f023 0302 	bic.w	r3, r3, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c78:	42a0      	cmp	r0, r4
  tmpccer |= OC_Config->OCPolarity;
 8001c7a:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c7e:	d01f      	beq.n	8001cc0 <TIM_OC1_SetConfig+0x6c>
 8001c80:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8001c84:	42a0      	cmp	r0, r4
 8001c86:	d01b      	beq.n	8001cc0 <TIM_OC1_SetConfig+0x6c>
 8001c88:	4c18      	ldr	r4, [pc, #96]	@ (8001cec <TIM_OC1_SetConfig+0x98>)
 8001c8a:	42a0      	cmp	r0, r4
 8001c8c:	d018      	beq.n	8001cc0 <TIM_OC1_SetConfig+0x6c>
 8001c8e:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8001c92:	42a0      	cmp	r0, r4
 8001c94:	d014      	beq.n	8001cc0 <TIM_OC1_SetConfig+0x6c>
 8001c96:	4c16      	ldr	r4, [pc, #88]	@ (8001cf0 <TIM_OC1_SetConfig+0x9c>)
 8001c98:	42a0      	cmp	r0, r4
 8001c9a:	d011      	beq.n	8001cc0 <TIM_OC1_SetConfig+0x6c>
 8001c9c:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8001ca0:	42a0      	cmp	r0, r4
 8001ca2:	d00d      	beq.n	8001cc0 <TIM_OC1_SetConfig+0x6c>
 8001ca4:	4c13      	ldr	r4, [pc, #76]	@ (8001cf4 <TIM_OC1_SetConfig+0xa0>)
 8001ca6:	42a0      	cmp	r0, r4
 8001ca8:	d00a      	beq.n	8001cc0 <TIM_OC1_SetConfig+0x6c>
 8001caa:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8001cae:	42a0      	cmp	r0, r4
 8001cb0:	d006      	beq.n	8001cc0 <TIM_OC1_SetConfig+0x6c>
 8001cb2:	4c11      	ldr	r4, [pc, #68]	@ (8001cf8 <TIM_OC1_SetConfig+0xa4>)
 8001cb4:	42a0      	cmp	r0, r4
 8001cb6:	d003      	beq.n	8001cc0 <TIM_OC1_SetConfig+0x6c>
 8001cb8:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 8001cbc:	42a0      	cmp	r0, r4
 8001cbe:	d10d      	bne.n	8001cdc <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001cc0:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cc2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001cc6:	4323      	orrs	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cc8:	f425 7e40 	bic.w	lr, r5, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ccc:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
 8001cd0:	ea44 0c05 	orr.w	ip, r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cd8:	ea4c 050e 	orr.w	r5, ip, lr

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cdc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001cde:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ce0:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001ce2:	6341      	str	r1, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ce4:	6203      	str	r3, [r0, #32]
}
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	40013400 	.word	0x40013400
 8001cf0:	40014000 	.word	0x40014000
 8001cf4:	40014400 	.word	0x40014400
 8001cf8:	40014800 	.word	0x40014800

08001cfc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cfc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cfe:	6a02      	ldr	r2, [r0, #32]
{
 8001d00:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d06:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d0a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d0c:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d0e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d12:	4d20      	ldr	r5, [pc, #128]	@ (8001d94 <TIM_OC3_SetConfig+0x98>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d14:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001d18:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d1a:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001d1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d20:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d22:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d26:	d01f      	beq.n	8001d68 <TIM_OC3_SetConfig+0x6c>
 8001d28:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001d2c:	42a8      	cmp	r0, r5
 8001d2e:	d01b      	beq.n	8001d68 <TIM_OC3_SetConfig+0x6c>
 8001d30:	4d19      	ldr	r5, [pc, #100]	@ (8001d98 <TIM_OC3_SetConfig+0x9c>)
 8001d32:	42a8      	cmp	r0, r5
 8001d34:	d018      	beq.n	8001d68 <TIM_OC3_SetConfig+0x6c>
 8001d36:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001d3a:	42a8      	cmp	r0, r5
 8001d3c:	d014      	beq.n	8001d68 <TIM_OC3_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d3e:	4d17      	ldr	r5, [pc, #92]	@ (8001d9c <TIM_OC3_SetConfig+0xa0>)
 8001d40:	42a8      	cmp	r0, r5
 8001d42:	d018      	beq.n	8001d76 <TIM_OC3_SetConfig+0x7a>
 8001d44:	4d16      	ldr	r5, [pc, #88]	@ (8001da0 <TIM_OC3_SetConfig+0xa4>)
 8001d46:	42a8      	cmp	r0, r5
 8001d48:	d015      	beq.n	8001d76 <TIM_OC3_SetConfig+0x7a>
 8001d4a:	4d16      	ldr	r5, [pc, #88]	@ (8001da4 <TIM_OC3_SetConfig+0xa8>)
 8001d4c:	42a8      	cmp	r0, r5
 8001d4e:	d012      	beq.n	8001d76 <TIM_OC3_SetConfig+0x7a>
 8001d50:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001d54:	42a8      	cmp	r0, r5
 8001d56:	d00e      	beq.n	8001d76 <TIM_OC3_SetConfig+0x7a>
 8001d58:	4d13      	ldr	r5, [pc, #76]	@ (8001da8 <TIM_OC3_SetConfig+0xac>)
 8001d5a:	42a8      	cmp	r0, r5
 8001d5c:	d00b      	beq.n	8001d76 <TIM_OC3_SetConfig+0x7a>
 8001d5e:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001d62:	42a8      	cmp	r0, r5
 8001d64:	d10f      	bne.n	8001d86 <TIM_OC3_SetConfig+0x8a>
 8001d66:	e006      	b.n	8001d76 <TIM_OC3_SetConfig+0x7a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d68:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d76:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d7a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8001d7e:	ea46 0c05 	orr.w	ip, r6, r5
 8001d82:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d86:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001d88:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001d8a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001d8c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8001d8e:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8001d90:	6203      	str	r3, [r0, #32]
}
 8001d92:	4770      	bx	lr
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40013400 	.word	0x40013400
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	50014000 	.word	0x50014000
 8001da4:	40014400 	.word	0x40014400
 8001da8:	40014800 	.word	0x40014800

08001dac <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dac:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001dae:	6a02      	ldr	r2, [r0, #32]
{
 8001db0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001db2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001db6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dba:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dbc:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001dbe:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8001dc2:	4d21      	ldr	r5, [pc, #132]	@ (8001e48 <TIM_OC4_SetConfig+0x9c>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001dc4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dc8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001dcc:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001dce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8001dd2:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001dd4:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8001dd8:	d01f      	beq.n	8001e1a <TIM_OC4_SetConfig+0x6e>
 8001dda:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001dde:	42a8      	cmp	r0, r5
 8001de0:	d01b      	beq.n	8001e1a <TIM_OC4_SetConfig+0x6e>
 8001de2:	4d1a      	ldr	r5, [pc, #104]	@ (8001e4c <TIM_OC4_SetConfig+0xa0>)
 8001de4:	42a8      	cmp	r0, r5
 8001de6:	d018      	beq.n	8001e1a <TIM_OC4_SetConfig+0x6e>
 8001de8:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001dec:	42a8      	cmp	r0, r5
 8001dee:	d014      	beq.n	8001e1a <TIM_OC4_SetConfig+0x6e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001df0:	4d17      	ldr	r5, [pc, #92]	@ (8001e50 <TIM_OC4_SetConfig+0xa4>)
 8001df2:	42a8      	cmp	r0, r5
 8001df4:	d018      	beq.n	8001e28 <TIM_OC4_SetConfig+0x7c>
 8001df6:	4d17      	ldr	r5, [pc, #92]	@ (8001e54 <TIM_OC4_SetConfig+0xa8>)
 8001df8:	42a8      	cmp	r0, r5
 8001dfa:	d015      	beq.n	8001e28 <TIM_OC4_SetConfig+0x7c>
 8001dfc:	4d16      	ldr	r5, [pc, #88]	@ (8001e58 <TIM_OC4_SetConfig+0xac>)
 8001dfe:	42a8      	cmp	r0, r5
 8001e00:	d012      	beq.n	8001e28 <TIM_OC4_SetConfig+0x7c>
 8001e02:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001e06:	42a8      	cmp	r0, r5
 8001e08:	d00e      	beq.n	8001e28 <TIM_OC4_SetConfig+0x7c>
 8001e0a:	4d14      	ldr	r5, [pc, #80]	@ (8001e5c <TIM_OC4_SetConfig+0xb0>)
 8001e0c:	42a8      	cmp	r0, r5
 8001e0e:	d00b      	beq.n	8001e28 <TIM_OC4_SetConfig+0x7c>
 8001e10:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001e14:	42a8      	cmp	r0, r5
 8001e16:	d10f      	bne.n	8001e38 <TIM_OC4_SetConfig+0x8c>
 8001e18:	e006      	b.n	8001e28 <TIM_OC4_SetConfig+0x7c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8001e1a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8001e1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8001e20:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8001e24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8001e28:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8001e2c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8001e30:	ea46 0c05 	orr.w	ip, r6, r5
 8001e34:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e38:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001e3a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001e3c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001e3e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8001e40:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8001e42:	6203      	str	r3, [r0, #32]
}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	40013400 	.word	0x40013400
 8001e50:	40014000 	.word	0x40014000
 8001e54:	50014000 	.word	0x50014000
 8001e58:	40014400 	.word	0x40014400
 8001e5c:	40014800 	.word	0x40014800

08001e60 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e60:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001e62:	6a02      	ldr	r2, [r0, #32]
{
 8001e64:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001e66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001e6a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e6c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001e6e:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e70:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001e72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e76:	4d1b      	ldr	r5, [pc, #108]	@ (8001ee4 <TIM_OC5_SetConfig+0x84>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001e78:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001e7c:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001e7e:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001e80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e84:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e8a:	d01f      	beq.n	8001ecc <TIM_OC5_SetConfig+0x6c>
 8001e8c:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001e90:	42a8      	cmp	r0, r5
 8001e92:	d01b      	beq.n	8001ecc <TIM_OC5_SetConfig+0x6c>
 8001e94:	4d14      	ldr	r5, [pc, #80]	@ (8001ee8 <TIM_OC5_SetConfig+0x88>)
 8001e96:	42a8      	cmp	r0, r5
 8001e98:	d018      	beq.n	8001ecc <TIM_OC5_SetConfig+0x6c>
 8001e9a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001e9e:	42a8      	cmp	r0, r5
 8001ea0:	d014      	beq.n	8001ecc <TIM_OC5_SetConfig+0x6c>
 8001ea2:	4d12      	ldr	r5, [pc, #72]	@ (8001eec <TIM_OC5_SetConfig+0x8c>)
 8001ea4:	42a8      	cmp	r0, r5
 8001ea6:	d011      	beq.n	8001ecc <TIM_OC5_SetConfig+0x6c>
 8001ea8:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001eac:	42a8      	cmp	r0, r5
 8001eae:	d00d      	beq.n	8001ecc <TIM_OC5_SetConfig+0x6c>
 8001eb0:	4d0f      	ldr	r5, [pc, #60]	@ (8001ef0 <TIM_OC5_SetConfig+0x90>)
 8001eb2:	42a8      	cmp	r0, r5
 8001eb4:	d00a      	beq.n	8001ecc <TIM_OC5_SetConfig+0x6c>
 8001eb6:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001eba:	42a8      	cmp	r0, r5
 8001ebc:	d006      	beq.n	8001ecc <TIM_OC5_SetConfig+0x6c>
 8001ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8001ef4 <TIM_OC5_SetConfig+0x94>)
 8001ec0:	42a8      	cmp	r0, r5
 8001ec2:	d003      	beq.n	8001ecc <TIM_OC5_SetConfig+0x6c>
 8001ec4:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001ec8:	42a8      	cmp	r0, r5
 8001eca:	d104      	bne.n	8001ed6 <TIM_OC5_SetConfig+0x76>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001ecc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001ece:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001ed2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001ed6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001ed8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001eda:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001edc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR5 = OC_Config->Pulse;
 8001ede:	6481      	str	r1, [r0, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8001ee0:	6203      	str	r3, [r0, #32]
}
 8001ee2:	4770      	bx	lr
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	40013400 	.word	0x40013400
 8001eec:	40014000 	.word	0x40014000
 8001ef0:	40014400 	.word	0x40014400
 8001ef4:	40014800 	.word	0x40014800

08001ef8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ef8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001efa:	6a02      	ldr	r2, [r0, #32]
{
 8001efc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001efe:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8001f02:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f04:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f06:	6d02      	ldr	r2, [r0, #80]	@ 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f08:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001f0a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f0e:	4d1c      	ldr	r5, [pc, #112]	@ (8001f80 <TIM_OC6_SetConfig+0x88>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001f10:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f14:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001f18:	688e      	ldr	r6, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001f1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f1e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001f20:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f24:	d01f      	beq.n	8001f66 <TIM_OC6_SetConfig+0x6e>
 8001f26:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001f2a:	42a8      	cmp	r0, r5
 8001f2c:	d01b      	beq.n	8001f66 <TIM_OC6_SetConfig+0x6e>
 8001f2e:	4d15      	ldr	r5, [pc, #84]	@ (8001f84 <TIM_OC6_SetConfig+0x8c>)
 8001f30:	42a8      	cmp	r0, r5
 8001f32:	d018      	beq.n	8001f66 <TIM_OC6_SetConfig+0x6e>
 8001f34:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001f38:	42a8      	cmp	r0, r5
 8001f3a:	d014      	beq.n	8001f66 <TIM_OC6_SetConfig+0x6e>
 8001f3c:	4d12      	ldr	r5, [pc, #72]	@ (8001f88 <TIM_OC6_SetConfig+0x90>)
 8001f3e:	42a8      	cmp	r0, r5
 8001f40:	d011      	beq.n	8001f66 <TIM_OC6_SetConfig+0x6e>
 8001f42:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001f46:	42a8      	cmp	r0, r5
 8001f48:	d00d      	beq.n	8001f66 <TIM_OC6_SetConfig+0x6e>
 8001f4a:	4d10      	ldr	r5, [pc, #64]	@ (8001f8c <TIM_OC6_SetConfig+0x94>)
 8001f4c:	42a8      	cmp	r0, r5
 8001f4e:	d00a      	beq.n	8001f66 <TIM_OC6_SetConfig+0x6e>
 8001f50:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001f54:	42a8      	cmp	r0, r5
 8001f56:	d006      	beq.n	8001f66 <TIM_OC6_SetConfig+0x6e>
 8001f58:	4d0d      	ldr	r5, [pc, #52]	@ (8001f90 <TIM_OC6_SetConfig+0x98>)
 8001f5a:	42a8      	cmp	r0, r5
 8001f5c:	d003      	beq.n	8001f66 <TIM_OC6_SetConfig+0x6e>
 8001f5e:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8001f62:	42a8      	cmp	r0, r5
 8001f64:	d104      	bne.n	8001f70 <TIM_OC6_SetConfig+0x78>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001f66:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001f68:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001f6c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001f70:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001f72:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001f74:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001f76:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR6 = OC_Config->Pulse;
 8001f78:	64c1      	str	r1, [r0, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8001f7a:	6203      	str	r3, [r0, #32]
}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40013400 	.word	0x40013400
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40014400 	.word	0x40014400
 8001f90:	40014800 	.word	0x40014800

08001f94 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001f94:	2800      	cmp	r0, #0
 8001f96:	f000 80a8 	beq.w	80020ea <HAL_TIM_Base_Init+0x156>
{
 8001f9a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8001f9c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 809a 	beq.w	80020e0 <HAL_TIM_Base_Init+0x14c>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	2202      	movs	r2, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fae:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	495d      	ldr	r1, [pc, #372]	@ (8002128 <HAL_TIM_Base_Init+0x194>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb6:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8001fb8:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fba:	d048      	beq.n	800204e <HAL_TIM_Base_Init+0xba>
 8001fbc:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	d044      	beq.n	800204e <HAL_TIM_Base_Init+0xba>
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc8:	d078      	beq.n	80020bc <HAL_TIM_Base_Init+0x128>
 8001fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fce:	d075      	beq.n	80020bc <HAL_TIM_Base_Init+0x128>
 8001fd0:	4956      	ldr	r1, [pc, #344]	@ (800212c <HAL_TIM_Base_Init+0x198>)
 8001fd2:	428b      	cmp	r3, r1
 8001fd4:	d072      	beq.n	80020bc <HAL_TIM_Base_Init+0x128>
 8001fd6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8001fda:	428b      	cmp	r3, r1
 8001fdc:	d06e      	beq.n	80020bc <HAL_TIM_Base_Init+0x128>
 8001fde:	4954      	ldr	r1, [pc, #336]	@ (8002130 <HAL_TIM_Base_Init+0x19c>)
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	d06b      	beq.n	80020bc <HAL_TIM_Base_Init+0x128>
 8001fe4:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8001fe8:	428b      	cmp	r3, r1
 8001fea:	d067      	beq.n	80020bc <HAL_TIM_Base_Init+0x128>
 8001fec:	4951      	ldr	r1, [pc, #324]	@ (8002134 <HAL_TIM_Base_Init+0x1a0>)
 8001fee:	428b      	cmp	r3, r1
 8001ff0:	d064      	beq.n	80020bc <HAL_TIM_Base_Init+0x128>
 8001ff2:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8001ff6:	428b      	cmp	r3, r1
 8001ff8:	d07f      	beq.n	80020fa <HAL_TIM_Base_Init+0x166>
 8001ffa:	494f      	ldr	r1, [pc, #316]	@ (8002138 <HAL_TIM_Base_Init+0x1a4>)
 8001ffc:	428b      	cmp	r3, r1
 8001ffe:	f000 8081 	beq.w	8002104 <HAL_TIM_Base_Init+0x170>
 8002002:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8002006:	428b      	cmp	r3, r1
 8002008:	d021      	beq.n	800204e <HAL_TIM_Base_Init+0xba>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	494c      	ldr	r1, [pc, #304]	@ (800213c <HAL_TIM_Base_Init+0x1a8>)
 800200c:	428b      	cmp	r3, r1
 800200e:	d059      	beq.n	80020c4 <HAL_TIM_Base_Init+0x130>
 8002010:	494b      	ldr	r1, [pc, #300]	@ (8002140 <HAL_TIM_Base_Init+0x1ac>)
 8002012:	428b      	cmp	r3, r1
 8002014:	d06b      	beq.n	80020ee <HAL_TIM_Base_Init+0x15a>
 8002016:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 800201a:	428b      	cmp	r3, r1
 800201c:	d067      	beq.n	80020ee <HAL_TIM_Base_Init+0x15a>
 800201e:	4949      	ldr	r1, [pc, #292]	@ (8002144 <HAL_TIM_Base_Init+0x1b0>)
 8002020:	428b      	cmp	r3, r1
 8002022:	d064      	beq.n	80020ee <HAL_TIM_Base_Init+0x15a>
 8002024:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8002028:	428b      	cmp	r3, r1
 800202a:	d060      	beq.n	80020ee <HAL_TIM_Base_Init+0x15a>
 800202c:	4946      	ldr	r1, [pc, #280]	@ (8002148 <HAL_TIM_Base_Init+0x1b4>)
 800202e:	428b      	cmp	r3, r1
 8002030:	d05d      	beq.n	80020ee <HAL_TIM_Base_Init+0x15a>
 8002032:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8002036:	428b      	cmp	r3, r1
 8002038:	d059      	beq.n	80020ee <HAL_TIM_Base_Init+0x15a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800203a:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 800203c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800203e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002040:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002044:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8002046:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002048:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800204a:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800204c:	e012      	b.n	8002074 <HAL_TIM_Base_Init+0xe0>
    tmpcr1 |= Structure->CounterMode;
 800204e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002050:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002054:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8002056:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002058:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205c:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205e:	69a1      	ldr	r1, [r4, #24]
 8002060:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002064:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8002066:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002068:	68e2      	ldr	r2, [r4, #12]
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800206c:	6862      	ldr	r2, [r4, #4]
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002070:	6962      	ldr	r2, [r4, #20]
 8002072:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002074:	2201      	movs	r2, #1
 8002076:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	07d2      	lsls	r2, r2, #31
 800207c:	d503      	bpl.n	8002086 <HAL_TIM_Base_Init+0xf2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002086:	2301      	movs	r3, #1
 8002088:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002090:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002094:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002098:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800209c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80020a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80020ac:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80020b0:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80020b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80020b8:	2000      	movs	r0, #0
}
 80020ba:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80020bc:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80020c2:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ca:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020cc:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d4:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80020d6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80020d8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020da:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020dc:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020de:	e7c9      	b.n	8002074 <HAL_TIM_Base_Init+0xe0>
    htim->Lock = HAL_UNLOCKED;
 80020e0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020e4:	f7fe fa4e 	bl	8000584 <HAL_TIM_Base_MspInit>
 80020e8:	e760      	b.n	8001fac <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 80020ea:	2001      	movs	r0, #1
}
 80020ec:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ee:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f6:	4302      	orrs	r2, r0
 80020f8:	e7b2      	b.n	8002060 <HAL_TIM_Base_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 80020fa:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020fc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002100:	430a      	orrs	r2, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002102:	e782      	b.n	800200a <HAL_TIM_Base_Init+0x76>
    tmpcr1 |= Structure->CounterMode;
 8002104:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002106:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800210c:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800210e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002112:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002114:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002116:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800211a:	4302      	orrs	r2, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800211c:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800211e:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8002120:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002122:	62d9      	str	r1, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002124:	629a      	str	r2, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002126:	e7a3      	b.n	8002070 <HAL_TIM_Base_Init+0xdc>
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00
 8002138:	40013400 	.word	0x40013400
 800213c:	50000c00 	.word	0x50000c00
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800

0800214c <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002150:	2800      	cmp	r0, #0
 8002152:	f000 80a8 	beq.w	80022a6 <HAL_TIM_PWM_Init+0x156>
{
 8002156:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002158:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800215c:	4604      	mov	r4, r0
 800215e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 809a 	beq.w	800229c <HAL_TIM_PWM_Init+0x14c>
  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	2202      	movs	r2, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800216a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800216c:	495d      	ldr	r1, [pc, #372]	@ (80022e4 <HAL_TIM_PWM_Init+0x194>)
  htim->State = HAL_TIM_STATE_BUSY;
 800216e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002172:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8002174:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002176:	d048      	beq.n	800220a <HAL_TIM_PWM_Init+0xba>
 8002178:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 800217c:	428b      	cmp	r3, r1
 800217e:	d044      	beq.n	800220a <HAL_TIM_PWM_Init+0xba>
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002184:	d078      	beq.n	8002278 <HAL_TIM_PWM_Init+0x128>
 8002186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800218a:	d075      	beq.n	8002278 <HAL_TIM_PWM_Init+0x128>
 800218c:	4956      	ldr	r1, [pc, #344]	@ (80022e8 <HAL_TIM_PWM_Init+0x198>)
 800218e:	428b      	cmp	r3, r1
 8002190:	d072      	beq.n	8002278 <HAL_TIM_PWM_Init+0x128>
 8002192:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8002196:	428b      	cmp	r3, r1
 8002198:	d06e      	beq.n	8002278 <HAL_TIM_PWM_Init+0x128>
 800219a:	4954      	ldr	r1, [pc, #336]	@ (80022ec <HAL_TIM_PWM_Init+0x19c>)
 800219c:	428b      	cmp	r3, r1
 800219e:	d06b      	beq.n	8002278 <HAL_TIM_PWM_Init+0x128>
 80021a0:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80021a4:	428b      	cmp	r3, r1
 80021a6:	d067      	beq.n	8002278 <HAL_TIM_PWM_Init+0x128>
 80021a8:	4951      	ldr	r1, [pc, #324]	@ (80022f0 <HAL_TIM_PWM_Init+0x1a0>)
 80021aa:	428b      	cmp	r3, r1
 80021ac:	d064      	beq.n	8002278 <HAL_TIM_PWM_Init+0x128>
 80021ae:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80021b2:	428b      	cmp	r3, r1
 80021b4:	d07f      	beq.n	80022b6 <HAL_TIM_PWM_Init+0x166>
 80021b6:	494f      	ldr	r1, [pc, #316]	@ (80022f4 <HAL_TIM_PWM_Init+0x1a4>)
 80021b8:	428b      	cmp	r3, r1
 80021ba:	f000 8081 	beq.w	80022c0 <HAL_TIM_PWM_Init+0x170>
 80021be:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80021c2:	428b      	cmp	r3, r1
 80021c4:	d021      	beq.n	800220a <HAL_TIM_PWM_Init+0xba>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c6:	494c      	ldr	r1, [pc, #304]	@ (80022f8 <HAL_TIM_PWM_Init+0x1a8>)
 80021c8:	428b      	cmp	r3, r1
 80021ca:	d059      	beq.n	8002280 <HAL_TIM_PWM_Init+0x130>
 80021cc:	494b      	ldr	r1, [pc, #300]	@ (80022fc <HAL_TIM_PWM_Init+0x1ac>)
 80021ce:	428b      	cmp	r3, r1
 80021d0:	d06b      	beq.n	80022aa <HAL_TIM_PWM_Init+0x15a>
 80021d2:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80021d6:	428b      	cmp	r3, r1
 80021d8:	d067      	beq.n	80022aa <HAL_TIM_PWM_Init+0x15a>
 80021da:	4949      	ldr	r1, [pc, #292]	@ (8002300 <HAL_TIM_PWM_Init+0x1b0>)
 80021dc:	428b      	cmp	r3, r1
 80021de:	d064      	beq.n	80022aa <HAL_TIM_PWM_Init+0x15a>
 80021e0:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d060      	beq.n	80022aa <HAL_TIM_PWM_Init+0x15a>
 80021e8:	4946      	ldr	r1, [pc, #280]	@ (8002304 <HAL_TIM_PWM_Init+0x1b4>)
 80021ea:	428b      	cmp	r3, r1
 80021ec:	d05d      	beq.n	80022aa <HAL_TIM_PWM_Init+0x15a>
 80021ee:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80021f2:	428b      	cmp	r3, r1
 80021f4:	d059      	beq.n	80022aa <HAL_TIM_PWM_Init+0x15a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f6:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80021f8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002200:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8002202:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002204:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002206:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002208:	e012      	b.n	8002230 <HAL_TIM_PWM_Init+0xe0>
    tmpcr1 |= Structure->CounterMode;
 800220a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800220c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002210:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8002212:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002214:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002218:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221a:	69a1      	ldr	r1, [r4, #24]
 800221c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002220:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8002222:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002224:	68e2      	ldr	r2, [r4, #12]
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002228:	6862      	ldr	r2, [r4, #4]
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800222c:	6962      	ldr	r2, [r4, #20]
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002230:	2201      	movs	r2, #1
 8002232:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	07d2      	lsls	r2, r2, #31
 8002238:	d503      	bpl.n	8002242 <HAL_TIM_PWM_Init+0xf2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002242:	2301      	movs	r3, #1
 8002244:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002248:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800224c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002250:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002254:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800225c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002260:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002264:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002268:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800226c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002270:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002274:	2000      	movs	r0, #0
}
 8002276:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8002278:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800227a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800227e:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002280:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002282:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002286:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002288:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800228a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800228e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002290:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8002292:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002294:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002296:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002298:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800229a:	e7c9      	b.n	8002230 <HAL_TIM_PWM_Init+0xe0>
    htim->Lock = HAL_UNLOCKED;
 800229c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80022a0:	f7ff ff54 	bl	800214c <HAL_TIM_PWM_MspInit>
 80022a4:	e760      	b.n	8002168 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 80022a6:	2001      	movs	r0, #1
}
 80022a8:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022aa:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022b2:	4302      	orrs	r2, r0
 80022b4:	e7b2      	b.n	800221c <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 80022b6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80022bc:	430a      	orrs	r2, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022be:	e782      	b.n	80021c6 <HAL_TIM_PWM_Init+0x76>
    tmpcr1 |= Structure->CounterMode;
 80022c0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 80022c8:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ce:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d0:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d6:	4302      	orrs	r2, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d8:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 80022da:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 80022dc:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022de:	62d9      	str	r1, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80022e0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e2:	e7a3      	b.n	800222c <HAL_TIM_PWM_Init+0xdc>
 80022e4:	40012c00 	.word	0x40012c00
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40013400 	.word	0x40013400
 80022f8:	50000c00 	.word	0x50000c00
 80022fc:	40014000 	.word	0x40014000
 8002300:	40014400 	.word	0x40014400
 8002304:	40014800 	.word	0x40014800

08002308 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8002308:	2910      	cmp	r1, #16
 800230a:	d80a      	bhi.n	8002322 <HAL_TIM_PWM_Start+0x1a>
 800230c:	e8df f001 	tbb	[pc, r1]
 8002310:	0909091a 	.word	0x0909091a
 8002314:	09090969 	.word	0x09090969
 8002318:	09090971 	.word	0x09090971
 800231c:	09090979 	.word	0x09090979
 8002320:	81          	.byte	0x81
 8002321:	00          	.byte	0x00
 8002322:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8002326:	2b01      	cmp	r3, #1
 8002328:	f040 808c 	bne.w	8002444 <HAL_TIM_PWM_Start+0x13c>
 800232c:	1f0b      	subs	r3, r1, #4
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d877      	bhi.n	8002422 <HAL_TIM_PWM_Start+0x11a>
 8002332:	e8df f003 	tbb	[pc, r3]
 8002336:	765a      	.short	0x765a
 8002338:	76627676 	.word	0x76627676
 800233c:	766a7676 	.word	0x766a7676
 8002340:	7676      	.short	0x7676
 8002342:	72          	.byte	0x72
 8002343:	00          	.byte	0x00
 8002344:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8002348:	2b01      	cmp	r3, #1
 800234a:	d17b      	bne.n	8002444 <HAL_TIM_PWM_Start+0x13c>
 800234c:	2302      	movs	r3, #2
 800234e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8002352:	2201      	movs	r2, #1
 8002354:	6803      	ldr	r3, [r0, #0]
 8002356:	f001 011f 	and.w	r1, r1, #31
 800235a:	6a18      	ldr	r0, [r3, #32]
 800235c:	408a      	lsls	r2, r1
 800235e:	ea20 0002 	bic.w	r0, r0, r2
 8002362:	b410      	push	{r4}
 8002364:	6218      	str	r0, [r3, #32]
 8002366:	6a19      	ldr	r1, [r3, #32]
 8002368:	4c4e      	ldr	r4, [pc, #312]	@ (80024a4 <HAL_TIM_PWM_Start+0x19c>)
 800236a:	430a      	orrs	r2, r1
 800236c:	42a3      	cmp	r3, r4
 800236e:	621a      	str	r2, [r3, #32]
 8002370:	d063      	beq.n	800243a <HAL_TIM_PWM_Start+0x132>
 8002372:	4a4d      	ldr	r2, [pc, #308]	@ (80024a8 <HAL_TIM_PWM_Start+0x1a0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d060      	beq.n	800243a <HAL_TIM_PWM_Start+0x132>
 8002378:	4a4c      	ldr	r2, [pc, #304]	@ (80024ac <HAL_TIM_PWM_Start+0x1a4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d05d      	beq.n	800243a <HAL_TIM_PWM_Start+0x132>
 800237e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8002382:	4293      	cmp	r3, r2
 8002384:	d051      	beq.n	800242a <HAL_TIM_PWM_Start+0x122>
 8002386:	4a4a      	ldr	r2, [pc, #296]	@ (80024b0 <HAL_TIM_PWM_Start+0x1a8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d05d      	beq.n	8002448 <HAL_TIM_PWM_Start+0x140>
 800238c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8002390:	4293      	cmp	r3, r2
 8002392:	d04a      	beq.n	800242a <HAL_TIM_PWM_Start+0x122>
 8002394:	4a47      	ldr	r2, [pc, #284]	@ (80024b4 <HAL_TIM_PWM_Start+0x1ac>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d062      	beq.n	8002460 <HAL_TIM_PWM_Start+0x158>
 800239a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800239e:	4293      	cmp	r3, r2
 80023a0:	d043      	beq.n	800242a <HAL_TIM_PWM_Start+0x122>
 80023a2:	4a45      	ldr	r2, [pc, #276]	@ (80024b8 <HAL_TIM_PWM_Start+0x1b0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d067      	beq.n	8002478 <HAL_TIM_PWM_Start+0x170>
 80023a8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d06b      	beq.n	8002488 <HAL_TIM_PWM_Start+0x180>
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b4:	d005      	beq.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 80023b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ba:	d002      	beq.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 80023bc:	4a3f      	ldr	r2, [pc, #252]	@ (80024bc <HAL_TIM_PWM_Start+0x1b4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d168      	bne.n	8002494 <HAL_TIM_PWM_Start+0x18c>
 80023c2:	6899      	ldr	r1, [r3, #8]
 80023c4:	4a3e      	ldr	r2, [pc, #248]	@ (80024c0 <HAL_TIM_PWM_Start+0x1b8>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	2a06      	cmp	r2, #6
 80023ca:	d006      	beq.n	80023da <HAL_TIM_PWM_Start+0xd2>
 80023cc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80023d0:	d003      	beq.n	80023da <HAL_TIM_PWM_Start+0xd2>
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f042 0201 	orr.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	2000      	movs	r0, #0
 80023dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d12c      	bne.n	8002444 <HAL_TIM_PWM_Start+0x13c>
 80023ea:	2302      	movs	r3, #2
 80023ec:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 80023f0:	e7af      	b.n	8002352 <HAL_TIM_PWM_Start+0x4a>
 80023f2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d124      	bne.n	8002444 <HAL_TIM_PWM_Start+0x13c>
 80023fa:	2302      	movs	r3, #2
 80023fc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8002400:	e7a7      	b.n	8002352 <HAL_TIM_PWM_Start+0x4a>
 8002402:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002406:	2b01      	cmp	r3, #1
 8002408:	d11c      	bne.n	8002444 <HAL_TIM_PWM_Start+0x13c>
 800240a:	2302      	movs	r3, #2
 800240c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8002410:	e79f      	b.n	8002352 <HAL_TIM_PWM_Start+0x4a>
 8002412:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002416:	2b01      	cmp	r3, #1
 8002418:	d114      	bne.n	8002444 <HAL_TIM_PWM_Start+0x13c>
 800241a:	2302      	movs	r3, #2
 800241c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 8002420:	e797      	b.n	8002352 <HAL_TIM_PWM_Start+0x4a>
 8002422:	2302      	movs	r3, #2
 8002424:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 8002428:	e793      	b.n	8002352 <HAL_TIM_PWM_Start+0x4a>
 800242a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800242c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002430:	645a      	str	r2, [r3, #68]	@ 0x44
 8002432:	4a24      	ldr	r2, [pc, #144]	@ (80024c4 <HAL_TIM_PWM_Start+0x1bc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d0c4      	beq.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 8002438:	e00a      	b.n	8002450 <HAL_TIM_PWM_Start+0x148>
 800243a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800243c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44
 8002442:	e7be      	b.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 8002444:	2001      	movs	r0, #1
 8002446:	4770      	bx	lr
 8002448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800244a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002450:	4a17      	ldr	r2, [pc, #92]	@ (80024b0 <HAL_TIM_PWM_Start+0x1a8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d0b5      	beq.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 8002456:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800245a:	4293      	cmp	r3, r2
 800245c:	d1b9      	bne.n	80023d2 <HAL_TIM_PWM_Start+0xca>
 800245e:	e7b0      	b.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 8002460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002466:	645a      	str	r2, [r3, #68]	@ 0x44
 8002468:	4a17      	ldr	r2, [pc, #92]	@ (80024c8 <HAL_TIM_PWM_Start+0x1c0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d0a9      	beq.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 800246e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8002472:	4293      	cmp	r3, r2
 8002474:	d1dd      	bne.n	8002432 <HAL_TIM_PWM_Start+0x12a>
 8002476:	e7a4      	b.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 8002478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800247a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800247e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002480:	4a12      	ldr	r2, [pc, #72]	@ (80024cc <HAL_TIM_PWM_Start+0x1c4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d09d      	beq.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 8002486:	e7ef      	b.n	8002468 <HAL_TIM_PWM_Start+0x160>
 8002488:	4611      	mov	r1, r2
 800248a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800248c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002490:	644a      	str	r2, [r1, #68]	@ 0x44
 8002492:	e7dd      	b.n	8002450 <HAL_TIM_PWM_Start+0x148>
 8002494:	4a0e      	ldr	r2, [pc, #56]	@ (80024d0 <HAL_TIM_PWM_Start+0x1c8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d093      	beq.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 800249a:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <HAL_TIM_PWM_Start+0x1cc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d1ef      	bne.n	8002480 <HAL_TIM_PWM_Start+0x178>
 80024a0:	e78f      	b.n	80023c2 <HAL_TIM_PWM_Start+0xba>
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	50012c00 	.word	0x50012c00
 80024ac:	40013400 	.word	0x40013400
 80024b0:	40014000 	.word	0x40014000
 80024b4:	40014400 	.word	0x40014400
 80024b8:	40014800 	.word	0x40014800
 80024bc:	40000400 	.word	0x40000400
 80024c0:	00010007 	.word	0x00010007
 80024c4:	50013400 	.word	0x50013400
 80024c8:	40000c00 	.word	0x40000c00
 80024cc:	50000800 	.word	0x50000800
 80024d0:	50000400 	.word	0x50000400
 80024d4:	40000800 	.word	0x40000800

080024d8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80024d8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80024dc:	2a01      	cmp	r2, #1
 80024de:	d075      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0xf4>
 80024e0:	4603      	mov	r3, r0
{
 80024e2:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80024e4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80024e6:	2502      	movs	r5, #2
  tmpsmcr = htim->Instance->SMCR;
 80024e8:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(htim);
 80024ea:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80024ee:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80024f2:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f4:	4c5e      	ldr	r4, [pc, #376]	@ (8002670 <HAL_TIM_ConfigClockSource+0x198>)
 80024f6:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 80024f8:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80024fa:	680c      	ldr	r4, [r1, #0]
 80024fc:	2c70      	cmp	r4, #112	@ 0x70
 80024fe:	f000 8091 	beq.w	8002624 <HAL_TIM_ConfigClockSource+0x14c>
 8002502:	d827      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x7c>
 8002504:	2c50      	cmp	r4, #80	@ 0x50
 8002506:	d063      	beq.n	80025d0 <HAL_TIM_ConfigClockSource+0xf8>
 8002508:	d82d      	bhi.n	8002566 <HAL_TIM_ConfigClockSource+0x8e>
 800250a:	2c40      	cmp	r4, #64	@ 0x40
 800250c:	f040 809a 	bne.w	8002644 <HAL_TIM_ConfigClockSource+0x16c>
                               sClockSourceConfig->ClockPolarity,
 8002510:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002512:	68cc      	ldr	r4, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002514:	6a11      	ldr	r1, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002516:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800251a:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800251c:	6a11      	ldr	r1, [r2, #32]
 800251e:	f021 0101 	bic.w	r1, r1, #1
 8002522:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002524:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002526:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800252a:	ea41 1104 	orr.w	r1, r1, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800252e:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8002530:	6210      	str	r0, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002532:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002534:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8002538:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800253c:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002540:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002544:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002546:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8002548:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002550:	bc30      	pop	{r4, r5}
 8002552:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002554:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8002558:	d054      	beq.n	8002604 <HAL_TIM_ConfigClockSource+0x12c>
 800255a:	d821      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0xc8>
 800255c:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8002560:	bf18      	it	ne
 8002562:	2001      	movne	r0, #1
 8002564:	e7ee      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x6c>
 8002566:	2c60      	cmp	r4, #96	@ 0x60
 8002568:	d1ec      	bne.n	8002544 <HAL_TIM_ConfigClockSource+0x6c>
                               sClockSourceConfig->ClockPolarity,
 800256a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800256c:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800256e:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002570:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002574:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002578:	6a10      	ldr	r0, [r2, #32]
 800257a:	f020 0010 	bic.w	r0, r0, #16
 800257e:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002580:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002582:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002586:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800258a:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 800258c:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800258e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002590:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8002594:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002598:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800259c:	6091      	str	r1, [r2, #8]
}
 800259e:	e7d0      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 80025a0:	4934      	ldr	r1, [pc, #208]	@ (8002674 <HAL_TIM_ConfigClockSource+0x19c>)
 80025a2:	428c      	cmp	r4, r1
 80025a4:	d008      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0xe0>
 80025a6:	d857      	bhi.n	8002658 <HAL_TIM_ConfigClockSource+0x180>
 80025a8:	f024 0110 	bic.w	r1, r4, #16
 80025ac:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80025b0:	d002      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0xe0>
 80025b2:	4931      	ldr	r1, [pc, #196]	@ (8002678 <HAL_TIM_ConfigClockSource+0x1a0>)
 80025b4:	428c      	cmp	r4, r1
 80025b6:	d1c5      	bne.n	8002544 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 80025b8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ba:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80025be:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025c2:	4321      	orrs	r1, r4
 80025c4:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 80025c8:	6091      	str	r1, [r2, #8]
}
 80025ca:	e7ba      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 80025cc:	2002      	movs	r0, #2
}
 80025ce:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 80025d0:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80025d2:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80025d4:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025d6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80025da:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025dc:	6a11      	ldr	r1, [r2, #32]
 80025de:	f021 0101 	bic.w	r1, r1, #1
 80025e2:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e4:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025e6:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025ea:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80025ee:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80025f0:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80025f2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025f4:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80025f8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025fc:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002600:	6091      	str	r1, [r2, #8]
}
 8002602:	e79e      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002604:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002608:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800260a:	4328      	orrs	r0, r5
 800260c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800260e:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002612:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002616:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002618:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800261a:	6891      	ldr	r1, [r2, #8]
 800261c:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002620:	6091      	str	r1, [r2, #8]
      break;
 8002622:	e78e      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002624:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002628:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800262a:	4328      	orrs	r0, r5
 800262c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800262e:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002632:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002636:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8002638:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800263a:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263c:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002640:	6091      	str	r1, [r2, #8]
      break;
 8002642:	e77e      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8002644:	f63f af7e 	bhi.w	8002544 <HAL_TIM_ConfigClockSource+0x6c>
 8002648:	2c20      	cmp	r4, #32
 800264a:	d0b5      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0xe0>
 800264c:	d80c      	bhi.n	8002668 <HAL_TIM_ConfigClockSource+0x190>
 800264e:	f034 0110 	bics.w	r1, r4, #16
 8002652:	f47f af77 	bne.w	8002544 <HAL_TIM_ConfigClockSource+0x6c>
 8002656:	e7af      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0xe0>
 8002658:	4908      	ldr	r1, [pc, #32]	@ (800267c <HAL_TIM_ConfigClockSource+0x1a4>)
 800265a:	428c      	cmp	r4, r1
 800265c:	d0ac      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0xe0>
 800265e:	3130      	adds	r1, #48	@ 0x30
 8002660:	428c      	cmp	r4, r1
 8002662:	f47f af6f 	bne.w	8002544 <HAL_TIM_ConfigClockSource+0x6c>
 8002666:	e7a7      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0xe0>
 8002668:	2c30      	cmp	r4, #48	@ 0x30
 800266a:	d0a5      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0xe0>
      status = HAL_ERROR;
 800266c:	2001      	movs	r0, #1
 800266e:	e769      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x6c>
 8002670:	ffce0088 	.word	0xffce0088
 8002674:	00100030 	.word	0x00100030
 8002678:	00100020 	.word	0x00100020
 800267c:	00100040 	.word	0x00100040

08002680 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8002680:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002682:	6a02      	ldr	r2, [r0, #32]
{
 8002684:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002686:	f022 0210 	bic.w	r2, r2, #16
 800268a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800268c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800268e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002690:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002692:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002696:	4d21      	ldr	r5, [pc, #132]	@ (800271c <TIM_OC2_SetConfig+0x9c>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002698:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800269c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026a0:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80026a2:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026a6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026a8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026ac:	d01f      	beq.n	80026ee <TIM_OC2_SetConfig+0x6e>
 80026ae:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80026b2:	42a8      	cmp	r0, r5
 80026b4:	d01b      	beq.n	80026ee <TIM_OC2_SetConfig+0x6e>
 80026b6:	4d1a      	ldr	r5, [pc, #104]	@ (8002720 <TIM_OC2_SetConfig+0xa0>)
 80026b8:	42a8      	cmp	r0, r5
 80026ba:	d018      	beq.n	80026ee <TIM_OC2_SetConfig+0x6e>
 80026bc:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80026c0:	42a8      	cmp	r0, r5
 80026c2:	d014      	beq.n	80026ee <TIM_OC2_SetConfig+0x6e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c4:	4d17      	ldr	r5, [pc, #92]	@ (8002724 <TIM_OC2_SetConfig+0xa4>)
 80026c6:	42a8      	cmp	r0, r5
 80026c8:	d018      	beq.n	80026fc <TIM_OC2_SetConfig+0x7c>
 80026ca:	4d17      	ldr	r5, [pc, #92]	@ (8002728 <TIM_OC2_SetConfig+0xa8>)
 80026cc:	42a8      	cmp	r0, r5
 80026ce:	d015      	beq.n	80026fc <TIM_OC2_SetConfig+0x7c>
 80026d0:	4d16      	ldr	r5, [pc, #88]	@ (800272c <TIM_OC2_SetConfig+0xac>)
 80026d2:	42a8      	cmp	r0, r5
 80026d4:	d012      	beq.n	80026fc <TIM_OC2_SetConfig+0x7c>
 80026d6:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80026da:	42a8      	cmp	r0, r5
 80026dc:	d00e      	beq.n	80026fc <TIM_OC2_SetConfig+0x7c>
 80026de:	4d14      	ldr	r5, [pc, #80]	@ (8002730 <TIM_OC2_SetConfig+0xb0>)
 80026e0:	42a8      	cmp	r0, r5
 80026e2:	d00b      	beq.n	80026fc <TIM_OC2_SetConfig+0x7c>
 80026e4:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80026e8:	42a8      	cmp	r0, r5
 80026ea:	d10f      	bne.n	800270c <TIM_OC2_SetConfig+0x8c>
 80026ec:	e006      	b.n	80026fc <TIM_OC2_SetConfig+0x7c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80026f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80026f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026fc:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002700:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8002704:	ea46 0c05 	orr.w	ip, r6, r5
 8002708:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800270c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800270e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002710:	6182      	str	r2, [r0, #24]
}
 8002712:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8002714:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002716:	6203      	str	r3, [r0, #32]
}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40013400 	.word	0x40013400
 8002724:	40014000 	.word	0x40014000
 8002728:	50014000 	.word	0x50014000
 800272c:	40014400 	.word	0x40014400
 8002730:	40014800 	.word	0x40014800

08002734 <HAL_TIM_PWM_ConfigChannel>:
{
 8002734:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002736:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800273a:	2b01      	cmp	r3, #1
 800273c:	d07c      	beq.n	8002838 <HAL_TIM_PWM_ConfigChannel+0x104>
 800273e:	2301      	movs	r3, #1
 8002740:	4604      	mov	r4, r0
 8002742:	460d      	mov	r5, r1
 8002744:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002748:	2a14      	cmp	r2, #20
 800274a:	d80c      	bhi.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x32>
 800274c:	e8df f002 	tbb	[pc, r2]
 8002750:	0b0b0b22 	.word	0x0b0b0b22
 8002754:	0b0b0b32 	.word	0x0b0b0b32
 8002758:	0b0b0b43 	.word	0x0b0b0b43
 800275c:	0b0b0b53 	.word	0x0b0b0b53
 8002760:	0b0b0b64 	.word	0x0b0b0b64
 8002764:	10          	.byte	0x10
 8002765:	00          	.byte	0x00
 8002766:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002768:	2300      	movs	r3, #0
 800276a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800276e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002770:	6800      	ldr	r0, [r0, #0]
 8002772:	f7ff fbc1 	bl	8001ef8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002776:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002778:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800277a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800277e:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002780:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002782:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002786:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002788:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800278a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800278e:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8002790:	2000      	movs	r0, #0
 8002792:	e7e9      	b.n	8002768 <HAL_TIM_PWM_ConfigChannel+0x34>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002794:	6800      	ldr	r0, [r0, #0]
 8002796:	f7ff fa5d 	bl	8001c54 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800279a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800279c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800279e:	f043 0308 	orr.w	r3, r3, #8
 80027a2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027a4:	6983      	ldr	r3, [r0, #24]
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027ac:	6983      	ldr	r3, [r0, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	6183      	str	r3, [r0, #24]
      break;
 80027b2:	e7ed      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027b4:	6800      	ldr	r0, [r0, #0]
 80027b6:	f7ff ff63 	bl	8002680 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ba:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027bc:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027c2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027c4:	6983      	ldr	r3, [r0, #24]
 80027c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027ca:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027cc:	6983      	ldr	r3, [r0, #24]
 80027ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80027d2:	6183      	str	r3, [r0, #24]
      break;
 80027d4:	e7dc      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027d6:	6800      	ldr	r0, [r0, #0]
 80027d8:	f7ff fa90 	bl	8001cfc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027dc:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027de:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027e6:	69c3      	ldr	r3, [r0, #28]
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027ee:	69c3      	ldr	r3, [r0, #28]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61c3      	str	r3, [r0, #28]
      break;
 80027f4:	e7cc      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027f6:	6800      	ldr	r0, [r0, #0]
 80027f8:	f7ff fad8 	bl	8001dac <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027fc:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027fe:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002800:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002804:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002806:	69c3      	ldr	r3, [r0, #28]
 8002808:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800280c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800280e:	69c3      	ldr	r3, [r0, #28]
 8002810:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002814:	61c3      	str	r3, [r0, #28]
      break;
 8002816:	e7bb      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002818:	6800      	ldr	r0, [r0, #0]
 800281a:	f7ff fb21 	bl	8001e60 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800281e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002820:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002822:	f043 0308 	orr.w	r3, r3, #8
 8002826:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002828:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	6503      	str	r3, [r0, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002830:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002832:	4313      	orrs	r3, r2
 8002834:	6503      	str	r3, [r0, #80]	@ 0x50
      break;
 8002836:	e7ab      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x5c>
  __HAL_LOCK(htim);
 8002838:	2002      	movs	r0, #2
}
 800283a:	bd38      	pop	{r3, r4, r5, pc}

0800283c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800283c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d062      	beq.n	800290a <HAL_TIMEx_MasterConfigSynchronization+0xce>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	2302      	movs	r3, #2
{
 8002846:	b430      	push	{r4, r5}

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002848:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800284a:	4d31      	ldr	r5, [pc, #196]	@ (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002850:	42aa      	cmp	r2, r5
 8002852:	4684      	mov	ip, r0
  tmpcr2 = htim->Instance->CR2;
 8002854:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002856:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002858:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800285a:	d040      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800285c:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8002860:	42aa      	cmp	r2, r5
 8002862:	d047      	beq.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002864:	4d2b      	ldr	r5, [pc, #172]	@ (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002866:	42aa      	cmp	r2, r5
 8002868:	d039      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800286a:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 800286e:	42aa      	cmp	r2, r5
 8002870:	d035      	beq.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
  tmpcr2 &= ~TIM_CR2_MMS;
 8002872:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800287a:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800287c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8002880:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002882:	d01e      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002884:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002888:	d01b      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800288a:	4b23      	ldr	r3, [pc, #140]	@ (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800288c:	429a      	cmp	r2, r3
 800288e:	d018      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002890:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8002894:	429a      	cmp	r2, r3
 8002896:	d014      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002898:	4b20      	ldr	r3, [pc, #128]	@ (800291c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800289a:	429a      	cmp	r2, r3
 800289c:	d011      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800289e:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d00d      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80028a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d00a      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80028ac:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d006      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80028b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d003      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80028ba:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80028be:	429a      	cmp	r2, r3
 80028c0:	d104      	bne.n	80028cc <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028c2:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028c4:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028c8:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ca:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80028cc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80028ce:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80028d0:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	f88c 203d 	strb.w	r2, [ip, #61]	@ 0x3d

  return HAL_OK;
 80028d8:	4618      	mov	r0, r3
}
 80028da:	bc30      	pop	{r4, r5}
 80028dc:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028de:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028e4:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80028ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ee:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80028f0:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f2:	e7e6      	b.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028f4:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028fa:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80028fc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002904:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 8002906:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002908:	e7db      	b.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
  __HAL_LOCK(htim);
 800290a:	2002      	movs	r0, #2
}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40013400 	.word	0x40013400
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800
 8002920:	40000c00 	.word	0x40000c00
 8002924:	40014000 	.word	0x40014000

08002928 <_init>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr

08002934 <_fini>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr
