
stm32-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e24  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800805c  0800805c  0000905c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800819c  0800819c  0000919c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081a4  080081a4  000091a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080081a8  080081a8  000091a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000000  080081ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007bc  20000068  08008214  0000a068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000824  08008214  0000a824  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 10 .comment      00000026  00000000  00000000  0000a09e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003a5bb  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007e79  00000000  00000000  0004467f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0001d341  00000000  00000000  0004c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  00069840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000294c  00000000  00000000  0006b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000388f4  00000000  00000000  0006dc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ea46  00000000  00000000  000a6538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016dcf4  00000000  00000000  000d4f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00004774  00000000  00000000  00242c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000001aa  00000000  00000000  002473e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <deregister_tm_clones>:
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <deregister_tm_clones+0x10>)
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <deregister_tm_clones+0x14>)
 800023c:	4283      	cmp	r3, r0
 800023e:	d002      	beq.n	8000246 <deregister_tm_clones+0xe>
 8000240:	4b03      	ldr	r3, [pc, #12]	@ (8000250 <deregister_tm_clones+0x18>)
 8000242:	b103      	cbz	r3, 8000246 <deregister_tm_clones+0xe>
 8000244:	4718      	bx	r3
 8000246:	4770      	bx	lr
 8000248:	20000068 	.word	0x20000068
 800024c:	20000068 	.word	0x20000068
 8000250:	00000000 	.word	0x00000000

08000254 <register_tm_clones>:
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <register_tm_clones+0x1c>)
 8000256:	4907      	ldr	r1, [pc, #28]	@ (8000274 <register_tm_clones+0x20>)
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	1089      	asrs	r1, r1, #2
 800025c:	bf48      	it	mi
 800025e:	3101      	addmi	r1, #1
 8000260:	1049      	asrs	r1, r1, #1
 8000262:	d003      	beq.n	800026c <register_tm_clones+0x18>
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <register_tm_clones+0x24>)
 8000266:	b10b      	cbz	r3, 800026c <register_tm_clones+0x18>
 8000268:	4801      	ldr	r0, [pc, #4]	@ (8000270 <register_tm_clones+0x1c>)
 800026a:	4718      	bx	r3
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	20000068 	.word	0x20000068
 8000274:	20000068 	.word	0x20000068
 8000278:	00000000 	.word	0x00000000

0800027c <__do_global_dtors_aux>:
 800027c:	b510      	push	{r4, lr}
 800027e:	4c06      	ldr	r4, [pc, #24]	@ (8000298 <__do_global_dtors_aux+0x1c>)
 8000280:	7823      	ldrb	r3, [r4, #0]
 8000282:	b943      	cbnz	r3, 8000296 <__do_global_dtors_aux+0x1a>
 8000284:	f7ff ffd8 	bl	8000238 <deregister_tm_clones>
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <__do_global_dtors_aux+0x20>)
 800028a:	b113      	cbz	r3, 8000292 <__do_global_dtors_aux+0x16>
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x24>)
 800028e:	f3af 8000 	nop.w
 8000292:	2301      	movs	r3, #1
 8000294:	7023      	strb	r3, [r4, #0]
 8000296:	bd10      	pop	{r4, pc}
 8000298:	20000068 	.word	0x20000068
 800029c:	00000000 	.word	0x00000000
 80002a0:	08008044 	.word	0x08008044

080002a4 <frame_dummy>:
 80002a4:	b508      	push	{r3, lr}
 80002a6:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <frame_dummy+0x14>)
 80002a8:	b11b      	cbz	r3, 80002b2 <frame_dummy+0xe>
 80002aa:	4904      	ldr	r1, [pc, #16]	@ (80002bc <frame_dummy+0x18>)
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <frame_dummy+0x1c>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002b6:	e7cd      	b.n	8000254 <register_tm_clones>
 80002b8:	00000000 	.word	0x00000000
 80002bc:	2000006c 	.word	0x2000006c
 80002c0:	08008044 	.word	0x08008044

080002c4 <__libc_init_array>:
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <__libc_init_array+0x40>)
 80002c6:	b570      	push	{r4, r5, r6, lr}
 80002c8:	4d0f      	ldr	r5, [pc, #60]	@ (8000308 <__libc_init_array+0x44>)
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	eba3 0605 	sub.w	r6, r3, r5
 80002d0:	d007      	beq.n	80002e2 <__libc_init_array+0x1e>
 80002d2:	10b6      	asrs	r6, r6, #2
 80002d4:	2400      	movs	r4, #0
 80002d6:	3401      	adds	r4, #1
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d8f9      	bhi.n	80002d6 <__libc_init_array+0x12>
 80002e2:	4d0a      	ldr	r5, [pc, #40]	@ (800030c <__libc_init_array+0x48>)
 80002e4:	f007 feae 	bl	8008044 <_init>
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <__libc_init_array+0x4c>)
 80002ea:	1b5e      	subs	r6, r3, r5
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80002f2:	d006      	beq.n	8000302 <__libc_init_array+0x3e>
 80002f4:	2400      	movs	r4, #0
 80002f6:	3401      	adds	r4, #1
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d8f9      	bhi.n	80002f6 <__libc_init_array+0x32>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	080081a4 	.word	0x080081a4
 8000308:	080081a4 	.word	0x080081a4
 800030c:	080081a4 	.word	0x080081a4
 8000310:	080081a8 	.word	0x080081a8

08000314 <memset>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	0786      	lsls	r6, r0, #30
 8000318:	d047      	beq.n	80003aa <memset+0x96>
 800031a:	1e54      	subs	r4, r2, #1
 800031c:	2a00      	cmp	r2, #0
 800031e:	d03e      	beq.n	800039e <memset+0x8a>
 8000320:	b2ca      	uxtb	r2, r1
 8000322:	4603      	mov	r3, r0
 8000324:	e001      	b.n	800032a <memset+0x16>
 8000326:	3c01      	subs	r4, #1
 8000328:	d339      	bcc.n	800039e <memset+0x8a>
 800032a:	f803 2b01 	strb.w	r2, [r3], #1
 800032e:	079d      	lsls	r5, r3, #30
 8000330:	d1f9      	bne.n	8000326 <memset+0x12>
 8000332:	2c03      	cmp	r4, #3
 8000334:	d92c      	bls.n	8000390 <memset+0x7c>
 8000336:	b2cd      	uxtb	r5, r1
 8000338:	2c0f      	cmp	r4, #15
 800033a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800033e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8000342:	d935      	bls.n	80003b0 <memset+0x9c>
 8000344:	f1a4 0c10 	sub.w	ip, r4, #16
 8000348:	f103 0e10 	add.w	lr, r3, #16
 800034c:	461a      	mov	r2, r3
 800034e:	f02c 060f 	bic.w	r6, ip, #15
 8000352:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8000356:	44b6      	add	lr, r6
 8000358:	e9c2 5500 	strd	r5, r5, [r2]
 800035c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000360:	3210      	adds	r2, #16
 8000362:	4572      	cmp	r2, lr
 8000364:	d1f8      	bne.n	8000358 <memset+0x44>
 8000366:	f10c 0201 	add.w	r2, ip, #1
 800036a:	f014 0f0c 	tst.w	r4, #12
 800036e:	f004 0c0f 	and.w	ip, r4, #15
 8000372:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000376:	d013      	beq.n	80003a0 <memset+0x8c>
 8000378:	f1ac 0304 	sub.w	r3, ip, #4
 800037c:	f023 0303 	bic.w	r3, r3, #3
 8000380:	3304      	adds	r3, #4
 8000382:	4413      	add	r3, r2
 8000384:	f842 5b04 	str.w	r5, [r2], #4
 8000388:	4293      	cmp	r3, r2
 800038a:	d1fb      	bne.n	8000384 <memset+0x70>
 800038c:	f00c 0403 	and.w	r4, ip, #3
 8000390:	b12c      	cbz	r4, 800039e <memset+0x8a>
 8000392:	b2c9      	uxtb	r1, r1
 8000394:	441c      	add	r4, r3
 8000396:	f803 1b01 	strb.w	r1, [r3], #1
 800039a:	42a3      	cmp	r3, r4
 800039c:	d1fb      	bne.n	8000396 <memset+0x82>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	4664      	mov	r4, ip
 80003a2:	4613      	mov	r3, r2
 80003a4:	2c00      	cmp	r4, #0
 80003a6:	d1f4      	bne.n	8000392 <memset+0x7e>
 80003a8:	e7f9      	b.n	800039e <memset+0x8a>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4614      	mov	r4, r2
 80003ae:	e7c0      	b.n	8000332 <memset+0x1e>
 80003b0:	461a      	mov	r2, r3
 80003b2:	46a4      	mov	ip, r4
 80003b4:	e7e0      	b.n	8000378 <memset+0x64>
 80003b6:	bf00      	nop

080003b8 <__errno>:
 80003b8:	4b01      	ldr	r3, [pc, #4]	@ (80003c0 <__errno+0x8>)
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000000 	.word	0x20000000

080003c4 <memmove>:
 80003c4:	4288      	cmp	r0, r1
 80003c6:	d90e      	bls.n	80003e6 <memmove+0x22>
 80003c8:	188b      	adds	r3, r1, r2
 80003ca:	4283      	cmp	r3, r0
 80003cc:	d90b      	bls.n	80003e6 <memmove+0x22>
 80003ce:	eb00 0c02 	add.w	ip, r0, r2
 80003d2:	2a00      	cmp	r2, #0
 80003d4:	d06e      	beq.n	80004b4 <memmove+0xf0>
 80003d6:	4662      	mov	r2, ip
 80003d8:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80003dc:	4299      	cmp	r1, r3
 80003de:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80003e2:	d1f9      	bne.n	80003d8 <memmove+0x14>
 80003e4:	4770      	bx	lr
 80003e6:	2a0f      	cmp	r2, #15
 80003e8:	d80f      	bhi.n	800040a <memmove+0x46>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	d05f      	beq.n	80004b4 <memmove+0xf0>
 80003f4:	f10c 0c01 	add.w	ip, ip, #1
 80003f8:	3b01      	subs	r3, #1
 80003fa:	448c      	add	ip, r1
 80003fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000400:	4561      	cmp	r1, ip
 8000402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000406:	d1f9      	bne.n	80003fc <memmove+0x38>
 8000408:	4770      	bx	lr
 800040a:	ea40 0301 	orr.w	r3, r0, r1
 800040e:	079b      	lsls	r3, r3, #30
 8000410:	d151      	bne.n	80004b6 <memmove+0xf2>
 8000412:	f1a2 0310 	sub.w	r3, r2, #16
 8000416:	f101 0c20 	add.w	ip, r1, #32
 800041a:	b570      	push	{r4, r5, r6, lr}
 800041c:	f023 050f 	bic.w	r5, r3, #15
 8000420:	f101 0e10 	add.w	lr, r1, #16
 8000424:	f100 0410 	add.w	r4, r0, #16
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	44ac      	add	ip, r5
 800042c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8000430:	f10e 0e10 	add.w	lr, lr, #16
 8000434:	3410      	adds	r4, #16
 8000436:	f844 5c20 	str.w	r5, [r4, #-32]
 800043a:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
 800043e:	f844 5c1c 	str.w	r5, [r4, #-28]
 8000442:	f85e 5c18 	ldr.w	r5, [lr, #-24]
 8000446:	f844 5c18 	str.w	r5, [r4, #-24]
 800044a:	f85e 5c14 	ldr.w	r5, [lr, #-20]
 800044e:	45e6      	cmp	lr, ip
 8000450:	f844 5c14 	str.w	r5, [r4, #-20]
 8000454:	d1ea      	bne.n	800042c <memmove+0x68>
 8000456:	3301      	adds	r3, #1
 8000458:	f012 0f0c 	tst.w	r2, #12
 800045c:	f002 0c0f 	and.w	ip, r2, #15
 8000460:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8000464:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8000468:	d029      	beq.n	80004be <memmove+0xfa>
 800046a:	f1ac 0c04 	sub.w	ip, ip, #4
 800046e:	1f1c      	subs	r4, r3, #4
 8000470:	468e      	mov	lr, r1
 8000472:	f02c 0603 	bic.w	r6, ip, #3
 8000476:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800047a:	441e      	add	r6, r3
 800047c:	f85e 5b04 	ldr.w	r5, [lr], #4
 8000480:	f844 5f04 	str.w	r5, [r4, #4]!
 8000484:	42b4      	cmp	r4, r6
 8000486:	d1f9      	bne.n	800047c <memmove+0xb8>
 8000488:	f10c 0401 	add.w	r4, ip, #1
 800048c:	f002 0203 	and.w	r2, r2, #3
 8000490:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8000498:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 800049c:	b14a      	cbz	r2, 80004b2 <memmove+0xee>
 800049e:	f10c 0c01 	add.w	ip, ip, #1
 80004a2:	3b01      	subs	r3, #1
 80004a4:	448c      	add	ip, r1
 80004a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80004aa:	4561      	cmp	r1, ip
 80004ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80004b0:	d1f9      	bne.n	80004a6 <memmove+0xe2>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	4770      	bx	lr
 80004b6:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80004ba:	4603      	mov	r3, r0
 80004bc:	e79a      	b.n	80003f4 <memmove+0x30>
 80004be:	4662      	mov	r2, ip
 80004c0:	e7ea      	b.n	8000498 <memmove+0xd4>
 80004c2:	bf00      	nop

080004c4 <_iprintf_r>:
 80004c4:	b40e      	push	{r1, r2, r3}
 80004c6:	b500      	push	{lr}
 80004c8:	b082      	sub	sp, #8
 80004ca:	6881      	ldr	r1, [r0, #8]
 80004cc:	ab03      	add	r3, sp, #12
 80004ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	f000 f860 	bl	8000598 <_vfiprintf_r>
 80004d8:	b002      	add	sp, #8
 80004da:	f85d eb04 	ldr.w	lr, [sp], #4
 80004de:	b003      	add	sp, #12
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <iprintf>:
 80004e4:	b40f      	push	{r0, r1, r2, r3}
 80004e6:	4908      	ldr	r1, [pc, #32]	@ (8000508 <iprintf+0x24>)
 80004e8:	b500      	push	{lr}
 80004ea:	b083      	sub	sp, #12
 80004ec:	6808      	ldr	r0, [r1, #0]
 80004ee:	ab04      	add	r3, sp, #16
 80004f0:	6881      	ldr	r1, [r0, #8]
 80004f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	f000 f84e 	bl	8000598 <_vfiprintf_r>
 80004fc:	b003      	add	sp, #12
 80004fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8000502:	b004      	add	sp, #16
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000

0800050c <__sfputc_r>:
 800050c:	6893      	ldr	r3, [r2, #8]
 800050e:	3b01      	subs	r3, #1
 8000510:	2b00      	cmp	r3, #0
 8000512:	6093      	str	r3, [r2, #8]
 8000514:	da11      	bge.n	800053a <__sfputc_r+0x2e>
 8000516:	b410      	push	{r4}
 8000518:	6994      	ldr	r4, [r2, #24]
 800051a:	42a3      	cmp	r3, r4
 800051c:	db09      	blt.n	8000532 <__sfputc_r+0x26>
 800051e:	290a      	cmp	r1, #10
 8000520:	d007      	beq.n	8000532 <__sfputc_r+0x26>
 8000522:	6813      	ldr	r3, [r2, #0]
 8000524:	1c58      	adds	r0, r3, #1
 8000526:	6010      	str	r0, [r2, #0]
 8000528:	4608      	mov	r0, r1
 800052a:	7019      	strb	r1, [r3, #0]
 800052c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000536:	f000 b957 	b.w	80007e8 <__swbuf_r>
 800053a:	6813      	ldr	r3, [r2, #0]
 800053c:	1c58      	adds	r0, r3, #1
 800053e:	6010      	str	r0, [r2, #0]
 8000540:	4608      	mov	r0, r1
 8000542:	7019      	strb	r1, [r3, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <__sfputs_r>:
 8000548:	b19b      	cbz	r3, 8000572 <__sfputs_r+0x2a>
 800054a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054c:	4413      	add	r3, r2
 800054e:	4606      	mov	r6, r0
 8000550:	460f      	mov	r7, r1
 8000552:	1e54      	subs	r4, r2, #1
 8000554:	1e5d      	subs	r5, r3, #1
 8000556:	e001      	b.n	800055c <__sfputs_r+0x14>
 8000558:	42ac      	cmp	r4, r5
 800055a:	d008      	beq.n	800056e <__sfputs_r+0x26>
 800055c:	463a      	mov	r2, r7
 800055e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000562:	4630      	mov	r0, r6
 8000564:	f7ff ffd2 	bl	800050c <__sfputc_r>
 8000568:	1c43      	adds	r3, r0, #1
 800056a:	d1f5      	bne.n	8000558 <__sfputs_r+0x10>
 800056c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800056e:	2000      	movs	r0, #0
 8000570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000572:	2000      	movs	r0, #0
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__sprint_r>:
 8000578:	6893      	ldr	r3, [r2, #8]
 800057a:	b510      	push	{r4, lr}
 800057c:	4614      	mov	r4, r2
 800057e:	b91b      	cbnz	r3, 8000588 <__sprint_r+0x10>
 8000580:	4618      	mov	r0, r3
 8000582:	2300      	movs	r3, #0
 8000584:	6063      	str	r3, [r4, #4]
 8000586:	bd10      	pop	{r4, pc}
 8000588:	f000 f97a 	bl	8000880 <__sfvwrite_r>
 800058c:	2300      	movs	r3, #0
 800058e:	60a3      	str	r3, [r4, #8]
 8000590:	2300      	movs	r3, #0
 8000592:	6063      	str	r3, [r4, #4]
 8000594:	bd10      	pop	{r4, pc}
 8000596:	bf00      	nop

08000598 <_vfiprintf_r>:
 8000598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800059c:	468b      	mov	fp, r1
 800059e:	b09f      	sub	sp, #124	@ 0x7c
 80005a0:	4616      	mov	r6, r2
 80005a2:	461c      	mov	r4, r3
 80005a4:	4682      	mov	sl, r0
 80005a6:	b118      	cbz	r0, 80005b0 <_vfiprintf_r+0x18>
 80005a8:	6a03      	ldr	r3, [r0, #32]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f000 8103 	beq.w	80007b6 <_vfiprintf_r+0x21e>
 80005b0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80005b4:	0718      	lsls	r0, r3, #28
 80005b6:	f140 8098 	bpl.w	80006ea <_vfiprintf_r+0x152>
 80005ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f000 8093 	beq.w	80006ea <_vfiprintf_r+0x152>
 80005c4:	2300      	movs	r3, #0
 80005c6:	4f7d      	ldr	r7, [pc, #500]	@ (80007bc <_vfiprintf_r+0x224>)
 80005c8:	f04f 0801 	mov.w	r8, #1
 80005cc:	9405      	str	r4, [sp, #20]
 80005ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80005d0:	f243 0320 	movw	r3, #12320	@ 0x3020
 80005d4:	f8ad 3031 	strh.w	r3, [sp, #49]	@ 0x31
 80005d8:	7833      	ldrb	r3, [r6, #0]
 80005da:	4635      	mov	r5, r6
 80005dc:	b14b      	cbz	r3, 80005f2 <_vfiprintf_r+0x5a>
 80005de:	2b25      	cmp	r3, #37	@ 0x25
 80005e0:	d007      	beq.n	80005f2 <_vfiprintf_r+0x5a>
 80005e2:	462a      	mov	r2, r5
 80005e4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80005e8:	b10b      	cbz	r3, 80005ee <_vfiprintf_r+0x56>
 80005ea:	2b25      	cmp	r3, #37	@ 0x25
 80005ec:	d1f9      	bne.n	80005e2 <_vfiprintf_r+0x4a>
 80005ee:	1ba9      	subs	r1, r5, r6
 80005f0:	d160      	bne.n	80006b4 <_vfiprintf_r+0x11c>
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d071      	beq.n	80006da <_vfiprintf_r+0x142>
 80005f6:	2300      	movs	r3, #0
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005fc:	3501      	adds	r5, #1
 80005fe:	9306      	str	r3, [sp, #24]
 8000600:	9309      	str	r3, [sp, #36]	@ 0x24
 8000602:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8000606:	931c      	str	r3, [sp, #112]	@ 0x70
 8000608:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800060c:	e005      	b.n	800061a <_vfiprintf_r+0x82>
 800060e:	1bc0      	subs	r0, r0, r7
 8000610:	4625      	mov	r5, r4
 8000612:	fa08 f000 	lsl.w	r0, r8, r0
 8000616:	4303      	orrs	r3, r0
 8000618:	9306      	str	r3, [sp, #24]
 800061a:	462c      	mov	r4, r5
 800061c:	2205      	movs	r2, #5
 800061e:	4638      	mov	r0, r7
 8000620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000624:	f001 f912 	bl	800184c <memchr>
 8000628:	9b06      	ldr	r3, [sp, #24]
 800062a:	4626      	mov	r6, r4
 800062c:	2800      	cmp	r0, #0
 800062e:	d1ee      	bne.n	800060e <_vfiprintf_r+0x76>
 8000630:	06d9      	lsls	r1, r3, #27
 8000632:	d502      	bpl.n	800063a <_vfiprintf_r+0xa2>
 8000634:	2220      	movs	r2, #32
 8000636:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800063a:	071a      	lsls	r2, r3, #28
 800063c:	d502      	bpl.n	8000644 <_vfiprintf_r+0xac>
 800063e:	222b      	movs	r2, #43	@ 0x2b
 8000640:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8000644:	7829      	ldrb	r1, [r5, #0]
 8000646:	292a      	cmp	r1, #42	@ 0x2a
 8000648:	d159      	bne.n	80006fe <_vfiprintf_r+0x166>
 800064a:	9a05      	ldr	r2, [sp, #20]
 800064c:	1d11      	adds	r1, r2, #4
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	2a00      	cmp	r2, #0
 8000652:	9105      	str	r1, [sp, #20]
 8000654:	f2c0 8089 	blt.w	800076a <_vfiprintf_r+0x1d2>
 8000658:	9209      	str	r2, [sp, #36]	@ 0x24
 800065a:	7869      	ldrb	r1, [r5, #1]
 800065c:	292e      	cmp	r1, #46	@ 0x2e
 800065e:	d062      	beq.n	8000726 <_vfiprintf_r+0x18e>
 8000660:	4c57      	ldr	r4, [pc, #348]	@ (80007c0 <_vfiprintf_r+0x228>)
 8000662:	2203      	movs	r2, #3
 8000664:	4620      	mov	r0, r4
 8000666:	f001 f8f1 	bl	800184c <memchr>
 800066a:	b130      	cbz	r0, 800067a <_vfiprintf_r+0xe2>
 800066c:	1b00      	subs	r0, r0, r4
 800066e:	2240      	movs	r2, #64	@ 0x40
 8000670:	9b06      	ldr	r3, [sp, #24]
 8000672:	3601      	adds	r6, #1
 8000674:	4082      	lsls	r2, r0
 8000676:	4313      	orrs	r3, r2
 8000678:	9306      	str	r3, [sp, #24]
 800067a:	f816 1b01 	ldrb.w	r1, [r6], #1
 800067e:	2206      	movs	r2, #6
 8000680:	4850      	ldr	r0, [pc, #320]	@ (80007c4 <_vfiprintf_r+0x22c>)
 8000682:	f88d 1030 	strb.w	r1, [sp, #48]	@ 0x30
 8000686:	f001 f8e1 	bl	800184c <memchr>
 800068a:	2800      	cmp	r0, #0
 800068c:	d073      	beq.n	8000776 <_vfiprintf_r+0x1de>
 800068e:	4b4e      	ldr	r3, [pc, #312]	@ (80007c8 <_vfiprintf_r+0x230>)
 8000690:	2b00      	cmp	r3, #0
 8000692:	d05a      	beq.n	800074a <_vfiprintf_r+0x1b2>
 8000694:	ac05      	add	r4, sp, #20
 8000696:	4b4d      	ldr	r3, [pc, #308]	@ (80007cc <_vfiprintf_r+0x234>)
 8000698:	465a      	mov	r2, fp
 800069a:	a906      	add	r1, sp, #24
 800069c:	4650      	mov	r0, sl
 800069e:	9400      	str	r4, [sp, #0]
 80006a0:	f3af 8000 	nop.w
 80006a4:	4681      	mov	r9, r0
 80006a6:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80006aa:	d016      	beq.n	80006da <_vfiprintf_r+0x142>
 80006ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80006ae:	444b      	add	r3, r9
 80006b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80006b2:	e791      	b.n	80005d8 <_vfiprintf_r+0x40>
 80006b4:	3e01      	subs	r6, #1
 80006b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80006ba:	9503      	str	r5, [sp, #12]
 80006bc:	4689      	mov	r9, r1
 80006be:	1874      	adds	r4, r6, r1
 80006c0:	4635      	mov	r5, r6
 80006c2:	4616      	mov	r6, r2
 80006c4:	e001      	b.n	80006ca <_vfiprintf_r+0x132>
 80006c6:	42a5      	cmp	r5, r4
 80006c8:	d046      	beq.n	8000758 <_vfiprintf_r+0x1c0>
 80006ca:	465a      	mov	r2, fp
 80006cc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80006d0:	4650      	mov	r0, sl
 80006d2:	f7ff ff1b 	bl	800050c <__sfputc_r>
 80006d6:	3001      	adds	r0, #1
 80006d8:	d1f5      	bne.n	80006c6 <_vfiprintf_r+0x12e>
 80006da:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80006de:	065b      	lsls	r3, r3, #25
 80006e0:	d40a      	bmi.n	80006f8 <_vfiprintf_r+0x160>
 80006e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80006e4:	b01f      	add	sp, #124	@ 0x7c
 80006e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ea:	4659      	mov	r1, fp
 80006ec:	4650      	mov	r0, sl
 80006ee:	f000 fd45 	bl	800117c <__swsetup_r>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	f43f af66 	beq.w	80005c4 <_vfiprintf_r+0x2c>
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006fc:	e7f2      	b.n	80006e4 <_vfiprintf_r+0x14c>
 80006fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8000702:	2a09      	cmp	r2, #9
 8000704:	d855      	bhi.n	80007b2 <_vfiprintf_r+0x21a>
 8000706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000708:	e000      	b.n	800070c <_vfiprintf_r+0x174>
 800070a:	3401      	adds	r4, #1
 800070c:	7821      	ldrb	r1, [r4, #0]
 800070e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000712:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000716:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800071a:	2a09      	cmp	r2, #9
 800071c:	d9f5      	bls.n	800070a <_vfiprintf_r+0x172>
 800071e:	292e      	cmp	r1, #46	@ 0x2e
 8000720:	4626      	mov	r6, r4
 8000722:	9309      	str	r3, [sp, #36]	@ 0x24
 8000724:	d19c      	bne.n	8000660 <_vfiprintf_r+0xc8>
 8000726:	7871      	ldrb	r1, [r6, #1]
 8000728:	292a      	cmp	r1, #42	@ 0x2a
 800072a:	d12e      	bne.n	800078a <_vfiprintf_r+0x1f2>
 800072c:	9b05      	ldr	r3, [sp, #20]
 800072e:	1cb2      	adds	r2, r6, #2
 8000730:	1d19      	adds	r1, r3, #4
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	9307      	str	r3, [sp, #28]
 8000738:	9105      	str	r1, [sp, #20]
 800073a:	bfb8      	it	lt
 800073c:	f04f 33ff 	movlt.w	r3, #4294967295	@ 0xffffffff
 8000740:	78b1      	ldrb	r1, [r6, #2]
 8000742:	4616      	mov	r6, r2
 8000744:	bfb8      	it	lt
 8000746:	9307      	strlt	r3, [sp, #28]
 8000748:	e78a      	b.n	8000660 <_vfiprintf_r+0xc8>
 800074a:	9b05      	ldr	r3, [sp, #20]
 800074c:	3307      	adds	r3, #7
 800074e:	f023 0307 	bic.w	r3, r3, #7
 8000752:	3308      	adds	r3, #8
 8000754:	9305      	str	r3, [sp, #20]
 8000756:	e7a9      	b.n	80006ac <_vfiprintf_r+0x114>
 8000758:	4649      	mov	r1, r9
 800075a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800075c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8000760:	440b      	add	r3, r1
 8000762:	9d03      	ldr	r5, [sp, #12]
 8000764:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000766:	7873      	ldrb	r3, [r6, #1]
 8000768:	e743      	b.n	80005f2 <_vfiprintf_r+0x5a>
 800076a:	4252      	negs	r2, r2
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	9209      	str	r2, [sp, #36]	@ 0x24
 8000772:	9306      	str	r3, [sp, #24]
 8000774:	e771      	b.n	800065a <_vfiprintf_r+0xc2>
 8000776:	a805      	add	r0, sp, #20
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <_vfiprintf_r+0x234>)
 800077a:	465a      	mov	r2, fp
 800077c:	a906      	add	r1, sp, #24
 800077e:	9000      	str	r0, [sp, #0]
 8000780:	4650      	mov	r0, sl
 8000782:	f000 fe93 	bl	80014ac <_printf_i>
 8000786:	4681      	mov	r9, r0
 8000788:	e78d      	b.n	80006a6 <_vfiprintf_r+0x10e>
 800078a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800078e:	2300      	movs	r3, #0
 8000790:	3601      	adds	r6, #1
 8000792:	2a09      	cmp	r2, #9
 8000794:	9307      	str	r3, [sp, #28]
 8000796:	f63f af63 	bhi.w	8000660 <_vfiprintf_r+0xc8>
 800079a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800079e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80007a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80007aa:	2a09      	cmp	r2, #9
 80007ac:	d9f5      	bls.n	800079a <_vfiprintf_r+0x202>
 80007ae:	9307      	str	r3, [sp, #28]
 80007b0:	e756      	b.n	8000660 <_vfiprintf_r+0xc8>
 80007b2:	462e      	mov	r6, r5
 80007b4:	e752      	b.n	800065c <_vfiprintf_r+0xc4>
 80007b6:	f000 facd 	bl	8000d54 <__sinit>
 80007ba:	e6f9      	b.n	80005b0 <_vfiprintf_r+0x18>
 80007bc:	08008060 	.word	0x08008060
 80007c0:	08008068 	.word	0x08008068
 80007c4:	0800806c 	.word	0x0800806c
 80007c8:	00000000 	.word	0x00000000
 80007cc:	08000549 	.word	0x08000549

080007d0 <vfiprintf>:
 80007d0:	b410      	push	{r4}
 80007d2:	4c04      	ldr	r4, [pc, #16]	@ (80007e4 <vfiprintf+0x14>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	460a      	mov	r2, r1
 80007d8:	4601      	mov	r1, r0
 80007da:	6820      	ldr	r0, [r4, #0]
 80007dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007e0:	f7ff beda 	b.w	8000598 <_vfiprintf_r>
 80007e4:	20000000 	.word	0x20000000

080007e8 <__swbuf_r>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	460d      	mov	r5, r1
 80007ec:	4606      	mov	r6, r0
 80007ee:	4614      	mov	r4, r2
 80007f0:	b110      	cbz	r0, 80007f8 <__swbuf_r+0x10>
 80007f2:	6a03      	ldr	r3, [r0, #32]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d037      	beq.n	8000868 <__swbuf_r+0x80>
 80007f8:	69a2      	ldr	r2, [r4, #24]
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	60a2      	str	r2, [r4, #8]
 80007fe:	071a      	lsls	r2, r3, #28
 8000800:	d519      	bpl.n	8000836 <__swbuf_r+0x4e>
 8000802:	6923      	ldr	r3, [r4, #16]
 8000804:	b1bb      	cbz	r3, 8000836 <__swbuf_r+0x4e>
 8000806:	6822      	ldr	r2, [r4, #0]
 8000808:	b2ed      	uxtb	r5, r5
 800080a:	6961      	ldr	r1, [r4, #20]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	462f      	mov	r7, r5
 8000810:	4299      	cmp	r1, r3
 8000812:	dd20      	ble.n	8000856 <__swbuf_r+0x6e>
 8000814:	3301      	adds	r3, #1
 8000816:	68a1      	ldr	r1, [r4, #8]
 8000818:	3901      	subs	r1, #1
 800081a:	60a1      	str	r1, [r4, #8]
 800081c:	1c51      	adds	r1, r2, #1
 800081e:	6021      	str	r1, [r4, #0]
 8000820:	7015      	strb	r5, [r2, #0]
 8000822:	6962      	ldr	r2, [r4, #20]
 8000824:	429a      	cmp	r2, r3
 8000826:	d00d      	beq.n	8000844 <__swbuf_r+0x5c>
 8000828:	89a3      	ldrh	r3, [r4, #12]
 800082a:	07db      	lsls	r3, r3, #31
 800082c:	d501      	bpl.n	8000832 <__swbuf_r+0x4a>
 800082e:	2d0a      	cmp	r5, #10
 8000830:	d008      	beq.n	8000844 <__swbuf_r+0x5c>
 8000832:	4638      	mov	r0, r7
 8000834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000836:	4621      	mov	r1, r4
 8000838:	4630      	mov	r0, r6
 800083a:	f000 fc9f 	bl	800117c <__swsetup_r>
 800083e:	b938      	cbnz	r0, 8000850 <__swbuf_r+0x68>
 8000840:	6923      	ldr	r3, [r4, #16]
 8000842:	e7e0      	b.n	8000806 <__swbuf_r+0x1e>
 8000844:	4621      	mov	r1, r4
 8000846:	4630      	mov	r0, r6
 8000848:	f000 fb3c 	bl	8000ec4 <_fflush_r>
 800084c:	2800      	cmp	r0, #0
 800084e:	d0f0      	beq.n	8000832 <__swbuf_r+0x4a>
 8000850:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000854:	e7ed      	b.n	8000832 <__swbuf_r+0x4a>
 8000856:	4621      	mov	r1, r4
 8000858:	4630      	mov	r0, r6
 800085a:	f000 fb33 	bl	8000ec4 <_fflush_r>
 800085e:	2800      	cmp	r0, #0
 8000860:	d1f6      	bne.n	8000850 <__swbuf_r+0x68>
 8000862:	6822      	ldr	r2, [r4, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	e7d6      	b.n	8000816 <__swbuf_r+0x2e>
 8000868:	f000 fa74 	bl	8000d54 <__sinit>
 800086c:	e7c4      	b.n	80007f8 <__swbuf_r+0x10>
 800086e:	bf00      	nop

08000870 <__swbuf>:
 8000870:	4b02      	ldr	r3, [pc, #8]	@ (800087c <__swbuf+0xc>)
 8000872:	460a      	mov	r2, r1
 8000874:	4601      	mov	r1, r0
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	f7ff bfb6 	b.w	80007e8 <__swbuf_r>
 800087c:	20000000 	.word	0x20000000

08000880 <__sfvwrite_r>:
 8000880:	6893      	ldr	r3, [r2, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f000 80f9 	beq.w	8000a7a <__sfvwrite_r+0x1fa>
 8000888:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 800088c:	f01c 0f08 	tst.w	ip, #8
 8000890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000894:	4690      	mov	r8, r2
 8000896:	b083      	sub	sp, #12
 8000898:	4681      	mov	r9, r0
 800089a:	460c      	mov	r4, r1
 800089c:	d031      	beq.n	8000902 <__sfvwrite_r+0x82>
 800089e:	690b      	ldr	r3, [r1, #16]
 80008a0:	b37b      	cbz	r3, 8000902 <__sfvwrite_r+0x82>
 80008a2:	f01c 0702 	ands.w	r7, ip, #2
 80008a6:	f8d8 6000 	ldr.w	r6, [r8]
 80008aa:	d038      	beq.n	800091e <__sfvwrite_r+0x9e>
 80008ac:	2700      	movs	r7, #0
 80008ae:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80008b2:	6a21      	ldr	r1, [r4, #32]
 80008b4:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 8000b7c <__sfvwrite_r+0x2fc>
 80008b8:	463d      	mov	r5, r7
 80008ba:	4555      	cmp	r5, sl
 80008bc:	462b      	mov	r3, r5
 80008be:	463a      	mov	r2, r7
 80008c0:	4648      	mov	r0, r9
 80008c2:	bf28      	it	cs
 80008c4:	4653      	movcs	r3, sl
 80008c6:	b1c5      	cbz	r5, 80008fa <__sfvwrite_r+0x7a>
 80008c8:	47d8      	blx	fp
 80008ca:	2800      	cmp	r0, #0
 80008cc:	f340 80cb 	ble.w	8000a66 <__sfvwrite_r+0x1e6>
 80008d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80008d4:	4407      	add	r7, r0
 80008d6:	1a2d      	subs	r5, r5, r0
 80008d8:	1a1b      	subs	r3, r3, r0
 80008da:	f8c8 3008 	str.w	r3, [r8, #8]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 80b7 	beq.w	8000a52 <__sfvwrite_r+0x1d2>
 80008e4:	4555      	cmp	r5, sl
 80008e6:	462b      	mov	r3, r5
 80008e8:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80008ec:	463a      	mov	r2, r7
 80008ee:	6a21      	ldr	r1, [r4, #32]
 80008f0:	bf28      	it	cs
 80008f2:	4653      	movcs	r3, sl
 80008f4:	4648      	mov	r0, r9
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d1e6      	bne.n	80008c8 <__sfvwrite_r+0x48>
 80008fa:	e9d6 7500 	ldrd	r7, r5, [r6]
 80008fe:	3608      	adds	r6, #8
 8000900:	e7db      	b.n	80008ba <__sfvwrite_r+0x3a>
 8000902:	4621      	mov	r1, r4
 8000904:	4648      	mov	r0, r9
 8000906:	f000 fc39 	bl	800117c <__swsetup_r>
 800090a:	2800      	cmp	r0, #0
 800090c:	f040 80b0 	bne.w	8000a70 <__sfvwrite_r+0x1f0>
 8000910:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8000914:	f8d8 6000 	ldr.w	r6, [r8]
 8000918:	f01c 0702 	ands.w	r7, ip, #2
 800091c:	d1c6      	bne.n	80008ac <__sfvwrite_r+0x2c>
 800091e:	f01c 0a01 	ands.w	sl, ip, #1
 8000922:	d164      	bne.n	80009ee <__sfvwrite_r+0x16e>
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	4657      	mov	r7, sl
 8000928:	68a1      	ldr	r1, [r4, #8]
 800092a:	4618      	mov	r0, r3
 800092c:	468b      	mov	fp, r1
 800092e:	2f00      	cmp	r7, #0
 8000930:	d059      	beq.n	80009e6 <__sfvwrite_r+0x166>
 8000932:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 8000936:	f000 80b6 	beq.w	8000aa6 <__sfvwrite_r+0x226>
 800093a:	42b9      	cmp	r1, r7
 800093c:	460a      	mov	r2, r1
 800093e:	f200 80e2 	bhi.w	8000b06 <__sfvwrite_r+0x286>
 8000942:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 8000946:	d030      	beq.n	80009aa <__sfvwrite_r+0x12a>
 8000948:	6921      	ldr	r1, [r4, #16]
 800094a:	1a5d      	subs	r5, r3, r1
 800094c:	6963      	ldr	r3, [r4, #20]
 800094e:	eb13 0343 	adds.w	r3, r3, r3, lsl #1
 8000952:	bf48      	it	mi
 8000954:	3301      	addmi	r3, #1
 8000956:	ea4f 0b63 	mov.w	fp, r3, asr #1
 800095a:	1c6b      	adds	r3, r5, #1
 800095c:	443b      	add	r3, r7
 800095e:	465a      	mov	r2, fp
 8000960:	455b      	cmp	r3, fp
 8000962:	d901      	bls.n	8000968 <__sfvwrite_r+0xe8>
 8000964:	469b      	mov	fp, r3
 8000966:	461a      	mov	r2, r3
 8000968:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 800096c:	f000 80ea 	beq.w	8000b44 <__sfvwrite_r+0x2c4>
 8000970:	4611      	mov	r1, r2
 8000972:	4648      	mov	r0, r9
 8000974:	f000 fb0c 	bl	8000f90 <_malloc_r>
 8000978:	2800      	cmp	r0, #0
 800097a:	f000 80f9 	beq.w	8000b70 <__sfvwrite_r+0x2f0>
 800097e:	462a      	mov	r2, r5
 8000980:	6921      	ldr	r1, [r4, #16]
 8000982:	9000      	str	r0, [sp, #0]
 8000984:	f000 fc5c 	bl	8001240 <memcpy>
 8000988:	89a2      	ldrh	r2, [r4, #12]
 800098a:	9b00      	ldr	r3, [sp, #0]
 800098c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8000990:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000994:	81a2      	strh	r2, [r4, #12]
 8000996:	1958      	adds	r0, r3, r5
 8000998:	f8c4 b014 	str.w	fp, [r4, #20]
 800099c:	ebab 0505 	sub.w	r5, fp, r5
 80009a0:	463a      	mov	r2, r7
 80009a2:	46bb      	mov	fp, r7
 80009a4:	6123      	str	r3, [r4, #16]
 80009a6:	60a5      	str	r5, [r4, #8]
 80009a8:	6020      	str	r0, [r4, #0]
 80009aa:	4651      	mov	r1, sl
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	f7ff fd09 	bl	80003c4 <memmove>
 80009b2:	68a1      	ldr	r1, [r4, #8]
 80009b4:	6823      	ldr	r3, [r4, #0]
 80009b6:	463d      	mov	r5, r7
 80009b8:	9a00      	ldr	r2, [sp, #0]
 80009ba:	eba1 010b 	sub.w	r1, r1, fp
 80009be:	2700      	movs	r7, #0
 80009c0:	441a      	add	r2, r3
 80009c2:	60a1      	str	r1, [r4, #8]
 80009c4:	6022      	str	r2, [r4, #0]
 80009c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80009ca:	44aa      	add	sl, r5
 80009cc:	1b5b      	subs	r3, r3, r5
 80009ce:	f8c8 3008 	str.w	r3, [r8, #8]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d03d      	beq.n	8000a52 <__sfvwrite_r+0x1d2>
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	68a1      	ldr	r1, [r4, #8]
 80009da:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80009de:	4618      	mov	r0, r3
 80009e0:	468b      	mov	fp, r1
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d1a5      	bne.n	8000932 <__sfvwrite_r+0xb2>
 80009e6:	e9d6 a700 	ldrd	sl, r7, [r6]
 80009ea:	3608      	adds	r6, #8
 80009ec:	e79d      	b.n	800092a <__sfvwrite_r+0xaa>
 80009ee:	4638      	mov	r0, r7
 80009f0:	46bb      	mov	fp, r7
 80009f2:	463d      	mov	r5, r7
 80009f4:	9700      	str	r7, [sp, #0]
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d041      	beq.n	8000a7e <__sfvwrite_r+0x1fe>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d046      	beq.n	8000a8c <__sfvwrite_r+0x20c>
 80009fe:	9a00      	ldr	r2, [sp, #0]
 8000a00:	68a1      	ldr	r1, [r4, #8]
 8000a02:	42aa      	cmp	r2, r5
 8000a04:	6963      	ldr	r3, [r4, #20]
 8000a06:	6820      	ldr	r0, [r4, #0]
 8000a08:	bf28      	it	cs
 8000a0a:	462a      	movcs	r2, r5
 8000a0c:	eb03 0a01 	add.w	sl, r3, r1
 8000a10:	6921      	ldr	r1, [r4, #16]
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d902      	bls.n	8000a1c <__sfvwrite_r+0x19c>
 8000a16:	4552      	cmp	r2, sl
 8000a18:	f300 8085 	bgt.w	8000b26 <__sfvwrite_r+0x2a6>
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	dc75      	bgt.n	8000b0c <__sfvwrite_r+0x28c>
 8000a20:	465a      	mov	r2, fp
 8000a22:	6a21      	ldr	r1, [r4, #32]
 8000a24:	4648      	mov	r0, r9
 8000a26:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8000a28:	47b8      	blx	r7
 8000a2a:	f1b0 0a00 	subs.w	sl, r0, #0
 8000a2e:	dd1a      	ble.n	8000a66 <__sfvwrite_r+0x1e6>
 8000a30:	9b00      	ldr	r3, [sp, #0]
 8000a32:	ebb3 030a 	subs.w	r3, r3, sl
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	d00f      	beq.n	8000a5a <__sfvwrite_r+0x1da>
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000a40:	44d3      	add	fp, sl
 8000a42:	eba5 050a 	sub.w	r5, r5, sl
 8000a46:	eba3 030a 	sub.w	r3, r3, sl
 8000a4a:	f8c8 3008 	str.w	r3, [r8, #8]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1d1      	bne.n	80009f6 <__sfvwrite_r+0x176>
 8000a52:	2000      	movs	r0, #0
 8000a54:	b003      	add	sp, #12
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5a:	4621      	mov	r1, r4
 8000a5c:	4648      	mov	r0, r9
 8000a5e:	f000 fa31 	bl	8000ec4 <_fflush_r>
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d0ea      	beq.n	8000a3c <__sfvwrite_r+0x1bc>
 8000a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a6e:	81a3      	strh	r3, [r4, #12]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a74:	b003      	add	sp, #12
 8000a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	6875      	ldr	r5, [r6, #4]
 8000a80:	4633      	mov	r3, r6
 8000a82:	3608      	adds	r6, #8
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d0fa      	beq.n	8000a7e <__sfvwrite_r+0x1fe>
 8000a88:	f8d3 b000 	ldr.w	fp, [r3]
 8000a8c:	462a      	mov	r2, r5
 8000a8e:	210a      	movs	r1, #10
 8000a90:	4658      	mov	r0, fp
 8000a92:	f000 fedb 	bl	800184c <memchr>
 8000a96:	2800      	cmp	r0, #0
 8000a98:	d067      	beq.n	8000b6a <__sfvwrite_r+0x2ea>
 8000a9a:	3001      	adds	r0, #1
 8000a9c:	eba0 030b 	sub.w	r3, r0, fp
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	e7ac      	b.n	8000a00 <__sfvwrite_r+0x180>
 8000aa6:	6922      	ldr	r2, [r4, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d314      	bcc.n	8000ad6 <__sfvwrite_r+0x256>
 8000aac:	6962      	ldr	r2, [r4, #20]
 8000aae:	42ba      	cmp	r2, r7
 8000ab0:	d811      	bhi.n	8000ad6 <__sfvwrite_r+0x256>
 8000ab2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000ab6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8000ab8:	6a21      	ldr	r1, [r4, #32]
 8000aba:	4648      	mov	r0, r9
 8000abc:	42bb      	cmp	r3, r7
 8000abe:	bf28      	it	cs
 8000ac0:	463b      	movcs	r3, r7
 8000ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ac6:	fb02 f303 	mul.w	r3, r2, r3
 8000aca:	4652      	mov	r2, sl
 8000acc:	47a8      	blx	r5
 8000ace:	1e05      	subs	r5, r0, #0
 8000ad0:	ddc9      	ble.n	8000a66 <__sfvwrite_r+0x1e6>
 8000ad2:	1b7f      	subs	r7, r7, r5
 8000ad4:	e777      	b.n	80009c6 <__sfvwrite_r+0x146>
 8000ad6:	42b9      	cmp	r1, r7
 8000ad8:	4618      	mov	r0, r3
 8000ada:	bf28      	it	cs
 8000adc:	4639      	movcs	r1, r7
 8000ade:	460d      	mov	r5, r1
 8000ae0:	4651      	mov	r1, sl
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	f7ff fc6e 	bl	80003c4 <memmove>
 8000ae8:	68a1      	ldr	r1, [r4, #8]
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	1b49      	subs	r1, r1, r5
 8000aee:	442b      	add	r3, r5
 8000af0:	60a1      	str	r1, [r4, #8]
 8000af2:	6023      	str	r3, [r4, #0]
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d1ec      	bne.n	8000ad2 <__sfvwrite_r+0x252>
 8000af8:	4621      	mov	r1, r4
 8000afa:	4648      	mov	r0, r9
 8000afc:	f000 f9e2 	bl	8000ec4 <_fflush_r>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d0e6      	beq.n	8000ad2 <__sfvwrite_r+0x252>
 8000b04:	e7af      	b.n	8000a66 <__sfvwrite_r+0x1e6>
 8000b06:	46bb      	mov	fp, r7
 8000b08:	463a      	mov	r2, r7
 8000b0a:	e74e      	b.n	80009aa <__sfvwrite_r+0x12a>
 8000b0c:	4659      	mov	r1, fp
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	f7ff fc58 	bl	80003c4 <memmove>
 8000b14:	9a01      	ldr	r2, [sp, #4]
 8000b16:	68a3      	ldr	r3, [r4, #8]
 8000b18:	4692      	mov	sl, r2
 8000b1a:	1a9b      	subs	r3, r3, r2
 8000b1c:	60a3      	str	r3, [r4, #8]
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	6023      	str	r3, [r4, #0]
 8000b24:	e784      	b.n	8000a30 <__sfvwrite_r+0x1b0>
 8000b26:	4659      	mov	r1, fp
 8000b28:	4652      	mov	r2, sl
 8000b2a:	f7ff fc4b 	bl	80003c4 <memmove>
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	4621      	mov	r1, r4
 8000b32:	4648      	mov	r0, r9
 8000b34:	4453      	add	r3, sl
 8000b36:	6023      	str	r3, [r4, #0]
 8000b38:	f000 f9c4 	bl	8000ec4 <_fflush_r>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	f43f af77 	beq.w	8000a30 <__sfvwrite_r+0x1b0>
 8000b42:	e790      	b.n	8000a66 <__sfvwrite_r+0x1e6>
 8000b44:	4648      	mov	r0, r9
 8000b46:	f000 fbf1 	bl	800132c <_realloc_r>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	f47f af22 	bne.w	8000996 <__sfvwrite_r+0x116>
 8000b52:	6921      	ldr	r1, [r4, #16]
 8000b54:	4648      	mov	r0, r9
 8000b56:	f000 fa9b 	bl	8001090 <_free_r>
 8000b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b5e:	220c      	movs	r2, #12
 8000b60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b64:	f8c9 2000 	str.w	r2, [r9]
 8000b68:	e77f      	b.n	8000a6a <__sfvwrite_r+0x1ea>
 8000b6a:	1c6a      	adds	r2, r5, #1
 8000b6c:	9200      	str	r2, [sp, #0]
 8000b6e:	e747      	b.n	8000a00 <__sfvwrite_r+0x180>
 8000b70:	220c      	movs	r2, #12
 8000b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b76:	f8c9 2000 	str.w	r2, [r9]
 8000b7a:	e776      	b.n	8000a6a <__sfvwrite_r+0x1ea>
 8000b7c:	7ffffc00 	.word	0x7ffffc00

08000b80 <__fp_lock>:
 8000b80:	2000      	movs	r0, #0
 8000b82:	4770      	bx	lr

08000b84 <stdio_exit_handler>:
 8000b84:	4a02      	ldr	r2, [pc, #8]	@ (8000b90 <stdio_exit_handler+0xc>)
 8000b86:	4903      	ldr	r1, [pc, #12]	@ (8000b94 <stdio_exit_handler+0x10>)
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <stdio_exit_handler+0x14>)
 8000b8a:	f000 bad5 	b.w	8001138 <_fwalk_sglue>
 8000b8e:	bf00      	nop
 8000b90:	20000050 	.word	0x20000050
 8000b94:	08000ec5 	.word	0x08000ec5
 8000b98:	20000004 	.word	0x20000004

08000b9c <cleanup_stdio>:
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <cleanup_stdio+0x34>)
 8000b9e:	6841      	ldr	r1, [r0, #4]
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	b510      	push	{r4, lr}
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	d001      	beq.n	8000bac <cleanup_stdio+0x10>
 8000ba8:	f000 f98c 	bl	8000ec4 <_fflush_r>
 8000bac:	68a1      	ldr	r1, [r4, #8]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <cleanup_stdio+0x38>)
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	d002      	beq.n	8000bba <cleanup_stdio+0x1e>
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f000 f985 	bl	8000ec4 <_fflush_r>
 8000bba:	68e1      	ldr	r1, [r4, #12]
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <cleanup_stdio+0x3c>)
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d004      	beq.n	8000bcc <cleanup_stdio+0x30>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc8:	f000 b97c 	b.w	8000ec4 <_fflush_r>
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000084 	.word	0x20000084
 8000bd4:	200000ec 	.word	0x200000ec
 8000bd8:	20000154 	.word	0x20000154

08000bdc <__fp_unlock>:
 8000bdc:	2000      	movs	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <global_stdio_init.part.0>:
 8000be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be4:	492a      	ldr	r1, [pc, #168]	@ (8000c90 <global_stdio_init.part.0+0xb0>)
 8000be6:	2500      	movs	r5, #0
 8000be8:	4c2a      	ldr	r4, [pc, #168]	@ (8000c94 <global_stdio_init.part.0+0xb4>)
 8000bea:	2304      	movs	r3, #4
 8000bec:	2208      	movs	r2, #8
 8000bee:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 8000ca8 <global_stdio_init.part.0+0xc8>
 8000bf2:	f8c4 1138 	str.w	r1, [r4, #312]	@ 0x138
 8000bf6:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8000cac <global_stdio_init.part.0+0xcc>
 8000c00:	4f25      	ldr	r7, [pc, #148]	@ (8000c98 <global_stdio_init.part.0+0xb8>)
 8000c02:	4e26      	ldr	r6, [pc, #152]	@ (8000c9c <global_stdio_init.part.0+0xbc>)
 8000c04:	60e3      	str	r3, [r4, #12]
 8000c06:	6025      	str	r5, [r4, #0]
 8000c08:	6665      	str	r5, [r4, #100]	@ 0x64
 8000c0a:	61a5      	str	r5, [r4, #24]
 8000c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c14:	f7ff fb7e 	bl	8000314 <memset>
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <global_stdio_init.part.0+0xc0>)
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 8000c22:	6763      	str	r3, [r4, #116]	@ 0x74
 8000c24:	6725      	str	r5, [r4, #112]	@ 0x70
 8000c26:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8000c2a:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000c2e:	6326      	str	r6, [r4, #48]	@ 0x30
 8000c30:	e9c4 4908 	strd	r4, r9, [r4, #32]
 8000c34:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 8000c38:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8000c3c:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 8000c40:	f7ff fb68 	bl	8000314 <memset>
 8000c44:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8000c48:	4629      	mov	r1, r5
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8000c50:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <global_stdio_init.part.0+0xc4>)
 8000c56:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 8000c5a:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8000c5e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8000c62:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8000c66:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8000c6a:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 8000c6e:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 8000c72:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8000c76:	f7ff fb4d 	bl	8000314 <memset>
 8000c7a:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8000c7e:	e9c4 983d 	strd	r9, r8, [r4, #244]	@ 0xf4
 8000c82:	e9c4 763f 	strd	r7, r6, [r4, #252]	@ 0xfc
 8000c86:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8000c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c8e:	bf00      	nop
 8000c90:	08000b85 	.word	0x08000b85
 8000c94:	20000084 	.word	0x20000084
 8000c98:	08001995 	.word	0x08001995
 8000c9c:	080019bd 	.word	0x080019bd
 8000ca0:	00010009 	.word	0x00010009
 8000ca4:	00020012 	.word	0x00020012
 8000ca8:	0800192d 	.word	0x0800192d
 8000cac:	08001955 	.word	0x08001955

08000cb0 <__sfp>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <__sfp+0x98>)
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d03d      	beq.n	8000d3a <__sfp+0x8a>
 8000cbe:	4f23      	ldr	r7, [pc, #140]	@ (8000d4c <__sfp+0x9c>)
 8000cc0:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	d504      	bpl.n	8000cd2 <__sfp+0x22>
 8000cc8:	e01d      	b.n	8000d06 <__sfp+0x56>
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8000cd0:	d019      	beq.n	8000d06 <__sfp+0x56>
 8000cd2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d1f6      	bne.n	8000cca <__sfp+0x1a>
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <__sfp+0xa0>)
 8000cde:	2208      	movs	r2, #8
 8000ce0:	4629      	mov	r1, r5
 8000ce2:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000ce6:	6665      	str	r5, [r4, #100]	@ 0x64
 8000ce8:	60e3      	str	r3, [r4, #12]
 8000cea:	6025      	str	r5, [r4, #0]
 8000cec:	61a5      	str	r5, [r4, #24]
 8000cee:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000cf2:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000cf6:	f7ff fb0d 	bl	8000314 <memset>
 8000cfa:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8000cfe:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8000d02:	4620      	mov	r0, r4
 8000d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d06:	683d      	ldr	r5, [r7, #0]
 8000d08:	b10d      	cbz	r5, 8000d0e <__sfp+0x5e>
 8000d0a:	462f      	mov	r7, r5
 8000d0c:	e7d8      	b.n	8000cc0 <__sfp+0x10>
 8000d0e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8000d12:	4630      	mov	r0, r6
 8000d14:	f000 f93c 	bl	8000f90 <_malloc_r>
 8000d18:	4604      	mov	r4, r0
 8000d1a:	b188      	cbz	r0, 8000d40 <__sfp+0x90>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	6005      	str	r5, [r0, #0]
 8000d20:	300c      	adds	r0, #12
 8000d22:	4629      	mov	r1, r5
 8000d24:	4625      	mov	r5, r4
 8000d26:	f840 3c08 	str.w	r3, [r0, #-8]
 8000d2a:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000d2e:	60a0      	str	r0, [r4, #8]
 8000d30:	f7ff faf0 	bl	8000314 <memset>
 8000d34:	603c      	str	r4, [r7, #0]
 8000d36:	462f      	mov	r7, r5
 8000d38:	e7c2      	b.n	8000cc0 <__sfp+0x10>
 8000d3a:	f7ff ff51 	bl	8000be0 <global_stdio_init.part.0>
 8000d3e:	e7be      	b.n	8000cbe <__sfp+0xe>
 8000d40:	230c      	movs	r3, #12
 8000d42:	6038      	str	r0, [r7, #0]
 8000d44:	6033      	str	r3, [r6, #0]
 8000d46:	e7dc      	b.n	8000d02 <__sfp+0x52>
 8000d48:	20000084 	.word	0x20000084
 8000d4c:	20000050 	.word	0x20000050
 8000d50:	ffff0001 	.word	0xffff0001

08000d54 <__sinit>:
 8000d54:	6a03      	ldr	r3, [r0, #32]
 8000d56:	b103      	cbz	r3, 8000d5a <__sinit+0x6>
 8000d58:	4770      	bx	lr
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__sinit+0x18>)
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__sinit+0x1c>)
 8000d5e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d62:	6202      	str	r2, [r0, #32]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f7      	bne.n	8000d58 <__sinit+0x4>
 8000d68:	e73a      	b.n	8000be0 <global_stdio_init.part.0>
 8000d6a:	bf00      	nop
 8000d6c:	20000084 	.word	0x20000084
 8000d70:	08000b9d 	.word	0x08000b9d

08000d74 <__sfp_lock_acquire>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__sfp_lock_release>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <__fp_lock_all>:
 8000d7c:	4a02      	ldr	r2, [pc, #8]	@ (8000d88 <__fp_lock_all+0xc>)
 8000d7e:	2000      	movs	r0, #0
 8000d80:	4902      	ldr	r1, [pc, #8]	@ (8000d8c <__fp_lock_all+0x10>)
 8000d82:	f000 b9d9 	b.w	8001138 <_fwalk_sglue>
 8000d86:	bf00      	nop
 8000d88:	20000050 	.word	0x20000050
 8000d8c:	08000b81 	.word	0x08000b81

08000d90 <__fp_unlock_all>:
 8000d90:	4a02      	ldr	r2, [pc, #8]	@ (8000d9c <__fp_unlock_all+0xc>)
 8000d92:	2000      	movs	r0, #0
 8000d94:	4902      	ldr	r1, [pc, #8]	@ (8000da0 <__fp_unlock_all+0x10>)
 8000d96:	f000 b9cf 	b.w	8001138 <_fwalk_sglue>
 8000d9a:	bf00      	nop
 8000d9c:	20000050 	.word	0x20000050
 8000da0:	08000bdd 	.word	0x08000bdd

08000da4 <__sflush_r>:
 8000da4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8000da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dac:	071e      	lsls	r6, r3, #28
 8000dae:	460c      	mov	r4, r1
 8000db0:	4680      	mov	r8, r0
 8000db2:	d43d      	bmi.n	8000e30 <__sflush_r+0x8c>
 8000db4:	684a      	ldr	r2, [r1, #4]
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	dd55      	ble.n	8000e66 <__sflush_r+0xc2>
 8000dba:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d034      	beq.n	8000e2a <__sflush_r+0x86>
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f8d8 6000 	ldr.w	r6, [r8]
 8000dc6:	6a21      	ldr	r1, [r4, #32]
 8000dc8:	f8c8 2000 	str.w	r2, [r8]
 8000dcc:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 8000dd0:	d156      	bne.n	8000e80 <__sflush_r+0xdc>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	47a8      	blx	r5
 8000dd8:	1c45      	adds	r5, r0, #1
 8000dda:	4602      	mov	r2, r0
 8000ddc:	d065      	beq.n	8000eaa <__sflush_r+0x106>
 8000dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000de2:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8000de4:	6a21      	ldr	r1, [r4, #32]
 8000de6:	0758      	lsls	r0, r3, #29
 8000de8:	d505      	bpl.n	8000df6 <__sflush_r+0x52>
 8000dea:	6863      	ldr	r3, [r4, #4]
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000df0:	b10b      	cbz	r3, 8000df6 <__sflush_r+0x52>
 8000df2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	2300      	movs	r3, #0
 8000df8:	4640      	mov	r0, r8
 8000dfa:	47a8      	blx	r5
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d041      	beq.n	8000e84 <__sflush_r+0xe0>
 8000e00:	2300      	movs	r3, #0
 8000e02:	6063      	str	r3, [r4, #4]
 8000e04:	6923      	ldr	r3, [r4, #16]
 8000e06:	6023      	str	r3, [r4, #0]
 8000e08:	89a3      	ldrh	r3, [r4, #12]
 8000e0a:	04df      	lsls	r7, r3, #19
 8000e0c:	d500      	bpl.n	8000e10 <__sflush_r+0x6c>
 8000e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8000e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e12:	f8c8 6000 	str.w	r6, [r8]
 8000e16:	b141      	cbz	r1, 8000e2a <__sflush_r+0x86>
 8000e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d002      	beq.n	8000e26 <__sflush_r+0x82>
 8000e20:	4640      	mov	r0, r8
 8000e22:	f000 f935 	bl	8001090 <_free_r>
 8000e26:	2300      	movs	r3, #0
 8000e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e30:	690e      	ldr	r6, [r1, #16]
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0f9      	beq.n	8000e2a <__sflush_r+0x86>
 8000e36:	079b      	lsls	r3, r3, #30
 8000e38:	680d      	ldr	r5, [r1, #0]
 8000e3a:	600e      	str	r6, [r1, #0]
 8000e3c:	bf0c      	ite	eq
 8000e3e:	694b      	ldreq	r3, [r1, #20]
 8000e40:	2300      	movne	r3, #0
 8000e42:	1bad      	subs	r5, r5, r6
 8000e44:	608b      	str	r3, [r1, #8]
 8000e46:	e00b      	b.n	8000e60 <__sflush_r+0xbc>
 8000e48:	462b      	mov	r3, r5
 8000e4a:	4632      	mov	r2, r6
 8000e4c:	6a21      	ldr	r1, [r4, #32]
 8000e4e:	4640      	mov	r0, r8
 8000e50:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8000e52:	47b8      	blx	r7
 8000e54:	f1b0 0c00 	subs.w	ip, r0, #0
 8000e58:	eba5 050c 	sub.w	r5, r5, ip
 8000e5c:	4466      	add	r6, ip
 8000e5e:	dd06      	ble.n	8000e6e <__sflush_r+0xca>
 8000e60:	2d00      	cmp	r5, #0
 8000e62:	dcf1      	bgt.n	8000e48 <__sflush_r+0xa4>
 8000e64:	e7e1      	b.n	8000e2a <__sflush_r+0x86>
 8000e66:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	dca6      	bgt.n	8000dba <__sflush_r+0x16>
 8000e6c:	e7dd      	b.n	8000e2a <__sflush_r+0x86>
 8000e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e7a:	81a3      	strh	r3, [r4, #12]
 8000e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000e82:	e7b0      	b.n	8000de6 <__sflush_r+0x42>
 8000e84:	f8d8 1000 	ldr.w	r1, [r8]
 8000e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8c:	291d      	cmp	r1, #29
 8000e8e:	d8f0      	bhi.n	8000e72 <__sflush_r+0xce>
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <__sflush_r+0x11c>)
 8000e92:	40ca      	lsrs	r2, r1
 8000e94:	07d5      	lsls	r5, r2, #31
 8000e96:	d5ec      	bpl.n	8000e72 <__sflush_r+0xce>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6062      	str	r2, [r4, #4]
 8000e9c:	6922      	ldr	r2, [r4, #16]
 8000e9e:	6022      	str	r2, [r4, #0]
 8000ea0:	04da      	lsls	r2, r3, #19
 8000ea2:	d5b5      	bpl.n	8000e10 <__sflush_r+0x6c>
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	d0b2      	beq.n	8000e0e <__sflush_r+0x6a>
 8000ea8:	e7b2      	b.n	8000e10 <__sflush_r+0x6c>
 8000eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d095      	beq.n	8000dde <__sflush_r+0x3a>
 8000eb2:	2b1d      	cmp	r3, #29
 8000eb4:	d001      	beq.n	8000eba <__sflush_r+0x116>
 8000eb6:	2b16      	cmp	r3, #22
 8000eb8:	d1d9      	bne.n	8000e6e <__sflush_r+0xca>
 8000eba:	f8c8 6000 	str.w	r6, [r8]
 8000ebe:	e7b4      	b.n	8000e2a <__sflush_r+0x86>
 8000ec0:	20400001 	.word	0x20400001

08000ec4 <_fflush_r>:
 8000ec4:	690b      	ldr	r3, [r1, #16]
 8000ec6:	b1b3      	cbz	r3, 8000ef6 <_fflush_r+0x32>
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
 8000ecc:	b082      	sub	sp, #8
 8000ece:	b108      	cbz	r0, 8000ed4 <_fflush_r+0x10>
 8000ed0:	6a03      	ldr	r3, [r0, #32]
 8000ed2:	b15b      	cbz	r3, 8000eec <_fflush_r+0x28>
 8000ed4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8000ed8:	b913      	cbnz	r3, 8000ee0 <_fflush_r+0x1c>
 8000eda:	2000      	movs	r0, #0
 8000edc:	b002      	add	sp, #8
 8000ede:	bd10      	pop	{r4, pc}
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	b002      	add	sp, #8
 8000ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ee8:	f7ff bf5c 	b.w	8000da4 <__sflush_r>
 8000eec:	9101      	str	r1, [sp, #4]
 8000eee:	f7ff ff31 	bl	8000d54 <__sinit>
 8000ef2:	9901      	ldr	r1, [sp, #4]
 8000ef4:	e7ee      	b.n	8000ed4 <_fflush_r+0x10>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <fflush>:
 8000efc:	b1b8      	cbz	r0, 8000f2e <fflush+0x32>
 8000efe:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <fflush+0x3c>)
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	6903      	ldr	r3, [r0, #16]
 8000f04:	4604      	mov	r4, r0
 8000f06:	6815      	ldr	r5, [r2, #0]
 8000f08:	b12b      	cbz	r3, 8000f16 <fflush+0x1a>
 8000f0a:	b10d      	cbz	r5, 8000f10 <fflush+0x14>
 8000f0c:	6a2b      	ldr	r3, [r5, #32]
 8000f0e:	b153      	cbz	r3, 8000f26 <fflush+0x2a>
 8000f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f14:	b90b      	cbnz	r3, 8000f1a <fflush+0x1e>
 8000f16:	2000      	movs	r0, #0
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f22:	f7ff bf3f 	b.w	8000da4 <__sflush_r>
 8000f26:	4628      	mov	r0, r5
 8000f28:	f7ff ff14 	bl	8000d54 <__sinit>
 8000f2c:	e7f0      	b.n	8000f10 <fflush+0x14>
 8000f2e:	4a03      	ldr	r2, [pc, #12]	@ (8000f3c <fflush+0x40>)
 8000f30:	4903      	ldr	r1, [pc, #12]	@ (8000f40 <fflush+0x44>)
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <fflush+0x48>)
 8000f34:	f000 b900 	b.w	8001138 <_fwalk_sglue>
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000050 	.word	0x20000050
 8000f40:	08000ec5 	.word	0x08000ec5
 8000f44:	20000004 	.word	0x20000004

08000f48 <sbrk_aligned>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	4e10      	ldr	r6, [pc, #64]	@ (8000f8c <sbrk_aligned+0x44>)
 8000f4c:	4605      	mov	r5, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	6833      	ldr	r3, [r6, #0]
 8000f52:	b1b3      	cbz	r3, 8000f82 <sbrk_aligned+0x3a>
 8000f54:	4621      	mov	r1, r4
 8000f56:	4628      	mov	r0, r5
 8000f58:	f000 fcd6 	bl	8001908 <_sbrk_r>
 8000f5c:	1c43      	adds	r3, r0, #1
 8000f5e:	d00c      	beq.n	8000f7a <sbrk_aligned+0x32>
 8000f60:	1cc4      	adds	r4, r0, #3
 8000f62:	f024 0403 	bic.w	r4, r4, #3
 8000f66:	42a0      	cmp	r0, r4
 8000f68:	d005      	beq.n	8000f76 <sbrk_aligned+0x2e>
 8000f6a:	1a21      	subs	r1, r4, r0
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	f000 fccb 	bl	8001908 <_sbrk_r>
 8000f72:	3001      	adds	r0, #1
 8000f74:	d001      	beq.n	8000f7a <sbrk_aligned+0x32>
 8000f76:	4620      	mov	r0, r4
 8000f78:	bd70      	pop	{r4, r5, r6, pc}
 8000f7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f7e:	4620      	mov	r0, r4
 8000f80:	bd70      	pop	{r4, r5, r6, pc}
 8000f82:	4619      	mov	r1, r3
 8000f84:	f000 fcc0 	bl	8001908 <_sbrk_r>
 8000f88:	6030      	str	r0, [r6, #0]
 8000f8a:	e7e3      	b.n	8000f54 <sbrk_aligned+0xc>
 8000f8c:	200001c0 	.word	0x200001c0

08000f90 <_malloc_r>:
 8000f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f94:	1ccd      	adds	r5, r1, #3
 8000f96:	4606      	mov	r6, r0
 8000f98:	f025 0503 	bic.w	r5, r5, #3
 8000f9c:	3508      	adds	r5, #8
 8000f9e:	2d0c      	cmp	r5, #12
 8000fa0:	bf38      	it	cc
 8000fa2:	250c      	movcc	r5, #12
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	db2e      	blt.n	8001006 <_malloc_r+0x76>
 8000fa8:	42a9      	cmp	r1, r5
 8000faa:	d82c      	bhi.n	8001006 <_malloc_r+0x76>
 8000fac:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 800108c <_malloc_r+0xfc>
 8000fb0:	f000 fbbe 	bl	8001730 <__malloc_lock>
 8000fb4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8000fb8:	b17a      	cbz	r2, 8000fda <_malloc_r+0x4a>
 8000fba:	4614      	mov	r4, r2
 8000fbc:	e003      	b.n	8000fc6 <_malloc_r+0x36>
 8000fbe:	6863      	ldr	r3, [r4, #4]
 8000fc0:	4622      	mov	r2, r4
 8000fc2:	461c      	mov	r4, r3
 8000fc4:	b14b      	cbz	r3, 8000fda <_malloc_r+0x4a>
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	1b5b      	subs	r3, r3, r5
 8000fca:	d4f8      	bmi.n	8000fbe <_malloc_r+0x2e>
 8000fcc:	2b0b      	cmp	r3, #11
 8000fce:	d81e      	bhi.n	800100e <_malloc_r+0x7e>
 8000fd0:	4294      	cmp	r4, r2
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	d053      	beq.n	800107e <_malloc_r+0xee>
 8000fd6:	6053      	str	r3, [r2, #4]
 8000fd8:	e007      	b.n	8000fea <_malloc_r+0x5a>
 8000fda:	4629      	mov	r1, r5
 8000fdc:	4630      	mov	r0, r6
 8000fde:	f7ff ffb3 	bl	8000f48 <sbrk_aligned>
 8000fe2:	1c43      	adds	r3, r0, #1
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	d01d      	beq.n	8001024 <_malloc_r+0x94>
 8000fe8:	6005      	str	r5, [r0, #0]
 8000fea:	4630      	mov	r0, r6
 8000fec:	f000 fba2 	bl	8001734 <__malloc_unlock>
 8000ff0:	f104 000b 	add.w	r0, r4, #11
 8000ff4:	1d23      	adds	r3, r4, #4
 8000ff6:	f020 0007 	bic.w	r0, r0, #7
 8000ffa:	1ac2      	subs	r2, r0, r3
 8000ffc:	d001      	beq.n	8001002 <_malloc_r+0x72>
 8000ffe:	1a1b      	subs	r3, r3, r0
 8001000:	50a3      	str	r3, [r4, r2]
 8001002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001006:	230c      	movs	r3, #12
 8001008:	6033      	str	r3, [r6, #0]
 800100a:	2000      	movs	r0, #0
 800100c:	e7f9      	b.n	8001002 <_malloc_r+0x72>
 800100e:	1961      	adds	r1, r4, r5
 8001010:	4294      	cmp	r4, r2
 8001012:	6025      	str	r5, [r4, #0]
 8001014:	bf14      	ite	ne
 8001016:	6051      	strne	r1, [r2, #4]
 8001018:	f8c8 1004 	streq.w	r1, [r8, #4]
 800101c:	5163      	str	r3, [r4, r5]
 800101e:	6863      	ldr	r3, [r4, #4]
 8001020:	604b      	str	r3, [r1, #4]
 8001022:	e7e2      	b.n	8000fea <_malloc_r+0x5a>
 8001024:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8001028:	b31f      	cbz	r7, 8001072 <_malloc_r+0xe2>
 800102a:	463c      	mov	r4, r7
 800102c:	687f      	ldr	r7, [r7, #4]
 800102e:	2f00      	cmp	r7, #0
 8001030:	d1fb      	bne.n	800102a <_malloc_r+0x9a>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	4639      	mov	r1, r7
 8001036:	4630      	mov	r0, r6
 8001038:	eb04 0903 	add.w	r9, r4, r3
 800103c:	f000 fc64 	bl	8001908 <_sbrk_r>
 8001040:	4581      	cmp	r9, r0
 8001042:	d116      	bne.n	8001072 <_malloc_r+0xe2>
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	4630      	mov	r0, r6
 8001048:	1aed      	subs	r5, r5, r3
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff ff7c 	bl	8000f48 <sbrk_aligned>
 8001050:	3001      	adds	r0, #1
 8001052:	d00e      	beq.n	8001072 <_malloc_r+0xe2>
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800105a:	442b      	add	r3, r5
 800105c:	6023      	str	r3, [r4, #0]
 800105e:	6853      	ldr	r3, [r2, #4]
 8001060:	b183      	cbz	r3, 8001084 <_malloc_r+0xf4>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d003      	beq.n	800106e <_malloc_r+0xde>
 8001066:	461a      	mov	r2, r3
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	429c      	cmp	r4, r3
 800106c:	d1fb      	bne.n	8001066 <_malloc_r+0xd6>
 800106e:	2300      	movs	r3, #0
 8001070:	e7b1      	b.n	8000fd6 <_malloc_r+0x46>
 8001072:	230c      	movs	r3, #12
 8001074:	4630      	mov	r0, r6
 8001076:	6033      	str	r3, [r6, #0]
 8001078:	f000 fb5c 	bl	8001734 <__malloc_unlock>
 800107c:	e7c5      	b.n	800100a <_malloc_r+0x7a>
 800107e:	f8c8 3004 	str.w	r3, [r8, #4]
 8001082:	e7b2      	b.n	8000fea <_malloc_r+0x5a>
 8001084:	f8c8 7004 	str.w	r7, [r8, #4]
 8001088:	e7af      	b.n	8000fea <_malloc_r+0x5a>
 800108a:	bf00      	nop
 800108c:	200001c0 	.word	0x200001c0

08001090 <_free_r>:
 8001090:	2900      	cmp	r1, #0
 8001092:	d03a      	beq.n	800110a <_free_r+0x7a>
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800109a:	1f0c      	subs	r4, r1, #4
 800109c:	4605      	mov	r5, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bfb8      	it	lt
 80010a2:	18e4      	addlt	r4, r4, r3
 80010a4:	f000 fb44 	bl	8001730 <__malloc_lock>
 80010a8:	4a22      	ldr	r2, [pc, #136]	@ (8001134 <_free_r+0xa4>)
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	b1d3      	cbz	r3, 80010e4 <_free_r+0x54>
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	d814      	bhi.n	80010dc <_free_r+0x4c>
 80010b2:	461a      	mov	r2, r3
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	b10b      	cbz	r3, 80010bc <_free_r+0x2c>
 80010b8:	42a3      	cmp	r3, r4
 80010ba:	d9fa      	bls.n	80010b2 <_free_r+0x22>
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	1850      	adds	r0, r2, r1
 80010c0:	42a0      	cmp	r0, r4
 80010c2:	d023      	beq.n	800110c <_free_r+0x7c>
 80010c4:	d82e      	bhi.n	8001124 <_free_r+0x94>
 80010c6:	6821      	ldr	r1, [r4, #0]
 80010c8:	1860      	adds	r0, r4, r1
 80010ca:	4283      	cmp	r3, r0
 80010cc:	d011      	beq.n	80010f2 <_free_r+0x62>
 80010ce:	6063      	str	r3, [r4, #4]
 80010d0:	6054      	str	r4, [r2, #4]
 80010d2:	4628      	mov	r0, r5
 80010d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010d8:	f000 bb2c 	b.w	8001734 <__malloc_unlock>
 80010dc:	6821      	ldr	r1, [r4, #0]
 80010de:	1860      	adds	r0, r4, r1
 80010e0:	4283      	cmp	r3, r0
 80010e2:	d00d      	beq.n	8001100 <_free_r+0x70>
 80010e4:	4628      	mov	r0, r5
 80010e6:	6063      	str	r3, [r4, #4]
 80010e8:	6014      	str	r4, [r2, #0]
 80010ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ee:	f000 bb21 	b.w	8001734 <__malloc_unlock>
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4408      	add	r0, r1
 80010f8:	e9c4 0300 	strd	r0, r3, [r4]
 80010fc:	6054      	str	r4, [r2, #4]
 80010fe:	e7e8      	b.n	80010d2 <_free_r+0x42>
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4408      	add	r0, r1
 8001106:	6020      	str	r0, [r4, #0]
 8001108:	e7ec      	b.n	80010e4 <_free_r+0x54>
 800110a:	4770      	bx	lr
 800110c:	6820      	ldr	r0, [r4, #0]
 800110e:	4401      	add	r1, r0
 8001110:	1850      	adds	r0, r2, r1
 8001112:	6011      	str	r1, [r2, #0]
 8001114:	4283      	cmp	r3, r0
 8001116:	d1dc      	bne.n	80010d2 <_free_r+0x42>
 8001118:	e9d3 0400 	ldrd	r0, r4, [r3]
 800111c:	4401      	add	r1, r0
 800111e:	e9c2 1400 	strd	r1, r4, [r2]
 8001122:	e7d6      	b.n	80010d2 <_free_r+0x42>
 8001124:	230c      	movs	r3, #12
 8001126:	4628      	mov	r0, r5
 8001128:	602b      	str	r3, [r5, #0]
 800112a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112e:	f000 bb01 	b.w	8001734 <__malloc_unlock>
 8001132:	bf00      	nop
 8001134:	200001c4 	.word	0x200001c4

08001138 <_fwalk_sglue>:
 8001138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800113c:	f04f 0900 	mov.w	r9, #0
 8001140:	4607      	mov	r7, r0
 8001142:	4688      	mov	r8, r1
 8001144:	4616      	mov	r6, r2
 8001146:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800114a:	3d01      	subs	r5, #1
 800114c:	d40f      	bmi.n	800116e <_fwalk_sglue+0x36>
 800114e:	89a3      	ldrh	r3, [r4, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d908      	bls.n	8001166 <_fwalk_sglue+0x2e>
 8001154:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001158:	4621      	mov	r1, r4
 800115a:	4638      	mov	r0, r7
 800115c:	3301      	adds	r3, #1
 800115e:	d002      	beq.n	8001166 <_fwalk_sglue+0x2e>
 8001160:	47c0      	blx	r8
 8001162:	ea49 0900 	orr.w	r9, r9, r0
 8001166:	3d01      	subs	r5, #1
 8001168:	3468      	adds	r4, #104	@ 0x68
 800116a:	1c6b      	adds	r3, r5, #1
 800116c:	d1ef      	bne.n	800114e <_fwalk_sglue+0x16>
 800116e:	6836      	ldr	r6, [r6, #0]
 8001170:	2e00      	cmp	r6, #0
 8001172:	d1e8      	bne.n	8001146 <_fwalk_sglue+0xe>
 8001174:	4648      	mov	r0, r9
 8001176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800117a:	bf00      	nop

0800117c <__swsetup_r>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <__swsetup_r+0xc0>)
 8001180:	4605      	mov	r5, r0
 8001182:	460c      	mov	r4, r1
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b113      	cbz	r3, 800118e <__swsetup_r+0x12>
 8001188:	6a1a      	ldr	r2, [r3, #32]
 800118a:	2a00      	cmp	r2, #0
 800118c:	d045      	beq.n	800121a <__swsetup_r+0x9e>
 800118e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001192:	0718      	lsls	r0, r3, #28
 8001194:	d516      	bpl.n	80011c4 <__swsetup_r+0x48>
 8001196:	6922      	ldr	r2, [r4, #16]
 8001198:	b1f2      	cbz	r2, 80011d8 <__swsetup_r+0x5c>
 800119a:	f013 0101 	ands.w	r1, r3, #1
 800119e:	d007      	beq.n	80011b0 <__swsetup_r+0x34>
 80011a0:	6961      	ldr	r1, [r4, #20]
 80011a2:	2000      	movs	r0, #0
 80011a4:	4249      	negs	r1, r1
 80011a6:	60a0      	str	r0, [r4, #8]
 80011a8:	61a1      	str	r1, [r4, #24]
 80011aa:	b13a      	cbz	r2, 80011bc <__swsetup_r+0x40>
 80011ac:	2000      	movs	r0, #0
 80011ae:	bd38      	pop	{r3, r4, r5, pc}
 80011b0:	0798      	lsls	r0, r3, #30
 80011b2:	bf58      	it	pl
 80011b4:	6961      	ldrpl	r1, [r4, #20]
 80011b6:	60a1      	str	r1, [r4, #8]
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	d1f7      	bne.n	80011ac <__swsetup_r+0x30>
 80011bc:	0619      	lsls	r1, r3, #24
 80011be:	d438      	bmi.n	8001232 <__swsetup_r+0xb6>
 80011c0:	4610      	mov	r0, r2
 80011c2:	bd38      	pop	{r3, r4, r5, pc}
 80011c4:	06d9      	lsls	r1, r3, #27
 80011c6:	d52c      	bpl.n	8001222 <__swsetup_r+0xa6>
 80011c8:	075a      	lsls	r2, r3, #29
 80011ca:	d412      	bmi.n	80011f2 <__swsetup_r+0x76>
 80011cc:	6922      	ldr	r2, [r4, #16]
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	81a3      	strh	r3, [r4, #12]
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d1e0      	bne.n	800119a <__swsetup_r+0x1e>
 80011d8:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 80011dc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80011e0:	d0db      	beq.n	800119a <__swsetup_r+0x1e>
 80011e2:	4621      	mov	r1, r4
 80011e4:	4628      	mov	r0, r5
 80011e6:	f000 faa7 	bl	8001738 <__smakebuf_r>
 80011ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ee:	6922      	ldr	r2, [r4, #16]
 80011f0:	e7d3      	b.n	800119a <__swsetup_r+0x1e>
 80011f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011f4:	b151      	cbz	r1, 800120c <__swsetup_r+0x90>
 80011f6:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80011fa:	4291      	cmp	r1, r2
 80011fc:	d004      	beq.n	8001208 <__swsetup_r+0x8c>
 80011fe:	4628      	mov	r0, r5
 8001200:	f7ff ff46 	bl	8001090 <_free_r>
 8001204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	6362      	str	r2, [r4, #52]	@ 0x34
 800120c:	2100      	movs	r1, #0
 800120e:	6922      	ldr	r2, [r4, #16]
 8001210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001214:	e9c4 2100 	strd	r2, r1, [r4]
 8001218:	e7d9      	b.n	80011ce <__swsetup_r+0x52>
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fd9a 	bl	8000d54 <__sinit>
 8001220:	e7b5      	b.n	800118e <__swsetup_r+0x12>
 8001222:	2209      	movs	r2, #9
 8001224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001228:	602a      	str	r2, [r5, #0]
 800122a:	81a3      	strh	r3, [r4, #12]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001230:	bd38      	pop	{r3, r4, r5, pc}
 8001232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001236:	81a3      	strh	r3, [r4, #12]
 8001238:	e7f8      	b.n	800122c <__swsetup_r+0xb0>
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000

08001240 <memcpy>:
 8001240:	4684      	mov	ip, r0
 8001242:	ea41 0300 	orr.w	r3, r1, r0
 8001246:	f013 0303 	ands.w	r3, r3, #3
 800124a:	d149      	bne.n	80012e0 <memcpy+0xa0>
 800124c:	3a40      	subs	r2, #64	@ 0x40
 800124e:	d323      	bcc.n	8001298 <memcpy+0x58>
 8001250:	680b      	ldr	r3, [r1, #0]
 8001252:	6003      	str	r3, [r0, #0]
 8001254:	684b      	ldr	r3, [r1, #4]
 8001256:	6043      	str	r3, [r0, #4]
 8001258:	688b      	ldr	r3, [r1, #8]
 800125a:	6083      	str	r3, [r0, #8]
 800125c:	68cb      	ldr	r3, [r1, #12]
 800125e:	60c3      	str	r3, [r0, #12]
 8001260:	690b      	ldr	r3, [r1, #16]
 8001262:	6103      	str	r3, [r0, #16]
 8001264:	694b      	ldr	r3, [r1, #20]
 8001266:	6143      	str	r3, [r0, #20]
 8001268:	698b      	ldr	r3, [r1, #24]
 800126a:	6183      	str	r3, [r0, #24]
 800126c:	69cb      	ldr	r3, [r1, #28]
 800126e:	61c3      	str	r3, [r0, #28]
 8001270:	6a0b      	ldr	r3, [r1, #32]
 8001272:	6203      	str	r3, [r0, #32]
 8001274:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8001276:	6243      	str	r3, [r0, #36]	@ 0x24
 8001278:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800127a:	6283      	str	r3, [r0, #40]	@ 0x28
 800127c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800127e:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001280:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001282:	6303      	str	r3, [r0, #48]	@ 0x30
 8001284:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8001286:	6343      	str	r3, [r0, #52]	@ 0x34
 8001288:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800128a:	6383      	str	r3, [r0, #56]	@ 0x38
 800128c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800128e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8001290:	3040      	adds	r0, #64	@ 0x40
 8001292:	3140      	adds	r1, #64	@ 0x40
 8001294:	3a40      	subs	r2, #64	@ 0x40
 8001296:	d2db      	bcs.n	8001250 <memcpy+0x10>
 8001298:	3230      	adds	r2, #48	@ 0x30
 800129a:	d30b      	bcc.n	80012b4 <memcpy+0x74>
 800129c:	680b      	ldr	r3, [r1, #0]
 800129e:	6003      	str	r3, [r0, #0]
 80012a0:	684b      	ldr	r3, [r1, #4]
 80012a2:	6043      	str	r3, [r0, #4]
 80012a4:	688b      	ldr	r3, [r1, #8]
 80012a6:	6083      	str	r3, [r0, #8]
 80012a8:	68cb      	ldr	r3, [r1, #12]
 80012aa:	60c3      	str	r3, [r0, #12]
 80012ac:	3010      	adds	r0, #16
 80012ae:	3110      	adds	r1, #16
 80012b0:	3a10      	subs	r2, #16
 80012b2:	d2f3      	bcs.n	800129c <memcpy+0x5c>
 80012b4:	320c      	adds	r2, #12
 80012b6:	d305      	bcc.n	80012c4 <memcpy+0x84>
 80012b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80012bc:	f840 3b04 	str.w	r3, [r0], #4
 80012c0:	3a04      	subs	r2, #4
 80012c2:	d2f9      	bcs.n	80012b8 <memcpy+0x78>
 80012c4:	3204      	adds	r2, #4
 80012c6:	d008      	beq.n	80012da <memcpy+0x9a>
 80012c8:	07d2      	lsls	r2, r2, #31
 80012ca:	bf1c      	itt	ne
 80012cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012d0:	f800 3b01 	strbne.w	r3, [r0], #1
 80012d4:	d301      	bcc.n	80012da <memcpy+0x9a>
 80012d6:	880b      	ldrh	r3, [r1, #0]
 80012d8:	8003      	strh	r3, [r0, #0]
 80012da:	4660      	mov	r0, ip
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2a08      	cmp	r2, #8
 80012e2:	d313      	bcc.n	800130c <memcpy+0xcc>
 80012e4:	078b      	lsls	r3, r1, #30
 80012e6:	d0b1      	beq.n	800124c <memcpy+0xc>
 80012e8:	f010 0303 	ands.w	r3, r0, #3
 80012ec:	d0ae      	beq.n	800124c <memcpy+0xc>
 80012ee:	f1c3 0304 	rsb	r3, r3, #4
 80012f2:	1ad2      	subs	r2, r2, r3
 80012f4:	07db      	lsls	r3, r3, #31
 80012f6:	bf1c      	itt	ne
 80012f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8001300:	d3a4      	bcc.n	800124c <memcpy+0xc>
 8001302:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001306:	f820 3b02 	strh.w	r3, [r0], #2
 800130a:	e79f      	b.n	800124c <memcpy+0xc>
 800130c:	3a04      	subs	r2, #4
 800130e:	d3d9      	bcc.n	80012c4 <memcpy+0x84>
 8001310:	3a01      	subs	r2, #1
 8001312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001316:	f800 3b01 	strb.w	r3, [r0], #1
 800131a:	d2f9      	bcs.n	8001310 <memcpy+0xd0>
 800131c:	780b      	ldrb	r3, [r1, #0]
 800131e:	7003      	strb	r3, [r0, #0]
 8001320:	784b      	ldrb	r3, [r1, #1]
 8001322:	7043      	strb	r3, [r0, #1]
 8001324:	788b      	ldrb	r3, [r1, #2]
 8001326:	7083      	strb	r3, [r0, #2]
 8001328:	4660      	mov	r0, ip
 800132a:	4770      	bx	lr

0800132c <_realloc_r>:
 800132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001330:	4614      	mov	r4, r2
 8001332:	b341      	cbz	r1, 8001386 <_realloc_r+0x5a>
 8001334:	b30a      	cbz	r2, 800137a <_realloc_r+0x4e>
 8001336:	4606      	mov	r6, r0
 8001338:	460d      	mov	r5, r1
 800133a:	f000 fb43 	bl	80019c4 <_malloc_usable_size_r>
 800133e:	4284      	cmp	r4, r0
 8001340:	4607      	mov	r7, r0
 8001342:	d802      	bhi.n	800134a <_realloc_r+0x1e>
 8001344:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001348:	d813      	bhi.n	8001372 <_realloc_r+0x46>
 800134a:	4621      	mov	r1, r4
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff fe1f 	bl	8000f90 <_malloc_r>
 8001352:	4680      	mov	r8, r0
 8001354:	b150      	cbz	r0, 800136c <_realloc_r+0x40>
 8001356:	42bc      	cmp	r4, r7
 8001358:	4622      	mov	r2, r4
 800135a:	4629      	mov	r1, r5
 800135c:	bf28      	it	cs
 800135e:	463a      	movcs	r2, r7
 8001360:	f7ff ff6e 	bl	8001240 <memcpy>
 8001364:	4629      	mov	r1, r5
 8001366:	4630      	mov	r0, r6
 8001368:	f7ff fe92 	bl	8001090 <_free_r>
 800136c:	4640      	mov	r0, r8
 800136e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001372:	46a8      	mov	r8, r5
 8001374:	4640      	mov	r0, r8
 8001376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800137a:	46a0      	mov	r8, r4
 800137c:	f7ff fe88 	bl	8001090 <_free_r>
 8001380:	4640      	mov	r0, r8
 8001382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001386:	4611      	mov	r1, r2
 8001388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800138c:	f7ff be00 	b.w	8000f90 <_malloc_r>

08001390 <_printf_common>:
 8001390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001394:	4692      	mov	sl, r2
 8001396:	461f      	mov	r7, r3
 8001398:	690a      	ldr	r2, [r1, #16]
 800139a:	460c      	mov	r4, r1
 800139c:	688b      	ldr	r3, [r1, #8]
 800139e:	4606      	mov	r6, r0
 80013a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80013a4:	429a      	cmp	r2, r3
 80013a6:	bfb8      	it	lt
 80013a8:	461a      	movlt	r2, r3
 80013aa:	f8ca 2000 	str.w	r2, [sl]
 80013ae:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 80013b2:	b113      	cbz	r3, 80013ba <_printf_common+0x2a>
 80013b4:	3201      	adds	r2, #1
 80013b6:	f8ca 2000 	str.w	r2, [sl]
 80013ba:	6822      	ldr	r2, [r4, #0]
 80013bc:	0691      	lsls	r1, r2, #26
 80013be:	d55d      	bpl.n	800147c <_printf_common+0xec>
 80013c0:	f8da 3000 	ldr.w	r3, [sl]
 80013c4:	3302      	adds	r3, #2
 80013c6:	f8ca 3000 	str.w	r3, [sl]
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	f012 0f06 	tst.w	r2, #6
 80013d0:	4611      	mov	r1, r2
 80013d2:	d11b      	bne.n	800140c <_printf_common+0x7c>
 80013d4:	68e1      	ldr	r1, [r4, #12]
 80013d6:	4299      	cmp	r1, r3
 80013d8:	dd66      	ble.n	80014a8 <_printf_common+0x118>
 80013da:	f04f 0800 	mov.w	r8, #0
 80013de:	f104 0b19 	add.w	fp, r4, #25
 80013e2:	e005      	b.n	80013f0 <_printf_common+0x60>
 80013e4:	68e5      	ldr	r5, [r4, #12]
 80013e6:	f8da 3000 	ldr.w	r3, [sl]
 80013ea:	1aed      	subs	r5, r5, r3
 80013ec:	4545      	cmp	r5, r8
 80013ee:	dd0c      	ble.n	800140a <_printf_common+0x7a>
 80013f0:	2301      	movs	r3, #1
 80013f2:	465a      	mov	r2, fp
 80013f4:	4639      	mov	r1, r7
 80013f6:	4630      	mov	r0, r6
 80013f8:	47c8      	blx	r9
 80013fa:	3001      	adds	r0, #1
 80013fc:	f108 0801 	add.w	r8, r8, #1
 8001400:	d1f0      	bne.n	80013e4 <_printf_common+0x54>
 8001402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800140a:	6821      	ldr	r1, [r4, #0]
 800140c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001410:	3b00      	subs	r3, #0
 8001412:	bf18      	it	ne
 8001414:	2301      	movne	r3, #1
 8001416:	068a      	lsls	r2, r1, #26
 8001418:	d50a      	bpl.n	8001430 <_printf_common+0xa0>
 800141a:	18e1      	adds	r1, r4, r3
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	2030      	movs	r0, #48	@ 0x30
 8001420:	3302      	adds	r3, #2
 8001422:	4422      	add	r2, r4
 8001424:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800142c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001430:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001434:	4639      	mov	r1, r7
 8001436:	4630      	mov	r0, r6
 8001438:	47c8      	blx	r9
 800143a:	3001      	adds	r0, #1
 800143c:	d0e1      	beq.n	8001402 <_printf_common+0x72>
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	f8da 5000 	ldr.w	r5, [sl]
 8001444:	f003 0306 	and.w	r3, r3, #6
 8001448:	6921      	ldr	r1, [r4, #16]
 800144a:	2b04      	cmp	r3, #4
 800144c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8001450:	d01b      	beq.n	800148a <_printf_common+0xfa>
 8001452:	428a      	cmp	r2, r1
 8001454:	dd20      	ble.n	8001498 <_printf_common+0x108>
 8001456:	f04f 0800 	mov.w	r8, #0
 800145a:	1a52      	subs	r2, r2, r1
 800145c:	4490      	add	r8, r2
 800145e:	341a      	adds	r4, #26
 8001460:	2500      	movs	r5, #0
 8001462:	e001      	b.n	8001468 <_printf_common+0xd8>
 8001464:	4545      	cmp	r5, r8
 8001466:	da17      	bge.n	8001498 <_printf_common+0x108>
 8001468:	2301      	movs	r3, #1
 800146a:	4622      	mov	r2, r4
 800146c:	4639      	mov	r1, r7
 800146e:	4630      	mov	r0, r6
 8001470:	47c8      	blx	r9
 8001472:	3001      	adds	r0, #1
 8001474:	f105 0501 	add.w	r5, r5, #1
 8001478:	d1f4      	bne.n	8001464 <_printf_common+0xd4>
 800147a:	e7c2      	b.n	8001402 <_printf_common+0x72>
 800147c:	f012 0f06 	tst.w	r2, #6
 8001480:	d00d      	beq.n	800149e <_printf_common+0x10e>
 8001482:	3b00      	subs	r3, #0
 8001484:	bf18      	it	ne
 8001486:	2301      	movne	r3, #1
 8001488:	e7d2      	b.n	8001430 <_printf_common+0xa0>
 800148a:	1b40      	subs	r0, r0, r5
 800148c:	428a      	cmp	r2, r1
 800148e:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 8001492:	dce2      	bgt.n	800145a <_printf_common+0xca>
 8001494:	2800      	cmp	r0, #0
 8001496:	dce2      	bgt.n	800145e <_printf_common+0xce>
 8001498:	2000      	movs	r0, #0
 800149a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800149e:	f8da 3000 	ldr.w	r3, [sl]
 80014a2:	68e1      	ldr	r1, [r4, #12]
 80014a4:	4299      	cmp	r1, r3
 80014a6:	dc98      	bgt.n	80013da <_printf_common+0x4a>
 80014a8:	4611      	mov	r1, r2
 80014aa:	e7af      	b.n	800140c <_printf_common+0x7c>

080014ac <_printf_i>:
 80014ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b0:	4617      	mov	r7, r2
 80014b2:	b084      	sub	sp, #16
 80014b4:	7e0a      	ldrb	r2, [r1, #24]
 80014b6:	460c      	mov	r4, r1
 80014b8:	4606      	mov	r6, r0
 80014ba:	4698      	mov	r8, r3
 80014bc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80014be:	f101 0c43 	add.w	ip, r1, #67	@ 0x43
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d035      	beq.n	8001532 <_printf_i+0x86>
 80014c6:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 80014ca:	b2d9      	uxtb	r1, r3
 80014cc:	2920      	cmp	r1, #32
 80014ce:	d869      	bhi.n	80015a4 <_printf_i+0xf8>
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	d867      	bhi.n	80015a4 <_printf_i+0xf8>
 80014d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80014d8:	006600e6 	.word	0x006600e6
 80014dc:	00660066 	.word	0x00660066
 80014e0:	00660066 	.word	0x00660066
 80014e4:	00660066 	.word	0x00660066
 80014e8:	00660066 	.word	0x00660066
 80014ec:	00ac0066 	.word	0x00ac0066
 80014f0:	00660070 	.word	0x00660070
 80014f4:	00660066 	.word	0x00660066
 80014f8:	00700066 	.word	0x00700066
 80014fc:	00660066 	.word	0x00660066
 8001500:	00660066 	.word	0x00660066
 8001504:	00830021 	.word	0x00830021
 8001508:	006600c6 	.word	0x006600c6
 800150c:	00b60066 	.word	0x00b60066
 8001510:	00830066 	.word	0x00830066
 8001514:	00660066 	.word	0x00660066
 8001518:	00ec      	.short	0x00ec
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	6822      	ldr	r2, [r4, #0]
 800151e:	1d18      	adds	r0, r3, #4
 8001520:	6961      	ldr	r1, [r4, #20]
 8001522:	6028      	str	r0, [r5, #0]
 8001524:	0610      	lsls	r0, r2, #24
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	d402      	bmi.n	8001530 <_printf_i+0x84>
 800152a:	0652      	lsls	r2, r2, #25
 800152c:	f100 80e0 	bmi.w	80016f0 <_printf_i+0x244>
 8001530:	6019      	str	r1, [r3, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	46e1      	mov	r9, ip
 8001536:	6123      	str	r3, [r4, #16]
 8001538:	463b      	mov	r3, r7
 800153a:	aa03      	add	r2, sp, #12
 800153c:	4621      	mov	r1, r4
 800153e:	4630      	mov	r0, r6
 8001540:	f8cd 8000 	str.w	r8, [sp]
 8001544:	f7ff ff24 	bl	8001390 <_printf_common>
 8001548:	3001      	adds	r0, #1
 800154a:	d020      	beq.n	800158e <_printf_i+0xe2>
 800154c:	464a      	mov	r2, r9
 800154e:	6923      	ldr	r3, [r4, #16]
 8001550:	4639      	mov	r1, r7
 8001552:	4630      	mov	r0, r6
 8001554:	47c0      	blx	r8
 8001556:	3001      	adds	r0, #1
 8001558:	d019      	beq.n	800158e <_printf_i+0xe2>
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	68e0      	ldr	r0, [r4, #12]
 800155e:	079b      	lsls	r3, r3, #30
 8001560:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001564:	d518      	bpl.n	8001598 <_printf_i+0xec>
 8001566:	4548      	cmp	r0, r9
 8001568:	dd16      	ble.n	8001598 <_printf_i+0xec>
 800156a:	2500      	movs	r5, #0
 800156c:	f104 0a19 	add.w	sl, r4, #25
 8001570:	e004      	b.n	800157c <_printf_i+0xd0>
 8001572:	68e0      	ldr	r0, [r4, #12]
 8001574:	eba0 0309 	sub.w	r3, r0, r9
 8001578:	42ab      	cmp	r3, r5
 800157a:	dd0d      	ble.n	8001598 <_printf_i+0xec>
 800157c:	2301      	movs	r3, #1
 800157e:	4652      	mov	r2, sl
 8001580:	4639      	mov	r1, r7
 8001582:	4630      	mov	r0, r6
 8001584:	47c0      	blx	r8
 8001586:	3001      	adds	r0, #1
 8001588:	f105 0501 	add.w	r5, r5, #1
 800158c:	d1f1      	bne.n	8001572 <_printf_i+0xc6>
 800158e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001592:	b004      	add	sp, #16
 8001594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001598:	4548      	cmp	r0, r9
 800159a:	bfb8      	it	lt
 800159c:	4648      	movlt	r0, r9
 800159e:	b004      	add	sp, #16
 80015a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a4:	2001      	movs	r0, #1
 80015a6:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80015aa:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80015ae:	2300      	movs	r3, #0
 80015b0:	6120      	str	r0, [r4, #16]
 80015b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015b6:	e7bf      	b.n	8001538 <_printf_i+0x8c>
 80015b8:	682a      	ldr	r2, [r5, #0]
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	1d11      	adds	r1, r2, #4
 80015be:	0618      	lsls	r0, r3, #24
 80015c0:	6029      	str	r1, [r5, #0]
 80015c2:	d402      	bmi.n	80015ca <_printf_i+0x11e>
 80015c4:	0659      	lsls	r1, r3, #25
 80015c6:	f100 8095 	bmi.w	80016f4 <_printf_i+0x248>
 80015ca:	6810      	ldr	r0, [r2, #0]
 80015cc:	4601      	mov	r1, r0
 80015ce:	2800      	cmp	r0, #0
 80015d0:	6862      	ldr	r2, [r4, #4]
 80015d2:	f2c0 8093 	blt.w	80016fc <_printf_i+0x250>
 80015d6:	4854      	ldr	r0, [pc, #336]	@ (8001728 <_printf_i+0x27c>)
 80015d8:	f04f 0e0a 	mov.w	lr, #10
 80015dc:	e015      	b.n	800160a <_printf_i+0x15e>
 80015de:	6820      	ldr	r0, [r4, #0]
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80015e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80015ea:	d102      	bne.n	80015f2 <_printf_i+0x146>
 80015ec:	0640      	lsls	r0, r0, #25
 80015ee:	bf48      	it	mi
 80015f0:	b289      	uxthmi	r1, r1
 80015f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80015f4:	484c      	ldr	r0, [pc, #304]	@ (8001728 <_printf_i+0x27c>)
 80015f6:	602b      	str	r3, [r5, #0]
 80015f8:	bf14      	ite	ne
 80015fa:	f04f 0e0a 	movne.w	lr, #10
 80015fe:	f04f 0e08 	moveq.w	lr, #8
 8001602:	2300      	movs	r3, #0
 8001604:	6862      	ldr	r2, [r4, #4]
 8001606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800160a:	2a00      	cmp	r2, #0
 800160c:	60a2      	str	r2, [r4, #8]
 800160e:	db51      	blt.n	80016b4 <_printf_i+0x208>
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6023      	str	r3, [r4, #0]
 8001618:	2900      	cmp	r1, #0
 800161a:	d14b      	bne.n	80016b4 <_printf_i+0x208>
 800161c:	2a00      	cmp	r2, #0
 800161e:	d17b      	bne.n	8001718 <_printf_i+0x26c>
 8001620:	46e1      	mov	r9, ip
 8001622:	f1be 0f08 	cmp.w	lr, #8
 8001626:	d056      	beq.n	80016d6 <_printf_i+0x22a>
 8001628:	ebac 0309 	sub.w	r3, ip, r9
 800162c:	6123      	str	r3, [r4, #16]
 800162e:	e783      	b.n	8001538 <_printf_i+0x8c>
 8001630:	682a      	ldr	r2, [r5, #0]
 8001632:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001636:	2001      	movs	r0, #1
 8001638:	1d11      	adds	r1, r2, #4
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	6029      	str	r1, [r5, #0]
 800163e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001642:	e7b4      	b.n	80015ae <_printf_i+0x102>
 8001644:	682b      	ldr	r3, [r5, #0]
 8001646:	2100      	movs	r1, #0
 8001648:	6862      	ldr	r2, [r4, #4]
 800164a:	1d18      	adds	r0, r3, #4
 800164c:	6028      	str	r0, [r5, #0]
 800164e:	f8d3 9000 	ldr.w	r9, [r3]
 8001652:	4648      	mov	r0, r9
 8001654:	f000 f8fa 	bl	800184c <memchr>
 8001658:	2800      	cmp	r0, #0
 800165a:	d063      	beq.n	8001724 <_printf_i+0x278>
 800165c:	eba0 0009 	sub.w	r0, r0, r9
 8001660:	6060      	str	r0, [r4, #4]
 8001662:	e7a4      	b.n	80015ae <_printf_i+0x102>
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	6023      	str	r3, [r4, #0]
 800166c:	2278      	movs	r2, #120	@ 0x78
 800166e:	482f      	ldr	r0, [pc, #188]	@ (800172c <_printf_i+0x280>)
 8001670:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8001674:	682a      	ldr	r2, [r5, #0]
 8001676:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800167a:	f852 1b04 	ldr.w	r1, [r2], #4
 800167e:	d103      	bne.n	8001688 <_printf_i+0x1dc>
 8001680:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001684:	bf18      	it	ne
 8001686:	b289      	uxthne	r1, r1
 8001688:	602a      	str	r2, [r5, #0]
 800168a:	07da      	lsls	r2, r3, #31
 800168c:	d502      	bpl.n	8001694 <_printf_i+0x1e8>
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	6023      	str	r3, [r4, #0]
 8001694:	b919      	cbnz	r1, 800169e <_printf_i+0x1f2>
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	f023 0320 	bic.w	r3, r3, #32
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	f04f 0e10 	mov.w	lr, #16
 80016a2:	e7ae      	b.n	8001602 <_printf_i+0x156>
 80016a4:	2358      	movs	r3, #88	@ 0x58
 80016a6:	4820      	ldr	r0, [pc, #128]	@ (8001728 <_printf_i+0x27c>)
 80016a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	e7e1      	b.n	8001674 <_printf_i+0x1c8>
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	e7db      	b.n	800166c <_printf_i+0x1c0>
 80016b4:	4675      	mov	r5, lr
 80016b6:	46e1      	mov	r9, ip
 80016b8:	460a      	mov	r2, r1
 80016ba:	fbb1 f3f5 	udiv	r3, r1, r5
 80016be:	fb05 1a13 	mls	sl, r5, r3, r1
 80016c2:	42aa      	cmp	r2, r5
 80016c4:	4619      	mov	r1, r3
 80016c6:	f810 300a 	ldrb.w	r3, [r0, sl]
 80016ca:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80016ce:	d2f3      	bcs.n	80016b8 <_printf_i+0x20c>
 80016d0:	f1be 0f08 	cmp.w	lr, #8
 80016d4:	d1a8      	bne.n	8001628 <_printf_i+0x17c>
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	07dd      	lsls	r5, r3, #31
 80016da:	d5a5      	bpl.n	8001628 <_printf_i+0x17c>
 80016dc:	6862      	ldr	r2, [r4, #4]
 80016de:	6923      	ldr	r3, [r4, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dca1      	bgt.n	8001628 <_printf_i+0x17c>
 80016e4:	2330      	movs	r3, #48	@ 0x30
 80016e6:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80016ea:	f889 3000 	strb.w	r3, [r9]
 80016ee:	e79b      	b.n	8001628 <_printf_i+0x17c>
 80016f0:	8019      	strh	r1, [r3, #0]
 80016f2:	e71e      	b.n	8001532 <_printf_i+0x86>
 80016f4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80016f8:	4608      	mov	r0, r1
 80016fa:	e768      	b.n	80015ce <_printf_i+0x122>
 80016fc:	202d      	movs	r0, #45	@ 0x2d
 80016fe:	2a00      	cmp	r2, #0
 8001700:	60a2      	str	r2, [r4, #8]
 8001702:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8001706:	db02      	blt.n	800170e <_printf_i+0x262>
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6023      	str	r3, [r4, #0]
 800170e:	250a      	movs	r5, #10
 8001710:	4249      	negs	r1, r1
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <_printf_i+0x27c>)
 8001714:	46ae      	mov	lr, r5
 8001716:	e7ce      	b.n	80016b6 <_printf_i+0x20a>
 8001718:	7803      	ldrb	r3, [r0, #0]
 800171a:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 800171e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001722:	e77e      	b.n	8001622 <_printf_i+0x176>
 8001724:	6860      	ldr	r0, [r4, #4]
 8001726:	e742      	b.n	80015ae <_printf_i+0x102>
 8001728:	08008074 	.word	0x08008074
 800172c:	08008088 	.word	0x08008088

08001730 <__malloc_lock>:
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop

08001734 <__malloc_unlock>:
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <__smakebuf_r>:
 8001738:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	460c      	mov	r4, r1
 8001740:	0799      	lsls	r1, r3, #30
 8001742:	b096      	sub	sp, #88	@ 0x58
 8001744:	d507      	bpl.n	8001756 <__smakebuf_r+0x1e>
 8001746:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800174a:	2201      	movs	r2, #1
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8001752:	b016      	add	sp, #88	@ 0x58
 8001754:	bd70      	pop	{r4, r5, r6, pc}
 8001756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800175a:	4605      	mov	r5, r0
 800175c:	2900      	cmp	r1, #0
 800175e:	db2a      	blt.n	80017b6 <__smakebuf_r+0x7e>
 8001760:	466a      	mov	r2, sp
 8001762:	f000 f961 	bl	8001a28 <_fstat_r>
 8001766:	2800      	cmp	r0, #0
 8001768:	db23      	blt.n	80017b2 <__smakebuf_r+0x7a>
 800176a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800176e:	4628      	mov	r0, r5
 8001770:	9e01      	ldr	r6, [sp, #4]
 8001772:	f7ff fc0d 	bl	8000f90 <_malloc_r>
 8001776:	2800      	cmp	r0, #0
 8001778:	d031      	beq.n	80017de <__smakebuf_r+0xa6>
 800177a:	89a3      	ldrh	r3, [r4, #12]
 800177c:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 8001780:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001784:	6020      	str	r0, [r4, #0]
 8001786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178a:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800178e:	6120      	str	r0, [r4, #16]
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	6162      	str	r2, [r4, #20]
 8001794:	d1dd      	bne.n	8001752 <__smakebuf_r+0x1a>
 8001796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800179a:	4628      	mov	r0, r5
 800179c:	f000 f8a2 	bl	80018e4 <_isatty_r>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d0d6      	beq.n	8001752 <__smakebuf_r+0x1a>
 80017a4:	89a3      	ldrh	r3, [r4, #12]
 80017a6:	f023 0303 	bic.w	r3, r3, #3
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	81a3      	strh	r3, [r4, #12]
 80017b0:	e7cf      	b.n	8001752 <__smakebuf_r+0x1a>
 80017b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80017ba:	4628      	mov	r0, r5
 80017bc:	bf14      	ite	ne
 80017be:	2540      	movne	r5, #64	@ 0x40
 80017c0:	f44f 6580 	moveq.w	r5, #1024	@ 0x400
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7ff fbe3 	bl	8000f90 <_malloc_r>
 80017ca:	b140      	cbz	r0, 80017de <__smakebuf_r+0xa6>
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	6020      	str	r0, [r4, #0]
 80017d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80017d8:	81a3      	strh	r3, [r4, #12]
 80017da:	b016      	add	sp, #88	@ 0x58
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e2:	059a      	lsls	r2, r3, #22
 80017e4:	d4b5      	bmi.n	8001752 <__smakebuf_r+0x1a>
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80017ee:	2101      	movs	r1, #1
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6022      	str	r2, [r4, #0]
 80017f6:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80017fa:	81a3      	strh	r3, [r4, #12]
 80017fc:	e7a9      	b.n	8001752 <__smakebuf_r+0x1a>
 80017fe:	bf00      	nop

08001800 <__swhatbuf_r>:
 8001800:	b570      	push	{r4, r5, r6, lr}
 8001802:	460c      	mov	r4, r1
 8001804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001808:	b096      	sub	sp, #88	@ 0x58
 800180a:	4615      	mov	r5, r2
 800180c:	2900      	cmp	r1, #0
 800180e:	461e      	mov	r6, r3
 8001810:	db0f      	blt.n	8001832 <__swhatbuf_r+0x32>
 8001812:	466a      	mov	r2, sp
 8001814:	f000 f908 	bl	8001a28 <_fstat_r>
 8001818:	2800      	cmp	r0, #0
 800181a:	db0a      	blt.n	8001832 <__swhatbuf_r+0x32>
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001822:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001826:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	e007      	b.n	8001842 <__swhatbuf_r+0x42>
 8001832:	89a2      	ldrh	r2, [r4, #12]
 8001834:	2300      	movs	r3, #0
 8001836:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800183a:	bf14      	ite	ne
 800183c:	2240      	movne	r2, #64	@ 0x40
 800183e:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 8001842:	2000      	movs	r0, #0
 8001844:	6033      	str	r3, [r6, #0]
 8001846:	602a      	str	r2, [r5, #0]
 8001848:	b016      	add	sp, #88	@ 0x58
 800184a:	bd70      	pop	{r4, r5, r6, pc}

0800184c <memchr>:
 800184c:	fa5f fc81 	uxtb.w	ip, r1
 8001850:	0781      	lsls	r1, r0, #30
 8001852:	d044      	beq.n	80018de <memchr+0x92>
 8001854:	4603      	mov	r3, r0
 8001856:	1e51      	subs	r1, r2, #1
 8001858:	b922      	cbnz	r2, 8001864 <memchr+0x18>
 800185a:	e009      	b.n	8001870 <memchr+0x24>
 800185c:	079a      	lsls	r2, r3, #30
 800185e:	d009      	beq.n	8001874 <memchr+0x28>
 8001860:	3901      	subs	r1, #1
 8001862:	d305      	bcc.n	8001870 <memchr+0x24>
 8001864:	4618      	mov	r0, r3
 8001866:	3301      	adds	r3, #1
 8001868:	7802      	ldrb	r2, [r0, #0]
 800186a:	4562      	cmp	r2, ip
 800186c:	d1f6      	bne.n	800185c <memchr+0x10>
 800186e:	4770      	bx	lr
 8001870:	2000      	movs	r0, #0
 8001872:	4770      	bx	lr
 8001874:	4618      	mov	r0, r3
 8001876:	2903      	cmp	r1, #3
 8001878:	d80c      	bhi.n	8001894 <memchr+0x48>
 800187a:	2900      	cmp	r1, #0
 800187c:	d0f8      	beq.n	8001870 <memchr+0x24>
 800187e:	4603      	mov	r3, r0
 8001880:	4401      	add	r1, r0
 8001882:	e001      	b.n	8001888 <memchr+0x3c>
 8001884:	428b      	cmp	r3, r1
 8001886:	d0f3      	beq.n	8001870 <memchr+0x24>
 8001888:	4618      	mov	r0, r3
 800188a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800188e:	4562      	cmp	r2, ip
 8001890:	d1f8      	bne.n	8001884 <memchr+0x38>
 8001892:	4770      	bx	lr
 8001894:	b510      	push	{r4, lr}
 8001896:	eb0c 240c 	add.w	r4, ip, ip, lsl #8
 800189a:	4602      	mov	r2, r0
 800189c:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 80018a0:	e002      	b.n	80018a8 <memchr+0x5c>
 80018a2:	3904      	subs	r1, #4
 80018a4:	2903      	cmp	r1, #3
 80018a6:	d915      	bls.n	80018d4 <memchr+0x88>
 80018a8:	4610      	mov	r0, r2
 80018aa:	f852 3b04 	ldr.w	r3, [r2], #4
 80018ae:	4063      	eors	r3, r4
 80018b0:	f1a3 3e01 	sub.w	lr, r3, #16843009	@ 0x1010101
 80018b4:	ea2e 0303 	bic.w	r3, lr, r3
 80018b8:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
 80018bc:	d0f1      	beq.n	80018a2 <memchr+0x56>
 80018be:	4603      	mov	r3, r0
 80018c0:	4401      	add	r1, r0
 80018c2:	e001      	b.n	80018c8 <memchr+0x7c>
 80018c4:	428b      	cmp	r3, r1
 80018c6:	d008      	beq.n	80018da <memchr+0x8e>
 80018c8:	4618      	mov	r0, r3
 80018ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018ce:	4562      	cmp	r2, ip
 80018d0:	d1f8      	bne.n	80018c4 <memchr+0x78>
 80018d2:	bd10      	pop	{r4, pc}
 80018d4:	4610      	mov	r0, r2
 80018d6:	2900      	cmp	r1, #0
 80018d8:	d1f1      	bne.n	80018be <memchr+0x72>
 80018da:	2000      	movs	r0, #0
 80018dc:	bd10      	pop	{r4, pc}
 80018de:	4611      	mov	r1, r2
 80018e0:	e7c9      	b.n	8001876 <memchr+0x2a>
 80018e2:	bf00      	nop

080018e4 <_isatty_r>:
 80018e4:	b538      	push	{r3, r4, r5, lr}
 80018e6:	2200      	movs	r2, #0
 80018e8:	4d06      	ldr	r5, [pc, #24]	@ (8001904 <_isatty_r+0x20>)
 80018ea:	4604      	mov	r4, r0
 80018ec:	4608      	mov	r0, r1
 80018ee:	602a      	str	r2, [r5, #0]
 80018f0:	f000 fde2 	bl	80024b8 <_isatty>
 80018f4:	1c43      	adds	r3, r0, #1
 80018f6:	d000      	beq.n	80018fa <_isatty_r+0x16>
 80018f8:	bd38      	pop	{r3, r4, r5, pc}
 80018fa:	682b      	ldr	r3, [r5, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0fb      	beq.n	80018f8 <_isatty_r+0x14>
 8001900:	6023      	str	r3, [r4, #0]
 8001902:	bd38      	pop	{r3, r4, r5, pc}
 8001904:	200001c8 	.word	0x200001c8

08001908 <_sbrk_r>:
 8001908:	b538      	push	{r3, r4, r5, lr}
 800190a:	2200      	movs	r2, #0
 800190c:	4d06      	ldr	r5, [pc, #24]	@ (8001928 <_sbrk_r+0x20>)
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	602a      	str	r2, [r5, #0]
 8001914:	f000 fdd4 	bl	80024c0 <_sbrk>
 8001918:	1c43      	adds	r3, r0, #1
 800191a:	d000      	beq.n	800191e <_sbrk_r+0x16>
 800191c:	bd38      	pop	{r3, r4, r5, pc}
 800191e:	682b      	ldr	r3, [r5, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0fb      	beq.n	800191c <_sbrk_r+0x14>
 8001924:	6023      	str	r3, [r4, #0]
 8001926:	bd38      	pop	{r3, r4, r5, pc}
 8001928:	200001c8 	.word	0x200001c8

0800192c <__sread>:
 800192c:	b510      	push	{r4, lr}
 800192e:	460c      	mov	r4, r1
 8001930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001934:	f000 f862 	bl	80019fc <_read_r>
 8001938:	2800      	cmp	r0, #0
 800193a:	db03      	blt.n	8001944 <__sread+0x18>
 800193c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800193e:	4403      	add	r3, r0
 8001940:	6563      	str	r3, [r4, #84]	@ 0x54
 8001942:	bd10      	pop	{r4, pc}
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800194a:	81a3      	strh	r3, [r4, #12]
 800194c:	bd10      	pop	{r4, pc}
 800194e:	bf00      	nop

08001950 <__seofread>:
 8001950:	2000      	movs	r0, #0
 8001952:	4770      	bx	lr

08001954 <__swrite>:
 8001954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001958:	460c      	mov	r4, r1
 800195a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800195e:	461f      	mov	r7, r3
 8001960:	4605      	mov	r5, r0
 8001962:	05cb      	lsls	r3, r1, #23
 8001964:	4616      	mov	r6, r2
 8001966:	d40b      	bmi.n	8001980 <__swrite+0x2c>
 8001968:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 800196c:	463b      	mov	r3, r7
 800196e:	4632      	mov	r2, r6
 8001970:	4628      	mov	r0, r5
 8001972:	81a1      	strh	r1, [r4, #12]
 8001974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800197c:	f000 b880 	b.w	8001a80 <_write_r>
 8001980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001984:	2302      	movs	r3, #2
 8001986:	2200      	movs	r2, #0
 8001988:	f000 f864 	bl	8001a54 <_lseek_r>
 800198c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001990:	e7ea      	b.n	8001968 <__swrite+0x14>
 8001992:	bf00      	nop

08001994 <__sseek>:
 8001994:	b510      	push	{r4, lr}
 8001996:	460c      	mov	r4, r1
 8001998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800199c:	f000 f85a 	bl	8001a54 <_lseek_r>
 80019a0:	1c42      	adds	r2, r0, #1
 80019a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019a6:	d004      	beq.n	80019b2 <__sseek+0x1e>
 80019a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019ac:	6560      	str	r0, [r4, #84]	@ 0x54
 80019ae:	81a3      	strh	r3, [r4, #12]
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b6:	81a3      	strh	r3, [r4, #12]
 80019b8:	bd10      	pop	{r4, pc}
 80019ba:	bf00      	nop

080019bc <__sclose>:
 80019bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c0:	f000 b80a 	b.w	80019d8 <_close_r>

080019c4 <_malloc_usable_size_r>:
 80019c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f1a3 0004 	sub.w	r0, r3, #4
 80019ce:	db00      	blt.n	80019d2 <_malloc_usable_size_r+0xe>
 80019d0:	4770      	bx	lr
 80019d2:	580b      	ldr	r3, [r1, r0]
 80019d4:	4418      	add	r0, r3
 80019d6:	4770      	bx	lr

080019d8 <_close_r>:
 80019d8:	b538      	push	{r3, r4, r5, lr}
 80019da:	2200      	movs	r2, #0
 80019dc:	4d06      	ldr	r5, [pc, #24]	@ (80019f8 <_close_r+0x20>)
 80019de:	4604      	mov	r4, r0
 80019e0:	4608      	mov	r0, r1
 80019e2:	602a      	str	r2, [r5, #0]
 80019e4:	f000 fd5e 	bl	80024a4 <_close>
 80019e8:	1c43      	adds	r3, r0, #1
 80019ea:	d000      	beq.n	80019ee <_close_r+0x16>
 80019ec:	bd38      	pop	{r3, r4, r5, pc}
 80019ee:	682b      	ldr	r3, [r5, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0fb      	beq.n	80019ec <_close_r+0x14>
 80019f4:	6023      	str	r3, [r4, #0]
 80019f6:	bd38      	pop	{r3, r4, r5, pc}
 80019f8:	200001c8 	.word	0x200001c8

080019fc <_read_r>:
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	460c      	mov	r4, r1
 8001a00:	4684      	mov	ip, r0
 8001a02:	4611      	mov	r1, r2
 8001a04:	4d07      	ldr	r5, [pc, #28]	@ (8001a24 <_read_r+0x28>)
 8001a06:	461a      	mov	r2, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4664      	mov	r4, ip
 8001a0e:	602b      	str	r3, [r5, #0]
 8001a10:	f000 fd2c 	bl	800246c <_read>
 8001a14:	1c43      	adds	r3, r0, #1
 8001a16:	d000      	beq.n	8001a1a <_read_r+0x1e>
 8001a18:	bd38      	pop	{r3, r4, r5, pc}
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0fb      	beq.n	8001a18 <_read_r+0x1c>
 8001a20:	6023      	str	r3, [r4, #0]
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	200001c8 	.word	0x200001c8

08001a28 <_fstat_r>:
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4d08      	ldr	r5, [pc, #32]	@ (8001a50 <_fstat_r+0x28>)
 8001a30:	2600      	movs	r6, #0
 8001a32:	4620      	mov	r0, r4
 8001a34:	4611      	mov	r1, r2
 8001a36:	461c      	mov	r4, r3
 8001a38:	602e      	str	r6, [r5, #0]
 8001a3a:	f000 fd37 	bl	80024ac <_fstat>
 8001a3e:	1c43      	adds	r3, r0, #1
 8001a40:	d000      	beq.n	8001a44 <_fstat_r+0x1c>
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	682b      	ldr	r3, [r5, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0fb      	beq.n	8001a42 <_fstat_r+0x1a>
 8001a4a:	6023      	str	r3, [r4, #0]
 8001a4c:	bd70      	pop	{r4, r5, r6, pc}
 8001a4e:	bf00      	nop
 8001a50:	200001c8 	.word	0x200001c8

08001a54 <_lseek_r>:
 8001a54:	b538      	push	{r3, r4, r5, lr}
 8001a56:	460c      	mov	r4, r1
 8001a58:	4684      	mov	ip, r0
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4d07      	ldr	r5, [pc, #28]	@ (8001a7c <_lseek_r+0x28>)
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	4620      	mov	r0, r4
 8001a64:	4664      	mov	r4, ip
 8001a66:	602b      	str	r3, [r5, #0]
 8001a68:	f000 fd28 	bl	80024bc <_lseek>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d000      	beq.n	8001a72 <_lseek_r+0x1e>
 8001a70:	bd38      	pop	{r3, r4, r5, pc}
 8001a72:	682b      	ldr	r3, [r5, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0fb      	beq.n	8001a70 <_lseek_r+0x1c>
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 8001a7c:	200001c8 	.word	0x200001c8

08001a80 <_write_r>:
 8001a80:	b538      	push	{r3, r4, r5, lr}
 8001a82:	460c      	mov	r4, r1
 8001a84:	4684      	mov	ip, r0
 8001a86:	4611      	mov	r1, r2
 8001a88:	4d07      	ldr	r5, [pc, #28]	@ (8001aa8 <_write_r+0x28>)
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4664      	mov	r4, ip
 8001a92:	602b      	str	r3, [r5, #0]
 8001a94:	f000 fcf8 	bl	8002488 <_write>
 8001a98:	1c43      	adds	r3, r0, #1
 8001a9a:	d000      	beq.n	8001a9e <_write_r+0x1e>
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
 8001a9e:	682b      	ldr	r3, [r5, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0fb      	beq.n	8001a9c <_write_r+0x1c>
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	200001c8 	.word	0x200001c8

08001aac <__aeabi_uldivmod>:
 8001aac:	b953      	cbnz	r3, 8001ac4 <__aeabi_uldivmod+0x18>
 8001aae:	b94a      	cbnz	r2, 8001ac4 <__aeabi_uldivmod+0x18>
 8001ab0:	2900      	cmp	r1, #0
 8001ab2:	bf08      	it	eq
 8001ab4:	2800      	cmpeq	r0, #0
 8001ab6:	bf1c      	itt	ne
 8001ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001ac0:	f000 b98c 	b.w	8001ddc <__aeabi_idiv0>
 8001ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8001ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001acc:	f000 f806 	bl	8001adc <__udivmoddi4>
 8001ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001ad8:	b004      	add	sp, #16
 8001ada:	4770      	bx	lr

08001adc <__udivmoddi4>:
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8001ae2:	460e      	mov	r6, r1
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	460f      	mov	r7, r1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d147      	bne.n	8001b7c <__udivmoddi4+0xa0>
 8001aec:	428a      	cmp	r2, r1
 8001aee:	4694      	mov	ip, r2
 8001af0:	fab2 f382 	clz	r3, r2
 8001af4:	d95a      	bls.n	8001bac <__udivmoddi4+0xd0>
 8001af6:	b143      	cbz	r3, 8001b0a <__udivmoddi4+0x2e>
 8001af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8001afc:	f1c3 0220 	rsb	r2, r3, #32
 8001b00:	409f      	lsls	r7, r3
 8001b02:	409c      	lsls	r4, r3
 8001b04:	fa20 f202 	lsr.w	r2, r0, r2
 8001b08:	4317      	orrs	r7, r2
 8001b0a:	ea4f 461c 	mov.w	r6, ip, lsr #16
 8001b0e:	fa1f fe8c 	uxth.w	lr, ip
 8001b12:	0c22      	lsrs	r2, r4, #16
 8001b14:	fbb7 f1f6 	udiv	r1, r7, r6
 8001b18:	fb06 7711 	mls	r7, r6, r1, r7
 8001b1c:	fb01 f00e 	mul.w	r0, r1, lr
 8001b20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001b24:	4290      	cmp	r0, r2
 8001b26:	d908      	bls.n	8001b3a <__udivmoddi4+0x5e>
 8001b28:	eb1c 0202 	adds.w	r2, ip, r2
 8001b2c:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8001b30:	d202      	bcs.n	8001b38 <__udivmoddi4+0x5c>
 8001b32:	4290      	cmp	r0, r2
 8001b34:	f200 813c 	bhi.w	8001db0 <__udivmoddi4+0x2d4>
 8001b38:	4639      	mov	r1, r7
 8001b3a:	1a12      	subs	r2, r2, r0
 8001b3c:	b2a4      	uxth	r4, r4
 8001b3e:	fbb2 f0f6 	udiv	r0, r2, r6
 8001b42:	fb06 2210 	mls	r2, r6, r0, r2
 8001b46:	fb00 fe0e 	mul.w	lr, r0, lr
 8001b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001b4e:	45a6      	cmp	lr, r4
 8001b50:	d908      	bls.n	8001b64 <__udivmoddi4+0x88>
 8001b52:	eb1c 0404 	adds.w	r4, ip, r4
 8001b56:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001b5a:	d202      	bcs.n	8001b62 <__udivmoddi4+0x86>
 8001b5c:	45a6      	cmp	lr, r4
 8001b5e:	f200 812a 	bhi.w	8001db6 <__udivmoddi4+0x2da>
 8001b62:	4610      	mov	r0, r2
 8001b64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001b68:	eba4 040e 	sub.w	r4, r4, lr
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	b11d      	cbz	r5, 8001b78 <__udivmoddi4+0x9c>
 8001b70:	40dc      	lsrs	r4, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	e9c5 4300 	strd	r4, r3, [r5]
 8001b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b7c:	428b      	cmp	r3, r1
 8001b7e:	d905      	bls.n	8001b8c <__udivmoddi4+0xb0>
 8001b80:	b10d      	cbz	r5, 8001b86 <__udivmoddi4+0xaa>
 8001b82:	e9c5 0100 	strd	r0, r1, [r5]
 8001b86:	2100      	movs	r1, #0
 8001b88:	4608      	mov	r0, r1
 8001b8a:	e7f5      	b.n	8001b78 <__udivmoddi4+0x9c>
 8001b8c:	fab3 f183 	clz	r1, r3
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d14f      	bne.n	8001c34 <__udivmoddi4+0x158>
 8001b94:	42b3      	cmp	r3, r6
 8001b96:	f0c0 8102 	bcc.w	8001d9e <__udivmoddi4+0x2c2>
 8001b9a:	4282      	cmp	r2, r0
 8001b9c:	f240 80ff 	bls.w	8001d9e <__udivmoddi4+0x2c2>
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	2d00      	cmp	r5, #0
 8001ba4:	d0e8      	beq.n	8001b78 <__udivmoddi4+0x9c>
 8001ba6:	e9c5 4700 	strd	r4, r7, [r5]
 8001baa:	e7e5      	b.n	8001b78 <__udivmoddi4+0x9c>
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 80af 	bne.w	8001d10 <__udivmoddi4+0x234>
 8001bb2:	1a8a      	subs	r2, r1, r2
 8001bb4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001bb8:	fa1f f78c 	uxth.w	r7, ip
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fbb2 f6fe 	udiv	r6, r2, lr
 8001bc2:	fb0e 2016 	mls	r0, lr, r6, r2
 8001bc6:	0c22      	lsrs	r2, r4, #16
 8001bc8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001bcc:	fb07 f006 	mul.w	r0, r7, r6
 8001bd0:	4290      	cmp	r0, r2
 8001bd2:	d90f      	bls.n	8001bf4 <__udivmoddi4+0x118>
 8001bd4:	eb1c 0202 	adds.w	r2, ip, r2
 8001bd8:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 8001bdc:	bf2c      	ite	cs
 8001bde:	f04f 0901 	movcs.w	r9, #1
 8001be2:	f04f 0900 	movcc.w	r9, #0
 8001be6:	4290      	cmp	r0, r2
 8001be8:	d903      	bls.n	8001bf2 <__udivmoddi4+0x116>
 8001bea:	f1b9 0f00 	cmp.w	r9, #0
 8001bee:	f000 80dc 	beq.w	8001daa <__udivmoddi4+0x2ce>
 8001bf2:	4646      	mov	r6, r8
 8001bf4:	1a12      	subs	r2, r2, r0
 8001bf6:	b2a4      	uxth	r4, r4
 8001bf8:	fbb2 f0fe 	udiv	r0, r2, lr
 8001bfc:	fb0e 2210 	mls	r2, lr, r0, r2
 8001c00:	fb00 f707 	mul.w	r7, r0, r7
 8001c04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001c08:	42a7      	cmp	r7, r4
 8001c0a:	d90f      	bls.n	8001c2c <__udivmoddi4+0x150>
 8001c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8001c10:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8001c14:	bf2c      	ite	cs
 8001c16:	f04f 0e01 	movcs.w	lr, #1
 8001c1a:	f04f 0e00 	movcc.w	lr, #0
 8001c1e:	42a7      	cmp	r7, r4
 8001c20:	d903      	bls.n	8001c2a <__udivmoddi4+0x14e>
 8001c22:	f1be 0f00 	cmp.w	lr, #0
 8001c26:	f000 80c9 	beq.w	8001dbc <__udivmoddi4+0x2e0>
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	1be4      	subs	r4, r4, r7
 8001c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001c32:	e79c      	b.n	8001b6e <__udivmoddi4+0x92>
 8001c34:	f1c1 0420 	rsb	r4, r1, #32
 8001c38:	408b      	lsls	r3, r1
 8001c3a:	fa06 fc01 	lsl.w	ip, r6, r1
 8001c3e:	fa00 fe01 	lsl.w	lr, r0, r1
 8001c42:	fa22 f704 	lsr.w	r7, r2, r4
 8001c46:	40e6      	lsrs	r6, r4
 8001c48:	408a      	lsls	r2, r1
 8001c4a:	431f      	orrs	r7, r3
 8001c4c:	fa20 f304 	lsr.w	r3, r0, r4
 8001c50:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001c54:	ea43 030c 	orr.w	r3, r3, ip
 8001c58:	fa1f fc87 	uxth.w	ip, r7
 8001c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001c60:	fbb6 f0f8 	udiv	r0, r6, r8
 8001c64:	fb08 6610 	mls	r6, r8, r0, r6
 8001c68:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8001c6c:	fb00 f90c 	mul.w	r9, r0, ip
 8001c70:	45b1      	cmp	r9, r6
 8001c72:	d90e      	bls.n	8001c92 <__udivmoddi4+0x1b6>
 8001c74:	19be      	adds	r6, r7, r6
 8001c76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8001c7a:	bf2c      	ite	cs
 8001c7c:	f04f 0b01 	movcs.w	fp, #1
 8001c80:	f04f 0b00 	movcc.w	fp, #0
 8001c84:	45b1      	cmp	r9, r6
 8001c86:	d903      	bls.n	8001c90 <__udivmoddi4+0x1b4>
 8001c88:	f1bb 0f00 	cmp.w	fp, #0
 8001c8c:	f000 80a2 	beq.w	8001dd4 <__udivmoddi4+0x2f8>
 8001c90:	4650      	mov	r0, sl
 8001c92:	eba6 0609 	sub.w	r6, r6, r9
 8001c96:	fa1f f983 	uxth.w	r9, r3
 8001c9a:	fbb6 f3f8 	udiv	r3, r6, r8
 8001c9e:	fb08 6613 	mls	r6, r8, r3, r6
 8001ca2:	fb03 fc0c 	mul.w	ip, r3, ip
 8001ca6:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8001caa:	45b4      	cmp	ip, r6
 8001cac:	d90e      	bls.n	8001ccc <__udivmoddi4+0x1f0>
 8001cae:	19be      	adds	r6, r7, r6
 8001cb0:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8001cb4:	bf2c      	ite	cs
 8001cb6:	f04f 0901 	movcs.w	r9, #1
 8001cba:	f04f 0900 	movcc.w	r9, #0
 8001cbe:	45b4      	cmp	ip, r6
 8001cc0:	d903      	bls.n	8001cca <__udivmoddi4+0x1ee>
 8001cc2:	f1b9 0f00 	cmp.w	r9, #0
 8001cc6:	f000 8082 	beq.w	8001dce <__udivmoddi4+0x2f2>
 8001cca:	4643      	mov	r3, r8
 8001ccc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001cd0:	eba6 060c 	sub.w	r6, r6, ip
 8001cd4:	fba0 8c02 	umull	r8, ip, r0, r2
 8001cd8:	4566      	cmp	r6, ip
 8001cda:	4643      	mov	r3, r8
 8001cdc:	46e1      	mov	r9, ip
 8001cde:	d302      	bcc.n	8001ce6 <__udivmoddi4+0x20a>
 8001ce0:	d107      	bne.n	8001cf2 <__udivmoddi4+0x216>
 8001ce2:	45c6      	cmp	lr, r8
 8001ce4:	d205      	bcs.n	8001cf2 <__udivmoddi4+0x216>
 8001ce6:	ebb8 0302 	subs.w	r3, r8, r2
 8001cea:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001cee:	3801      	subs	r0, #1
 8001cf0:	46e1      	mov	r9, ip
 8001cf2:	b15d      	cbz	r5, 8001d0c <__udivmoddi4+0x230>
 8001cf4:	ebbe 0203 	subs.w	r2, lr, r3
 8001cf8:	eb66 0609 	sbc.w	r6, r6, r9
 8001cfc:	fa06 f404 	lsl.w	r4, r6, r4
 8001d00:	fa22 f301 	lsr.w	r3, r2, r1
 8001d04:	40ce      	lsrs	r6, r1
 8001d06:	431c      	orrs	r4, r3
 8001d08:	e9c5 4600 	strd	r4, r6, [r5]
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	e733      	b.n	8001b78 <__udivmoddi4+0x9c>
 8001d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8001d14:	f1c3 0220 	rsb	r2, r3, #32
 8001d18:	4099      	lsls	r1, r3
 8001d1a:	409c      	lsls	r4, r3
 8001d1c:	40d6      	lsrs	r6, r2
 8001d1e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001d22:	fa20 f202 	lsr.w	r2, r0, r2
 8001d26:	fa1f f78c 	uxth.w	r7, ip
 8001d2a:	fbb6 f0fe 	udiv	r0, r6, lr
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	fb0e 6610 	mls	r6, lr, r0, r6
 8001d34:	0c11      	lsrs	r1, r2, #16
 8001d36:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8001d3a:	fb00 f607 	mul.w	r6, r0, r7
 8001d3e:	428e      	cmp	r6, r1
 8001d40:	d90e      	bls.n	8001d60 <__udivmoddi4+0x284>
 8001d42:	eb1c 0101 	adds.w	r1, ip, r1
 8001d46:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8001d4a:	bf2c      	ite	cs
 8001d4c:	f04f 0901 	movcs.w	r9, #1
 8001d50:	f04f 0900 	movcc.w	r9, #0
 8001d54:	428e      	cmp	r6, r1
 8001d56:	d902      	bls.n	8001d5e <__udivmoddi4+0x282>
 8001d58:	f1b9 0f00 	cmp.w	r9, #0
 8001d5c:	d034      	beq.n	8001dc8 <__udivmoddi4+0x2ec>
 8001d5e:	4640      	mov	r0, r8
 8001d60:	1b89      	subs	r1, r1, r6
 8001d62:	b292      	uxth	r2, r2
 8001d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8001d68:	fb0e 1116 	mls	r1, lr, r6, r1
 8001d6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d70:	fb06 f107 	mul.w	r1, r6, r7
 8001d74:	4291      	cmp	r1, r2
 8001d76:	d90e      	bls.n	8001d96 <__udivmoddi4+0x2ba>
 8001d78:	eb1c 0202 	adds.w	r2, ip, r2
 8001d7c:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 8001d80:	bf2c      	ite	cs
 8001d82:	f04f 0901 	movcs.w	r9, #1
 8001d86:	f04f 0900 	movcc.w	r9, #0
 8001d8a:	4291      	cmp	r1, r2
 8001d8c:	d902      	bls.n	8001d94 <__udivmoddi4+0x2b8>
 8001d8e:	f1b9 0f00 	cmp.w	r9, #0
 8001d92:	d016      	beq.n	8001dc2 <__udivmoddi4+0x2e6>
 8001d94:	4646      	mov	r6, r8
 8001d96:	1a52      	subs	r2, r2, r1
 8001d98:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 8001d9c:	e70f      	b.n	8001bbe <__udivmoddi4+0xe2>
 8001d9e:	1a84      	subs	r4, r0, r2
 8001da0:	eb66 0203 	sbc.w	r2, r6, r3
 8001da4:	2001      	movs	r0, #1
 8001da6:	4617      	mov	r7, r2
 8001da8:	e6fb      	b.n	8001ba2 <__udivmoddi4+0xc6>
 8001daa:	3e02      	subs	r6, #2
 8001dac:	4462      	add	r2, ip
 8001dae:	e721      	b.n	8001bf4 <__udivmoddi4+0x118>
 8001db0:	3902      	subs	r1, #2
 8001db2:	4462      	add	r2, ip
 8001db4:	e6c1      	b.n	8001b3a <__udivmoddi4+0x5e>
 8001db6:	4464      	add	r4, ip
 8001db8:	3802      	subs	r0, #2
 8001dba:	e6d3      	b.n	8001b64 <__udivmoddi4+0x88>
 8001dbc:	4464      	add	r4, ip
 8001dbe:	3802      	subs	r0, #2
 8001dc0:	e734      	b.n	8001c2c <__udivmoddi4+0x150>
 8001dc2:	3e02      	subs	r6, #2
 8001dc4:	4462      	add	r2, ip
 8001dc6:	e7e6      	b.n	8001d96 <__udivmoddi4+0x2ba>
 8001dc8:	3802      	subs	r0, #2
 8001dca:	4461      	add	r1, ip
 8001dcc:	e7c8      	b.n	8001d60 <__udivmoddi4+0x284>
 8001dce:	3b02      	subs	r3, #2
 8001dd0:	443e      	add	r6, r7
 8001dd2:	e77b      	b.n	8001ccc <__udivmoddi4+0x1f0>
 8001dd4:	3802      	subs	r0, #2
 8001dd6:	443e      	add	r6, r7
 8001dd8:	e75b      	b.n	8001c92 <__udivmoddi4+0x1b6>
 8001dda:	bf00      	nop

08001ddc <__aeabi_idiv0>:
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b530      	push	{r4, r5, lr}
 8001de2:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de4:	2260      	movs	r2, #96	@ 0x60
 8001de6:	2100      	movs	r1, #0
 8001de8:	a806      	add	r0, sp, #24
 8001dea:	f7fe fa93 	bl	8000314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dee:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001df0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df4:	e9cd 3300 	strd	r3, r3, [sp]
 8001df8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001dfc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e00:	f002 f888 	bl	8003f14 <HAL_PWREx_ControlVoltageScaling>
 8001e04:	b108      	cbz	r0, 8001e0a <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e06:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e08:	e7fe      	b.n	8001e08 <SystemClock_Config+0x28>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001e0a:	2432      	movs	r4, #50	@ 0x32
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e0c:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0e:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e10:	2110      	movs	r1, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001e12:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001e14:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e18:	e9cd 3214 	strd	r3, r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e1c:	e9cd 3319 	strd	r3, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e20:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e22:	910e      	str	r1, [sp, #56]	@ 0x38
 8001e24:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001e26:	2150      	movs	r1, #80	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e28:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e2a:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001e34:	940f      	str	r4, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001e36:	2500      	movs	r5, #0
 8001e38:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001e3a:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e3e:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001e40:	e9cd 451c 	strd	r4, r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001e44:	9118      	str	r1, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e46:	9209      	str	r2, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e48:	f002 fb5a 	bl	8004500 <HAL_RCC_OscConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b108      	cbz	r0, 8001e54 <SystemClock_Config+0x74>
 8001e50:	b672      	cpsid	i
	while (1) {
 8001e52:	e7fe      	b.n	8001e52 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e54:	221f      	movs	r2, #31
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e56:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5a:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e5c:	4668      	mov	r0, sp
 8001e5e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e60:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e64:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e68:	f002 f9e4 	bl	8004234 <HAL_RCC_ClockConfig>
 8001e6c:	b108      	cbz	r0, 8001e72 <SystemClock_Config+0x92>
 8001e6e:	b672      	cpsid	i
	while (1) {
 8001e70:	e7fe      	b.n	8001e70 <SystemClock_Config+0x90>
}
 8001e72:	b01f      	add	sp, #124	@ 0x7c
 8001e74:	bd30      	pop	{r4, r5, pc}
 8001e76:	bf00      	nop

08001e78 <main>:
{
 8001e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e7c:	b091      	sub	sp, #68	@ 0x44
  HAL_Init();
 8001e7e:	f000 fbe3 	bl	8002648 <HAL_Init>
  SystemClock_Config();
 8001e82:	f7ff ffad 	bl	8001de0 <SystemClock_Config>
  HAL_PWREx_EnableVddIO2();
 8001e86:	f002 f8d9 	bl	800403c <HAL_PWREx_EnableVddIO2>
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f002 f894 	bl	8003fb8 <HAL_PWREx_ConfigSupply>
 8001e90:	b108      	cbz	r0, 8001e96 <main+0x1e>
 8001e92:	b672      	cpsid	i
	while (1) {
 8001e94:	e7fe      	b.n	8001e94 <main+0x1c>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001e96:	2104      	movs	r1, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8001e9c:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea0:	4ea9      	ldr	r6, [pc, #676]	@ (8002148 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	900e      	str	r0, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
 8001eb2:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001eb6:	4602      	mov	r2, r0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	400b      	ands	r3, r1
 8001eba:	9303      	str	r3, [sp, #12]
 8001ebc:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001ec2:	48a2      	ldr	r0, [pc, #648]	@ (800214c <main+0x2d4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
 8001ecc:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed0:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	9304      	str	r3, [sp, #16]
 8001ed8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eda:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ede:	2702      	movs	r7, #2
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee4:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
 8001ee8:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001eec:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef4:	9305      	str	r3, [sp, #20]
 8001ef6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001efc:	f04f 0980 	mov.w	r9, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
 8001f08:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	9306      	str	r3, [sp, #24]
 8001f12:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001f14:	f000 ffee 	bl	8002ef4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001f18:	4622      	mov	r2, r4
 8001f1a:	2180      	movs	r1, #128	@ 0x80
 8001f1c:	488c      	ldr	r0, [pc, #560]	@ (8002150 <main+0x2d8>)
 8001f1e:	f000 ffe9 	bl	8002ef4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001f22:	4622      	mov	r2, r4
 8001f24:	21a0      	movs	r1, #160	@ 0xa0
 8001f26:	488b      	ldr	r0, [pc, #556]	@ (8002154 <main+0x2dc>)
 8001f28:	f000 ffe4 	bl	8002ef4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001f2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f30:	4a89      	ldr	r2, [pc, #548]	@ (8002158 <main+0x2e0>)
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001f32:	4887      	ldr	r0, [pc, #540]	@ (8002150 <main+0x2d8>)
 8001f34:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001f36:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001f3c:	f000 fe50 	bl	8002be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001f40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001f44:	4883      	ldr	r0, [pc, #524]	@ (8002154 <main+0x2dc>)
 8001f46:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f48:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f000 fe47 	bl	8002be0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001f52:	487e      	ldr	r0, [pc, #504]	@ (800214c <main+0x2d4>)
 8001f54:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001f56:	e9cd 850a 	strd	r8, r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5a:	e9cd 570c 	strd	r5, r7, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f000 fe3f 	bl	8002be0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001f62:	487b      	ldr	r0, [pc, #492]	@ (8002150 <main+0x2d8>)
 8001f64:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001f66:	e9cd 950a 	strd	r9, r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6a:	e9cd 570c 	strd	r5, r7, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	f000 fe37 	bl	8002be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001f72:	2320      	movs	r3, #32
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001f74:	4877      	ldr	r0, [pc, #476]	@ (8002154 <main+0x2dc>)
 8001f76:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f78:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f000 fe2e 	bl	8002be0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001f84:	4873      	ldr	r0, [pc, #460]	@ (8002154 <main+0x2dc>)
 8001f86:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	e9cd 950a 	strd	r9, r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8c:	e9cd 570c 	strd	r5, r7, [sp, #48]	@ 0x30
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f000 fe26 	bl	8002be0 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001f94:	4871      	ldr	r0, [pc, #452]	@ (800215c <main+0x2e4>)
 8001f96:	4b72      	ldr	r3, [pc, #456]	@ (8002160 <main+0x2e8>)
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f9c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fa0:	f8c0 8018 	str.w	r8, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001fa4:	6285      	str	r5, [r0, #40]	@ 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fa6:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fa8:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fac:	f880 402c 	strb.w	r4, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fb0:	f880 4040 	strb.w	r4, [r0, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001fb4:	6684      	str	r4, [r0, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fb6:	6444      	str	r4, [r0, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001fb8:	6504      	str	r4, [r0, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001fba:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001fbc:	f880 4054 	strb.w	r4, [r0, #84]	@ 0x54
  hadc1.Instance = ADC1;
 8001fc0:	6003      	str	r3, [r0, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fc2:	f000 fb91 	bl	80026e8 <HAL_ADC_Init>
 8001fc6:	b108      	cbz	r0, 8001fcc <main+0x154>
 8001fc8:	b672      	cpsid	i
	while (1) {
 8001fca:	e7fe      	b.n	8001fca <main+0x152>
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001fcc:	f000 ffa2 	bl	8002f14 <HAL_ICACHE_ConfigAssociativityMode>
 8001fd0:	b108      	cbz	r0, 8001fd6 <main+0x15e>
 8001fd2:	b672      	cpsid	i
	while (1) {
 8001fd4:	e7fe      	b.n	8001fd4 <main+0x15c>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001fd6:	f000 ffb1 	bl	8002f3c <HAL_ICACHE_Enable>
 8001fda:	4604      	mov	r4, r0
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	d14e      	bne.n	800207e <main+0x206>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001fe0:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001fe2:	f44f 4800 	mov.w	r8, #32768	@ 0x8000
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe6:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8001fea:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001fee:	f8d6 30a0 	ldr.w	r3, [r6, #160]	@ 0xa0
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	a90a      	add	r1, sp, #40	@ 0x28
 8001ff4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ff8:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001ffc:	f8d6 30a0 	ldr.w	r3, [r6, #160]	@ 0xa0
 8002000:	4854      	ldr	r0, [pc, #336]	@ (8002154 <main+0x2dc>)
 8002002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002006:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002008:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800200a:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8002016:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002020:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8002022:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800202e:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002032:	e9cd 850a 	strd	r8, r5, [sp, #40]	@ 0x28
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800203c:	9b02      	ldr	r3, [sp, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f005 fc0d 	bl	800785c <LL_GPIO_Init>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	a90a      	add	r1, sp, #40	@ 0x28
 8002044:	4847      	ldr	r0, [pc, #284]	@ (8002164 <main+0x2ec>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002046:	e9cd 850a 	strd	r8, r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800204a:	940e      	str	r4, [sp, #56]	@ 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f005 fc06 	bl	800785c <LL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8002050:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance = USART1;
 8002054:	4d44      	ldr	r5, [pc, #272]	@ (8002168 <main+0x2f0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002056:	e9c5 3401 	strd	r3, r4, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800205a:	230c      	movs	r3, #12
 800205c:	616b      	str	r3, [r5, #20]
  huart1.Instance = USART1;
 800205e:	4b43      	ldr	r3, [pc, #268]	@ (800216c <main+0x2f4>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002060:	4628      	mov	r0, r5
  huart1.Init.Parity = UART_PARITY_NONE;
 8002062:	e9c5 4403 	strd	r4, r4, [r5, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002066:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800206a:	e9c5 4408 	strd	r4, r4, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800206e:	62ac      	str	r4, [r5, #40]	@ 0x28
  huart1.Instance = USART1;
 8002070:	602b      	str	r3, [r5, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002072:	f005 fa13 	bl	800749c <HAL_UART_Init>
 8002076:	4601      	mov	r1, r0
 8002078:	b118      	cbz	r0, 8002082 <main+0x20a>
 800207a:	b672      	cpsid	i
	while (1) {
 800207c:	e7fe      	b.n	800207c <main+0x204>
 800207e:	b672      	cpsid	i
 8002080:	e7fe      	b.n	8002080 <main+0x208>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002082:	4628      	mov	r0, r5
 8002084:	f005 fb66 	bl	8007754 <HAL_UARTEx_SetTxFifoThreshold>
 8002088:	4601      	mov	r1, r0
 800208a:	b108      	cbz	r0, 8002090 <main+0x218>
 800208c:	b672      	cpsid	i
	while (1) {
 800208e:	e7fe      	b.n	800208e <main+0x216>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002090:	4628      	mov	r0, r5
 8002092:	f005 fba1 	bl	80077d8 <HAL_UARTEx_SetRxFifoThreshold>
 8002096:	b108      	cbz	r0, 800209c <main+0x224>
 8002098:	b672      	cpsid	i
	while (1) {
 800209a:	e7fe      	b.n	800209a <main+0x222>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800209c:	4628      	mov	r0, r5
 800209e:	f005 fb3b 	bl	8007718 <HAL_UARTEx_DisableFifoMode>
 80020a2:	4603      	mov	r3, r0
 80020a4:	b108      	cbz	r0, 80020aa <main+0x232>
 80020a6:	b672      	cpsid	i
	while (1) {
 80020a8:	e7fe      	b.n	80020a8 <main+0x230>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020aa:	4831      	ldr	r0, [pc, #196]	@ (8002170 <main+0x2f8>)
 80020ac:	4a31      	ldr	r2, [pc, #196]	@ (8002174 <main+0x2fc>)
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80020ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020b2:	6002      	str	r2, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80020b4:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80020b6:	73c3      	strb	r3, [r0, #15]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80020b8:	f8a0 300d 	strh.w	r3, [r0, #13]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020bc:	f8c0 7009 	str.w	r7, [r0, #9]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80020c0:	80c1      	strh	r1, [r0, #6]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80020c2:	7102      	strb	r2, [r0, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80020c4:	f000 ff44 	bl	8002f50 <HAL_PCD_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	b108      	cbz	r0, 80020d0 <main+0x258>
 80020cc:	b672      	cpsid	i
	while (1) {
 80020ce:	e7fe      	b.n	80020ce <main+0x256>
  htim2.Instance = TIM2;
 80020d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  htim2.Init.Period = 4294967295;
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  htim2.Instance = TIM2;
 80020d8:	4c27      	ldr	r4, [pc, #156]	@ (8002178 <main+0x300>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80020de:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e6:	9007      	str	r0, [sp, #28]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e8:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ea:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020ec:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	e9cd 3308 	strd	r3, r3, [sp, #32]
  htim2.Instance = TIM2;
 80020f2:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = 4294967295;
 80020f4:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020f6:	f004 fe27 	bl	8006d48 <HAL_TIM_Base_Init>
 80020fa:	b108      	cbz	r0, 8002100 <main+0x288>
 80020fc:	b672      	cpsid	i
	while (1) {
 80020fe:	e7fe      	b.n	80020fe <main+0x286>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002104:	481c      	ldr	r0, [pc, #112]	@ (8002178 <main+0x300>)
 8002106:	a90a      	add	r1, sp, #40	@ 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800210a:	f004 fef9 	bl	8006f00 <HAL_TIM_ConfigClockSource>
 800210e:	4603      	mov	r3, r0
 8002110:	b108      	cbz	r0, 8002116 <main+0x29e>
 8002112:	b672      	cpsid	i
	while (1) {
 8002114:	e7fe      	b.n	8002114 <main+0x29c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002116:	4818      	ldr	r0, [pc, #96]	@ (8002178 <main+0x300>)
 8002118:	a907      	add	r1, sp, #28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800211e:	f004 ffc3 	bl	80070a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002122:	b108      	cbz	r0, 8002128 <main+0x2b0>
 8002124:	b672      	cpsid	i
	while (1) {
 8002126:	e7fe      	b.n	8002126 <main+0x2ae>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8002128:	4e09      	ldr	r6, [pc, #36]	@ (8002150 <main+0x2d8>)
		printf("%d", diff);
 800212a:	4d14      	ldr	r5, [pc, #80]	@ (800217c <main+0x304>)
		int start = __HAL_TIM_GET_COUNTER(&htim2);
 800212c:	6823      	ldr	r3, [r4, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800212e:	4630      	mov	r0, r6
 8002130:	2180      	movs	r1, #128	@ 0x80
		int start = __HAL_TIM_GET_COUNTER(&htim2);
 8002132:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8002134:	f000 fee4 	bl	8002f00 <HAL_GPIO_TogglePin>
		int diff = __HAL_TIM_GET_COUNTER(&htim2) - start;
 8002138:	6823      	ldr	r3, [r4, #0]
		printf("%d", diff);
 800213a:	4628      	mov	r0, r5
		int diff = __HAL_TIM_GET_COUNTER(&htim2) - start;
 800213c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
		printf("%d", diff);
 800213e:	1bc9      	subs	r1, r1, r7
 8002140:	f7fe f9d0 	bl	80004e4 <iprintf>
	while (1) {
 8002144:	e7f2      	b.n	800212c <main+0x2b4>
 8002146:	bf00      	nop
 8002148:	46020c00 	.word	0x46020c00
 800214c:	42021800 	.word	0x42021800
 8002150:	42020800 	.word	0x42020800
 8002154:	42020400 	.word	0x42020400
 8002158:	10210000 	.word	0x10210000
 800215c:	20000790 	.word	0x20000790
 8002160:	42028000 	.word	0x42028000
 8002164:	42020000 	.word	0x42020000
 8002168:	200006b0 	.word	0x200006b0
 800216c:	40013800 	.word	0x40013800
 8002170:	200001cc 	.word	0x200001cc
 8002174:	42040000 	.word	0x42040000
 8002178:	20000744 	.word	0x20000744
 800217c:	0800805c 	.word	0x0800805c

08002180 <Error_Handler>:
 8002180:	b672      	cpsid	i
	while (1) {
 8002182:	e7fe      	b.n	8002182 <Error_Handler+0x2>

08002184 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_MspInit+0x30>)
{
 8002186:	b500      	push	{lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
{
 800218c:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	f042 0204 	orr.w	r2, r2, #4
 8002192:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_EnableVddA();
 80021a2:	f001 ff53 	bl	800404c <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80021a6:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a8:	b003      	add	sp, #12
 80021aa:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80021ae:	f000 bc53 	b.w	8002a58 <HAL_NVIC_SetPriorityGrouping>
 80021b2:	bf00      	nop
 80021b4:	46020c00 	.word	0x46020c00

080021b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ba:	2100      	movs	r1, #0
{
 80021bc:	4604      	mov	r4, r0
 80021be:	b0b8      	sub	sp, #224	@ 0xe0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	22c0      	movs	r2, #192	@ 0xc0
 80021c2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80021c8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80021cc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ce:	f7fe f8a1 	bl	8000314 <memset>
  if(hadc->Instance==ADC1)
 80021d2:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <HAL_ADC_MspInit+0xa0>)
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80021da:	b038      	add	sp, #224	@ 0xe0
 80021dc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80021de:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8002248 <HAL_ADC_MspInit+0x90>
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80021e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e6:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80021e8:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80021ec:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ee:	f003 f9d3 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 80021f2:	bb20      	cbnz	r0, 800223e <HAL_ADC_MspInit+0x86>
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80021f4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002250 <HAL_ADC_MspInit+0x98>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2400      	movs	r4, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 80021fa:	4b18      	ldr	r3, [pc, #96]	@ (800225c <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80021fc:	4818      	ldr	r0, [pc, #96]	@ (8002260 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80021fe:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002202:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002204:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002208:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800220c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002210:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8002214:	9200      	str	r2, [sp, #0]
 8002216:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002218:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800221c:	f042 0204 	orr.w	r2, r2, #4
 8002220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8002228:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002236:	f000 fcd3 	bl	8002be0 <HAL_GPIO_Init>
}
 800223a:	b038      	add	sp, #224	@ 0xe0
 800223c:	bd10      	pop	{r4, pc}
      Error_Handler();
 800223e:	f7ff ff9f 	bl	8002180 <Error_Handler>
 8002242:	e7d7      	b.n	80021f4 <HAL_ADC_MspInit+0x3c>
 8002244:	f3af 8000 	nop.w
 8002248:	00008000 	.word	0x00008000
 800224c:	00000000 	.word	0x00000000
 8002250:	00000004 	.word	0x00000004
 8002254:	00000003 	.word	0x00000003
 8002258:	42028000 	.word	0x42028000
 800225c:	46020c00 	.word	0x46020c00
 8002260:	42020800 	.word	0x42020800

08002264 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002264:	6803      	ldr	r3, [r0, #0]
 8002266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800226a:	d000      	beq.n	800226e <HAL_TIM_Base_MspInit+0xa>
 800226c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800226e:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <HAL_TIM_Base_MspInit+0x2c>)
{
 8002270:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002272:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800227e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800228a:	b002      	add	sp, #8
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	46020c00 	.word	0x46020c00
 8002294:	00000000 	.word	0x00000000

08002298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002298:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229a:	2100      	movs	r1, #0
{
 800229c:	4604      	mov	r4, r0
 800229e:	b0b8      	sub	sp, #224	@ 0xe0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a0:	22c0      	movs	r2, #192	@ 0xc0
 80022a2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80022a8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80022ac:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ae:	f7fe f831 	bl	8000314 <memset>
  if(huart->Instance==USART1)
 80022b2:	4b21      	ldr	r3, [pc, #132]	@ (8002338 <HAL_UART_MspInit+0xa0>)
 80022b4:	6822      	ldr	r2, [r4, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_UART_MspInit+0x26>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80022ba:	b038      	add	sp, #224	@ 0xe0
 80022bc:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022be:	2201      	movs	r2, #1
 80022c0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c2:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c8:	f003 f966 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 80022cc:	bb40      	cbnz	r0, 8002320 <HAL_UART_MspInit+0x88>
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80022ce:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002328 <HAL_UART_MspInit+0x90>
 80022d2:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8002330 <HAL_UART_MspInit+0x98>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022d6:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d8:	4b18      	ldr	r3, [pc, #96]	@ (800233c <HAL_UART_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	4819      	ldr	r0, [pc, #100]	@ (8002340 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80022dc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80022ea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80022ee:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80022f2:	9200      	str	r2, [sp, #0]
 80022f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8002306:	ed8d 6b02 	vstr	d6, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8002310:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002316:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f000 fc62 	bl	8002be0 <HAL_GPIO_Init>
}
 800231c:	b038      	add	sp, #224	@ 0xe0
 800231e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002320:	f7ff ff2e 	bl	8002180 <Error_Handler>
 8002324:	e7d3      	b.n	80022ce <HAL_UART_MspInit+0x36>
 8002326:	bf00      	nop
 8002328:	00000600 	.word	0x00000600
 800232c:	00000002 	.word	0x00000002
 8002330:	00000002 	.word	0x00000002
 8002334:	00000003 	.word	0x00000003
 8002338:	40013800 	.word	0x40013800
 800233c:	46020c00 	.word	0x46020c00
 8002340:	42020000 	.word	0x42020000
 8002344:	00000000 	.word	0x00000000

08002348 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002348:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234a:	2100      	movs	r1, #0
{
 800234c:	4604      	mov	r4, r0
 800234e:	b0ba      	sub	sp, #232	@ 0xe8
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002350:	22c0      	movs	r2, #192	@ 0xc0
 8002352:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002358:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800235c:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800235e:	f7fd ffd9 	bl	8000314 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002362:	4b33      	ldr	r3, [pc, #204]	@ (8002430 <HAL_PCD_MspInit+0xe8>)
 8002364:	6822      	ldr	r2, [r4, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_PCD_MspInit+0x26>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800236a:	b03a      	add	sp, #232	@ 0xe8
 800236c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800236e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002372:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002374:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002376:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237a:	f003 f90d 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 800237e:	2800      	cmp	r0, #0
 8002380:	d14b      	bne.n	800241a <HAL_PCD_MspInit+0xd2>
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002382:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8002420 <HAL_PCD_MspInit+0xd8>
 8002386:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8002428 <HAL_PCD_MspInit+0xe0>
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800238a:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	4c29      	ldr	r4, [pc, #164]	@ (8002434 <HAL_PCD_MspInit+0xec>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	482a      	ldr	r0, [pc, #168]	@ (8002438 <HAL_PCD_MspInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 800239e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80023a2:	ed8d 6b04 	vstr	d6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80023ae:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80023b2:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f000 fc14 	bl	8002be0 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 80023b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 80023c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80023c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	9b02      	ldr	r3, [sp, #8]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d0:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80023d4:	075b      	lsls	r3, r3, #29
 80023d6:	d41d      	bmi.n	8002414 <HAL_PCD_MspInit+0xcc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80023e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	9303      	str	r3, [sp, #12]
 80023ee:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 80023f0:	f001 fe1c 	bl	800402c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2049      	movs	r0, #73	@ 0x49
 8002404:	4611      	mov	r1, r2
 8002406:	f000 fb39 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800240a:	2049      	movs	r0, #73	@ 0x49
 800240c:	f000 fb72 	bl	8002af4 <HAL_NVIC_EnableIRQ>
}
 8002410:	b03a      	add	sp, #232	@ 0xe8
 8002412:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8002414:	f001 fe0a 	bl	800402c <HAL_PWREx_EnableVddUSB>
 8002418:	e7f2      	b.n	8002400 <HAL_PCD_MspInit+0xb8>
      Error_Handler();
 800241a:	f7ff feb1 	bl	8002180 <Error_Handler>
 800241e:	e7b0      	b.n	8002382 <HAL_PCD_MspInit+0x3a>
 8002420:	00001800 	.word	0x00001800
 8002424:	00000002 	.word	0x00000002
 8002428:	00000000 	.word	0x00000000
 800242c:	00000003 	.word	0x00000003
 8002430:	42040000 	.word	0x42040000
 8002434:	46020c00 	.word	0x46020c00
 8002438:	42020000 	.word	0x42020000

0800243c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler>
 800243e:	bf00      	nop

08002440 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <HardFault_Handler>
 8002442:	bf00      	nop

08002444 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <MemManage_Handler>
 8002446:	bf00      	nop

08002448 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <BusFault_Handler>
 800244a:	bf00      	nop

0800244c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <UsageFault_Handler>
 800244e:	bf00      	nop

08002450 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop

08002458 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800245c:	f000 b920 	b.w	80026a0 <HAL_IncTick>

08002460 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002460:	4801      	ldr	r0, [pc, #4]	@ (8002468 <OTG_FS_IRQHandler+0x8>)
 8002462:	f000 bf93 	b.w	800338c <HAL_PCD_IRQHandler>
 8002466:	bf00      	nop
 8002468:	200001cc 	.word	0x200001cc

0800246c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800246c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246e:	1e16      	subs	r6, r2, #0
 8002470:	dd07      	ble.n	8002482 <_read+0x16>
 8002472:	460c      	mov	r4, r1
 8002474:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002476:	f3af 8000 	nop.w
 800247a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	42a5      	cmp	r5, r4
 8002480:	d1f9      	bne.n	8002476 <_read+0xa>
  }

  return len;
}
 8002482:	4630      	mov	r0, r6
 8002484:	bd70      	pop	{r4, r5, r6, pc}
 8002486:	bf00      	nop

08002488 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002488:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	1e16      	subs	r6, r2, #0
 800248c:	dd07      	ble.n	800249e <_write+0x16>
 800248e:	460c      	mov	r4, r1
 8002490:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8002492:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002496:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	42a5      	cmp	r5, r4
 800249c:	d1f9      	bne.n	8002492 <_write+0xa>
  }
  return len;
}
 800249e:	4630      	mov	r0, r6
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
 80024a2:	bf00      	nop

080024a4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop

080024ac <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80024ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80024b0:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80024b2:	604b      	str	r3, [r1, #4]
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80024b8:	2001      	movs	r0, #1
 80024ba:	4770      	bx	lr

080024bc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80024bc:	2000      	movs	r0, #0
 80024be:	4770      	bx	lr

080024c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	490d      	ldr	r1, [pc, #52]	@ (80024f8 <_sbrk+0x38>)
{
 80024c2:	4603      	mov	r3, r0
 80024c4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c6:	4a0d      	ldr	r2, [pc, #52]	@ (80024fc <_sbrk+0x3c>)
 80024c8:	4c0d      	ldr	r4, [pc, #52]	@ (8002500 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80024ca:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024cc:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80024ce:	b120      	cbz	r0, 80024da <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d0:	4403      	add	r3, r0
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d807      	bhi.n	80024e6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80024d6:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80024d8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80024da:	4c0a      	ldr	r4, [pc, #40]	@ (8002504 <_sbrk+0x44>)
 80024dc:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80024de:	4403      	add	r3, r0
 80024e0:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80024e2:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80024e4:	d9f7      	bls.n	80024d6 <_sbrk+0x16>
    errno = ENOMEM;
 80024e6:	f7fd ff67 	bl	80003b8 <__errno>
 80024ea:	220c      	movs	r2, #12
 80024ec:	4603      	mov	r3, r0
    return (void *)-1;
 80024ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOMEM;
 80024f2:	601a      	str	r2, [r3, #0]
}
 80024f4:	bd10      	pop	{r4, pc}
 80024f6:	bf00      	nop
 80024f8:	2000081c 	.word	0x2000081c
 80024fc:	200c0000 	.word	0x200c0000
 8002500:	00000400 	.word	0x00000400
 8002504:	20000828 	.word	0x20000828

08002508 <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002508:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_MSISON;
 800250a:	2101      	movs	r1, #1
{
 800250c:	b410      	push	{r4}

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800250e:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002512:	480e      	ldr	r0, [pc, #56]	@ (800254c <SystemInit+0x44>)
 8002514:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002518:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800251c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  RCC->CR = RCC_CR_MSISON;
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <SystemInit+0x48>)
 8002522:	6019      	str	r1, [r3, #0]
  RCC->CFGR1 = 0U;
 8002524:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002526:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800252a:	6819      	ldr	r1, [r3, #0]
 800252c:	f021 51a8 	bic.w	r1, r1, #352321536	@ 0x15000000
 8002530:	f421 2110 	bic.w	r1, r1, #589824	@ 0x90000
 8002534:	6019      	str	r1, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800253e:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0U;
 8002540:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002542:	6084      	str	r4, [r0, #8]
  #endif
}
 8002544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed00 	.word	0xe000ed00
 8002550:	46020c00 	.word	0x46020c00

08002554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800258c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002558:	f7ff ffd6 	bl	8002508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800255c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800255e:	e003      	b.n	8002568 <LoopCopyDataInit>

08002560 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002562:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002564:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002566:	3104      	adds	r1, #4

08002568 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002568:	480a      	ldr	r0, [pc, #40]	@ (8002594 <LoopForever+0xa>)
	ldr	r3, =_edata
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <LoopForever+0xe>)
	adds	r2, r0, r1
 800256c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800256e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002570:	d3f6      	bcc.n	8002560 <CopyDataInit>
	ldr	r2, =_sbss
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002574:	e002      	b.n	800257c <LoopFillZerobss>

08002576 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002576:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002578:	f842 3b04 	str.w	r3, [r2], #4

0800257c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800257c:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <LoopForever+0x16>)
	cmp	r2, r3
 800257e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002580:	d3f9      	bcc.n	8002576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002582:	f7fd fe9f 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002586:	f7ff fc77 	bl	8001e78 <main>

0800258a <LoopForever>:

LoopForever:
    b LoopForever
 800258a:	e7fe      	b.n	800258a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800258c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002590:	080081ac 	.word	0x080081ac
	ldr	r0, =_sdata
 8002594:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002598:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 800259c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80025a0:	20000824 	.word	0x20000824

080025a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025a4:	e7fe      	b.n	80025a4 <ADC1_IRQHandler>
	...

080025a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80025aa:	4e24      	ldr	r6, [pc, #144]	@ (800263c <HAL_InitTick+0x94>)
 80025ac:	7832      	ldrb	r2, [r6, #0]
 80025ae:	b1ea      	cbz	r2, 80025ec <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80025b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025b4:	691c      	ldr	r4, [r3, #16]
 80025b6:	4605      	mov	r5, r0
 80025b8:	f014 0404 	ands.w	r4, r4, #4
 80025bc:	d018      	beq.n	80025f0 <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80025be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025c2:	fbb1 f2f2 	udiv	r2, r1, r2
 80025c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <HAL_InitTick+0x98>)
 80025c8:	681c      	ldr	r4, [r3, #0]
 80025ca:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80025ce:	4620      	mov	r0, r4
 80025d0:	f000 fa9e 	bl	8002b10 <HAL_SYSTICK_Config>
 80025d4:	4604      	mov	r4, r0
 80025d6:	b948      	cbnz	r0, 80025ec <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d8:	4602      	mov	r2, r0
 80025da:	4629      	mov	r1, r5
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025e0:	f000 fa4c 	bl	8002a7c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <HAL_InitTick+0x9c>)
 80025e6:	4620      	mov	r0, r4
 80025e8:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80025ec:	2001      	movs	r0, #1
}
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80025f0:	f000 fadc 	bl	8002bac <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 80025f4:	2801      	cmp	r0, #1
 80025f6:	d00d      	beq.n	8002614 <HAL_InitTick+0x6c>
 80025f8:	2802      	cmp	r0, #2
 80025fa:	d015      	beq.n	8002628 <HAL_InitTick+0x80>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d1e6      	bne.n	80025ce <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002600:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002604:	7831      	ldrb	r1, [r6, #0]
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <HAL_InitTick+0x98>)
 8002608:	fbb2 f2f1 	udiv	r2, r2, r1
 800260c:	681c      	ldr	r4, [r3, #0]
 800260e:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 8002612:	e7dc      	b.n	80025ce <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002614:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002618:	7831      	ldrb	r1, [r6, #0]
 800261a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800261e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002622:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8002626:	e7d2      	b.n	80025ce <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002628:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800262c:	7831      	ldrb	r1, [r6, #0]
 800262e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002632:	fbb2 f2f1 	udiv	r2, r2, r1
 8002636:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 800263a:	e7c8      	b.n	80025ce <HAL_InitTick+0x26>
 800263c:	20000060 	.word	0x20000060
 8002640:	2000005c 	.word	0x2000005c
 8002644:	20000064 	.word	0x20000064

08002648 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002648:	4a11      	ldr	r2, [pc, #68]	@ (8002690 <HAL_Init+0x48>)
{
 800264a:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002654:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002656:	f000 f9ff 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800265a:	f001 fd5d 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 800265e:	4603      	mov	r3, r0
 8002660:	4a0c      	ldr	r2, [pc, #48]	@ (8002694 <HAL_Init+0x4c>)
 8002662:	480d      	ldr	r0, [pc, #52]	@ (8002698 <HAL_Init+0x50>)
 8002664:	6a12      	ldr	r2, [r2, #32]
 8002666:	490d      	ldr	r1, [pc, #52]	@ (800269c <HAL_Init+0x54>)
 8002668:	f002 020f 	and.w	r2, r2, #15
 800266c:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800266e:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002670:	40d3      	lsrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002674:	f000 fa5c 	bl	8002b30 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002678:	2000      	movs	r0, #0
 800267a:	f7ff ff95 	bl	80025a8 <HAL_InitTick>
 800267e:	b110      	cbz	r0, 8002686 <HAL_Init+0x3e>
    return HAL_ERROR;
 8002680:	2401      	movs	r4, #1
}
 8002682:	4620      	mov	r0, r4
 8002684:	bd10      	pop	{r4, pc}
 8002686:	4604      	mov	r4, r0
  HAL_MspInit();
 8002688:	f7ff fd7c 	bl	8002184 <HAL_MspInit>
}
 800268c:	4620      	mov	r0, r4
 800268e:	bd10      	pop	{r4, pc}
 8002690:	40022000 	.word	0x40022000
 8002694:	46020c00 	.word	0x46020c00
 8002698:	080080e4 	.word	0x080080e4
 800269c:	2000005c 	.word	0x2000005c

080026a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80026a0:	4a03      	ldr	r2, [pc, #12]	@ (80026b0 <HAL_IncTick+0x10>)
 80026a2:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <HAL_IncTick+0x14>)
 80026a4:	6811      	ldr	r1, [r2, #0]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	440b      	add	r3, r1
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000820 	.word	0x20000820
 80026b4:	20000060 	.word	0x20000060

080026b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80026b8:	4b01      	ldr	r3, [pc, #4]	@ (80026c0 <HAL_GetTick+0x8>)
 80026ba:	6818      	ldr	r0, [r3, #0]
}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000820 	.word	0x20000820

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b538      	push	{r3, r4, r5, lr}
 80026c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fff6 	bl	80026b8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026cc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80026ce:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80026d0:	d002      	beq.n	80026d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d2:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <HAL_Delay+0x20>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d8:	f7ff ffee 	bl	80026b8 <HAL_GetTick>
 80026dc:	1b40      	subs	r0, r0, r5
 80026de:	42a0      	cmp	r0, r4
 80026e0:	d3fa      	bcc.n	80026d8 <HAL_Delay+0x14>
  {
  }
}
 80026e2:	bd38      	pop	{r3, r4, r5, pc}
 80026e4:	20000060 	.word	0x20000060

080026e8 <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026e8:	2800      	cmp	r0, #0
 80026ea:	f000 80cb 	beq.w	8002884 <HAL_ADC_Init+0x19c>
{
 80026ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026f0:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 80026f2:	4604      	mov	r4, r0
{
 80026f4:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026f6:	2d00      	cmp	r5, #0
 80026f8:	f000 80ab 	beq.w	8002852 <HAL_ADC_Init+0x16a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026fc:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026fe:	6893      	ldr	r3, [r2, #8]
 8002700:	009d      	lsls	r5, r3, #2
 8002702:	d505      	bpl.n	8002710 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002704:	6893      	ldr	r3, [r2, #8]
 8002706:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800270a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800270e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002710:	6893      	ldr	r3, [r2, #8]
 8002712:	00d8      	lsls	r0, r3, #3
 8002714:	d419      	bmi.n	800274a <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002716:	4ba5      	ldr	r3, [pc, #660]	@ (80029ac <HAL_ADC_Init+0x2c4>)
 8002718:	48a5      	ldr	r0, [pc, #660]	@ (80029b0 <HAL_ADC_Init+0x2c8>)
 800271a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800271c:	6891      	ldr	r1, [r2, #8]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	fba0 0303 	umull	r0, r3, r0, r3
 8002724:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8002728:	099b      	lsrs	r3, r3, #6
 800272a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800272e:	3301      	adds	r3, #1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002736:	6091      	str	r1, [r2, #8]
 8002738:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800273a:	9b01      	ldr	r3, [sp, #4]
 800273c:	b12b      	cbz	r3, 800274a <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 800273e:	9b01      	ldr	r3, [sp, #4]
 8002740:	3b01      	subs	r3, #1
 8002742:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f9      	bne.n	800273e <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800274a:	6893      	ldr	r3, [r2, #8]
 800274c:	00d9      	lsls	r1, r3, #3
 800274e:	d412      	bmi.n	8002776 <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    tmp_hal_status = HAL_ERROR;
 8002750:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002754:	f043 0310 	orr.w	r3, r3, #16
 8002758:	67a3      	str	r3, [r4, #120]	@ 0x78
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800275c:	4303      	orrs	r3, r0
 800275e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002760:	6893      	ldr	r3, [r2, #8]
 8002762:	075b      	lsls	r3, r3, #29
 8002764:	d50b      	bpl.n	800277e <HAL_ADC_Init+0x96>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002766:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800276a:	f043 0310 	orr.w	r3, r3, #16
 800276e:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 8002770:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8002772:	b003      	add	sp, #12
 8002774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002776:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002778:	2000      	movs	r0, #0
 800277a:	075b      	lsls	r3, r3, #29
 800277c:	d4f3      	bmi.n	8002766 <HAL_ADC_Init+0x7e>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800277e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002780:	f011 0110 	ands.w	r1, r1, #16
 8002784:	d1f0      	bne.n	8002768 <HAL_ADC_Init+0x80>
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002788:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	67a3      	str	r3, [r4, #120]	@ 0x78
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002792:	6893      	ldr	r3, [r2, #8]
 8002794:	07df      	lsls	r7, r3, #31
 8002796:	d562      	bpl.n	800285e <HAL_ADC_Init+0x176>
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002798:	4b86      	ldr	r3, [pc, #536]	@ (80029b4 <HAL_ADC_Init+0x2cc>)
 800279a:	429a      	cmp	r2, r3
 800279c:	f000 8086 	beq.w	80028ac <HAL_ADC_Init+0x1c4>
 80027a0:	68a5      	ldr	r5, [r4, #8]
                    hadc->Init.Overrun                                                    |
 80027a2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027a4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                    hadc->Init.Overrun                                                    |
 80027a8:	432b      	orrs	r3, r5
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027aa:	f894 5024 	ldrb.w	r5, [r4, #36]	@ 0x24
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027ae:	2901      	cmp	r1, #1
                    hadc->Init.Overrun                                                    |
 80027b0:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80027b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027b8:	d103      	bne.n	80027c2 <HAL_ADC_Init+0xda>
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027ba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80027bc:	3901      	subs	r1, #1
 80027be:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80027c4:	b121      	cbz	r1, 80027d0 <HAL_ADC_Init+0xe8>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80027c6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80027c8:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
 80027cc:	4329      	orrs	r1, r5
 80027ce:	430b      	orrs	r3, r1
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80027d0:	68d5      	ldr	r5, [r2, #12]
 80027d2:	4979      	ldr	r1, [pc, #484]	@ (80029b8 <HAL_ADC_Init+0x2d0>)
 80027d4:	4029      	ands	r1, r5
 80027d6:	4319      	orrs	r1, r3
 80027d8:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027da:	6891      	ldr	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027dc:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027de:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	430b      	orrs	r3, r1
 80027e8:	d123      	bne.n	8002832 <HAL_ADC_Init+0x14a>
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80027ea:	4b74      	ldr	r3, [pc, #464]	@ (80029bc <HAL_ADC_Init+0x2d4>)
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027ec:	7f21      	ldrb	r1, [r4, #28]
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80027ee:	429a      	cmp	r2, r3
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80027f0:	68d3      	ldr	r3, [r2, #12]
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80027f2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80027f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027f8:	ea4f 3181 	mov.w	r1, r1, lsl #14
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80027fc:	f023 0303 	bic.w	r3, r3, #3
 8002800:	ea43 0301 	orr.w	r3, r3, r1
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002804:	bf18      	it	ne
 8002806:	006d      	lslne	r5, r5, #1
        if (hadc->Init.GainCompensation != 0UL)
 8002808:	68e1      	ldr	r1, [r4, #12]
        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800280a:	432b      	orrs	r3, r5
 800280c:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800280e:	2900      	cmp	r1, #0
 8002810:	f040 80e8 	bne.w	80029e4 <HAL_ADC_Init+0x2fc>
        if (hadc->Init.OversamplingMode == ENABLE)
 8002814:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8002818:	2b01      	cmp	r3, #1
 800281a:	f000 80ff 	beq.w	8002a1c <HAL_ADC_Init+0x334>
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800281e:	6913      	ldr	r3, [r2, #16]
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002826:	6913      	ldr	r3, [r2, #16]
 8002828:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800282a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800282e:	430b      	orrs	r3, r1
 8002830:	6113      	str	r3, [r2, #16]
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002832:	6923      	ldr	r3, [r4, #16]
 8002834:	2b01      	cmp	r3, #1
 8002836:	f000 80df 	beq.w	80029f8 <HAL_ADC_Init+0x310>
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800283a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800283c:	f023 030f 	bic.w	r3, r3, #15
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002842:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002844:	f023 0303 	bic.w	r3, r3, #3
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800284e:	b003      	add	sp, #12
 8002850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8002852:	f7ff fcb1 	bl	80021b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002856:	67e5      	str	r5, [r4, #124]	@ 0x7c
    hadc->Lock = HAL_UNLOCKED;
 8002858:	f884 5074 	strb.w	r5, [r4, #116]	@ 0x74
 800285c:	e74e      	b.n	80026fc <HAL_ADC_Init+0x14>
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800285e:	4b55      	ldr	r3, [pc, #340]	@ (80029b4 <HAL_ADC_Init+0x2cc>)
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002860:	68a5      	ldr	r5, [r4, #8]
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002862:	429a      	cmp	r2, r3
 8002864:	d010      	beq.n	8002888 <HAL_ADC_Init+0x1a0>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002866:	4955      	ldr	r1, [pc, #340]	@ (80029bc <HAL_ADC_Init+0x2d4>)
 8002868:	428a      	cmp	r2, r1
 800286a:	f000 80cd 	beq.w	8002a08 <HAL_ADC_Init+0x320>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	07db      	lsls	r3, r3, #31
 8002872:	d496      	bmi.n	80027a2 <HAL_ADC_Init+0xba>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002874:	4952      	ldr	r1, [pc, #328]	@ (80029c0 <HAL_ADC_Init+0x2d8>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002876:	680b      	ldr	r3, [r1, #0]
 8002878:	6866      	ldr	r6, [r4, #4]
 800287a:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800287e:	4333      	orrs	r3, r6
 8002880:	600b      	str	r3, [r1, #0]
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002882:	e78e      	b.n	80027a2 <HAL_ADC_Init+0xba>
    return HAL_ERROR;
 8002884:	2001      	movs	r0, #1
}
 8002886:	4770      	bx	lr
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002888:	1e6b      	subs	r3, r5, #1
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 800288a:	68d5      	ldr	r5, [r2, #12]
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800288c:	f003 030c 	and.w	r3, r3, #12
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002890:	f025 050c 	bic.w	r5, r5, #12
 8002894:	432b      	orrs	r3, r5
 8002896:	60d3      	str	r3, [r2, #12]
        MODIFY_REG(ADC4_COMMON->CCR,
 8002898:	f8d2 5308 	ldr.w	r5, [r2, #776]	@ 0x308
 800289c:	6863      	ldr	r3, [r4, #4]
 800289e:	f425 1570 	bic.w	r5, r5, #3932160	@ 0x3c0000
 80028a2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80028a6:	432b      	orrs	r3, r5
 80028a8:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80028ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80028ae:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028b2:	7f27      	ldrb	r7, [r4, #28]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80028b4:	3b00      	subs	r3, #0
 80028b6:	6965      	ldr	r5, [r4, #20]
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80028b8:	ea4f 3246 	mov.w	r2, r6, lsl #13
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80028bc:	bf18      	it	ne
 80028be:	2301      	movne	r3, #1
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028c0:	ea42 3287 	orr.w	r2, r2, r7, lsl #14
 80028c4:	432a      	orrs	r2, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80028c6:	6925      	ldr	r5, [r4, #16]
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80028c8:	f894 7040 	ldrb.w	r7, [r4, #64]	@ 0x40
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80028cc:	2d00      	cmp	r5, #0
 80028ce:	bfa8      	it	ge
 80028d0:	f44f 1c00 	movge.w	ip, #2097152	@ 0x200000
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80028d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80028d8:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 80028dc:	ea42 0203 	orr.w	r2, r2, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80028e4:	bfb8      	it	lt
 80028e6:	f025 4c00 	biclt.w	ip, r5, #2147483648	@ 0x80000000
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028ea:	2b01      	cmp	r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80028ec:	ea42 020c 	orr.w	r2, r2, ip
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f0:	d056      	beq.n	80029a0 <HAL_ADC_Init+0x2b8>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80028f4:	b123      	cbz	r3, 8002900 <HAL_ADC_Init+0x218>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80028f6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80028f8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80028fc:	4333      	orrs	r3, r6
 80028fe:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR1,
 8002900:	4e2c      	ldr	r6, [pc, #176]	@ (80029b4 <HAL_ADC_Init+0x2cc>)
 8002902:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_ADC_Init+0x2dc>)
 8002904:	68f7      	ldr	r7, [r6, #12]
 8002906:	403b      	ands	r3, r7
 8002908:	4313      	orrs	r3, r2
 800290a:	60f3      	str	r3, [r6, #12]
      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800290c:	6a23      	ldr	r3, [r4, #32]
 800290e:	b113      	cbz	r3, 8002916 <HAL_ADC_Init+0x22e>
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002910:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8002912:	433b      	orrs	r3, r7
 8002914:	6473      	str	r3, [r6, #68]	@ 0x44
      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002916:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002918:	b11b      	cbz	r3, 8002922 <HAL_ADC_Init+0x23a>
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800291a:	4e26      	ldr	r6, [pc, #152]	@ (80029b4 <HAL_ADC_Init+0x2cc>)
 800291c:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 800291e:	433b      	orrs	r3, r7
 8002920:	6473      	str	r3, [r6, #68]	@ 0x44
      if (hadc->Init.OversamplingMode == ENABLE)
 8002922:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8002926:	2b01      	cmp	r3, #1
 8002928:	d052      	beq.n	80029d0 <HAL_ADC_Init+0x2e8>
      MODIFY_REG(hadc->Instance->CFGR2,
 800292a:	4e22      	ldr	r6, [pc, #136]	@ (80029b4 <HAL_ADC_Init+0x2cc>)
 800292c:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <HAL_ADC_Init+0x2e0>)
 800292e:	6937      	ldr	r7, [r6, #16]
 8002930:	403b      	ands	r3, r7
 8002932:	430b      	orrs	r3, r1
 8002934:	6133      	str	r3, [r6, #16]
  MODIFY_REG(ADCx->SMPR1,
 8002936:	6973      	ldr	r3, [r6, #20]
 8002938:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800293a:	f023 0307 	bic.w	r3, r3, #7
 800293e:	430b      	orrs	r3, r1
 8002940:	6173      	str	r3, [r6, #20]
 8002942:	6973      	ldr	r3, [r6, #20]
 8002944:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800294a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800294e:	6173      	str	r3, [r6, #20]
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002950:	b30d      	cbz	r5, 8002996 <HAL_ADC_Init+0x2ae>
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002952:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 8002956:	d10d      	bne.n	8002974 <HAL_ADC_Init+0x28c>
        MODIFY_REG(hadc->Instance->CHSELR,
 8002958:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 800295a:	f06f 010f 	mvn.w	r1, #15
 800295e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002960:	3b01      	subs	r3, #1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f003 031c 	and.w	r3, r3, #28
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8002970:	430b      	orrs	r3, r1
 8002972:	62b3      	str	r3, [r6, #40]	@ 0x28
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002974:	490f      	ldr	r1, [pc, #60]	@ (80029b4 <HAL_ADC_Init+0x2cc>)
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_ADC_Init+0x2e4>)
 8002978:	68c9      	ldr	r1, [r1, #12]
 800297a:	400b      	ands	r3, r1
 800297c:	4293      	cmp	r3, r2
 800297e:	d04a      	beq.n	8002a16 <HAL_ADC_Init+0x32e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002980:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002982:	f023 0312 	bic.w	r3, r3, #18
 8002986:	f043 0310 	orr.w	r3, r3, #16
 800298a:	67a3      	str	r3, [r4, #120]	@ 0x78
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	67e3      	str	r3, [r4, #124]	@ 0x7c
        tmp_hal_status = HAL_ERROR;
 8002994:	e6ec      	b.n	8002770 <HAL_ADC_Init+0x88>
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002996:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002998:	f063 030f 	orn	r3, r3, #15
 800299c:	62b3      	str	r3, [r6, #40]	@ 0x28
 800299e:	e7e9      	b.n	8002974 <HAL_ADC_Init+0x28c>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80029a0:	2e00      	cmp	r6, #0
 80029a2:	d14e      	bne.n	8002a42 <HAL_ADC_Init+0x35a>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80029a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029a8:	e7a3      	b.n	80028f2 <HAL_ADC_Init+0x20a>
 80029aa:	bf00      	nop
 80029ac:	2000005c 	.word	0x2000005c
 80029b0:	053e2d63 	.word	0x053e2d63
 80029b4:	46021000 	.word	0x46021000
 80029b8:	fff0c013 	.word	0xfff0c013
 80029bc:	42028000 	.word	0x42028000
 80029c0:	46021308 	.word	0x46021308
 80029c4:	ffde800d 	.word	0xffde800d
 80029c8:	f7fffc02 	.word	0xf7fffc02
 80029cc:	833ffff3 	.word	0x833ffff3
                     hadc->Init.Oversampling.TriggeredMode |
 80029d0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80029d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80029d8:	430b      	orrs	r3, r1
 80029da:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80029dc:	430b      	orrs	r3, r1
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80029de:	f043 0101 	orr.w	r1, r3, #1
 80029e2:	e7a2      	b.n	800292a <HAL_ADC_Init+0x242>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80029e4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80029e6:	f36f 030d 	bfc	r3, #0, #14
 80029ea:	430b      	orrs	r3, r1
 80029ec:	6713      	str	r3, [r2, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80029ee:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80029f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029f4:	6713      	str	r3, [r2, #112]	@ 0x70
}
 80029f6:	e70d      	b.n	8002814 <HAL_ADC_Init+0x12c>
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029f8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80029fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80029fc:	f021 010f 	bic.w	r1, r1, #15
 8002a00:	3b01      	subs	r3, #1
 8002a02:	430b      	orrs	r3, r1
 8002a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a06:	e71c      	b.n	8002842 <HAL_ADC_Init+0x15a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a08:	6893      	ldr	r3, [r2, #8]
 8002a0a:	07de      	lsls	r6, r3, #31
 8002a0c:	f53f aec9 	bmi.w	80027a2 <HAL_ADC_Init+0xba>
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a10:	f501 7142 	add.w	r1, r1, #776	@ 0x308
 8002a14:	e72f      	b.n	8002876 <HAL_ADC_Init+0x18e>
        ADC_CLEAR_ERRORCODE(hadc);
 8002a16:	2300      	movs	r3, #0
 8002a18:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002a1a:	e712      	b.n	8002842 <HAL_ADC_Init+0x15a>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a1c:	e9d4 3117 	ldrd	r3, r1, [r4, #92]	@ 0x5c
 8002a20:	6915      	ldr	r5, [r2, #16]
 8002a22:	430b      	orrs	r3, r1
 8002a24:	490b      	ldr	r1, [pc, #44]	@ (8002a54 <HAL_ADC_Init+0x36c>)
 8002a26:	4029      	ands	r1, r5
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002a30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002a34:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002a36:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6113      	str	r3, [r2, #16]
 8002a40:	e6f1      	b.n	8002826 <HAL_ADC_Init+0x13e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a42:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002a44:	f043 0320 	orr.w	r3, r3, #32
 8002a48:	67a3      	str	r3, [r4, #120]	@ 0x78
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a52:	e74e      	b.n	80028f2 <HAL_ADC_Init+0x20a>
 8002a54:	fc00f81e 	.word	0xfc00f81e

08002a58 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a58:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4906      	ldr	r1, [pc, #24]	@ (8002a78 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a62:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002a74:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7e:	b500      	push	{lr}
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a86:	f1c3 0e07 	rsb	lr, r3, #7
 8002a8a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a92:	bf28      	it	cs
 8002a94:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a98:	f1bc 0f06 	cmp.w	ip, #6
 8002a9c:	d91c      	bls.n	8002ad8 <HAL_NVIC_SetPriority+0x5c>
 8002a9e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002aa6:	fa03 f30c 	lsl.w	r3, r3, ip
 8002aaa:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ab2:	fa03 f30e 	lsl.w	r3, r3, lr
 8002ab6:	ea21 0303 	bic.w	r3, r1, r3
 8002aba:	fa03 f30c 	lsl.w	r3, r3, ip
 8002abe:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac0:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002ac2:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	db0a      	blt.n	8002ade <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002acc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002ad0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ad8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ada:	4694      	mov	ip, r2
 8002adc:	e7e7      	b.n	8002aae <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	4a04      	ldr	r2, [pc, #16]	@ (8002af0 <HAL_NVIC_SetPriority+0x74>)
 8002ae0:	f000 000f 	and.w	r0, r0, #15
 8002ae4:	4402      	add	r2, r0
 8002ae6:	7613      	strb	r3, [r2, #24]
 8002ae8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aec:	e000ed00 	.word	0xe000ed00
 8002af0:	e000ecfc 	.word	0xe000ecfc

08002af4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002af4:	2800      	cmp	r0, #0
 8002af6:	db07      	blt.n	8002b08 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af8:	2301      	movs	r3, #1
 8002afa:	f000 011f 	and.w	r1, r0, #31
 8002afe:	4a03      	ldr	r2, [pc, #12]	@ (8002b0c <HAL_NVIC_EnableIRQ+0x18>)
 8002b00:	0940      	lsrs	r0, r0, #5
 8002b02:	408b      	lsls	r3, r1
 8002b04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b10:	1e43      	subs	r3, r0, #1
 8002b12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b16:	d209      	bcs.n	8002b2c <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002b18:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002b1c:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002b1e:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 8002b20:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002b22:	6913      	ldr	r3, [r2, #16]
 8002b24:	f043 0303 	orr.w	r3, r3, #3
 8002b28:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 8002b2a:	4770      	bx	lr
    return (1UL);
 8002b2c:	2001      	movs	r0, #1
}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002b30:	2804      	cmp	r0, #4
 8002b32:	d813      	bhi.n	8002b5c <HAL_SYSTICK_CLKSourceConfig+0x2c>
 8002b34:	e8df f000 	tbb	[pc, r0]
 8002b38:	12031a2a 	.word	0x12031a2a
 8002b3c:	13          	.byte	0x13
 8002b3d:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b3e:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8002b42:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002b44:	4a18      	ldr	r2, [pc, #96]	@ (8002ba8 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002b4c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8002b50:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002b54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8002b5c:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b5e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002b62:	6913      	ldr	r3, [r2, #16]
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	6113      	str	r3, [r2, #16]
      break;
 8002b6a:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b6c:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8002b70:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002b72:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba8 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b74:	f023 0304 	bic.w	r3, r3, #4
 8002b78:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002b7a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8002b7e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002b82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002b8a:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b8c:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8002b90:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002b92:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002b9a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8002b9e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002ba6:	4770      	bx	lr
 8002ba8:	46020c00 	.word	0x46020c00

08002bac <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002bac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	075b      	lsls	r3, r3, #29
 8002bb4:	d410      	bmi.n	8002bd8 <HAL_SYSTICK_GetCLKSourceConfig+0x2c>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 8002bb8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8002bbc:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000

    switch (systick_rcc_source)
 8002bc0:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8002bc4:	d006      	beq.n	8002bd4 <HAL_SYSTICK_GetCLKSourceConfig+0x28>
 8002bc6:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 8002bca:	fab0 f080 	clz	r0, r0
 8002bce:	0940      	lsrs	r0, r0, #5
 8002bd0:	0040      	lsls	r0, r0, #1
 8002bd2:	4770      	bx	lr
 8002bd4:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 8002bd6:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002bd8:	2004      	movs	r0, #4
 8002bda:	4770      	bx	lr
 8002bdc:	46020c00 	.word	0x46020c00

08002be0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Save GPIO port address */
  p_gpio = GPIOx;

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002be4:	f8d1 b000 	ldr.w	fp, [r1]
{
 8002be8:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002bea:	f1bb 0f00 	cmp.w	fp, #0
 8002bee:	f000 80b4 	beq.w	8002d5a <HAL_GPIO_Init+0x17a>
 8002bf2:	4bbb      	ldr	r3, [pc, #748]	@ (8002ee0 <HAL_GPIO_Init+0x300>)
 8002bf4:	468a      	mov	sl, r1
 8002bf6:	4298      	cmp	r0, r3
 8002bf8:	f000 80be 	beq.w	8002d78 <HAL_GPIO_Init+0x198>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002bfc:	4bb9      	ldr	r3, [pc, #740]	@ (8002ee4 <HAL_GPIO_Init+0x304>)
  uint32_t position = 0U;
 8002bfe:	2200      	movs	r2, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002c00:	ea03 2390 	and.w	r3, r3, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c04:	f04f 0801 	mov.w	r8, #1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002c08:	9303      	str	r3, [sp, #12]
 8002c0a:	e029      	b.n	8002c60 <HAL_GPIO_Init+0x80>
        tmp = p_gpio->MODER;
 8002c0c:	6806      	ldr	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c0e:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c12:	ea05 0c06 	and.w	ip, r5, r6
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c16:	f003 0603 	and.w	r6, r3, #3
 8002c1a:	fa06 f607 	lsl.w	r6, r6, r7
 8002c1e:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->MODER = tmp;
 8002c22:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c24:	d901      	bls.n	8002c2a <HAL_GPIO_Init+0x4a>
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d153      	bne.n	8002cd2 <HAL_GPIO_Init+0xf2>
        tmp = p_gpio->OSPEEDR;
 8002c2a:	6886      	ldr	r6, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002c2c:	091b      	lsrs	r3, r3, #4
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c2e:	ea06 0c05 	and.w	ip, r6, r5
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c32:	f8da 600c 	ldr.w	r6, [sl, #12]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002c36:	4093      	lsls	r3, r2
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c38:	40be      	lsls	r6, r7
 8002c3a:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->OSPEEDR = tmp;
 8002c3e:	6086      	str	r6, [r0, #8]
        tmp = p_gpio->OTYPER;
 8002c40:	6846      	ldr	r6, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002c42:	ea26 0101 	bic.w	r1, r6, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002c46:	430b      	orrs	r3, r1
        p_gpio->OTYPER = tmp;
 8002c48:	6043      	str	r3, [r0, #4]
        tmp = p_gpio->PUPDR;
 8002c4a:	68c1      	ldr	r1, [r0, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002c4c:	f8da 3008 	ldr.w	r3, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002c50:	4029      	ands	r1, r5
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002c52:	40bb      	lsls	r3, r7
 8002c54:	430b      	orrs	r3, r1
        p_gpio->PUPDR = tmp;
 8002c56:	60c3      	str	r3, [r0, #12]
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
      }
    }
    position++;
 8002c58:	3201      	adds	r2, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c5a:	fa3b f302 	lsrs.w	r3, fp, r2
 8002c5e:	d07c      	beq.n	8002d5a <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c60:	fa08 f102 	lsl.w	r1, r8, r2
    if (iocurrent != 0U)
 8002c64:	ea1b 0e01 	ands.w	lr, fp, r1
 8002c68:	d0f6      	beq.n	8002c58 <HAL_GPIO_Init+0x78>
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c6a:	2403      	movs	r4, #3
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002c6c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002c70:	0057      	lsls	r7, r2, #1
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c72:	f023 0610 	bic.w	r6, r3, #16
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c76:	fa04 f507 	lsl.w	r5, r4, r7
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7a:	2e02      	cmp	r6, #2
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c7c:	ea6f 0505 	mvn.w	r5, r5
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c80:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c84:	d1c2      	bne.n	8002c0c <HAL_GPIO_Init+0x2c>
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c86:	fa06 f407 	lsl.w	r4, r6, r7
        tmp = GPIOx->AFR[position >> 3U];
 8002c8a:	08d6      	lsrs	r6, r2, #3
 8002c8c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c90:	9402      	str	r4, [sp, #8]
 8002c92:	4634      	mov	r4, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c94:	f8da 6010 	ldr.w	r6, [sl, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c98:	f002 0c07 	and.w	ip, r2, #7
 8002c9c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002ca0:	f006 060f 	and.w	r6, r6, #15
 8002ca4:	fa06 f60c 	lsl.w	r6, r6, ip
 8002ca8:	9601      	str	r6, [sp, #4]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002caa:	260f      	movs	r6, #15
 8002cac:	fa06 fc0c 	lsl.w	ip, r6, ip
        tmp = GPIOx->AFR[position >> 3U];
 8002cb0:	6a26      	ldr	r6, [r4, #32]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cb2:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002cb6:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002cba:	9e01      	ldr	r6, [sp, #4]
 8002cbc:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8002cc0:	6226      	str	r6, [r4, #32]
        tmp = p_gpio->MODER;
 8002cc2:	6806      	ldr	r6, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cc4:	9c02      	ldr	r4, [sp, #8]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cc6:	ea06 0605 	and.w	r6, r6, r5
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cca:	ea46 0604 	orr.w	r6, r6, r4
        p_gpio->MODER = tmp;
 8002cce:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cd0:	d0ab      	beq.n	8002c2a <HAL_GPIO_Init+0x4a>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd2:	2b12      	cmp	r3, #18
 8002cd4:	d0a9      	beq.n	8002c2a <HAL_GPIO_Init+0x4a>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d0be      	beq.n	8002c58 <HAL_GPIO_Init+0x78>
        tmp = p_gpio->PUPDR;
 8002cda:	68c1      	ldr	r1, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002cdc:	400d      	ands	r5, r1
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002cde:	f8da 1008 	ldr.w	r1, [sl, #8]
 8002ce2:	40b9      	lsls	r1, r7
 8002ce4:	4329      	orrs	r1, r5
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ce6:	00dd      	lsls	r5, r3, #3
        p_gpio->PUPDR = tmp;
 8002ce8:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cea:	d5b5      	bpl.n	8002c58 <HAL_GPIO_Init+0x78>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002cec:	240f      	movs	r4, #15
 8002cee:	f022 0503 	bic.w	r5, r2, #3
 8002cf2:	f105 458c 	add.w	r5, r5, #1174405120	@ 0x46000000
 8002cf6:	f002 0103 	and.w	r1, r2, #3
 8002cfa:	f505 3508 	add.w	r5, r5, #139264	@ 0x22000
 8002cfe:	00c9      	lsls	r1, r1, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8002d00:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002d02:	fa04 f701 	lsl.w	r7, r4, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002d06:	9c03      	ldr	r4, [sp, #12]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002d08:	ea26 0607 	bic.w	r6, r6, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002d0c:	fa04 f101 	lsl.w	r1, r4, r1
 8002d10:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2U] = tmp;
 8002d12:	6629      	str	r1, [r5, #96]	@ 0x60
        tmp = EXTI->RTSR1;
 8002d14:	4974      	ldr	r1, [pc, #464]	@ (8002ee8 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d16:	02dc      	lsls	r4, r3, #11
        tmp &= ~((uint32_t)iocurrent);
 8002d18:	ea6f 050e 	mvn.w	r5, lr
        tmp = EXTI->RTSR1;
 8002d1c:	6809      	ldr	r1, [r1, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d1e:	d428      	bmi.n	8002d72 <HAL_GPIO_Init+0x192>
        tmp &= ~((uint32_t)iocurrent);
 8002d20:	4029      	ands	r1, r5
        EXTI->RTSR1 = tmp;
 8002d22:	4c71      	ldr	r4, [pc, #452]	@ (8002ee8 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d24:	029f      	lsls	r7, r3, #10
        EXTI->RTSR1 = tmp;
 8002d26:	6021      	str	r1, [r4, #0]
        tmp = EXTI->FTSR1;
 8002d28:	6861      	ldr	r1, [r4, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d2a:	d41f      	bmi.n	8002d6c <HAL_GPIO_Init+0x18c>
        tmp &= ~((uint32_t)iocurrent);
 8002d2c:	4029      	ands	r1, r5
        EXTI->FTSR1 = tmp;
 8002d2e:	4c6e      	ldr	r4, [pc, #440]	@ (8002ee8 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d30:	039e      	lsls	r6, r3, #14
        EXTI->FTSR1 = tmp;
 8002d32:	6061      	str	r1, [r4, #4]
        tmp = EXTI->EMR1;
 8002d34:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d38:	d415      	bmi.n	8002d66 <HAL_GPIO_Init+0x186>
        tmp &= ~((uint32_t)iocurrent);
 8002d3a:	4029      	ands	r1, r5
        EXTI->EMR1 = tmp;
 8002d3c:	4c6a      	ldr	r4, [pc, #424]	@ (8002ee8 <HAL_GPIO_Init+0x308>)
 8002d3e:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8002d42:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d46:	03dc      	lsls	r4, r3, #15
 8002d48:	d40a      	bmi.n	8002d60 <HAL_GPIO_Init+0x180>
        tmp &= ~((uint32_t)iocurrent);
 8002d4a:	4029      	ands	r1, r5
        EXTI->IMR1 = tmp;
 8002d4c:	4b66      	ldr	r3, [pc, #408]	@ (8002ee8 <HAL_GPIO_Init+0x308>)
    position++;
 8002d4e:	3201      	adds	r2, #1
        EXTI->IMR1 = tmp;
 8002d50:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d54:	fa3b f302 	lsrs.w	r3, fp, r2
 8002d58:	d182      	bne.n	8002c60 <HAL_GPIO_Init+0x80>
  }
}
 8002d5a:	b005      	add	sp, #20
 8002d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          tmp |= iocurrent;
 8002d60:	ea41 010e 	orr.w	r1, r1, lr
 8002d64:	e7f2      	b.n	8002d4c <HAL_GPIO_Init+0x16c>
          tmp |= iocurrent;
 8002d66:	ea41 010e 	orr.w	r1, r1, lr
 8002d6a:	e7e7      	b.n	8002d3c <HAL_GPIO_Init+0x15c>
          tmp |= iocurrent;
 8002d6c:	ea41 010e 	orr.w	r1, r1, lr
 8002d70:	e7dd      	b.n	8002d2e <HAL_GPIO_Init+0x14e>
          tmp |= iocurrent;
 8002d72:	ea4e 0101 	orr.w	r1, lr, r1
 8002d76:	e7d4      	b.n	8002d22 <HAL_GPIO_Init+0x142>
  uint32_t position = 0U;
 8002d78:	2300      	movs	r3, #0
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002d7a:	2701      	movs	r7, #1
        tmp = EXTI->RTSR1;
 8002d7c:	4e5a      	ldr	r6, [pc, #360]	@ (8002ee8 <HAL_GPIO_Init+0x308>)
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002d7e:	fa07 f103 	lsl.w	r1, r7, r3
    if (iocurrent != 0U)
 8002d82:	ea11 050b 	ands.w	r5, r1, fp
 8002d86:	d059      	beq.n	8002e3c <HAL_GPIO_Init+0x25c>
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002d88:	f04f 090f 	mov.w	r9, #15
        tmp = GPIOx->MODER;
 8002d8c:	6804      	ldr	r4, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002d8e:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002d92:	ea24 0401 	bic.w	r4, r4, r1
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002d96:	4955      	ldr	r1, [pc, #340]	@ (8002eec <HAL_GPIO_Init+0x30c>)
 8002d98:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002d9c:	f002 0101 	and.w	r1, r2, #1
 8002da0:	4099      	lsls	r1, r3
 8002da2:	4321      	orrs	r1, r4
        GPIOx->MODER = tmp;
 8002da4:	6001      	str	r1, [r0, #0]
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002da6:	4952      	ldr	r1, [pc, #328]	@ (8002ef0 <HAL_GPIO_Init+0x310>)
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002da8:	ea4f 0edc 	mov.w	lr, ip, lsr #3
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002dac:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002db0:	f00c 0407 	and.w	r4, ip, #7
 8002db4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002db8:	f8de 8020 	ldr.w	r8, [lr, #32]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002dbc:	00a4      	lsls	r4, r4, #2
 8002dbe:	fa09 f904 	lsl.w	r9, r9, r4
 8002dc2:	ea28 0809 	bic.w	r8, r8, r9
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002dc6:	f04f 090b 	mov.w	r9, #11
 8002dca:	fa09 f404 	lsl.w	r4, r9, r4
 8002dce:	ea44 0408 	orr.w	r4, r4, r8
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002dd2:	f04f 0803 	mov.w	r8, #3
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002dd6:	f8ce 4020 	str.w	r4, [lr, #32]
        tmp = p_gpio->MODER;
 8002dda:	680c      	ldr	r4, [r1, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ddc:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8002de0:	fa08 f80e 	lsl.w	r8, r8, lr
 8002de4:	ea24 0908 	bic.w	r9, r4, r8
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002de8:	2402      	movs	r4, #2
 8002dea:	fa04 f40e 	lsl.w	r4, r4, lr
 8002dee:	ea44 0409 	orr.w	r4, r4, r9
        p_gpio->MODER = tmp;
 8002df2:	600c      	str	r4, [r1, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df4:	1e54      	subs	r4, r2, #1
 8002df6:	2c01      	cmp	r4, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002df8:	ea6f 0808 	mvn.w	r8, r8
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dfc:	d901      	bls.n	8002e02 <HAL_GPIO_Init+0x222>
 8002dfe:	2a11      	cmp	r2, #17
 8002e00:	d123      	bne.n	8002e4a <HAL_GPIO_Init+0x26a>
        tmp = p_gpio->OSPEEDR;
 8002e02:	688c      	ldr	r4, [r1, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002e04:	0912      	lsrs	r2, r2, #4
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002e06:	fa07 f50c 	lsl.w	r5, r7, ip
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002e0a:	fa02 f20c 	lsl.w	r2, r2, ip
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e0e:	ea08 0c04 	and.w	ip, r8, r4
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e12:	f8da 400c 	ldr.w	r4, [sl, #12]
 8002e16:	fa04 f40e 	lsl.w	r4, r4, lr
 8002e1a:	ea44 040c 	orr.w	r4, r4, ip
        p_gpio->OSPEEDR = tmp;
 8002e1e:	608c      	str	r4, [r1, #8]
        tmp = p_gpio->OTYPER;
 8002e20:	684c      	ldr	r4, [r1, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002e22:	ea24 0405 	bic.w	r4, r4, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002e26:	4322      	orrs	r2, r4
        p_gpio->OTYPER = tmp;
 8002e28:	604a      	str	r2, [r1, #4]
        tmp = p_gpio->PUPDR;
 8002e2a:	68cc      	ldr	r4, [r1, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002e2c:	f8da 2008 	ldr.w	r2, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002e30:	ea08 0404 	and.w	r4, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002e34:	fa02 f20e 	lsl.w	r2, r2, lr
 8002e38:	4322      	orrs	r2, r4
        p_gpio->PUPDR = tmp;
 8002e3a:	60ca      	str	r2, [r1, #12]
    position++;
 8002e3c:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e3e:	fa3b f203 	lsrs.w	r2, fp, r3
 8002e42:	d19c      	bne.n	8002d7e <HAL_GPIO_Init+0x19e>
}
 8002e44:	b005      	add	sp, #20
 8002e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e4a:	2a12      	cmp	r2, #18
 8002e4c:	d0d9      	beq.n	8002e02 <HAL_GPIO_Init+0x222>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002e4e:	2a03      	cmp	r2, #3
 8002e50:	d0f4      	beq.n	8002e3c <HAL_GPIO_Init+0x25c>
        tmp = p_gpio->PUPDR;
 8002e52:	68cc      	ldr	r4, [r1, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002e54:	ea08 0804 	and.w	r8, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002e58:	f8da 4008 	ldr.w	r4, [sl, #8]
 8002e5c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002e60:	ea44 0408 	orr.w	r4, r4, r8
        p_gpio->PUPDR = tmp;
 8002e64:	60cc      	str	r4, [r1, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e66:	00d1      	lsls	r1, r2, #3
 8002e68:	d5e8      	bpl.n	8002e3c <HAL_GPIO_Init+0x25c>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e6a:	f04f 080f 	mov.w	r8, #15
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e6e:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8002e72:	f023 0103 	bic.w	r1, r3, #3
 8002e76:	f101 418c 	add.w	r1, r1, #1174405120	@ 0x46000000
 8002e7a:	f501 3108 	add.w	r1, r1, #139264	@ 0x22000
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e7e:	f003 0c03 	and.w	ip, r3, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8002e82:	f8d1 e060 	ldr.w	lr, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e86:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8002e8a:	fa08 f80c 	lsl.w	r8, r8, ip
 8002e8e:	ea2e 0e08 	bic.w	lr, lr, r8
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e92:	fa04 f40c 	lsl.w	r4, r4, ip
 8002e96:	ea44 040e 	orr.w	r4, r4, lr
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e9a:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 8002e9c:	43ec      	mvns	r4, r5
        tmp = EXTI->RTSR1;
 8002e9e:	6831      	ldr	r1, [r6, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ea0:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
        tmp &= ~((uint32_t)iocurrent);
 8002ea4:	bf0c      	ite	eq
 8002ea6:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8002ea8:	4329      	orrne	r1, r5
        EXTI->RTSR1 = tmp;
 8002eaa:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 8002eac:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eae:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8002eb2:	bf0c      	ite	eq
 8002eb4:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8002eb6:	4329      	orrne	r1, r5
        EXTI->FTSR1 = tmp;
 8002eb8:	6071      	str	r1, [r6, #4]
        tmp = EXTI->EMR1;
 8002eba:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ebe:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8002ec2:	bf0c      	ite	eq
 8002ec4:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8002ec6:	4329      	orrne	r1, r5
        EXTI->EMR1 = tmp;
 8002ec8:	f8c6 1084 	str.w	r1, [r6, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8002ecc:	f8d6 1080 	ldr.w	r1, [r6, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed0:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 8002ed2:	bf54      	ite	pl
 8002ed4:	4021      	andpl	r1, r4
          tmp |= iocurrent;
 8002ed6:	4329      	orrmi	r1, r5
        EXTI->IMR1 = tmp;
 8002ed8:	f8c6 1080 	str.w	r1, [r6, #128]	@ 0x80
 8002edc:	e7ae      	b.n	8002e3c <HAL_GPIO_Init+0x25c>
 8002ede:	bf00      	nop
 8002ee0:	46020000 	.word	0x46020000
 8002ee4:	002f7f7f 	.word	0x002f7f7f
 8002ee8:	46022000 	.word	0x46022000
 8002eec:	080080f8 	.word	0x080080f8
 8002ef0:	080080f4 	.word	0x080080f4

08002ef4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ef4:	b10a      	cbz	r2, 8002efa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ef6:	6181      	str	r1, [r0, #24]
 8002ef8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002efa:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop

08002f00 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f00:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f02:	ea01 0203 	and.w	r2, r1, r3
 8002f06:	ea21 0103 	bic.w	r1, r1, r3
 8002f0a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002f0e:	6181      	str	r1, [r0, #24]
}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop

08002f14 <HAL_ICACHE_ConfigAssociativityMode>:

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002f14:	4908      	ldr	r1, [pc, #32]	@ (8002f38 <HAL_ICACHE_ConfigAssociativityMode+0x24>)
 8002f16:	680b      	ldr	r3, [r1, #0]
 8002f18:	f013 0301 	ands.w	r3, r3, #1
 8002f1c:	d10a      	bne.n	8002f34 <HAL_ICACHE_ConfigAssociativityMode+0x20>
 8002f1e:	4602      	mov	r2, r0
{
 8002f20:	b410      	push	{r4}
  {
    status = HAL_ERROR;
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002f22:	680c      	ldr	r4, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	4618      	mov	r0, r3
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002f26:	f024 0304 	bic.w	r3, r4, #4
 8002f2a:	4313      	orrs	r3, r2
  }

  return status;
}
 8002f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002f30:	600b      	str	r3, [r1, #0]
}
 8002f32:	4770      	bx	lr
    status = HAL_ERROR;
 8002f34:	2001      	movs	r0, #1
}
 8002f36:	4770      	bx	lr
 8002f38:	40030400 	.word	0x40030400

08002f3c <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002f3c:	4a03      	ldr	r2, [pc, #12]	@ (8002f4c <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8002f3e:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002f40:	6813      	ldr	r3, [r2, #0]
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40030400 	.word	0x40030400

08002f50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f50:	b530      	push	{r4, r5, lr}
 8002f52:	b083      	sub	sp, #12
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f54:	b308      	cbz	r0, 8002f9a <HAL_PCD_Init+0x4a>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f56:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8002f5a:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8002f5c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f5e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 81e8 	beq.w	8003338 <HAL_PCD_Init+0x3e8>
 8002f68:	4628      	mov	r0, r5

  hpcd->State = HAL_PCD_STATE_BUSY;

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <HAL_PCD_Init+0x54>)
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f6c:	2203      	movs	r2, #3
  if (USBx == USB_OTG_FS)
 8002f6e:	429d      	cmp	r5, r3
  {
    hpcd->Init.dma_enable = 0U;
 8002f70:	bf08      	it	eq
 8002f72:	2300      	moveq	r3, #0
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f74:	f884 2495 	strb.w	r2, [r4, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
 8002f78:	bf08      	it	eq
 8002f7a:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f7c:	f004 fde2 	bl	8007b44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f80:	7c23      	ldrb	r3, [r4, #16]
 8002f82:	1d25      	adds	r5, r4, #4
 8002f84:	f88d 3000 	strb.w	r3, [sp]
 8002f88:	6820      	ldr	r0, [r4, #0]
 8002f8a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002f8e:	f004 fd21 	bl	80079d4 <USB_CoreInit>
 8002f92:	b148      	cbz	r0, 8002fa8 <HAL_PCD_Init+0x58>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f94:	2302      	movs	r3, #2
 8002f96:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8002f9a:	2501      	movs	r5, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	b003      	add	sp, #12
 8002fa0:	bd30      	pop	{r4, r5, pc}
 8002fa2:	bf00      	nop
 8002fa4:	42040000 	.word	0x42040000
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fa8:	4601      	mov	r1, r0
 8002faa:	6820      	ldr	r0, [r4, #0]
 8002fac:	f004 fdd2 	bl	8007b54 <USB_SetCurrentMode>
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d1ef      	bne.n	8002f94 <HAL_PCD_Init+0x44>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb4:	7922      	ldrb	r2, [r4, #4]
 8002fb6:	2a00      	cmp	r2, #0
 8002fb8:	f000 81a5 	beq.w	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->IN_ep[i].num = i;
 8002fbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc0:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fc2:	e9c4 0007 	strd	r0, r0, [r4, #28]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fc6:	85e0      	strh	r0, [r4, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fc8:	7620      	strb	r0, [r4, #24]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fca:	6260      	str	r0, [r4, #36]	@ 0x24
    hpcd->IN_ep[i].num = i;
 8002fcc:	82a3      	strh	r3, [r4, #20]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fce:	f000 81bd 	beq.w	800334c <HAL_PCD_Init+0x3fc>
    hpcd->IN_ep[i].num = i;
 8002fd2:	f240 1301 	movw	r3, #257	@ 0x101
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fd6:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd8:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fda:	e9c4 0010 	strd	r0, r0, [r4, #64]	@ 0x40
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fde:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fe2:	64a0      	str	r0, [r4, #72]	@ 0x48
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fe4:	f8a4 1052 	strh.w	r1, [r4, #82]	@ 0x52
    hpcd->IN_ep[i].num = i;
 8002fe8:	8723      	strh	r3, [r4, #56]	@ 0x38
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fea:	f000 80d5 	beq.w	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 8002fee:	f44f 7381 	mov.w	r3, #258	@ 0x102
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ff2:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff4:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ff6:	e9c4 0019 	strd	r0, r0, [r4, #100]	@ 0x64
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ffa:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ffe:	66e0      	str	r0, [r4, #108]	@ 0x6c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003000:	f8a4 1076 	strh.w	r1, [r4, #118]	@ 0x76
    hpcd->IN_ep[i].num = i;
 8003004:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003008:	f000 80c6 	beq.w	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 800300c:	f240 1303 	movw	r3, #259	@ 0x103
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003010:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003012:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003014:	e9c4 0022 	strd	r0, r0, [r4, #136]	@ 0x88
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003018:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
    hpcd->IN_ep[i].xfer_len = 0U;
 800301c:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003020:	f8a4 109a 	strh.w	r1, [r4, #154]	@ 0x9a
    hpcd->IN_ep[i].num = i;
 8003024:	f8a4 3080 	strh.w	r3, [r4, #128]	@ 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003028:	f000 80b6 	beq.w	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 800302c:	f44f 7382 	mov.w	r3, #260	@ 0x104
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003030:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003032:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003034:	e9c4 002b 	strd	r0, r0, [r4, #172]	@ 0xac
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003038:	f884 00a8 	strb.w	r0, [r4, #168]	@ 0xa8
    hpcd->IN_ep[i].xfer_len = 0U;
 800303c:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003040:	f8a4 10be 	strh.w	r1, [r4, #190]	@ 0xbe
    hpcd->IN_ep[i].num = i;
 8003044:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003048:	f000 80a6 	beq.w	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 800304c:	f240 1305 	movw	r3, #261	@ 0x105
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003050:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003052:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003054:	e9c4 0034 	strd	r0, r0, [r4, #208]	@ 0xd0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003058:	f884 00cc 	strb.w	r0, [r4, #204]	@ 0xcc
    hpcd->IN_ep[i].xfer_len = 0U;
 800305c:	f8c4 00d8 	str.w	r0, [r4, #216]	@ 0xd8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003060:	f8a4 10e2 	strh.w	r1, [r4, #226]	@ 0xe2
    hpcd->IN_ep[i].num = i;
 8003064:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003068:	f000 8096 	beq.w	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 800306c:	f44f 7183 	mov.w	r1, #262	@ 0x106
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003070:	2306      	movs	r3, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003072:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003074:	e9c4 003d 	strd	r0, r0, [r4, #244]	@ 0xf4
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003078:	f884 00f0 	strb.w	r0, [r4, #240]	@ 0xf0
    hpcd->IN_ep[i].xfer_len = 0U;
 800307c:	f8c4 00fc 	str.w	r0, [r4, #252]	@ 0xfc
    hpcd->IN_ep[i].num = i;
 8003080:	f8a4 10ec 	strh.w	r1, [r4, #236]	@ 0xec
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003084:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003088:	f000 8086 	beq.w	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800308c:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 800308e:	f240 1107 	movw	r1, #263	@ 0x107
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003092:	2007      	movs	r0, #7
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003094:	2a08      	cmp	r2, #8
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003096:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
    hpcd->IN_ep[i].tx_fifo_num = i;
 800309a:	f8a4 012a 	strh.w	r0, [r4, #298]	@ 0x12a
    hpcd->IN_ep[i].num = i;
 800309e:	f8a4 1110 	strh.w	r1, [r4, #272]	@ 0x110
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a2:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a6:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030aa:	d075      	beq.n	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 80030ac:	f44f 7184 	mov.w	r1, #264	@ 0x108
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030b0:	2008      	movs	r0, #8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b2:	2a09      	cmp	r2, #9
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030b4:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030b8:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
    hpcd->IN_ep[i].xfer_len = 0U;
 80030bc:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030c0:	f8a4 014e 	strh.w	r0, [r4, #334]	@ 0x14e
    hpcd->IN_ep[i].num = i;
 80030c4:	f8a4 1134 	strh.w	r1, [r4, #308]	@ 0x134
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c8:	d066      	beq.n	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 80030ca:	f240 1109 	movw	r1, #265	@ 0x109
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030ce:	2009      	movs	r0, #9
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d0:	2a0a      	cmp	r2, #10
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030d2:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030d6:	f884 315c 	strb.w	r3, [r4, #348]	@ 0x15c
    hpcd->IN_ep[i].xfer_len = 0U;
 80030da:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030de:	f8a4 0172 	strh.w	r0, [r4, #370]	@ 0x172
    hpcd->IN_ep[i].num = i;
 80030e2:	f8a4 1158 	strh.w	r1, [r4, #344]	@ 0x158
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e6:	d057      	beq.n	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 80030e8:	f44f 7185 	mov.w	r1, #266	@ 0x10a
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030ec:	200a      	movs	r0, #10
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ee:	2a0b      	cmp	r2, #11
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030f0:	e9c4 3361 	strd	r3, r3, [r4, #388]	@ 0x184
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030f4:	f884 3180 	strb.w	r3, [r4, #384]	@ 0x180
    hpcd->IN_ep[i].xfer_len = 0U;
 80030f8:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030fc:	f8a4 0196 	strh.w	r0, [r4, #406]	@ 0x196
    hpcd->IN_ep[i].num = i;
 8003100:	f8a4 117c 	strh.w	r1, [r4, #380]	@ 0x17c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003104:	d048      	beq.n	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 8003106:	f240 110b 	movw	r1, #267	@ 0x10b
    hpcd->IN_ep[i].tx_fifo_num = i;
 800310a:	200b      	movs	r0, #11
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310c:	2a0c      	cmp	r2, #12
    hpcd->IN_ep[i].xfer_buff = 0U;
 800310e:	e9c4 336a 	strd	r3, r3, [r4, #424]	@ 0x1a8
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003112:	f884 31a4 	strb.w	r3, [r4, #420]	@ 0x1a4
    hpcd->IN_ep[i].xfer_len = 0U;
 8003116:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
    hpcd->IN_ep[i].tx_fifo_num = i;
 800311a:	f8a4 01ba 	strh.w	r0, [r4, #442]	@ 0x1ba
    hpcd->IN_ep[i].num = i;
 800311e:	f8a4 11a0 	strh.w	r1, [r4, #416]	@ 0x1a0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003122:	d039      	beq.n	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 8003124:	f44f 7186 	mov.w	r1, #268	@ 0x10c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003128:	200c      	movs	r0, #12
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312a:	2a0d      	cmp	r2, #13
    hpcd->IN_ep[i].xfer_buff = 0U;
 800312c:	e9c4 3373 	strd	r3, r3, [r4, #460]	@ 0x1cc
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003130:	f884 31c8 	strb.w	r3, [r4, #456]	@ 0x1c8
    hpcd->IN_ep[i].xfer_len = 0U;
 8003134:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003138:	f8a4 01de 	strh.w	r0, [r4, #478]	@ 0x1de
    hpcd->IN_ep[i].num = i;
 800313c:	f8a4 11c4 	strh.w	r1, [r4, #452]	@ 0x1c4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003140:	d02a      	beq.n	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 8003142:	f240 110d 	movw	r1, #269	@ 0x10d
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003146:	200d      	movs	r0, #13
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003148:	2a0e      	cmp	r2, #14
    hpcd->IN_ep[i].xfer_buff = 0U;
 800314a:	e9c4 337c 	strd	r3, r3, [r4, #496]	@ 0x1f0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800314e:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
    hpcd->IN_ep[i].xfer_len = 0U;
 8003152:	f8c4 31f8 	str.w	r3, [r4, #504]	@ 0x1f8
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003156:	f8a4 0202 	strh.w	r0, [r4, #514]	@ 0x202
    hpcd->IN_ep[i].num = i;
 800315a:	f8a4 11e8 	strh.w	r1, [r4, #488]	@ 0x1e8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315e:	d01b      	beq.n	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 8003160:	f44f 7187 	mov.w	r1, #270	@ 0x10e
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003164:	200e      	movs	r0, #14
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003166:	2a0f      	cmp	r2, #15
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003168:	e9c4 3385 	strd	r3, r3, [r4, #532]	@ 0x214
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800316c:	f884 3210 	strb.w	r3, [r4, #528]	@ 0x210
    hpcd->IN_ep[i].xfer_len = 0U;
 8003170:	f8c4 321c 	str.w	r3, [r4, #540]	@ 0x21c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003174:	f8a4 0226 	strh.w	r0, [r4, #550]	@ 0x226
    hpcd->IN_ep[i].num = i;
 8003178:	f8a4 120c 	strh.w	r1, [r4, #524]	@ 0x20c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317c:	d00c      	beq.n	8003198 <HAL_PCD_Init+0x248>
    hpcd->IN_ep[i].num = i;
 800317e:	f240 110f 	movw	r1, #271	@ 0x10f
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003182:	e9c4 338e 	strd	r3, r3, [r4, #568]	@ 0x238
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003186:	f884 3234 	strb.w	r3, [r4, #564]	@ 0x234
    hpcd->IN_ep[i].xfer_len = 0U;
 800318a:	f8c4 3240 	str.w	r3, [r4, #576]	@ 0x240
    hpcd->IN_ep[i].tx_fifo_num = i;
 800318e:	230f      	movs	r3, #15
    hpcd->IN_ep[i].num = i;
 8003190:	f8a4 1230 	strh.w	r1, [r4, #560]	@ 0x230
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003194:	f8a4 324a 	strh.w	r3, [r4, #586]	@ 0x24a
    hpcd->OUT_ep[i].num = i;
 8003198:	2300      	movs	r3, #0
 800319a:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319c:	2a02      	cmp	r2, #2
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800319e:	e9c4 3397 	strd	r3, r3, [r4, #604]	@ 0x25c
 80031a2:	e9c4 33a0 	strd	r3, r3, [r4, #640]	@ 0x280
    hpcd->OUT_ep[i].num = i;
 80031a6:	f8a4 3254 	strh.w	r3, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031aa:	f884 3258 	strb.w	r3, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ae:	f8c4 3264 	str.w	r3, [r4, #612]	@ 0x264
    hpcd->OUT_ep[i].num = i;
 80031b2:	f8a4 1278 	strh.w	r1, [r4, #632]	@ 0x278
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031b6:	f884 327c 	strb.w	r3, [r4, #636]	@ 0x27c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ba:	f8c4 3288 	str.w	r3, [r4, #648]	@ 0x288
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031be:	f000 80a2 	beq.w	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 80031c2:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c4:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031c6:	e9c4 33a9 	strd	r3, r3, [r4, #676]	@ 0x2a4
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031ca:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ce:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
    hpcd->OUT_ep[i].num = i;
 80031d2:	f8a4 129c 	strh.w	r1, [r4, #668]	@ 0x29c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d6:	f000 8096 	beq.w	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 80031da:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031dc:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031de:	e9c4 33b2 	strd	r3, r3, [r4, #712]	@ 0x2c8
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e2:	f884 32c4 	strb.w	r3, [r4, #708]	@ 0x2c4
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031e6:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0
    hpcd->OUT_ep[i].num = i;
 80031ea:	f8a4 12c0 	strh.w	r1, [r4, #704]	@ 0x2c0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ee:	f000 808a 	beq.w	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 80031f2:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f4:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031f6:	e9c4 33bb 	strd	r3, r3, [r4, #748]	@ 0x2ec
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031fa:	f884 32e8 	strb.w	r3, [r4, #744]	@ 0x2e8
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031fe:	f8c4 32f4 	str.w	r3, [r4, #756]	@ 0x2f4
    hpcd->OUT_ep[i].num = i;
 8003202:	f8a4 12e4 	strh.w	r1, [r4, #740]	@ 0x2e4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003206:	d07e      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 8003208:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320a:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800320c:	e9c4 33c4 	strd	r3, r3, [r4, #784]	@ 0x310
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003210:	f884 330c 	strb.w	r3, [r4, #780]	@ 0x30c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003214:	f8c4 3318 	str.w	r3, [r4, #792]	@ 0x318
    hpcd->OUT_ep[i].num = i;
 8003218:	f8a4 1308 	strh.w	r1, [r4, #776]	@ 0x308
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321c:	d073      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 800321e:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003220:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003222:	e9c4 33cd 	strd	r3, r3, [r4, #820]	@ 0x334
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003226:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
    hpcd->OUT_ep[i].xfer_len = 0U;
 800322a:	f8c4 333c 	str.w	r3, [r4, #828]	@ 0x33c
    hpcd->OUT_ep[i].num = i;
 800322e:	f8a4 132c 	strh.w	r1, [r4, #812]	@ 0x32c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003232:	d068      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 8003234:	2107      	movs	r1, #7
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003236:	2a08      	cmp	r2, #8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003238:	e9c4 33d6 	strd	r3, r3, [r4, #856]	@ 0x358
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800323c:	f884 3354 	strb.w	r3, [r4, #852]	@ 0x354
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003240:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    hpcd->OUT_ep[i].num = i;
 8003244:	f8a4 1350 	strh.w	r1, [r4, #848]	@ 0x350
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003248:	d05d      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 800324a:	2108      	movs	r1, #8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324c:	2a09      	cmp	r2, #9
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800324e:	e9c4 33df 	strd	r3, r3, [r4, #892]	@ 0x37c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003252:	f884 3378 	strb.w	r3, [r4, #888]	@ 0x378
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003256:	f8c4 3384 	str.w	r3, [r4, #900]	@ 0x384
    hpcd->OUT_ep[i].num = i;
 800325a:	f8a4 1374 	strh.w	r1, [r4, #884]	@ 0x374
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325e:	d052      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 8003260:	2109      	movs	r1, #9
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003262:	2a0a      	cmp	r2, #10
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003264:	e9c4 33e8 	strd	r3, r3, [r4, #928]	@ 0x3a0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003268:	f884 339c 	strb.w	r3, [r4, #924]	@ 0x39c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800326c:	f8c4 33a8 	str.w	r3, [r4, #936]	@ 0x3a8
    hpcd->OUT_ep[i].num = i;
 8003270:	f8a4 1398 	strh.w	r1, [r4, #920]	@ 0x398
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003274:	d047      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 8003276:	210a      	movs	r1, #10
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003278:	2a0b      	cmp	r2, #11
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800327a:	e9c4 33f1 	strd	r3, r3, [r4, #964]	@ 0x3c4
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800327e:	f884 33c0 	strb.w	r3, [r4, #960]	@ 0x3c0
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003282:	f8c4 33cc 	str.w	r3, [r4, #972]	@ 0x3cc
    hpcd->OUT_ep[i].num = i;
 8003286:	f8a4 13bc 	strh.w	r1, [r4, #956]	@ 0x3bc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328a:	d03c      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 800328c:	210b      	movs	r1, #11
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328e:	2a0c      	cmp	r2, #12
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003290:	e9c4 33fa 	strd	r3, r3, [r4, #1000]	@ 0x3e8
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003294:	f884 33e4 	strb.w	r3, [r4, #996]	@ 0x3e4
    hpcd->OUT_ep[i].num = i;
 8003298:	f8a4 13e0 	strh.w	r1, [r4, #992]	@ 0x3e0
    hpcd->OUT_ep[i].xfer_len = 0U;
 800329c:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	d031      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 80032a2:	210c      	movs	r1, #12
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a4:	2a0d      	cmp	r2, #13
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032a6:	f884 3408 	strb.w	r3, [r4, #1032]	@ 0x408
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032aa:	f8c4 340c 	str.w	r3, [r4, #1036]	@ 0x40c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032ae:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032b2:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
    hpcd->OUT_ep[i].num = i;
 80032b6:	f8a4 1404 	strh.w	r1, [r4, #1028]	@ 0x404
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ba:	d024      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 80032bc:	210d      	movs	r1, #13
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032be:	2a0e      	cmp	r2, #14
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032c0:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032c4:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032c8:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032cc:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
    hpcd->OUT_ep[i].num = i;
 80032d0:	f8a4 1428 	strh.w	r1, [r4, #1064]	@ 0x428
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d4:	d017      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 80032d6:	210e      	movs	r1, #14
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d8:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032da:	f884 3450 	strb.w	r3, [r4, #1104]	@ 0x450
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032de:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032e2:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032e6:	f8c4 345c 	str.w	r3, [r4, #1116]	@ 0x45c
    hpcd->OUT_ep[i].num = i;
 80032ea:	f8a4 144c 	strh.w	r1, [r4, #1100]	@ 0x44c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ee:	d00a      	beq.n	8003306 <HAL_PCD_Init+0x3b6>
    hpcd->OUT_ep[i].num = i;
 80032f0:	220f      	movs	r2, #15
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032f2:	f884 3474 	strb.w	r3, [r4, #1140]	@ 0x474
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032f6:	f8c4 3478 	str.w	r3, [r4, #1144]	@ 0x478
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032fa:	f8c4 347c 	str.w	r3, [r4, #1148]	@ 0x47c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032fe:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
    hpcd->OUT_ep[i].num = i;
 8003302:	f8a4 2470 	strh.w	r2, [r4, #1136]	@ 0x470
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003306:	7c23      	ldrb	r3, [r4, #16]
 8003308:	6820      	ldr	r0, [r4, #0]
 800330a:	f88d 3000 	strb.w	r3, [sp]
 800330e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003312:	f004 fc55 	bl	8007bc0 <USB_DevInit>
 8003316:	4605      	mov	r5, r0
 8003318:	2800      	cmp	r0, #0
 800331a:	f47f ae3b 	bne.w	8002f94 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 800331e:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8003320:	7b23      	ldrb	r3, [r4, #12]
  hpcd->USB_Address = 0U;
 8003322:	7460      	strb	r0, [r4, #17]
  if (hpcd->Init.lpm_enable == 1U)
 8003324:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8003326:	f884 2495 	strb.w	r2, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 800332a:	d00b      	beq.n	8003344 <HAL_PCD_Init+0x3f4>
  (void)USB_DevDisconnect(hpcd->Instance);
 800332c:	6820      	ldr	r0, [r4, #0]
 800332e:	f004 fe0f 	bl	8007f50 <USB_DevDisconnect>
}
 8003332:	4628      	mov	r0, r5
 8003334:	b003      	add	sp, #12
 8003336:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003338:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 800333c:	f7ff f804 	bl	8002348 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8003340:	6820      	ldr	r0, [r4, #0]
 8003342:	e612      	b.n	8002f6a <HAL_PCD_Init+0x1a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003344:	4620      	mov	r0, r4
 8003346:	f000 fdcb 	bl	8003ee0 <HAL_PCDEx_ActivateLPM>
 800334a:	e7ef      	b.n	800332c <HAL_PCD_Init+0x3dc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800334c:	e9c4 0097 	strd	r0, r0, [r4, #604]	@ 0x25c
    hpcd->OUT_ep[i].num = i;
 8003350:	f8a4 0254 	strh.w	r0, [r4, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003354:	f884 0258 	strb.w	r0, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003358:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335c:	e7d3      	b.n	8003306 <HAL_PCD_Init+0x3b6>
 800335e:	bf00      	nop

08003360 <HAL_PCD_DataOutStageCallback>:
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <HAL_PCD_DataInStageCallback>:
  * @brief  Data IN stage callback
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <HAL_PCD_SetupStageCallback>:
/**
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop

0800336c <HAL_PCD_SOFCallback>:
/**
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop

08003370 <HAL_PCD_ResetCallback>:
/**
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop

08003374 <HAL_PCD_SuspendCallback>:
/**
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <HAL_PCD_ResumeCallback>:
/**
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop

0800337c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @brief  Incomplete ISO OUT callback.
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop

08003380 <HAL_PCD_ISOINIncompleteCallback>:
  * @brief  Incomplete ISO IN callback.
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <HAL_PCD_ConnectCallback>:
/**
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop

08003388 <HAL_PCD_DisconnectCallback>:
/**
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <HAL_PCD_IRQHandler>:
{
 800338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003390:	6806      	ldr	r6, [r0, #0]
{
 8003392:	4604      	mov	r4, r0
 8003394:	b089      	sub	sp, #36	@ 0x24
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003396:	4630      	mov	r0, r6
 8003398:	f004 fe18 	bl	8007fcc <USB_GetMode>
 800339c:	b110      	cbz	r0, 80033a4 <HAL_PCD_IRQHandler+0x18>
}
 800339e:	b009      	add	sp, #36	@ 0x24
 80033a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033a4:	4605      	mov	r5, r0
 80033a6:	6820      	ldr	r0, [r4, #0]
 80033a8:	f004 fde2 	bl	8007f70 <USB_ReadInterrupts>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d0f6      	beq.n	800339e <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033b0:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033b4:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033b6:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80033ba:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
 80033be:	f506 6300 	add.w	r3, r6, #2048	@ 0x800
 80033c2:	9303      	str	r3, [sp, #12]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033c4:	f004 fdd4 	bl	8007f70 <USB_ReadInterrupts>
 80033c8:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	bf1e      	ittt	ne
 80033d0:	6943      	ldrne	r3, [r0, #20]
 80033d2:	f003 0302 	andne.w	r3, r3, #2
 80033d6:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033d8:	f004 fdca 	bl	8007f70 <USB_ReadInterrupts>
 80033dc:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033e2:	d014      	beq.n	800340e <HAL_PCD_IRQHandler+0x82>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e4:	6983      	ldr	r3, [r0, #24]
 80033e6:	f023 0310 	bic.w	r3, r3, #16
 80033ea:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 80033ec:	6a37      	ldr	r7, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033ee:	f407 13f0 	and.w	r3, r7, #1966080	@ 0x1e0000
 80033f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033f6:	f007 080f 	and.w	r8, r7, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033fa:	f000 83e0 	beq.w	8003bbe <HAL_PCD_IRQHandler+0x832>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003402:	f000 837c 	beq.w	8003afe <HAL_PCD_IRQHandler+0x772>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003406:	6983      	ldr	r3, [r0, #24]
 8003408:	f043 0310 	orr.w	r3, r3, #16
 800340c:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800340e:	f004 fdaf 	bl	8007f70 <USB_ReadInterrupts>
 8003412:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003416:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003418:	f040 82d3 	bne.w	80039c2 <HAL_PCD_IRQHandler+0x636>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800341c:	f004 fda8 	bl	8007f70 <USB_ReadInterrupts>
 8003420:	0347      	lsls	r7, r0, #13
 8003422:	f100 822a 	bmi.w	800387a <HAL_PCD_IRQHandler+0x4ee>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003426:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003428:	f004 fda2 	bl	8007f70 <USB_ReadInterrupts>
 800342c:	2800      	cmp	r0, #0
 800342e:	f2c0 819c 	blt.w	800376a <HAL_PCD_IRQHandler+0x3de>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	f004 fd9c 	bl	8007f70 <USB_ReadInterrupts>
 8003438:	0502      	lsls	r2, r0, #20
 800343a:	f100 8157 	bmi.w	80036ec <HAL_PCD_IRQHandler+0x360>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800343e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003440:	f004 fd96 	bl	8007f70 <USB_ReadInterrupts>
 8003444:	0107      	lsls	r7, r0, #4
 8003446:	d514      	bpl.n	8003472 <HAL_PCD_IRQHandler+0xe6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003448:	6822      	ldr	r2, [r4, #0]
 800344a:	6953      	ldr	r3, [r2, #20]
 800344c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003450:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8003452:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 8304 	bne.w	8003a64 <HAL_PCD_IRQHandler+0x6d8>
        hpcd->LPM_State = LPM_L1;
 800345c:	2101      	movs	r1, #1
 800345e:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003462:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003464:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003466:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800346a:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800346e:	f000 fd4f 	bl	8003f10 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	f004 fd7c 	bl	8007f70 <USB_ReadInterrupts>
 8003478:	04c0      	lsls	r0, r0, #19
 800347a:	f100 81a0 	bmi.w	80037be <HAL_PCD_IRQHandler+0x432>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800347e:	6820      	ldr	r0, [r4, #0]
 8003480:	f004 fd76 	bl	8007f70 <USB_ReadInterrupts>
 8003484:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8003488:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800348a:	f040 8181 	bne.w	8003790 <HAL_PCD_IRQHandler+0x404>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800348e:	f004 fd6f 	bl	8007f70 <USB_ReadInterrupts>
 8003492:	0701      	lsls	r1, r0, #28
 8003494:	f100 81e8 	bmi.w	8003868 <HAL_PCD_IRQHandler+0x4dc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	f004 fd69 	bl	8007f70 <USB_ReadInterrupts>
 800349e:	0602      	lsls	r2, r0, #24
 80034a0:	d571      	bpl.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034a2:	69b3      	ldr	r3, [r6, #24]
 80034a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a8:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034aa:	7923      	ldrb	r3, [r4, #4]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d96a      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034b0:	f894 227b 	ldrb.w	r2, [r4, #635]	@ 0x27b
 80034b4:	2a01      	cmp	r2, #1
 80034b6:	f000 83f1 	beq.w	8003c9c <HAL_PCD_IRQHandler+0x910>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d963      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034be:	f894 229f 	ldrb.w	r2, [r4, #671]	@ 0x29f
 80034c2:	2a01      	cmp	r2, #1
 80034c4:	f000 8405 	beq.w	8003cd2 <HAL_PCD_IRQHandler+0x946>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d95c      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034cc:	f894 22c3 	ldrb.w	r2, [r4, #707]	@ 0x2c3
 80034d0:	2a01      	cmp	r2, #1
 80034d2:	f000 830d 	beq.w	8003af0 <HAL_PCD_IRQHandler+0x764>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d955      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034da:	f894 22e7 	ldrb.w	r2, [r4, #743]	@ 0x2e7
 80034de:	2a01      	cmp	r2, #1
 80034e0:	f000 8320 	beq.w	8003b24 <HAL_PCD_IRQHandler+0x798>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d94e      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034e8:	f894 230b 	ldrb.w	r2, [r4, #779]	@ 0x30b
 80034ec:	2a01      	cmp	r2, #1
 80034ee:	f000 842c 	beq.w	8003d4a <HAL_PCD_IRQHandler+0x9be>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d947      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034f6:	f894 232f 	ldrb.w	r2, [r4, #815]	@ 0x32f
 80034fa:	2a01      	cmp	r2, #1
 80034fc:	f000 8439 	beq.w	8003d72 <HAL_PCD_IRQHandler+0x9e6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003500:	2b07      	cmp	r3, #7
 8003502:	d940      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003504:	f894 2353 	ldrb.w	r2, [r4, #851]	@ 0x353
 8003508:	2a01      	cmp	r2, #1
 800350a:	f000 844b 	beq.w	8003da4 <HAL_PCD_IRQHandler+0xa18>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800350e:	2b08      	cmp	r3, #8
 8003510:	d939      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003512:	f894 2377 	ldrb.w	r2, [r4, #887]	@ 0x377
 8003516:	2a01      	cmp	r2, #1
 8003518:	f000 8458 	beq.w	8003dcc <HAL_PCD_IRQHandler+0xa40>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351c:	2b09      	cmp	r3, #9
 800351e:	d932      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003520:	f894 239b 	ldrb.w	r2, [r4, #923]	@ 0x39b
 8003524:	2a01      	cmp	r2, #1
 8003526:	f000 8465 	beq.w	8003df4 <HAL_PCD_IRQHandler+0xa68>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800352a:	2b0a      	cmp	r3, #10
 800352c:	d92b      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800352e:	f894 23bf 	ldrb.w	r2, [r4, #959]	@ 0x3bf
 8003532:	2a01      	cmp	r2, #1
 8003534:	f000 8472 	beq.w	8003e1c <HAL_PCD_IRQHandler+0xa90>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003538:	2b0b      	cmp	r3, #11
 800353a:	d924      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800353c:	f894 23e3 	ldrb.w	r2, [r4, #995]	@ 0x3e3
 8003540:	2a01      	cmp	r2, #1
 8003542:	f000 847f 	beq.w	8003e44 <HAL_PCD_IRQHandler+0xab8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d91d      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800354a:	f894 2407 	ldrb.w	r2, [r4, #1031]	@ 0x407
 800354e:	2a01      	cmp	r2, #1
 8003550:	f000 8480 	beq.w	8003e54 <HAL_PCD_IRQHandler+0xac8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003554:	2b0d      	cmp	r3, #13
 8003556:	d916      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003558:	f894 242b 	ldrb.w	r2, [r4, #1067]	@ 0x42b
 800355c:	2a01      	cmp	r2, #1
 800355e:	f000 84a0 	beq.w	8003ea2 <HAL_PCD_IRQHandler+0xb16>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003562:	2b0e      	cmp	r3, #14
 8003564:	d90f      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003566:	f894 244f 	ldrb.w	r2, [r4, #1103]	@ 0x44f
 800356a:	2a01      	cmp	r2, #1
 800356c:	f000 84a7 	beq.w	8003ebe <HAL_PCD_IRQHandler+0xb32>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003570:	2b0f      	cmp	r3, #15
 8003572:	d908      	bls.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003574:	f894 3473 	ldrb.w	r3, [r4, #1139]	@ 0x473
 8003578:	2b01      	cmp	r3, #1
 800357a:	d104      	bne.n	8003586 <HAL_PCD_IRQHandler+0x1fa>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	f504 618e 	add.w	r1, r4, #1136	@ 0x470
 8003582:	f004 fc5f 	bl	8007e44 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	f004 fcf2 	bl	8007f70 <USB_ReadInterrupts>
 800358c:	02c3      	lsls	r3, r0, #11
 800358e:	f140 80ab 	bpl.w	80036e8 <HAL_PCD_IRQHandler+0x35c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003592:	7923      	ldrb	r3, [r4, #4]
 8003594:	2b01      	cmp	r3, #1
 8003596:	f240 8089 	bls.w	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800359a:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800359e:	f8d6 1920 	ldr.w	r1, [r6, #2336]	@ 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035a2:	2a01      	cmp	r2, #1
 80035a4:	f000 826d 	beq.w	8003a82 <HAL_PCD_IRQHandler+0x6f6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d97f      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ac:	f894 2060 	ldrb.w	r2, [r4, #96]	@ 0x60
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035b0:	f8d6 1940 	ldr.w	r1, [r6, #2368]	@ 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035b4:	2a01      	cmp	r2, #1
 80035b6:	f000 8277 	beq.w	8003aa8 <HAL_PCD_IRQHandler+0x71c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d976      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035be:	f894 2084 	ldrb.w	r2, [r4, #132]	@ 0x84
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035c2:	f8d6 1960 	ldr.w	r1, [r6, #2400]	@ 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035c6:	2a01      	cmp	r2, #1
 80035c8:	f000 827a 	beq.w	8003ac0 <HAL_PCD_IRQHandler+0x734>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d96d      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035d0:	f894 20a8 	ldrb.w	r2, [r4, #168]	@ 0xa8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035d4:	f8d6 1980 	ldr.w	r1, [r6, #2432]	@ 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035d8:	2a01      	cmp	r2, #1
 80035da:	f000 827d 	beq.w	8003ad8 <HAL_PCD_IRQHandler+0x74c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035de:	2b05      	cmp	r3, #5
 80035e0:	d964      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035e2:	f894 20cc 	ldrb.w	r2, [r4, #204]	@ 0xcc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035e6:	f8d6 19a0 	ldr.w	r1, [r6, #2464]	@ 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ea:	2a01      	cmp	r2, #1
 80035ec:	f000 834a 	beq.w	8003c84 <HAL_PCD_IRQHandler+0x8f8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035f0:	2b06      	cmp	r3, #6
 80035f2:	d95b      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035f4:	f894 20f0 	ldrb.w	r2, [r4, #240]	@ 0xf0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035f8:	f8d6 19c0 	ldr.w	r1, [r6, #2496]	@ 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035fc:	2a01      	cmp	r2, #1
 80035fe:	f000 835c 	beq.w	8003cba <HAL_PCD_IRQHandler+0x92e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003602:	2b07      	cmp	r3, #7
 8003604:	d952      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003606:	f894 2114 	ldrb.w	r2, [r4, #276]	@ 0x114
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800360a:	f8d6 19e0 	ldr.w	r1, [r6, #2528]	@ 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800360e:	2a01      	cmp	r2, #1
 8003610:	f000 8367 	beq.w	8003ce2 <HAL_PCD_IRQHandler+0x956>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003614:	2b08      	cmp	r3, #8
 8003616:	d949      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003618:	f894 2138 	ldrb.w	r2, [r4, #312]	@ 0x138
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800361c:	f8d6 1a00 	ldr.w	r1, [r6, #2560]	@ 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003620:	2a01      	cmp	r2, #1
 8003622:	f000 836a 	beq.w	8003cfa <HAL_PCD_IRQHandler+0x96e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003626:	2b09      	cmp	r3, #9
 8003628:	d940      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800362a:	f894 215c 	ldrb.w	r2, [r4, #348]	@ 0x15c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800362e:	f8d6 1a20 	ldr.w	r1, [r6, #2592]	@ 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003632:	2a01      	cmp	r2, #1
 8003634:	f000 837d 	beq.w	8003d32 <HAL_PCD_IRQHandler+0x9a6>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003638:	2b0a      	cmp	r3, #10
 800363a:	d937      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800363c:	f894 2180 	ldrb.w	r2, [r4, #384]	@ 0x180
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003640:	f8d6 1a40 	ldr.w	r1, [r6, #2624]	@ 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003644:	2a01      	cmp	r2, #1
 8003646:	f000 8388 	beq.w	8003d5a <HAL_PCD_IRQHandler+0x9ce>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800364a:	2b0b      	cmp	r3, #11
 800364c:	d92e      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800364e:	f894 21a4 	ldrb.w	r2, [r4, #420]	@ 0x1a4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003652:	f8d6 1a60 	ldr.w	r1, [r6, #2656]	@ 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003656:	2a01      	cmp	r2, #1
 8003658:	f000 8398 	beq.w	8003d8c <HAL_PCD_IRQHandler+0xa00>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d925      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003660:	f894 21c8 	ldrb.w	r2, [r4, #456]	@ 0x1c8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003664:	f8d6 1a80 	ldr.w	r1, [r6, #2688]	@ 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003668:	2a01      	cmp	r2, #1
 800366a:	f000 83a3 	beq.w	8003db4 <HAL_PCD_IRQHandler+0xa28>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800366e:	2b0d      	cmp	r3, #13
 8003670:	d91c      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003672:	f894 21ec 	ldrb.w	r2, [r4, #492]	@ 0x1ec
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003676:	f8d6 1aa0 	ldr.w	r1, [r6, #2720]	@ 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800367a:	2a01      	cmp	r2, #1
 800367c:	f000 83ae 	beq.w	8003ddc <HAL_PCD_IRQHandler+0xa50>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003680:	2b0e      	cmp	r3, #14
 8003682:	d913      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003684:	f894 2210 	ldrb.w	r2, [r4, #528]	@ 0x210
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003688:	f8d6 1ac0 	ldr.w	r1, [r6, #2752]	@ 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800368c:	2a01      	cmp	r2, #1
 800368e:	f000 83b9 	beq.w	8003e04 <HAL_PCD_IRQHandler+0xa78>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003692:	2b0f      	cmp	r3, #15
 8003694:	d90a      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003696:	f894 2234 	ldrb.w	r2, [r4, #564]	@ 0x234
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800369a:	f8d6 1ae0 	ldr.w	r1, [r6, #2784]	@ 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800369e:	2a01      	cmp	r2, #1
 80036a0:	f000 83c4 	beq.w	8003e2c <HAL_PCD_IRQHandler+0xaa0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d901      	bls.n	80036ac <HAL_PCD_IRQHandler+0x320>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80036a8:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	@ 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	6943      	ldr	r3, [r0, #20]
 80036b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036b4:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036b6:	f004 fc5b 	bl	8007f70 <USB_ReadInterrupts>
 80036ba:	0287      	lsls	r7, r0, #10
 80036bc:	d421      	bmi.n	8003702 <HAL_PCD_IRQHandler+0x376>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036be:	6820      	ldr	r0, [r4, #0]
 80036c0:	f004 fc56 	bl	8007f70 <USB_ReadInterrupts>
 80036c4:	0040      	lsls	r0, r0, #1
 80036c6:	f100 80c6 	bmi.w	8003856 <HAL_PCD_IRQHandler+0x4ca>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	f004 fc50 	bl	8007f70 <USB_ReadInterrupts>
 80036d0:	0741      	lsls	r1, r0, #29
 80036d2:	f57f ae64 	bpl.w	800339e <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036da:	076a      	lsls	r2, r5, #29
 80036dc:	f100 8290 	bmi.w	8003c00 <HAL_PCD_IRQHandler+0x874>
      hpcd->Instance->GOTGINT |= RegVal;
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	432a      	orrs	r2, r5
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	e65a      	b.n	800339e <HAL_PCD_IRQHandler+0x12>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	e7e4      	b.n	80036b6 <HAL_PCD_IRQHandler+0x32a>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	07db      	lsls	r3, r3, #31
 80036f2:	f100 8281 	bmi.w	8003bf8 <HAL_PCD_IRQHandler+0x86c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	6943      	ldr	r3, [r0, #20]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036fe:	6143      	str	r3, [r0, #20]
 8003700:	e69e      	b.n	8003440 <HAL_PCD_IRQHandler+0xb4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003702:	f894 c004 	ldrb.w	ip, [r4, #4]
 8003706:	f1bc 0f01 	cmp.w	ip, #1
 800370a:	d928      	bls.n	800375e <HAL_PCD_IRQHandler+0x3d2>
 800370c:	4623      	mov	r3, r4
 800370e:	2101      	movs	r1, #1
 8003710:	f506 6232 	add.w	r2, r6, #2848	@ 0xb20
 8003714:	e006      	b.n	8003724 <HAL_PCD_IRQHandler+0x398>
 8003716:	3101      	adds	r1, #1
 8003718:	4561      	cmp	r1, ip
 800371a:	f102 0220 	add.w	r2, r2, #32
 800371e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003722:	d01c      	beq.n	800375e <HAL_PCD_IRQHandler+0x3d2>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003724:	f893 027c 	ldrb.w	r0, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003728:	6815      	ldr	r5, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800372a:	2801      	cmp	r0, #1
 800372c:	d1f3      	bne.n	8003716 <HAL_PCD_IRQHandler+0x38a>
 800372e:	2d00      	cmp	r5, #0
 8003730:	daf1      	bge.n	8003716 <HAL_PCD_IRQHandler+0x38a>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003732:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 8003736:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 800373a:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800373e:	42bd      	cmp	r5, r7
 8003740:	d1e9      	bne.n	8003716 <HAL_PCD_IRQHandler+0x38a>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003742:	f883 027b 	strb.w	r0, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003746:	69b0      	ldr	r0, [r6, #24]
 8003748:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800374c:	61b0      	str	r0, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800374e:	6970      	ldr	r0, [r6, #20]
 8003750:	0605      	lsls	r5, r0, #24
 8003752:	d4e0      	bmi.n	8003716 <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003754:	9a03      	ldr	r2, [sp, #12]
 8003756:	6853      	ldr	r3, [r2, #4]
 8003758:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800375c:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	6943      	ldr	r3, [r0, #20]
 8003762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003766:	6143      	str	r3, [r0, #20]
 8003768:	e7aa      	b.n	80036c0 <HAL_PCD_IRQHandler+0x334>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800376a:	9a03      	ldr	r2, [sp, #12]
 800376c:	6853      	ldr	r3, [r2, #4]
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 8003774:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8003778:	2b01      	cmp	r3, #1
 800377a:	f000 818e 	beq.w	8003a9a <HAL_PCD_IRQHandler+0x70e>
        HAL_PCD_ResumeCallback(hpcd);
 800377e:	4620      	mov	r0, r4
 8003780:	f7ff fdfa 	bl	8003378 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	6943      	ldr	r3, [r0, #20]
 8003788:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800378c:	6143      	str	r3, [r0, #20]
 800378e:	e651      	b.n	8003434 <HAL_PCD_IRQHandler+0xa8>
      (void)USB_ActivateSetup(hpcd->Instance);
 8003790:	f004 fc20 	bl	8007fd4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	f004 fb49 	bl	8007e2c <USB_GetDevSpeed>
 800379a:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800379c:	6825      	ldr	r5, [r4, #0]
 800379e:	f001 fb99 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 80037a2:	79e2      	ldrb	r2, [r4, #7]
 80037a4:	4601      	mov	r1, r0
 80037a6:	4628      	mov	r0, r5
 80037a8:	f004 f952 	bl	8007a50 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff fddf 	bl	8003370 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	6943      	ldr	r3, [r0, #20]
 80037b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ba:	6143      	str	r3, [r0, #20]
 80037bc:	e667      	b.n	800348e <HAL_PCD_IRQHandler+0x102>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037be:	9a03      	ldr	r2, [sp, #12]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037c0:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037c2:	6853      	ldr	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037c4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037cc:	f004 fb06 	bl	8007ddc <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d0:	7920      	ldrb	r0, [r4, #4]
 80037d2:	b1d8      	cbz	r0, 800380c <HAL_PCD_IRQHandler+0x480>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037d4:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 80037d8:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
 80037dc:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037de:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e0:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037e2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80037e6:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037e8:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f0:	4285      	cmp	r5, r0
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037f2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80037f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fe:	f103 0320 	add.w	r3, r3, #32
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003802:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8003806:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380a:	d1e7      	bne.n	80037dc <HAL_PCD_IRQHandler+0x450>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800380c:	9a03      	ldr	r2, [sp, #12]
 800380e:	69d3      	ldr	r3, [r2, #28]
 8003810:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003814:	61d3      	str	r3, [r2, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003816:	7be3      	ldrb	r3, [r4, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8127 	beq.w	8003a6c <HAL_PCD_IRQHandler+0x6e0>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800381e:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8003822:	f043 030b 	orr.w	r3, r3, #11
 8003826:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800382a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800382c:	f043 030b 	orr.w	r3, r3, #11
 8003830:	6453      	str	r3, [r2, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003832:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003836:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003838:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800383c:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003840:	79a1      	ldrb	r1, [r4, #6]
 8003842:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003846:	f004 fbd5 	bl	8007ff4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	6943      	ldr	r3, [r0, #20]
 800384e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003852:	6143      	str	r3, [r0, #20]
 8003854:	e614      	b.n	8003480 <HAL_PCD_IRQHandler+0xf4>
      HAL_PCD_ConnectCallback(hpcd);
 8003856:	4620      	mov	r0, r4
 8003858:	f7ff fd94 	bl	8003384 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	6943      	ldr	r3, [r0, #20]
 8003860:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003864:	6143      	str	r3, [r0, #20]
 8003866:	e731      	b.n	80036cc <HAL_PCD_IRQHandler+0x340>
      HAL_PCD_SOFCallback(hpcd);
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff fd7f 	bl	800336c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	6943      	ldr	r3, [r0, #20]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	6143      	str	r3, [r0, #20]
 8003878:	e60f      	b.n	800349a <HAL_PCD_IRQHandler+0x10e>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	f004 fb84 	bl	8007f88 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8003880:	4681      	mov	r9, r0
 8003882:	2800      	cmp	r0, #0
 8003884:	f43f adcf 	beq.w	8003426 <HAL_PCD_IRQHandler+0x9a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003888:	6820      	ldr	r0, [r4, #0]
 800388a:	f506 6710 	add.w	r7, r6, #2304	@ 0x900
 800388e:	e9cd 6504 	strd	r6, r5, [sp, #16]
 8003892:	46a0      	mov	r8, r4
      epnum = 0U;
 8003894:	f04f 0a00 	mov.w	sl, #0
 8003898:	46bb      	mov	fp, r7
 800389a:	4605      	mov	r5, r0
 800389c:	e009      	b.n	80038b2 <HAL_PCD_IRQHandler+0x526>
      while (ep_intr != 0U)
 800389e:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80038a2:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 80038a6:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 80038aa:	f10b 0b20 	add.w	fp, fp, #32
 80038ae:	f000 8142 	beq.w	8003b36 <HAL_PCD_IRQHandler+0x7aa>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038b2:	f019 0f01 	tst.w	r9, #1
 80038b6:	d0f2      	beq.n	800389e <HAL_PCD_IRQHandler+0x512>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038b8:	fa5f f78a 	uxtb.w	r7, sl
 80038bc:	4639      	mov	r1, r7
 80038be:	4628      	mov	r0, r5
 80038c0:	f004 fb74 	bl	8007fac <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038c4:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038c6:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038c8:	d513      	bpl.n	80038f2 <HAL_PCD_IRQHandler+0x566>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038ca:	2001      	movs	r0, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038cc:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038ce:	f00a 010f 	and.w	r1, sl, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038d4:	fa00 f101 	lsl.w	r1, r0, r1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d8:	ea22 0201 	bic.w	r2, r2, r1
 80038dc:	635a      	str	r2, [r3, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038de:	f8cb 0008 	str.w	r0, [fp, #8]
            if (hpcd->Init.dma_enable == 1U)
 80038e2:	79a1      	ldrb	r1, [r4, #6]
 80038e4:	4281      	cmp	r1, r0
 80038e6:	f000 8190 	beq.w	8003c0a <HAL_PCD_IRQHandler+0x87e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038ea:	4639      	mov	r1, r7
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7ff fd39 	bl	8003364 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038f2:	0732      	lsls	r2, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038f4:	bf44      	itt	mi
 80038f6:	2308      	movmi	r3, #8
 80038f8:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038fc:	06f3      	lsls	r3, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038fe:	bf44      	itt	mi
 8003900:	2310      	movmi	r3, #16
 8003902:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003906:	0675      	lsls	r5, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003908:	bf44      	itt	mi
 800390a:	2340      	movmi	r3, #64	@ 0x40
 800390c:	f8cb 3008 	strmi.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003910:	07b0      	lsls	r0, r6, #30
 8003912:	f100 8147 	bmi.w	8003ba4 <HAL_PCD_IRQHandler+0x818>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003916:	0631      	lsls	r1, r6, #24
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003918:	6825      	ldr	r5, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800391a:	d5c0      	bpl.n	800389e <HAL_PCD_IRQHandler+0x512>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800391c:	e9d8 2309 	ldrd	r2, r3, [r8, #36]	@ 0x24
 8003920:	4293      	cmp	r3, r2
 8003922:	d8bc      	bhi.n	800389e <HAL_PCD_IRQHandler+0x512>
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;

  if (len > ep->maxpacket)
 8003924:	f8d8 101c 	ldr.w	r1, [r8, #28]
  len = ep->xfer_len - ep->xfer_count;
 8003928:	eba2 0c03 	sub.w	ip, r2, r3
  if (len > ep->maxpacket)
 800392c:	458c      	cmp	ip, r1
 800392e:	bf28      	it	cs
 8003930:	468c      	movcs	ip, r1
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003932:	f505 6110 	add.w	r1, r5, #2304	@ 0x900
 8003936:	eb01 164a 	add.w	r6, r1, sl, lsl #5
 800393a:	69b0      	ldr	r0, [r6, #24]
  len32b = (len + 3U) / 4U;
 800393c:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003940:	fa1f fe80 	uxth.w	lr, r0
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003944:	ebbe 0f9c 	cmp.w	lr, ip, lsr #2
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003948:	9507      	str	r5, [sp, #28]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800394a:	bf28      	it	cs
 800394c:	f8cd b018 	strcs.w	fp, [sp, #24]
 8003950:	d225      	bcs.n	800399e <HAL_PCD_IRQHandler+0x612>
 8003952:	e193      	b.n	8003c7c <HAL_PCD_IRQHandler+0x8f0>
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003954:	eba2 0b03 	sub.w	fp, r2, r3

    if (len > ep->maxpacket)
 8003958:	f8d8 301c 	ldr.w	r3, [r8, #28]
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800395c:	463a      	mov	r2, r7
    if (len > ep->maxpacket)
 800395e:	459b      	cmp	fp, r3
 8003960:	bf28      	it	cs
 8003962:	469b      	movcs	fp, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003964:	79a3      	ldrb	r3, [r4, #6]
 8003966:	f8d8 1020 	ldr.w	r1, [r8, #32]
 800396a:	4628      	mov	r0, r5
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	fa1f f38b 	uxth.w	r3, fp
 8003972:	f004 fab1 	bl	8007ed8 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8003976:	f8d8 3020 	ldr.w	r3, [r8, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800397a:	69b2      	ldr	r2, [r6, #24]
    ep->xfer_buff  += len;
 800397c:	445b      	add	r3, fp
 800397e:	f8c8 3020 	str.w	r3, [r8, #32]
    ep->xfer_count += len;
 8003982:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003986:	b292      	uxth	r2, r2
    ep->xfer_count += len;
 8003988:	445b      	add	r3, fp
    len32b = (len + 3U) / 4U;
 800398a:	f10b 0b03 	add.w	fp, fp, #3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800398e:	ebb2 0f9b 	cmp.w	r2, fp, lsr #2
    ep->xfer_count += len;
 8003992:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003996:	f0c0 816c 	bcc.w	8003c72 <HAL_PCD_IRQHandler+0x8e6>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800399a:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800399e:	429a      	cmp	r2, r3
 80039a0:	d8d8      	bhi.n	8003954 <HAL_PCD_IRQHandler+0x5c8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039a2:	f8dd b018 	ldr.w	fp, [sp, #24]
 80039a6:	6825      	ldr	r5, [r4, #0]
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039a8:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039aa:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039ac:	f00a 070f 	and.w	r7, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039b0:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
 80039b4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039b8:	40ba      	lsls	r2, r7
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039ba:	ea23 0302 	bic.w	r3, r3, r2
 80039be:	634b      	str	r3, [r1, #52]	@ 0x34
 80039c0:	e76d      	b.n	800389e <HAL_PCD_IRQHandler+0x512>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039c2:	f004 fad9 	bl	8007f78 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80039c6:	4607      	mov	r7, r0
 80039c8:	2800      	cmp	r0, #0
 80039ca:	f000 80b2 	beq.w	8003b32 <HAL_PCD_IRQHandler+0x7a6>
 80039ce:	9504      	str	r5, [sp, #16]
 80039d0:	46a3      	mov	fp, r4
      epnum = 0U;
 80039d2:	f04f 0a00 	mov.w	sl, #0
 80039d6:	4625      	mov	r5, r4
 80039d8:	6820      	ldr	r0, [r4, #0]
 80039da:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 80039de:	e008      	b.n	80039f2 <HAL_PCD_IRQHandler+0x666>
      while (ep_intr != 0U)
 80039e0:	087f      	lsrs	r7, r7, #1
        epnum++;
 80039e2:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 80039e6:	f108 0820 	add.w	r8, r8, #32
 80039ea:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 80039ee:	f000 80a6 	beq.w	8003b3e <HAL_PCD_IRQHandler+0x7b2>
        if ((ep_intr & 0x1U) != 0U)
 80039f2:	07fc      	lsls	r4, r7, #31
 80039f4:	d5f4      	bpl.n	80039e0 <HAL_PCD_IRQHandler+0x654>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039f6:	fa5f f48a 	uxtb.w	r4, sl
 80039fa:	4621      	mov	r1, r4
 80039fc:	f004 facc 	bl	8007f98 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a00:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a04:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a06:	f040 809d 	bne.w	8003b44 <HAL_PCD_IRQHandler+0x7b8>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a0a:	f019 0f08 	tst.w	r9, #8
 8003a0e:	f040 80b8 	bne.w	8003b82 <HAL_PCD_IRQHandler+0x7f6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a12:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a16:	bf1c      	itt	ne
 8003a18:	2210      	movne	r2, #16
 8003a1a:	f8c8 2008 	strne.w	r2, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a1e:	f019 0f02 	tst.w	r9, #2
 8003a22:	d00f      	beq.n	8003a44 <HAL_PCD_IRQHandler+0x6b8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a24:	6972      	ldr	r2, [r6, #20]
 8003a26:	0610      	lsls	r0, r2, #24
 8003a28:	d504      	bpl.n	8003a34 <HAL_PCD_IRQHandler+0x6a8>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a2a:	9b03      	ldr	r3, [sp, #12]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a32:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 8003a34:	f89b 2257 	ldrb.w	r2, [fp, #599]	@ 0x257
 8003a38:	2a01      	cmp	r2, #1
 8003a3a:	f000 8136 	beq.w	8003caa <HAL_PCD_IRQHandler+0x91e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a3e:	2302      	movs	r3, #2
 8003a40:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a44:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a48:	bf1c      	itt	ne
 8003a4a:	2320      	movne	r3, #32
 8003a4c:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a50:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a54:	bf18      	it	ne
 8003a56:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 8003a5a:	6828      	ldr	r0, [r5, #0]
 8003a5c:	bf18      	it	ne
 8003a5e:	f8c8 3008 	strne.w	r3, [r8, #8]
 8003a62:	e7bd      	b.n	80039e0 <HAL_PCD_IRQHandler+0x654>
        HAL_PCD_SuspendCallback(hpcd);
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7ff fc85 	bl	8003374 <HAL_PCD_SuspendCallback>
 8003a6a:	e502      	b.n	8003472 <HAL_PCD_IRQHandler+0xe6>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a6c:	6953      	ldr	r3, [r2, #20]
 8003a6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a72:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003a76:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a78:	6913      	ldr	r3, [r2, #16]
 8003a7a:	f043 030b 	orr.w	r3, r3, #11
 8003a7e:	6113      	str	r3, [r2, #16]
 8003a80:	e6d7      	b.n	8003832 <HAL_PCD_IRQHandler+0x4a6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a82:	2900      	cmp	r1, #0
 8003a84:	f6bf ad90 	bge.w	80035a8 <HAL_PCD_IRQHandler+0x21c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a88:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a8a:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a8e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8003a92:	f004 f9d7 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a96:	7923      	ldrb	r3, [r4, #4]
 8003a98:	e586      	b.n	80035a8 <HAL_PCD_IRQHandler+0x21c>
        hpcd->LPM_State = LPM_L0;
 8003a9a:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a9c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8003a9e:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aa2:	f000 fa35 	bl	8003f10 <HAL_PCDEx_LPM_Callback>
 8003aa6:	e66d      	b.n	8003784 <HAL_PCD_IRQHandler+0x3f8>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aa8:	2900      	cmp	r1, #0
 8003aaa:	f6bf ad86 	bge.w	80035ba <HAL_PCD_IRQHandler+0x22e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003aae:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ab0:	f884 205f 	strb.w	r2, [r4, #95]	@ 0x5f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ab4:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 8003ab8:	f004 f9c4 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abc:	7923      	ldrb	r3, [r4, #4]
 8003abe:	e57c      	b.n	80035ba <HAL_PCD_IRQHandler+0x22e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ac0:	2900      	cmp	r1, #0
 8003ac2:	f6bf ad83 	bge.w	80035cc <HAL_PCD_IRQHandler+0x240>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ac6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ac8:	f884 2083 	strb.w	r2, [r4, #131]	@ 0x83
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003acc:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8003ad0:	f004 f9b8 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad4:	7923      	ldrb	r3, [r4, #4]
 8003ad6:	e579      	b.n	80035cc <HAL_PCD_IRQHandler+0x240>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	f6bf ad80 	bge.w	80035de <HAL_PCD_IRQHandler+0x252>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ade:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ae0:	f884 20a7 	strb.w	r2, [r4, #167]	@ 0xa7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ae4:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 8003ae8:	f004 f9ac 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aec:	7923      	ldrb	r3, [r4, #4]
 8003aee:	e576      	b.n	80035de <HAL_PCD_IRQHandler+0x252>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	f504 7130 	add.w	r1, r4, #704	@ 0x2c0
 8003af6:	f004 f9a5 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003afa:	7923      	ldrb	r3, [r4, #4]
 8003afc:	e4eb      	b.n	80034d6 <HAL_PCD_IRQHandler+0x14a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003afe:	2208      	movs	r2, #8
 8003b00:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8003b04:	4630      	mov	r0, r6
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b06:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b0a:	f004 f9fb 	bl	8007f04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b0e:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 8003b12:	f8d2 1268 	ldr.w	r1, [r2, #616]	@ 0x268
 8003b16:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8003b1a:	440b      	add	r3, r1
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b1c:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b1e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8003b22:	e470      	b.n	8003406 <HAL_PCD_IRQHandler+0x7a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	f504 7139 	add.w	r1, r4, #740	@ 0x2e4
 8003b2a:	f004 f98b 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b2e:	7923      	ldrb	r3, [r4, #4]
 8003b30:	e4d8      	b.n	80034e4 <HAL_PCD_IRQHandler+0x158>
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	e472      	b.n	800341c <HAL_PCD_IRQHandler+0x90>
 8003b36:	4628      	mov	r0, r5
 8003b38:	9e04      	ldr	r6, [sp, #16]
 8003b3a:	9d05      	ldr	r5, [sp, #20]
 8003b3c:	e474      	b.n	8003428 <HAL_PCD_IRQHandler+0x9c>
 8003b3e:	462c      	mov	r4, r5
 8003b40:	9d04      	ldr	r5, [sp, #16]
 8003b42:	e46b      	b.n	800341c <HAL_PCD_IRQHandler+0x90>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b44:	2201      	movs	r2, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b46:	6828      	ldr	r0, [r5, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b48:	f8c8 2008 	str.w	r2, [r8, #8]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8003b4c:	79a9      	ldrb	r1, [r5, #6]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b4e:	f500 6230 	add.w	r2, r0, #2816	@ 0xb00
 8003b52:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8003b56:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b58:	f8d0 e040 	ldr.w	lr, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b5c:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8003b5e:	d07a      	beq.n	8003c56 <HAL_PCD_IRQHandler+0x8ca>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b60:	49c0      	ldr	r1, [pc, #768]	@ (8003e64 <HAL_PCD_IRQHandler+0xad8>)
 8003b62:	458e      	cmp	lr, r1
 8003b64:	f000 80d5 	beq.w	8003d12 <HAL_PCD_IRQHandler+0x986>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b68:	f1ba 0f00 	cmp.w	sl, #0
 8003b6c:	d104      	bne.n	8003b78 <HAL_PCD_IRQHandler+0x7ec>
 8003b6e:	f8d5 2264 	ldr.w	r2, [r5, #612]	@ 0x264
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	f000 819d 	beq.w	8003eb2 <HAL_PCD_IRQHandler+0xb26>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f7ff fbf0 	bl	8003360 <HAL_PCD_DataOutStageCallback>
 8003b80:	e743      	b.n	8003a0a <HAL_PCD_IRQHandler+0x67e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b82:	2208      	movs	r2, #8
 8003b84:	f8c8 2008 	str.w	r2, [r8, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b88:	682a      	ldr	r2, [r5, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b8a:	49b7      	ldr	r1, [pc, #732]	@ (8003e68 <HAL_PCD_IRQHandler+0xadc>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b8c:	6c10      	ldr	r0, [r2, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b92:	eb02 124a 	add.w	r2, r2, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b96:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b98:	6893      	ldr	r3, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b9a:	d849      	bhi.n	8003c30 <HAL_PCD_IRQHandler+0x8a4>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	f7ff fbe3 	bl	8003368 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ba2:	e736      	b.n	8003a12 <HAL_PCD_IRQHandler+0x686>
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ba4:	4651      	mov	r1, sl
 8003ba6:	9804      	ldr	r0, [sp, #16]
 8003ba8:	f004 f918 	bl	8007ddc <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8003bac:	f898 2017 	ldrb.w	r2, [r8, #23]
 8003bb0:	2a01      	cmp	r2, #1
 8003bb2:	f000 80b6 	beq.w	8003d22 <HAL_PCD_IRQHandler+0x996>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f8cb 2008 	str.w	r2, [fp, #8]
 8003bbc:	e6ab      	b.n	8003916 <HAL_PCD_IRQHandler+0x58a>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003bbe:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003bc2:	421f      	tst	r7, r3
 8003bc4:	f43f ac1f 	beq.w	8003406 <HAL_PCD_IRQHandler+0x7a>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bc8:	f3c7 120a 	ubfx	r2, r7, #4, #11
 8003bcc:	4617      	mov	r7, r2
 8003bce:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 8003bd2:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f8d8 1260 	ldr.w	r1, [r8, #608]	@ 0x260
 8003bdc:	f004 f992 	bl	8007f04 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003be0:	f8d8 3260 	ldr.w	r3, [r8, #608]	@ 0x260
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003be4:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003be6:	443b      	add	r3, r7
 8003be8:	f8c8 3260 	str.w	r3, [r8, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bec:	f8d8 3268 	ldr.w	r3, [r8, #616]	@ 0x268
 8003bf0:	443b      	add	r3, r7
 8003bf2:	f8c8 3268 	str.w	r3, [r8, #616]	@ 0x268
 8003bf6:	e406      	b.n	8003406 <HAL_PCD_IRQHandler+0x7a>
        HAL_PCD_SuspendCallback(hpcd);
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f7ff fbbb 	bl	8003374 <HAL_PCD_SuspendCallback>
 8003bfe:	e57a      	b.n	80036f6 <HAL_PCD_IRQHandler+0x36a>
        HAL_PCD_DisconnectCallback(hpcd);
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7ff fbc1 	bl	8003388 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	e56a      	b.n	80036e0 <HAL_PCD_IRQHandler+0x354>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c0a:	e9d8 0207 	ldrd	r0, r2, [r8, #28]
 8003c0e:	4402      	add	r2, r0
 8003c10:	f8c8 2020 	str.w	r2, [r8, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c14:	f1ba 0f00 	cmp.w	sl, #0
 8003c18:	f47f ae67 	bne.w	80038ea <HAL_PCD_IRQHandler+0x55e>
 8003c1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003c1e:	2a00      	cmp	r2, #0
 8003c20:	f47f ae63 	bne.w	80038ea <HAL_PCD_IRQHandler+0x55e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c24:	6820      	ldr	r0, [r4, #0]
 8003c26:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003c2a:	f004 f9e3 	bl	8007ff4 <USB_EP0_OutStart>
 8003c2e:	e65c      	b.n	80038ea <HAL_PCD_IRQHandler+0x55e>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c30:	041b      	lsls	r3, r3, #16
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c32:	bf48      	it	mi
 8003c34:	f44f 4100 	movmi.w	r1, #32768	@ 0x8000
  HAL_PCD_SetupStageCallback(hpcd);
 8003c38:	4628      	mov	r0, r5
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c3a:	bf48      	it	mi
 8003c3c:	6091      	strmi	r1, [r2, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8003c3e:	f7ff fb93 	bl	8003368 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c42:	79a9      	ldrb	r1, [r5, #6]
 8003c44:	2901      	cmp	r1, #1
 8003c46:	f47f aee4 	bne.w	8003a12 <HAL_PCD_IRQHandler+0x686>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c4a:	6828      	ldr	r0, [r5, #0]
 8003c4c:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8003c50:	f004 f9d0 	bl	8007ff4 <USB_EP0_OutStart>
 8003c54:	e6dd      	b.n	8003a12 <HAL_PCD_IRQHandler+0x686>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c56:	0719      	lsls	r1, r3, #28
 8003c58:	f140 8093 	bpl.w	8003d82 <HAL_PCD_IRQHandler+0x9f6>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c5c:	4982      	ldr	r1, [pc, #520]	@ (8003e68 <HAL_PCD_IRQHandler+0xadc>)
 8003c5e:	458e      	cmp	lr, r1
 8003c60:	f67f aed3 	bls.w	8003a0a <HAL_PCD_IRQHandler+0x67e>
 8003c64:	0418      	lsls	r0, r3, #16
 8003c66:	f57f aed0 	bpl.w	8003a0a <HAL_PCD_IRQHandler+0x67e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c6e:	6091      	str	r1, [r2, #8]
 8003c70:	e6cb      	b.n	8003a0a <HAL_PCD_IRQHandler+0x67e>
  if (ep->xfer_len <= ep->xfer_count)
 8003c72:	f8dd b018 	ldr.w	fp, [sp, #24]
 8003c76:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c7a:	6825      	ldr	r5, [r4, #0]
  if (ep->xfer_len <= ep->xfer_count)
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	f63f ae0e 	bhi.w	800389e <HAL_PCD_IRQHandler+0x512>
 8003c82:	e691      	b.n	80039a8 <HAL_PCD_IRQHandler+0x61c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c84:	2900      	cmp	r1, #0
 8003c86:	f6bf acb3 	bge.w	80035f0 <HAL_PCD_IRQHandler+0x264>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c8a:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c8c:	f884 20cb 	strb.w	r2, [r4, #203]	@ 0xcb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c90:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8003c94:	f004 f8d6 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c98:	7923      	ldrb	r3, [r4, #4]
 8003c9a:	e4a9      	b.n	80035f0 <HAL_PCD_IRQHandler+0x264>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c9c:	6820      	ldr	r0, [r4, #0]
 8003c9e:	f504 711e 	add.w	r1, r4, #632	@ 0x278
 8003ca2:	f004 f8cf 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca6:	7923      	ldrb	r3, [r4, #4]
 8003ca8:	e407      	b.n	80034ba <HAL_PCD_IRQHandler+0x12e>
              ep->is_iso_incomplete = 0U;
 8003caa:	2200      	movs	r2, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cac:	4621      	mov	r1, r4
 8003cae:	4628      	mov	r0, r5
              ep->is_iso_incomplete = 0U;
 8003cb0:	f88b 2257 	strb.w	r2, [fp, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cb4:	f7ff fb62 	bl	800337c <HAL_PCD_ISOOUTIncompleteCallback>
 8003cb8:	e6c1      	b.n	8003a3e <HAL_PCD_IRQHandler+0x6b2>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cba:	2900      	cmp	r1, #0
 8003cbc:	f6bf aca1 	bge.w	8003602 <HAL_PCD_IRQHandler+0x276>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cc0:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cc2:	f884 20ef 	strb.w	r2, [r4, #239]	@ 0xef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cc6:	f104 01ec 	add.w	r1, r4, #236	@ 0xec
 8003cca:	f004 f8bb 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cce:	7923      	ldrb	r3, [r4, #4]
 8003cd0:	e497      	b.n	8003602 <HAL_PCD_IRQHandler+0x276>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cd2:	6820      	ldr	r0, [r4, #0]
 8003cd4:	f504 7127 	add.w	r1, r4, #668	@ 0x29c
 8003cd8:	f004 f8b4 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cdc:	7923      	ldrb	r3, [r4, #4]
 8003cde:	f7ff bbf3 	b.w	80034c8 <HAL_PCD_IRQHandler+0x13c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ce2:	2900      	cmp	r1, #0
 8003ce4:	f6bf ac96 	bge.w	8003614 <HAL_PCD_IRQHandler+0x288>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ce8:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cea:	f884 2113 	strb.w	r2, [r4, #275]	@ 0x113
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cee:	f504 7188 	add.w	r1, r4, #272	@ 0x110
 8003cf2:	f004 f8a7 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cf6:	7923      	ldrb	r3, [r4, #4]
 8003cf8:	e48c      	b.n	8003614 <HAL_PCD_IRQHandler+0x288>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cfa:	2900      	cmp	r1, #0
 8003cfc:	f6bf ac93 	bge.w	8003626 <HAL_PCD_IRQHandler+0x29a>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d00:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d02:	f884 2137 	strb.w	r2, [r4, #311]	@ 0x137
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d06:	f504 719a 	add.w	r1, r4, #308	@ 0x134
 8003d0a:	f004 f89b 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d0e:	7923      	ldrb	r3, [r4, #4]
 8003d10:	e489      	b.n	8003626 <HAL_PCD_IRQHandler+0x29a>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d12:	0418      	lsls	r0, r3, #16
 8003d14:	d4a9      	bmi.n	8003c6a <HAL_PCD_IRQHandler+0x8de>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d16:	0699      	lsls	r1, r3, #26
 8003d18:	f57f af2e 	bpl.w	8003b78 <HAL_PCD_IRQHandler+0x7ec>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d1c:	2120      	movs	r1, #32
 8003d1e:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d20:	e72a      	b.n	8003b78 <HAL_PCD_IRQHandler+0x7ec>
              ep->is_iso_incomplete = 0U;
 8003d22:	2200      	movs	r2, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d24:	4639      	mov	r1, r7
 8003d26:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 8003d28:	f888 2017 	strb.w	r2, [r8, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d2c:	f7ff fb28 	bl	8003380 <HAL_PCD_ISOINIncompleteCallback>
 8003d30:	e741      	b.n	8003bb6 <HAL_PCD_IRQHandler+0x82a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d32:	2900      	cmp	r1, #0
 8003d34:	f6bf ac80 	bge.w	8003638 <HAL_PCD_IRQHandler+0x2ac>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d38:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d3a:	f884 215b 	strb.w	r2, [r4, #347]	@ 0x15b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d3e:	f504 71ac 	add.w	r1, r4, #344	@ 0x158
 8003d42:	f004 f87f 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d46:	7923      	ldrb	r3, [r4, #4]
 8003d48:	e476      	b.n	8003638 <HAL_PCD_IRQHandler+0x2ac>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d4a:	6820      	ldr	r0, [r4, #0]
 8003d4c:	f504 7142 	add.w	r1, r4, #776	@ 0x308
 8003d50:	f004 f878 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d54:	7923      	ldrb	r3, [r4, #4]
 8003d56:	f7ff bbcc 	b.w	80034f2 <HAL_PCD_IRQHandler+0x166>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d5a:	2900      	cmp	r1, #0
 8003d5c:	f6bf ac75 	bge.w	800364a <HAL_PCD_IRQHandler+0x2be>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d60:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d62:	f884 217f 	strb.w	r2, [r4, #383]	@ 0x17f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d66:	f504 71be 	add.w	r1, r4, #380	@ 0x17c
 8003d6a:	f004 f86b 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d6e:	7923      	ldrb	r3, [r4, #4]
 8003d70:	e46b      	b.n	800364a <HAL_PCD_IRQHandler+0x2be>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d72:	6820      	ldr	r0, [r4, #0]
 8003d74:	f504 714b 	add.w	r1, r4, #812	@ 0x32c
 8003d78:	f004 f864 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d7c:	7923      	ldrb	r3, [r4, #4]
 8003d7e:	f7ff bbbf 	b.w	8003500 <HAL_PCD_IRQHandler+0x174>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d82:	0699      	lsls	r1, r3, #26
 8003d84:	d572      	bpl.n	8003e6c <HAL_PCD_IRQHandler+0xae0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d86:	2120      	movs	r1, #32
 8003d88:	6091      	str	r1, [r2, #8]
 8003d8a:	e63e      	b.n	8003a0a <HAL_PCD_IRQHandler+0x67e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d8c:	2900      	cmp	r1, #0
 8003d8e:	f6bf ac65 	bge.w	800365c <HAL_PCD_IRQHandler+0x2d0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d92:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d94:	f884 21a3 	strb.w	r2, [r4, #419]	@ 0x1a3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d98:	f504 71d0 	add.w	r1, r4, #416	@ 0x1a0
 8003d9c:	f004 f852 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003da0:	7923      	ldrb	r3, [r4, #4]
 8003da2:	e45b      	b.n	800365c <HAL_PCD_IRQHandler+0x2d0>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	f504 7154 	add.w	r1, r4, #848	@ 0x350
 8003daa:	f004 f84b 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dae:	7923      	ldrb	r3, [r4, #4]
 8003db0:	f7ff bbad 	b.w	800350e <HAL_PCD_IRQHandler+0x182>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003db4:	2900      	cmp	r1, #0
 8003db6:	f6bf ac5a 	bge.w	800366e <HAL_PCD_IRQHandler+0x2e2>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003dba:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003dbc:	f884 21c7 	strb.w	r2, [r4, #455]	@ 0x1c7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003dc0:	f504 71e2 	add.w	r1, r4, #452	@ 0x1c4
 8003dc4:	f004 f83e 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dc8:	7923      	ldrb	r3, [r4, #4]
 8003dca:	e450      	b.n	800366e <HAL_PCD_IRQHandler+0x2e2>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	f504 715d 	add.w	r1, r4, #884	@ 0x374
 8003dd2:	f004 f837 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dd6:	7923      	ldrb	r3, [r4, #4]
 8003dd8:	f7ff bba0 	b.w	800351c <HAL_PCD_IRQHandler+0x190>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	f6bf ac4f 	bge.w	8003680 <HAL_PCD_IRQHandler+0x2f4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003de2:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003de4:	f884 21eb 	strb.w	r2, [r4, #491]	@ 0x1eb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003de8:	f504 71f4 	add.w	r1, r4, #488	@ 0x1e8
 8003dec:	f004 f82a 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003df0:	7923      	ldrb	r3, [r4, #4]
 8003df2:	e445      	b.n	8003680 <HAL_PCD_IRQHandler+0x2f4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003df4:	6820      	ldr	r0, [r4, #0]
 8003df6:	f504 7166 	add.w	r1, r4, #920	@ 0x398
 8003dfa:	f004 f823 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dfe:	7923      	ldrb	r3, [r4, #4]
 8003e00:	f7ff bb93 	b.w	800352a <HAL_PCD_IRQHandler+0x19e>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e04:	2900      	cmp	r1, #0
 8003e06:	f6bf ac44 	bge.w	8003692 <HAL_PCD_IRQHandler+0x306>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e0a:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e0c:	f884 220f 	strb.w	r2, [r4, #527]	@ 0x20f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e10:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8003e14:	f004 f816 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e18:	7923      	ldrb	r3, [r4, #4]
 8003e1a:	e43a      	b.n	8003692 <HAL_PCD_IRQHandler+0x306>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e1c:	6820      	ldr	r0, [r4, #0]
 8003e1e:	f504 716f 	add.w	r1, r4, #956	@ 0x3bc
 8003e22:	f004 f80f 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e26:	7923      	ldrb	r3, [r4, #4]
 8003e28:	f7ff bb86 	b.w	8003538 <HAL_PCD_IRQHandler+0x1ac>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	f6bf ac39 	bge.w	80036a4 <HAL_PCD_IRQHandler+0x318>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e32:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e34:	f884 2233 	strb.w	r2, [r4, #563]	@ 0x233
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e38:	f504 710c 	add.w	r1, r4, #560	@ 0x230
 8003e3c:	f004 f802 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e40:	7923      	ldrb	r3, [r4, #4]
 8003e42:	e42f      	b.n	80036a4 <HAL_PCD_IRQHandler+0x318>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	f504 7178 	add.w	r1, r4, #992	@ 0x3e0
 8003e4a:	f003 fffb 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e4e:	7923      	ldrb	r3, [r4, #4]
 8003e50:	f7ff bb79 	b.w	8003546 <HAL_PCD_IRQHandler+0x1ba>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e54:	6820      	ldr	r0, [r4, #0]
 8003e56:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8003e5a:	f003 fff3 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5e:	7923      	ldrb	r3, [r4, #4]
 8003e60:	f7ff bb78 	b.w	8003554 <HAL_PCD_IRQHandler+0x1c8>
 8003e64:	4f54310a 	.word	0x4f54310a
 8003e68:	4f54300a 	.word	0x4f54300a
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e6c:	491b      	ldr	r1, [pc, #108]	@ (8003edc <HAL_PCD_IRQHandler+0xb50>)
 8003e6e:	458e      	cmp	lr, r1
 8003e70:	d902      	bls.n	8003e78 <HAL_PCD_IRQHandler+0xaec>
 8003e72:	041b      	lsls	r3, r3, #16
 8003e74:	f53f aef9 	bmi.w	8003c6a <HAL_PCD_IRQHandler+0x8de>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e78:	6911      	ldr	r1, [r2, #16]
 8003e7a:	f8db 2274 	ldr.w	r2, [fp, #628]	@ 0x274
 8003e7e:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8003e82:	1a52      	subs	r2, r2, r1
 8003e84:	f8cb 2268 	str.w	r2, [fp, #616]	@ 0x268
        if (epnum == 0U)
 8003e88:	f1ba 0f00 	cmp.w	sl, #0
 8003e8c:	f47f ae74 	bne.w	8003b78 <HAL_PCD_IRQHandler+0x7ec>
          if (ep->xfer_len == 0U)
 8003e90:	f8d5 1264 	ldr.w	r1, [r5, #612]	@ 0x264
 8003e94:	b1d9      	cbz	r1, 8003ece <HAL_PCD_IRQHandler+0xb42>
            ep->xfer_buff += ep->xfer_count;
 8003e96:	f8d5 1260 	ldr.w	r1, [r5, #608]	@ 0x260
 8003e9a:	4411      	add	r1, r2
 8003e9c:	f8c5 1260 	str.w	r1, [r5, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea0:	e66a      	b.n	8003b78 <HAL_PCD_IRQHandler+0x7ec>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
 8003ea8:	f003 ffcc 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eac:	7923      	ldrb	r3, [r4, #4]
 8003eae:	f7ff bb58 	b.w	8003562 <HAL_PCD_IRQHandler+0x1d6>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8003eb8:	f004 f89c 	bl	8007ff4 <USB_EP0_OutStart>
 8003ebc:	e65c      	b.n	8003b78 <HAL_PCD_IRQHandler+0x7ec>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ebe:	6820      	ldr	r0, [r4, #0]
 8003ec0:	f204 414c 	addw	r1, r4, #1100	@ 0x44c
 8003ec4:	f003 ffbe 	bl	8007e44 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ec8:	7923      	ldrb	r3, [r4, #4]
 8003eca:	f7ff bb51 	b.w	8003570 <HAL_PCD_IRQHandler+0x1e4>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ece:	2101      	movs	r1, #1
 8003ed0:	f205 429c 	addw	r2, r5, #1180	@ 0x49c
 8003ed4:	f004 f88e 	bl	8007ff4 <USB_EP0_OutStart>
 8003ed8:	e64e      	b.n	8003b78 <HAL_PCD_IRQHandler+0x7ec>
 8003eda:	bf00      	nop
 8003edc:	4f54300a 	.word	0x4f54300a

08003ee0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ee0:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8003ee2:	2100      	movs	r1, #0
{
 8003ee4:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 8003ee6:	2401      	movs	r4, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ee8:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 8003eea:	f883 14cc 	strb.w	r1, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 8003eee:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ef0:	6991      	ldr	r1, [r2, #24]
  hpcd->lpm_active = 1U;
 8003ef2:	f8c3 44d8 	str.w	r4, [r3, #1240]	@ 0x4d8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ef6:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8003efa:	6191      	str	r1, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003efc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
}
 8003efe:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	f043 0303 	orr.w	r3, r3, #3
 8003f0a:	6553      	str	r3, [r2, #84]	@ 0x54
}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop

08003f14 <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003f14:	4a21      	ldr	r2, [pc, #132]	@ (8003f9c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003f16:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003f18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003f1c:	4283      	cmp	r3, r0
 8003f1e:	d034      	beq.n	8003f8a <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f20:	f04f 0c32 	mov.w	ip, #50	@ 0x32
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003f24:	68d3      	ldr	r3, [r2, #12]
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f26:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003f2a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003f2e:	ea43 0300 	orr.w	r3, r3, r0
 8003f32:	bf88      	it	hi
 8003f34:	f443 2380 	orrhi.w	r3, r3, #262144	@ 0x40000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003f38:	60d3      	str	r3, [r2, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f3a:	4b19      	ldr	r3, [pc, #100]	@ (8003fa0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8003f3c:	4a19      	ldr	r2, [pc, #100]	@ (8003fa4 <HAL_PWREx_ControlVoltageScaling+0x90>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f40:	4816      	ldr	r0, [pc, #88]	@ (8003f9c <HAL_PWREx_ControlVoltageScaling+0x88>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f42:	fba2 1303 	umull	r1, r3, r2, r3
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	fb0c f303 	mul.w	r3, ip, r3
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f50:	68c1      	ldr	r1, [r0, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f52:	099b      	lsrs	r3, r3, #6
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f54:	040a      	lsls	r2, r1, #16
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f56:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f5a:	d407      	bmi.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0x58>
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	e000      	b.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0x4e>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f60:	b18a      	cbz	r2, 8003f86 <HAL_PWREx_ControlVoltageScaling+0x72>
 8003f62:	68c1      	ldr	r1, [r0, #12]
  {
    timeout--;
 8003f64:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f66:	0409      	lsls	r1, r1, #16
 8003f68:	d5fa      	bpl.n	8003f60 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003f6a:	b162      	cbz	r2, 8003f86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f6c:	490b      	ldr	r1, [pc, #44]	@ (8003f9c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003f6e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8003f70:	0410      	lsls	r0, r2, #16
 8003f72:	d406      	bmi.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f74:	e000      	b.n	8003f78 <HAL_PWREx_ControlVoltageScaling+0x64>
 8003f76:	b133      	cbz	r3, 8003f86 <HAL_PWREx_ControlVoltageScaling+0x72>
 8003f78:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
    {
      timeout--;
 8003f7a:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f7c:	0412      	lsls	r2, r2, #16
 8003f7e:	d5fa      	bpl.n	8003f76 <HAL_PWREx_ControlVoltageScaling+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003f80:	b10b      	cbz	r3, 8003f86 <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 8003f82:	2000      	movs	r0, #0
 8003f84:	4770      	bx	lr
  {
    return HAL_TIMEOUT;
 8003f86:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003f88:	4770      	bx	lr
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8e:	d9f8      	bls.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0x6e>
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f90:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 8003f92:	2000      	movs	r0, #0
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f98:	60d3      	str	r3, [r2, #12]
 8003f9a:	4770      	bx	lr
 8003f9c:	46020800 	.word	0x46020800
 8003fa0:	2000005c 	.word	0x2000005c
 8003fa4:	10624dd3 	.word	0x10624dd3

08003fa8 <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003fa8:	4b02      	ldr	r3, [pc, #8]	@ (8003fb4 <HAL_PWREx_GetVoltageRange+0xc>)
 8003faa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
}
 8003fac:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	46020800 	.word	0x46020800

08003fb8 <HAL_PWREx_ConfigSupply>:

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fb8:	2132      	movs	r1, #50	@ 0x32
 8003fba:	4b19      	ldr	r3, [pc, #100]	@ (8004020 <HAL_PWREx_ConfigSupply+0x68>)
 8003fbc:	4a19      	ldr	r2, [pc, #100]	@ (8004024 <HAL_PWREx_ConfigSupply+0x6c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	fba2 c303 	umull	ip, r3, r2, r3
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003fce:	4916      	ldr	r1, [pc, #88]	@ (8004028 <HAL_PWREx_ConfigSupply+0x70>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fd0:	099b      	lsrs	r3, r3, #6
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003fd2:	688a      	ldr	r2, [r1, #8]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fd4:	3301      	adds	r3, #1
  if (SupplySource == PWR_LDO_SUPPLY)
 8003fd6:	b980      	cbnz	r0, 8003ffa <HAL_PWREx_ConfigSupply+0x42>
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003fd8:	f022 0202 	bic.w	r2, r2, #2
 8003fdc:	608a      	str	r2, [r1, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003fde:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8003fe0:	0790      	lsls	r0, r2, #30
 8003fe2:	d402      	bmi.n	8003fea <HAL_PWREx_ConfigSupply+0x32>
  if (timeout == 0U)
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	4770      	bx	lr
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003fe8:	b12b      	cbz	r3, 8003ff6 <HAL_PWREx_ConfigSupply+0x3e>
 8003fea:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 8003fec:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003fee:	0792      	lsls	r2, r2, #30
 8003ff0:	d4fa      	bmi.n	8003fe8 <HAL_PWREx_ConfigSupply+0x30>
  if (timeout == 0U)
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f6      	bne.n	8003fe4 <HAL_PWREx_ConfigSupply+0x2c>
    return HAL_TIMEOUT;
 8003ff6:	2003      	movs	r0, #3
}
 8003ff8:	4770      	bx	lr
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003ffa:	f042 0202 	orr.w	r2, r2, #2
 8003ffe:	608a      	str	r2, [r1, #8]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004000:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8004002:	0790      	lsls	r0, r2, #30
 8004004:	d4ee      	bmi.n	8003fe4 <HAL_PWREx_ConfigSupply+0x2c>
 8004006:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 8004008:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800400a:	0792      	lsls	r2, r2, #30
 800400c:	d4f1      	bmi.n	8003ff2 <HAL_PWREx_ConfigSupply+0x3a>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f1      	beq.n	8003ff6 <HAL_PWREx_ConfigSupply+0x3e>
 8004012:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 8004014:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004016:	0792      	lsls	r2, r2, #30
 8004018:	d5f9      	bpl.n	800400e <HAL_PWREx_ConfigSupply+0x56>
  if (timeout == 0U)
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e2      	bne.n	8003fe4 <HAL_PWREx_ConfigSupply+0x2c>
 800401e:	e7ea      	b.n	8003ff6 <HAL_PWREx_ConfigSupply+0x3e>
 8004020:	2000005c 	.word	0x2000005c
 8004024:	10624dd3 	.word	0x10624dd3
 8004028:	46020800 	.word	0x46020800

0800402c <HAL_PWREx_EnableVddUSB>:
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800402c:	4a02      	ldr	r2, [pc, #8]	@ (8004038 <HAL_PWREx_EnableVddUSB+0xc>)
 800402e:	6913      	ldr	r3, [r2, #16]
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004034:	6113      	str	r3, [r2, #16]
}
 8004036:	4770      	bx	lr
 8004038:	46020800 	.word	0x46020800

0800403c <HAL_PWREx_EnableVddIO2>:
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800403c:	4a02      	ldr	r2, [pc, #8]	@ (8004048 <HAL_PWREx_EnableVddIO2+0xc>)
 800403e:	6913      	ldr	r3, [r2, #16]
 8004040:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004044:	6113      	str	r3, [r2, #16]
}
 8004046:	4770      	bx	lr
 8004048:	46020800 	.word	0x46020800

0800404c <HAL_PWREx_EnableVddA>:
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800404c:	4a02      	ldr	r2, [pc, #8]	@ (8004058 <HAL_PWREx_EnableVddA+0xc>)
 800404e:	6913      	ldr	r3, [r2, #16]
 8004050:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004054:	6113      	str	r3, [r2, #16]
}
 8004056:	4770      	bx	lr
 8004058:	46020800 	.word	0x46020800

0800405c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800405c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800405e:	4d2c      	ldr	r5, [pc, #176]	@ (8004110 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
{
 8004060:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004062:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
{
 8004066:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004068:	075b      	lsls	r3, r3, #29
 800406a:	d52b      	bpl.n	80040c4 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800406c:	f7ff ff9c 	bl	8003fa8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004070:	f420 3380 	bic.w	r3, r0, #65536	@ 0x10000
 8004074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004078:	d007      	beq.n	800408a <RCC_SetFlashLatencyFromMSIRange+0x2e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800407a:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 800407e:	d217      	bcs.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004080:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004084:	d133      	bne.n	80040ee <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004086:	2203      	movs	r2, #3
 8004088:	e004      	b.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x38>
    if (msirange < RCC_MSIRANGE_1)
 800408a:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 800408e:	bf2c      	ite	cs
 8004090:	2200      	movcs	r2, #0
 8004092:	2201      	movcc	r2, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004094:	491f      	ldr	r1, [pc, #124]	@ (8004114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004096:	680b      	ldr	r3, [r1, #0]
 8004098:	f023 030f 	bic.w	r3, r3, #15
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80040a0:	6808      	ldr	r0, [r1, #0]
 80040a2:	f000 000f 	and.w	r0, r0, #15
 80040a6:	1a80      	subs	r0, r0, r2
 80040a8:	bf18      	it	ne
 80040aa:	2001      	movne	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80040ac:	b003      	add	sp, #12
 80040ae:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 80040b0:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 80040b4:	d91e      	bls.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x98>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80040b6:	bb10      	cbnz	r0, 80040fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
          if (msirange > RCC_MSIRANGE_3)
 80040b8:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
 80040bc:	bf8c      	ite	hi
 80040be:	2200      	movhi	r2, #0
 80040c0:	2201      	movls	r2, #1
 80040c2:	e7e7      	b.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x38>
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 80040d0:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80040dc:	f7ff ff64 	bl	8003fa8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80040e0:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 80040ec:	e7c0      	b.n	8004070 <RCC_SetFlashLatencyFromMSIRange+0x14>
        return HAL_ERROR;
 80040ee:	2001      	movs	r0, #1
}
 80040f0:	b003      	add	sp, #12
 80040f2:	bd30      	pop	{r4, r5, pc}
        if (msirange == RCC_MSIRANGE_1)
 80040f4:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 80040f8:	d003      	beq.n	8004102 <RCC_SetFlashLatencyFromMSIRange+0xa6>
          latency = FLASH_LATENCY_1; /* 1WS */
 80040fa:	2201      	movs	r2, #1
 80040fc:	e7ca      	b.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x38>
      latency = FLASH_LATENCY_0; /* 0WS */
 80040fe:	2200      	movs	r2, #0
 8004100:	e7c8      	b.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x38>
            latency = FLASH_LATENCY_2; /* 2WS */
 8004102:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004106:	bf0c      	ite	eq
 8004108:	2201      	moveq	r2, #1
 800410a:	2202      	movne	r2, #2
 800410c:	e7c2      	b.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x38>
 800410e:	bf00      	nop
 8004110:	46020c00 	.word	0x46020c00
 8004114:	40022000 	.word	0x40022000

08004118 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004118:	4a41      	ldr	r2, [pc, #260]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 800411a:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800411c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800411e:	f013 030c 	ands.w	r3, r3, #12
 8004122:	d00b      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x24>
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d05f      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0xd0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004128:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 800412a:	483e      	ldr	r0, [pc, #248]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x10c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800412c:	f002 020c 	and.w	r2, r2, #12
 8004130:	2a04      	cmp	r2, #4
 8004132:	d072      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x102>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004134:	2b08      	cmp	r3, #8
 8004136:	bf18      	it	ne
 8004138:	2000      	movne	r0, #0
 800413a:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800413c:	4a38      	ldr	r2, [pc, #224]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 800413e:	6891      	ldr	r1, [r2, #8]
 8004140:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004142:	bf54      	ite	pl
 8004144:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004148:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 800414a:	4937      	ldr	r1, [pc, #220]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x110>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800414c:	bf54      	ite	pl
 800414e:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004152:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8004154:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004158:	2b00      	cmp	r3, #0
 800415a:	d05f      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x104>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800415c:	4930      	ldr	r1, [pc, #192]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
{
 800415e:	b510      	push	{r4, lr}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004160:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004162:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004164:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004166:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800416a:	3301      	adds	r3, #1
 800416c:	ee07 3a10 	vmov	s14, r3
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004170:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004172:	f3c4 1e00 	ubfx	lr, r4, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004176:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800417a:	fb0e f303 	mul.w	r3, lr, r3
 800417e:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004182:	f002 0c03 	and.w	ip, r2, #3
    switch (pllsource)
 8004186:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800418a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 800418e:	d002      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0x7e>
 8004190:	f1bc 0f03 	cmp.w	ip, #3
 8004194:	d12f      	bne.n	80041f6 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004196:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004198:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800419c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a0:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80041a4:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800422c <HAL_RCC_GetSysClockFreq+0x114>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041a8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80041ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80041b0:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 8004230 <HAL_RCC_GetSysClockFreq+0x118>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80041b4:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041b8:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80041bc:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80041c0:	4b17      	ldr	r3, [pc, #92]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80041c2:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80041c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041c8:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80041cc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80041d0:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041de:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80041e2:	ee17 0a90 	vmov	r0, s15
}
 80041e6:	bd10      	pop	{r4, pc}
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e8:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041ec:	2901      	cmp	r1, #1
 80041ee:	d0a5      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U;
 80041f0:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041f2:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f4:	e7b2      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041f6:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80041f8:	ee05 0a90 	vmov	s11, r0
 80041fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004200:	ee06 3a10 	vmov	s12, r3
 8004204:	eeb8 5a65 	vcvt.f32.u32	s10, s11
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004208:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800420c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004210:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004214:	eddf 5a05 	vldr	s11, [pc, #20]	@ 800422c <HAL_RCC_GetSysClockFreq+0x114>
 8004218:	e7cc      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x9c>
 800421a:	4770      	bx	lr
}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	46020c00 	.word	0x46020c00
 8004224:	00f42400 	.word	0x00f42400
 8004228:	0800809c 	.word	0x0800809c
 800422c:	39000000 	.word	0x39000000
 8004230:	4b742400 	.word	0x4b742400

08004234 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8004234:	2800      	cmp	r0, #0
 8004236:	f000 810e 	beq.w	8004456 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800423a:	4a9f      	ldr	r2, [pc, #636]	@ (80044b8 <HAL_RCC_ClockConfig+0x284>)
{
 800423c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	6813      	ldr	r3, [r2, #0]
 8004242:	4604      	mov	r4, r0
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	428b      	cmp	r3, r1
 800424a:	460d      	mov	r5, r1
{
 800424c:	b082      	sub	sp, #8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800424e:	d20d      	bcs.n	800426c <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	f023 030f 	bic.w	r3, r3, #15
 8004256:	430b      	orrs	r3, r1
 8004258:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	6813      	ldr	r3, [r2, #0]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	428b      	cmp	r3, r1
 8004262:	d003      	beq.n	800426c <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8004264:	2001      	movs	r0, #1
}
 8004266:	b002      	add	sp, #8
 8004268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	06df      	lsls	r7, r3, #27
 8004270:	d50b      	bpl.n	800428a <HAL_RCC_ClockConfig+0x56>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004272:	4992      	ldr	r1, [pc, #584]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 8004274:	6960      	ldr	r0, [r4, #20]
 8004276:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8004278:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800427c:	4290      	cmp	r0, r2
 800427e:	d904      	bls.n	800428a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004280:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8004282:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004286:	4302      	orrs	r2, r0
 8004288:	624a      	str	r2, [r1, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428a:	071e      	lsls	r6, r3, #28
 800428c:	d50d      	bpl.n	80042aa <HAL_RCC_ClockConfig+0x76>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800428e:	498b      	ldr	r1, [pc, #556]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 8004290:	6920      	ldr	r0, [r4, #16]
 8004292:	6a0a      	ldr	r2, [r1, #32]
 8004294:	0912      	lsrs	r2, r2, #4
 8004296:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800429a:	4290      	cmp	r0, r2
 800429c:	d905      	bls.n	80042aa <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800429e:	6a0a      	ldr	r2, [r1, #32]
 80042a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042a4:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 80042a8:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042aa:	0758      	lsls	r0, r3, #29
 80042ac:	d50b      	bpl.n	80042c6 <HAL_RCC_ClockConfig+0x92>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80042ae:	4983      	ldr	r1, [pc, #524]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 80042b0:	68e0      	ldr	r0, [r4, #12]
 80042b2:	6a0a      	ldr	r2, [r1, #32]
 80042b4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80042b8:	4290      	cmp	r0, r2
 80042ba:	d904      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80042bc:	6a0a      	ldr	r2, [r1, #32]
 80042be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80042c2:	4302      	orrs	r2, r0
 80042c4:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c6:	0799      	lsls	r1, r3, #30
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c8:	f003 0201 	and.w	r2, r3, #1
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	d530      	bpl.n	8004330 <HAL_RCC_ClockConfig+0xfc>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80042ce:	4e7b      	ldr	r6, [pc, #492]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 80042d0:	68a0      	ldr	r0, [r4, #8]
 80042d2:	6a31      	ldr	r1, [r6, #32]
 80042d4:	f001 010f 	and.w	r1, r1, #15
 80042d8:	4288      	cmp	r0, r1
 80042da:	d904      	bls.n	80042e6 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	6a31      	ldr	r1, [r6, #32]
 80042de:	f021 010f 	bic.w	r1, r1, #15
 80042e2:	4301      	orrs	r1, r0
 80042e4:	6231      	str	r1, [r6, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e6:	2a00      	cmp	r2, #0
 80042e8:	f000 8081 	beq.w	80043ee <HAL_RCC_ClockConfig+0x1ba>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	f000 80b3 	beq.w	800445a <HAL_RCC_ClockConfig+0x226>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f4:	4a71      	ldr	r2, [pc, #452]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f6:	2b02      	cmp	r3, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f8:	6812      	ldr	r2, [r2, #0]
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fa:	f000 8084 	beq.w	8004406 <HAL_RCC_ClockConfig+0x1d2>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 80be 	bne.w	8004480 <HAL_RCC_ClockConfig+0x24c>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004304:	0757      	lsls	r7, r2, #29
 8004306:	d5ad      	bpl.n	8004264 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004308:	4e6c      	ldr	r6, [pc, #432]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430a:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800430e:	69f2      	ldr	r2, [r6, #28]
 8004310:	f022 0203 	bic.w	r2, r2, #3
 8004314:	4313      	orrs	r3, r2
 8004316:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8004318:	f7fe f9ce 	bl	80026b8 <HAL_GetTick>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800431e:	4607      	mov	r7, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004320:	2b03      	cmp	r3, #3
 8004322:	d05b      	beq.n	80043dc <HAL_RCC_ClockConfig+0x1a8>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004324:	2b02      	cmp	r3, #2
 8004326:	d077      	beq.n	8004418 <HAL_RCC_ClockConfig+0x1e4>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004328:	2b00      	cmp	r3, #0
 800432a:	f040 808a 	bne.w	8004442 <HAL_RCC_ClockConfig+0x20e>
 800432e:	e07e      	b.n	800442e <HAL_RCC_ClockConfig+0x1fa>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004330:	2a00      	cmp	r2, #0
 8004332:	d1db      	bne.n	80042ec <HAL_RCC_ClockConfig+0xb8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004334:	4960      	ldr	r1, [pc, #384]	@ (80044b8 <HAL_RCC_ClockConfig+0x284>)
 8004336:	680a      	ldr	r2, [r1, #0]
 8004338:	f002 020f 	and.w	r2, r2, #15
 800433c:	42aa      	cmp	r2, r5
 800433e:	d909      	bls.n	8004354 <HAL_RCC_ClockConfig+0x120>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004340:	680a      	ldr	r2, [r1, #0]
 8004342:	f022 020f 	bic.w	r2, r2, #15
 8004346:	432a      	orrs	r2, r5
 8004348:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	680a      	ldr	r2, [r1, #0]
 800434c:	f002 020f 	and.w	r2, r2, #15
 8004350:	42aa      	cmp	r2, r5
 8004352:	d187      	bne.n	8004264 <HAL_RCC_ClockConfig+0x30>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	0759      	lsls	r1, r3, #29
 8004356:	d50b      	bpl.n	8004370 <HAL_RCC_ClockConfig+0x13c>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004358:	4958      	ldr	r1, [pc, #352]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 800435a:	68e0      	ldr	r0, [r4, #12]
 800435c:	6a0a      	ldr	r2, [r1, #32]
 800435e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004362:	4290      	cmp	r0, r2
 8004364:	d204      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x13c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004366:	6a0a      	ldr	r2, [r1, #32]
 8004368:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800436c:	4302      	orrs	r2, r0
 800436e:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004370:	071a      	lsls	r2, r3, #28
 8004372:	d50d      	bpl.n	8004390 <HAL_RCC_ClockConfig+0x15c>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004374:	4951      	ldr	r1, [pc, #324]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 8004376:	6920      	ldr	r0, [r4, #16]
 8004378:	6a0a      	ldr	r2, [r1, #32]
 800437a:	0912      	lsrs	r2, r2, #4
 800437c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004380:	4290      	cmp	r0, r2
 8004382:	d205      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x15c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004384:	6a0a      	ldr	r2, [r1, #32]
 8004386:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800438a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800438e:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004390:	06db      	lsls	r3, r3, #27
 8004392:	d50b      	bpl.n	80043ac <HAL_RCC_ClockConfig+0x178>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004394:	4a49      	ldr	r2, [pc, #292]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 8004396:	6961      	ldr	r1, [r4, #20]
 8004398:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800439a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800439e:	4299      	cmp	r1, r3
 80043a0:	d204      	bcs.n	80043ac <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80043a2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80043a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6253      	str	r3, [r2, #36]	@ 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80043ac:	f7ff feb4 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4a42      	ldr	r2, [pc, #264]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 80043b4:	4942      	ldr	r1, [pc, #264]	@ (80044c0 <HAL_RCC_ClockConfig+0x28c>)
 80043b6:	6a12      	ldr	r2, [r2, #32]
  status = HAL_InitTick(uwTickPrio);
 80043b8:	4842      	ldr	r0, [pc, #264]	@ (80044c4 <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80043ba:	f002 020f 	and.w	r2, r2, #15
 80043be:	5c89      	ldrb	r1, [r1, r2]
  status = HAL_InitTick(uwTickPrio);
 80043c0:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80043c2:	4a41      	ldr	r2, [pc, #260]	@ (80044c8 <HAL_RCC_ClockConfig+0x294>)
 80043c4:	40cb      	lsrs	r3, r1
 80043c6:	6013      	str	r3, [r2, #0]
}
 80043c8:	b002      	add	sp, #8
 80043ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80043ce:	f7fe b8eb 	b.w	80025a8 <HAL_InitTick>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d2:	f7fe f971 	bl	80026b8 <HAL_GetTick>
 80043d6:	1bc3      	subs	r3, r0, r7
 80043d8:	4543      	cmp	r3, r8
 80043da:	d838      	bhi.n	800444e <HAL_RCC_ClockConfig+0x21a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043dc:	69f3      	ldr	r3, [r6, #28]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d1f5      	bne.n	80043d2 <HAL_RCC_ClockConfig+0x19e>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0798      	lsls	r0, r3, #30
 80043ea:	d5a3      	bpl.n	8004334 <HAL_RCC_ClockConfig+0x100>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043ec:	68a0      	ldr	r0, [r4, #8]
 80043ee:	4933      	ldr	r1, [pc, #204]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 80043f0:	6a0a      	ldr	r2, [r1, #32]
 80043f2:	f002 020f 	and.w	r2, r2, #15
 80043f6:	4282      	cmp	r2, r0
 80043f8:	d99c      	bls.n	8004334 <HAL_RCC_ClockConfig+0x100>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80043fa:	6a0a      	ldr	r2, [r1, #32]
 80043fc:	f022 020f 	bic.w	r2, r2, #15
 8004400:	4302      	orrs	r2, r0
 8004402:	620a      	str	r2, [r1, #32]
 8004404:	e796      	b.n	8004334 <HAL_RCC_ClockConfig+0x100>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004406:	0392      	lsls	r2, r2, #14
 8004408:	f53f af7e 	bmi.w	8004308 <HAL_RCC_ClockConfig+0xd4>
 800440c:	e72a      	b.n	8004264 <HAL_RCC_ClockConfig+0x30>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800440e:	f7fe f953 	bl	80026b8 <HAL_GetTick>
 8004412:	1bc0      	subs	r0, r0, r7
 8004414:	4540      	cmp	r0, r8
 8004416:	d81a      	bhi.n	800444e <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004418:	69f3      	ldr	r3, [r6, #28]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b08      	cmp	r3, #8
 8004420:	d1f5      	bne.n	800440e <HAL_RCC_ClockConfig+0x1da>
 8004422:	e7e0      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004424:	f7fe f948 	bl	80026b8 <HAL_GetTick>
 8004428:	1bc0      	subs	r0, r0, r7
 800442a:	4540      	cmp	r0, r8
 800442c:	d80f      	bhi.n	800444e <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800442e:	69f3      	ldr	r3, [r6, #28]
 8004430:	f013 0f0c 	tst.w	r3, #12
 8004434:	d1f6      	bne.n	8004424 <HAL_RCC_ClockConfig+0x1f0>
 8004436:	e7d6      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fe f93e 	bl	80026b8 <HAL_GetTick>
 800443c:	1bc0      	subs	r0, r0, r7
 800443e:	4540      	cmp	r0, r8
 8004440:	d805      	bhi.n	800444e <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004442:	69f3      	ldr	r3, [r6, #28]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b04      	cmp	r3, #4
 800444a:	d1f5      	bne.n	8004438 <HAL_RCC_ClockConfig+0x204>
 800444c:	e7cb      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b2>
            return HAL_TIMEOUT;
 800444e:	2003      	movs	r0, #3
}
 8004450:	b002      	add	sp, #8
 8004452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004456:	2001      	movs	r0, #1
}
 8004458:	4770      	bx	lr
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 800445c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004460:	0752      	lsls	r2, r2, #29
 8004462:	d511      	bpl.n	8004488 <HAL_RCC_ClockConfig+0x254>
      tickstart = HAL_GetTick();
 8004464:	f7fe f928 	bl	80026b8 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004468:	4b18      	ldr	r3, [pc, #96]	@ (80044cc <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 800446a:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	035b      	lsls	r3, r3, #13
 8004470:	d441      	bmi.n	80044f6 <HAL_RCC_ClockConfig+0x2c2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004472:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <HAL_RCC_ClockConfig+0x288>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	0199      	lsls	r1, r3, #6
 8004478:	f57f aef4 	bpl.w	8004264 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800447c:	6863      	ldr	r3, [r4, #4]
 800447e:	e743      	b.n	8004308 <HAL_RCC_ClockConfig+0xd4>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004480:	0556      	lsls	r6, r2, #21
 8004482:	f57f aeef 	bpl.w	8004264 <HAL_RCC_ClockConfig+0x30>
 8004486:	e73f      	b.n	8004308 <HAL_RCC_ClockConfig+0xd4>
        __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800448c:	f042 0204 	orr.w	r2, r2, #4
 8004490:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	9b01      	ldr	r3, [sp, #4]
      tickstart = HAL_GetTick();
 80044a0:	f7fe f90a 	bl	80026b8 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 80044a6:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	035f      	lsls	r7, r3, #13
 80044ac:	d51b      	bpl.n	80044e6 <HAL_RCC_ClockConfig+0x2b2>
        pwrclkchanged = SET;
 80044ae:	f04f 0801 	mov.w	r8, #1
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80044b2:	4f06      	ldr	r7, [pc, #24]	@ (80044cc <HAL_RCC_ClockConfig+0x298>)
 80044b4:	e011      	b.n	80044da <HAL_RCC_ClockConfig+0x2a6>
 80044b6:	bf00      	nop
 80044b8:	40022000 	.word	0x40022000
 80044bc:	46020c00 	.word	0x46020c00
 80044c0:	080080e4 	.word	0x080080e4
 80044c4:	20000064 	.word	0x20000064
 80044c8:	2000005c 	.word	0x2000005c
 80044cc:	46020800 	.word	0x46020800
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80044d0:	f7fe f8f2 	bl	80026b8 <HAL_GetTick>
 80044d4:	1b80      	subs	r0, r0, r6
 80044d6:	2802      	cmp	r0, #2
 80044d8:	d8b9      	bhi.n	800444e <HAL_RCC_ClockConfig+0x21a>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	0458      	lsls	r0, r3, #17
 80044de:	d5f7      	bpl.n	80044d0 <HAL_RCC_ClockConfig+0x29c>
      if (pwrclkchanged == SET)
 80044e0:	f1b8 0f00 	cmp.w	r8, #0
 80044e4:	d0c5      	beq.n	8004472 <HAL_RCC_ClockConfig+0x23e>
        __HAL_RCC_PWR_CLK_DISABLE();
 80044e6:	4a05      	ldr	r2, [pc, #20]	@ (80044fc <HAL_RCC_ClockConfig+0x2c8>)
 80044e8:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80044f4:	e7bd      	b.n	8004472 <HAL_RCC_ClockConfig+0x23e>
    FlagStatus  pwrclkchanged = RESET;
 80044f6:	f04f 0800 	mov.w	r8, #0
 80044fa:	e7da      	b.n	80044b2 <HAL_RCC_ClockConfig+0x27e>
 80044fc:	46020c00 	.word	0x46020c00

08004500 <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 8004500:	2800      	cmp	r0, #0
 8004502:	f000 82a4 	beq.w	8004a4e <HAL_RCC_OscConfig+0x54e>
{
 8004506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450a:	4aae      	ldr	r2, [pc, #696]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800450c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450e:	69d5      	ldr	r5, [r2, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004510:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004512:	06da      	lsls	r2, r3, #27
 8004514:	4604      	mov	r4, r0
{
 8004516:	b084      	sub	sp, #16
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004518:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451c:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004520:	d531      	bpl.n	8004586 <HAL_RCC_OscConfig+0x86>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004522:	2d00      	cmp	r5, #0
 8004524:	f000 81b2 	beq.w	800488c <HAL_RCC_OscConfig+0x38c>
 8004528:	2d0c      	cmp	r5, #12
 800452a:	f000 81ac 	beq.w	8004886 <HAL_RCC_OscConfig+0x386>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800452e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8004530:	4fa4      	ldr	r7, [pc, #656]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 822b 	beq.w	800498e <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_MSI_ENABLE();
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004540:	f7fe f8ba 	bl	80026b8 <HAL_GetTick>
 8004544:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004546:	e006      	b.n	8004556 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004548:	f7fe f8b6 	bl	80026b8 <HAL_GetTick>
 800454c:	eba0 0008 	sub.w	r0, r0, r8
 8004550:	2802      	cmp	r0, #2
 8004552:	f200 820e 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	075a      	lsls	r2, r3, #29
 800455a:	d5f5      	bpl.n	8004548 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004568:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800456c:	4313      	orrs	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004570:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8004574:	6a21      	ldr	r1, [r4, #32]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f0c0 8367 	bcc.w	8004c4a <HAL_RCC_OscConfig+0x74a>
 800457c:	f023 031f 	bic.w	r3, r3, #31
 8004580:	430b      	orrs	r3, r1
 8004582:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	07df      	lsls	r7, r3, #31
 8004588:	d531      	bpl.n	80045ee <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800458a:	2d08      	cmp	r5, #8
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800458c:	6862      	ldr	r2, [r4, #4]
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800458e:	f000 81bd 	beq.w	800490c <HAL_RCC_OscConfig+0x40c>
 8004592:	2d0c      	cmp	r5, #12
 8004594:	f000 81b7 	beq.w	8004906 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004598:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800459c:	f000 825b 	beq.w	8004a56 <HAL_RCC_OscConfig+0x556>
 80045a0:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 80045a4:	f000 833c 	beq.w	8004c20 <HAL_RCC_OscConfig+0x720>
 80045a8:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 80045ac:	f000 82fb 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x6a6>
 80045b0:	4f84      	ldr	r7, [pc, #528]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80045c8:	603b      	str	r3, [r7, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	f040 8248 	bne.w	8004a60 <HAL_RCC_OscConfig+0x560>
        tickstart = HAL_GetTick();
 80045d0:	f7fe f872 	bl	80026b8 <HAL_GetTick>
 80045d4:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045d6:	e006      	b.n	80045e6 <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fe f86e 	bl	80026b8 <HAL_GetTick>
 80045dc:	eba0 0008 	sub.w	r0, r0, r8
 80045e0:	2864      	cmp	r0, #100	@ 0x64
 80045e2:	f200 81c6 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	0399      	lsls	r1, r3, #14
 80045ea:	d4f5      	bmi.n	80045d8 <HAL_RCC_OscConfig+0xd8>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	079a      	lsls	r2, r3, #30
 80045f0:	d50f      	bpl.n	8004612 <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045f2:	2d04      	cmp	r5, #4
 80045f4:	f040 81c4 	bne.w	8004980 <HAL_RCC_OscConfig+0x480>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045f8:	68e3      	ldr	r3, [r4, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 817f 	beq.w	80048fe <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004600:	4a70      	ldr	r2, [pc, #448]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 8004602:	6921      	ldr	r1, [r4, #16]
 8004604:	6913      	ldr	r3, [r2, #16]
 8004606:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800460a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800460e:	6113      	str	r3, [r2, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	0718      	lsls	r0, r3, #28
 8004614:	d54d      	bpl.n	80046b2 <HAL_RCC_OscConfig+0x1b2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004616:	4b6b      	ldr	r3, [pc, #428]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 8004618:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800461c:	0751      	lsls	r1, r2, #29
 800461e:	f100 81b4 	bmi.w	800498a <HAL_RCC_OscConfig+0x48a>
      pwrclkchanged = SET;
 8004622:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004624:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004628:	f042 0204 	orr.w	r2, r2, #4
 800462c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8004630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800463c:	4e62      	ldr	r6, [pc, #392]	@ (80047c8 <HAL_RCC_OscConfig+0x2c8>)
 800463e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8004640:	07da      	lsls	r2, r3, #31
 8004642:	f140 8186 	bpl.w	8004952 <HAL_RCC_OscConfig+0x452>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004646:	6963      	ldr	r3, [r4, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 825d 	beq.w	8004b08 <HAL_RCC_OscConfig+0x608>
      uint32_t bdcr_temp = RCC->BDCR;
 800464e:	4e5d      	ldr	r6, [pc, #372]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004650:	69a2      	ldr	r2, [r4, #24]
      uint32_t bdcr_temp = RCC->BDCR;
 8004652:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004656:	f003 5180 	and.w	r1, r3, #268435456	@ 0x10000000
 800465a:	428a      	cmp	r2, r1
 800465c:	d010      	beq.n	8004680 <HAL_RCC_OscConfig+0x180>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800465e:	f003 6140 	and.w	r1, r3, #201326592	@ 0xc000000
 8004662:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8004666:	f000 814a 	beq.w	80048fe <HAL_RCC_OscConfig+0x3fe>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800466a:	0158      	lsls	r0, r3, #5
 800466c:	f100 82b1 	bmi.w	8004bd2 <HAL_RCC_OscConfig+0x6d2>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004670:	4954      	ldr	r1, [pc, #336]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 8004672:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      __HAL_RCC_LSI_ENABLE();
 8004680:	4e50      	ldr	r6, [pc, #320]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 8004682:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8004686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800468a:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800468e:	f7fe f813 	bl	80026b8 <HAL_GetTick>
 8004692:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004694:	e005      	b.n	80046a2 <HAL_RCC_OscConfig+0x1a2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004696:	f7fe f80f 	bl	80026b8 <HAL_GetTick>
 800469a:	1bc0      	subs	r0, r0, r7
 800469c:	2805      	cmp	r0, #5
 800469e:	f200 8168 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80046a2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80046a6:	011a      	lsls	r2, r3, #4
 80046a8:	d5f5      	bpl.n	8004696 <HAL_RCC_OscConfig+0x196>
    if (pwrclkchanged == SET)
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	f040 8289 	bne.w	8004bc2 <HAL_RCC_OscConfig+0x6c2>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	075d      	lsls	r5, r3, #29
 80046b4:	d55e      	bpl.n	8004774 <HAL_RCC_OscConfig+0x274>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046b6:	4b43      	ldr	r3, [pc, #268]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 80046b8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80046bc:	0750      	lsls	r0, r2, #29
 80046be:	f100 81c8 	bmi.w	8004a52 <HAL_RCC_OscConfig+0x552>
      pwrclkchanged = SET;
 80046c2:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80046c8:	f042 0204 	orr.w	r2, r2, #4
 80046cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80046d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	9b02      	ldr	r3, [sp, #8]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80046dc:	4e3a      	ldr	r6, [pc, #232]	@ (80047c8 <HAL_RCC_OscConfig+0x2c8>)
 80046de:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80046e0:	07d9      	lsls	r1, r3, #31
 80046e2:	f140 828c 	bpl.w	8004bfe <HAL_RCC_OscConfig+0x6fe>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80046e6:	68a3      	ldr	r3, [r4, #8]
 80046e8:	07da      	lsls	r2, r3, #31
 80046ea:	f140 81d3 	bpl.w	8004a94 <HAL_RCC_OscConfig+0x594>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80046ee:	075e      	lsls	r6, r3, #29
 80046f0:	f140 8251 	bpl.w	8004b96 <HAL_RCC_OscConfig+0x696>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046f4:	4b33      	ldr	r3, [pc, #204]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 80046f6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80046fa:	f042 0204 	orr.w	r2, r2, #4
 80046fe:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004702:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800470e:	f7fd ffd3 	bl	80026b8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004712:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004716:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004718:	4f2a      	ldr	r7, [pc, #168]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 800471a:	e005      	b.n	8004728 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fd ffcc 	bl	80026b8 <HAL_GetTick>
 8004720:	1b80      	subs	r0, r0, r6
 8004722:	4540      	cmp	r0, r8
 8004724:	f200 8125 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004728:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800472c:	0798      	lsls	r0, r3, #30
 800472e:	d5f5      	bpl.n	800471c <HAL_RCC_OscConfig+0x21c>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	f013 0f80 	tst.w	r3, #128	@ 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004736:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800473a:	f000 82c7 	beq.w	8004ccc <HAL_RCC_OscConfig+0x7cc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800473e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004742:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800474a:	4f1e      	ldr	r7, [pc, #120]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 800474c:	e005      	b.n	800475a <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474e:	f7fd ffb3 	bl	80026b8 <HAL_GetTick>
 8004752:	1b80      	subs	r0, r0, r6
 8004754:	4540      	cmp	r0, r8
 8004756:	f200 810c 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800475a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800475e:	0519      	lsls	r1, r3, #20
 8004760:	d5f5      	bpl.n	800474e <HAL_RCC_OscConfig+0x24e>
    if (pwrclkchanged == SET)
 8004762:	b135      	cbz	r5, 8004772 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004764:	4a17      	ldr	r2, [pc, #92]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
 8004766:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800476a:	f023 0304 	bic.w	r3, r3, #4
 800476e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	069a      	lsls	r2, r3, #26
 8004776:	d516      	bpl.n	80047a6 <HAL_RCC_OscConfig+0x2a6>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004778:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      __HAL_RCC_HSI48_ENABLE();
 800477a:	4d12      	ldr	r5, [pc, #72]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 81dc 	beq.w	8004b3a <HAL_RCC_OscConfig+0x63a>
      __HAL_RCC_HSI48_ENABLE();
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004788:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800478a:	f7fd ff95 	bl	80026b8 <HAL_GetTick>
 800478e:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004790:	e005      	b.n	800479e <HAL_RCC_OscConfig+0x29e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004792:	f7fd ff91 	bl	80026b8 <HAL_GetTick>
 8004796:	1b80      	subs	r0, r0, r6
 8004798:	2802      	cmp	r0, #2
 800479a:	f200 80ea 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800479e:	682b      	ldr	r3, [r5, #0]
 80047a0:	049b      	lsls	r3, r3, #18
 80047a2:	d5f6      	bpl.n	8004792 <HAL_RCC_OscConfig+0x292>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	061d      	lsls	r5, r3, #24
 80047a8:	d51a      	bpl.n	80047e0 <HAL_RCC_OscConfig+0x2e0>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80047aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      __HAL_RCC_SHSI_ENABLE();
 80047ac:	4d05      	ldr	r5, [pc, #20]	@ (80047c4 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 81df 	beq.w	8004b72 <HAL_RCC_OscConfig+0x672>
      __HAL_RCC_SHSI_ENABLE();
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80047bc:	f7fd ff7c 	bl	80026b8 <HAL_GetTick>
 80047c0:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80047c2:	e009      	b.n	80047d8 <HAL_RCC_OscConfig+0x2d8>
 80047c4:	46020c00 	.word	0x46020c00
 80047c8:	46020800 	.word	0x46020800
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80047cc:	f7fd ff74 	bl	80026b8 <HAL_GetTick>
 80047d0:	1b80      	subs	r0, r0, r6
 80047d2:	2802      	cmp	r0, #2
 80047d4:	f200 80cd 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	0418      	lsls	r0, r3, #16
 80047dc:	d5f6      	bpl.n	80047cc <HAL_RCC_OscConfig+0x2cc>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	065a      	lsls	r2, r3, #25
 80047e2:	d52b      	bpl.n	800483c <HAL_RCC_OscConfig+0x33c>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80047e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8257 	beq.w	8004c9a <HAL_RCC_OscConfig+0x79a>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80047ec:	4ba5      	ldr	r3, [pc, #660]	@ (8004a84 <HAL_RCC_OscConfig+0x584>)
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80047fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047fe:	430a      	orrs	r2, r1
 8004800:	609a      	str	r2, [r3, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004802:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8004806:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 800480a:	f0c0 8235 	bcc.w	8004c78 <HAL_RCC_OscConfig+0x778>
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	f022 021f 	bic.w	r2, r2, #31
 8004814:	430a      	orrs	r2, r1
 8004816:	60da      	str	r2, [r3, #12]
      __HAL_RCC_MSIK_ENABLE();
 8004818:	4d9a      	ldr	r5, [pc, #616]	@ (8004a84 <HAL_RCC_OscConfig+0x584>)
 800481a:	682b      	ldr	r3, [r5, #0]
 800481c:	f043 0310 	orr.w	r3, r3, #16
 8004820:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004822:	f7fd ff49 	bl	80026b8 <HAL_GetTick>
 8004826:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004828:	e005      	b.n	8004836 <HAL_RCC_OscConfig+0x336>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800482a:	f7fd ff45 	bl	80026b8 <HAL_GetTick>
 800482e:	1b80      	subs	r0, r0, r6
 8004830:	2802      	cmp	r0, #2
 8004832:	f200 809e 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004836:	682b      	ldr	r3, [r5, #0]
 8004838:	069b      	lsls	r3, r3, #26
 800483a:	d5f6      	bpl.n	800482a <HAL_RCC_OscConfig+0x32a>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800483e:	b303      	cbz	r3, 8004882 <HAL_RCC_OscConfig+0x382>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004840:	4d90      	ldr	r5, [pc, #576]	@ (8004a84 <HAL_RCC_OscConfig+0x584>)
 8004842:	69ea      	ldr	r2, [r5, #28]
 8004844:	f002 020c 	and.w	r2, r2, #12
 8004848:	2a0c      	cmp	r2, #12
 800484a:	f000 8255 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x7f8>
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484e:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004856:	602b      	str	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004858:	f000 82a6 	beq.w	8004da8 <HAL_RCC_OscConfig+0x8a8>
        tickstart = HAL_GetTick();
 800485c:	f7fd ff2c 	bl	80026b8 <HAL_GetTick>
 8004860:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004862:	e005      	b.n	8004870 <HAL_RCC_OscConfig+0x370>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fd ff28 	bl	80026b8 <HAL_GetTick>
 8004868:	1b00      	subs	r0, r0, r4
 800486a:	2802      	cmp	r0, #2
 800486c:	f200 8081 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	0199      	lsls	r1, r3, #6
 8004874:	d4f6      	bmi.n	8004864 <HAL_RCC_OscConfig+0x364>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004876:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004878:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800487c:	f023 0303 	bic.w	r3, r3, #3
 8004880:	62ab      	str	r3, [r5, #40]	@ 0x28
  return HAL_OK;
 8004882:	2000      	movs	r0, #0
 8004884:	e03c      	b.n	8004900 <HAL_RCC_OscConfig+0x400>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004886:	2e01      	cmp	r6, #1
 8004888:	f47f ae51 	bne.w	800452e <HAL_RCC_OscConfig+0x2e>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800488c:	69e3      	ldr	r3, [r4, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d035      	beq.n	80048fe <HAL_RCC_OscConfig+0x3fe>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004892:	4b7c      	ldr	r3, [pc, #496]	@ (8004a84 <HAL_RCC_OscConfig+0x584>)
 8004894:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	0217      	lsls	r7, r2, #8
 800489a:	bf56      	itet	pl
 800489c:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
 80048a0:	689b      	ldrmi	r3, [r3, #8]
 80048a2:	041b      	lslpl	r3, r3, #16
 80048a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80048a8:	4298      	cmp	r0, r3
 80048aa:	f240 8083 	bls.w	80049b4 <HAL_RCC_OscConfig+0x4b4>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048ae:	2d00      	cmp	r5, #0
 80048b0:	f000 81c4 	beq.w	8004c3c <HAL_RCC_OscConfig+0x73c>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80048b4:	4b73      	ldr	r3, [pc, #460]	@ (8004a84 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80048b6:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80048c0:	609a      	str	r2, [r3, #8]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80048c8:	ea42 0200 	orr.w	r2, r2, r0
 80048cc:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80048ce:	6a21      	ldr	r1, [r4, #32]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	f080 8149 	bcs.w	8004b68 <HAL_RCC_OscConfig+0x668>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	f2c0 81f2 	blt.w	8004cc0 <HAL_RCC_OscConfig+0x7c0>
 80048dc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80048e0:	bf2b      	itete	cs
 80048e2:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 80048e6:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 80048ea:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 80048ee:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 80048f2:	60da      	str	r2, [r3, #12]
 80048f4:	e081      	b.n	80049fa <HAL_RCC_OscConfig+0x4fa>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048f6:	f7ff fbb1 	bl	800405c <RCC_SetFlashLatencyFromMSIRange>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d07d      	beq.n	80049fa <HAL_RCC_OscConfig+0x4fa>
    return HAL_ERROR;
 80048fe:	2001      	movs	r0, #1
}
 8004900:	b004      	add	sp, #16
 8004902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004906:	2e03      	cmp	r6, #3
 8004908:	f47f ae46 	bne.w	8004598 <HAL_RCC_OscConfig+0x98>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800490c:	2a00      	cmp	r2, #0
 800490e:	d0f6      	beq.n	80048fe <HAL_RCC_OscConfig+0x3fe>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004910:	079d      	lsls	r5, r3, #30
 8004912:	f57f ae7e 	bpl.w	8004612 <HAL_RCC_OscConfig+0x112>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004916:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004918:	4d5a      	ldr	r5, [pc, #360]	@ (8004a84 <HAL_RCC_OscConfig+0x584>)
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8085 	beq.w	8004a2a <HAL_RCC_OscConfig+0x52a>
        __HAL_RCC_HSI_ENABLE();
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004926:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004928:	f7fd fec6 	bl	80026b8 <HAL_GetTick>
 800492c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800492e:	e004      	b.n	800493a <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004930:	f7fd fec2 	bl	80026b8 <HAL_GetTick>
 8004934:	1b80      	subs	r0, r0, r6
 8004936:	2802      	cmp	r0, #2
 8004938:	d81b      	bhi.n	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	055b      	lsls	r3, r3, #21
 800493e:	d5f7      	bpl.n	8004930 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004940:	692b      	ldr	r3, [r5, #16]
 8004942:	6922      	ldr	r2, [r4, #16]
 8004944:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800494c:	612b      	str	r3, [r5, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	e65f      	b.n	8004612 <HAL_RCC_OscConfig+0x112>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004952:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 800495a:	f7fd fead 	bl	80026b8 <HAL_GetTick>
 800495e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004960:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8004962:	07db      	lsls	r3, r3, #31
 8004964:	f53f ae6f 	bmi.w	8004646 <HAL_RCC_OscConfig+0x146>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004968:	f7fd fea6 	bl	80026b8 <HAL_GetTick>
 800496c:	1bc0      	subs	r0, r0, r7
 800496e:	2802      	cmp	r0, #2
 8004970:	d9f6      	bls.n	8004960 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8004972:	2003      	movs	r0, #3
}
 8004974:	b004      	add	sp, #16
 8004976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800497a:	079a      	lsls	r2, r3, #30
 800497c:	f57f ae49 	bpl.w	8004612 <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004980:	2d0c      	cmp	r5, #12
 8004982:	d1c8      	bne.n	8004916 <HAL_RCC_OscConfig+0x416>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004984:	2e02      	cmp	r6, #2
 8004986:	d1c6      	bne.n	8004916 <HAL_RCC_OscConfig+0x416>
 8004988:	e636      	b.n	80045f8 <HAL_RCC_OscConfig+0xf8>
    FlagStatus  pwrclkchanged = RESET;
 800498a:	2500      	movs	r5, #0
 800498c:	e656      	b.n	800463c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_DISABLE();
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004996:	f7fd fe8f 	bl	80026b8 <HAL_GetTick>
 800499a:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800499c:	e005      	b.n	80049aa <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800499e:	f7fd fe8b 	bl	80026b8 <HAL_GetTick>
 80049a2:	eba0 0008 	sub.w	r0, r0, r8
 80049a6:	2802      	cmp	r0, #2
 80049a8:	d8e3      	bhi.n	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	075b      	lsls	r3, r3, #29
 80049ae:	d4f6      	bmi.n	800499e <HAL_RCC_OscConfig+0x49e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	e5e8      	b.n	8004586 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049b4:	4b33      	ldr	r3, [pc, #204]	@ (8004a84 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049b6:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80049c0:	609a      	str	r2, [r3, #8]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80049c8:	ea42 0200 	orr.w	r2, r2, r0
 80049cc:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049ce:	6a21      	ldr	r1, [r4, #32]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	f080 80c4 	bcs.w	8004b5e <HAL_RCC_OscConfig+0x65e>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f2c0 8148 	blt.w	8004c6c <HAL_RCC_OscConfig+0x76c>
 80049dc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80049e0:	bf2b      	itete	cs
 80049e2:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 80049e6:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 80049ea:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 80049ee:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 80049f2:	60da      	str	r2, [r3, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	f43f af7e 	beq.w	80048f6 <HAL_RCC_OscConfig+0x3f6>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80049fa:	f7ff fb8d 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4a20      	ldr	r2, [pc, #128]	@ (8004a84 <HAL_RCC_OscConfig+0x584>)
 8004a02:	4921      	ldr	r1, [pc, #132]	@ (8004a88 <HAL_RCC_OscConfig+0x588>)
 8004a04:	6a12      	ldr	r2, [r2, #32]
 8004a06:	f002 020f 	and.w	r2, r2, #15
 8004a0a:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 8004a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a8c <HAL_RCC_OscConfig+0x58c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a0e:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 8004a10:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a12:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <HAL_RCC_OscConfig+0x590>)
 8004a14:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8004a16:	f7fd fdc7 	bl	80025a8 <HAL_InitTick>
        if (status != HAL_OK)
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	f47f af70 	bne.w	8004900 <HAL_RCC_OscConfig+0x400>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	07d9      	lsls	r1, r3, #31
 8004a24:	d5a9      	bpl.n	800497a <HAL_RCC_OscConfig+0x47a>
 8004a26:	6862      	ldr	r2, [r4, #4]
 8004a28:	e5b3      	b.n	8004592 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_DISABLE();
 8004a2a:	682b      	ldr	r3, [r5, #0]
 8004a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a30:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a32:	f7fd fe41 	bl	80026b8 <HAL_GetTick>
 8004a36:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a38:	e004      	b.n	8004a44 <HAL_RCC_OscConfig+0x544>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3a:	f7fd fe3d 	bl	80026b8 <HAL_GetTick>
 8004a3e:	1b80      	subs	r0, r0, r6
 8004a40:	2802      	cmp	r0, #2
 8004a42:	d896      	bhi.n	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	055f      	lsls	r7, r3, #21
 8004a48:	d4f7      	bmi.n	8004a3a <HAL_RCC_OscConfig+0x53a>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	e5e1      	b.n	8004612 <HAL_RCC_OscConfig+0x112>
    return HAL_ERROR;
 8004a4e:	2001      	movs	r0, #1
}
 8004a50:	4770      	bx	lr
    FlagStatus pwrclkchanged = RESET;
 8004a52:	2500      	movs	r5, #0
 8004a54:	e642      	b.n	80046dc <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004a56:	4a0b      	ldr	r2, [pc, #44]	@ (8004a84 <HAL_RCC_OscConfig+0x584>)
 8004a58:	6813      	ldr	r3, [r2, #0]
 8004a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a60:	f7fd fe2a 	bl	80026b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a64:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8004a84 <HAL_RCC_OscConfig+0x584>
        tickstart = HAL_GetTick();
 8004a68:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a6a:	e005      	b.n	8004a78 <HAL_RCC_OscConfig+0x578>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fd fe24 	bl	80026b8 <HAL_GetTick>
 8004a70:	1bc0      	subs	r0, r0, r7
 8004a72:	2864      	cmp	r0, #100	@ 0x64
 8004a74:	f63f af7d 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a78:	f8d8 3000 	ldr.w	r3, [r8]
 8004a7c:	0398      	lsls	r0, r3, #14
 8004a7e:	d5f5      	bpl.n	8004a6c <HAL_RCC_OscConfig+0x56c>
 8004a80:	e5b4      	b.n	80045ec <HAL_RCC_OscConfig+0xec>
 8004a82:	bf00      	nop
 8004a84:	46020c00 	.word	0x46020c00
 8004a88:	080080e4 	.word	0x080080e4
 8004a8c:	20000064 	.word	0x20000064
 8004a90:	2000005c 	.word	0x2000005c
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a94:	4e97      	ldr	r6, [pc, #604]	@ (8004cf4 <HAL_RCC_OscConfig+0x7f4>)
 8004a96:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004aa2:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8004aa6:	f022 0204 	bic.w	r2, r2, #4
 8004aaa:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f47f ae2d 	bne.w	800470e <HAL_RCC_OscConfig+0x20e>
      tickstart = HAL_GetTick();
 8004ab4:	f7fd fe00 	bl	80026b8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004abc:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004abe:	e005      	b.n	8004acc <HAL_RCC_OscConfig+0x5cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac0:	f7fd fdfa 	bl	80026b8 <HAL_GetTick>
 8004ac4:	1bc0      	subs	r0, r0, r7
 8004ac6:	4540      	cmp	r0, r8
 8004ac8:	f63f af53 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004acc:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8004ad0:	079b      	lsls	r3, r3, #30
 8004ad2:	d4f5      	bmi.n	8004ac0 <HAL_RCC_OscConfig+0x5c0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004ad4:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8004ad8:	0618      	lsls	r0, r3, #24
 8004ada:	f57f ae42 	bpl.w	8004762 <HAL_RCC_OscConfig+0x262>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ade:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae2:	f241 3888 	movw	r8, #5000	@ 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aea:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004aee:	4e81      	ldr	r6, [pc, #516]	@ (8004cf4 <HAL_RCC_OscConfig+0x7f4>)
 8004af0:	e005      	b.n	8004afe <HAL_RCC_OscConfig+0x5fe>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af2:	f7fd fde1 	bl	80026b8 <HAL_GetTick>
 8004af6:	1bc0      	subs	r0, r0, r7
 8004af8:	4540      	cmp	r0, r8
 8004afa:	f63f af3a 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004afe:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8004b02:	0519      	lsls	r1, r3, #20
 8004b04:	d4f5      	bmi.n	8004af2 <HAL_RCC_OscConfig+0x5f2>
 8004b06:	e62c      	b.n	8004762 <HAL_RCC_OscConfig+0x262>
      __HAL_RCC_LSI_DISABLE();
 8004b08:	4e7a      	ldr	r6, [pc, #488]	@ (8004cf4 <HAL_RCC_OscConfig+0x7f4>)
 8004b0a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8004b0e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004b12:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8004b16:	f7fd fdcf 	bl	80026b8 <HAL_GetTick>
 8004b1a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b1c:	e005      	b.n	8004b2a <HAL_RCC_OscConfig+0x62a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1e:	f7fd fdcb 	bl	80026b8 <HAL_GetTick>
 8004b22:	1bc0      	subs	r0, r0, r7
 8004b24:	2805      	cmp	r0, #5
 8004b26:	f63f af24 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004b2a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	d4f5      	bmi.n	8004b1e <HAL_RCC_OscConfig+0x61e>
    if (pwrclkchanged == SET)
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	f43f adbc 	beq.w	80046b0 <HAL_RCC_OscConfig+0x1b0>
 8004b38:	e043      	b.n	8004bc2 <HAL_RCC_OscConfig+0x6c2>
      __HAL_RCC_HSI48_DISABLE();
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b40:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004b42:	f7fd fdb9 	bl	80026b8 <HAL_GetTick>
 8004b46:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004b48:	e005      	b.n	8004b56 <HAL_RCC_OscConfig+0x656>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b4a:	f7fd fdb5 	bl	80026b8 <HAL_GetTick>
 8004b4e:	1b80      	subs	r0, r0, r6
 8004b50:	2802      	cmp	r0, #2
 8004b52:	f63f af0e 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	049f      	lsls	r7, r3, #18
 8004b5a:	d4f6      	bmi.n	8004b4a <HAL_RCC_OscConfig+0x64a>
 8004b5c:	e622      	b.n	80047a4 <HAL_RCC_OscConfig+0x2a4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b5e:	f022 021f 	bic.w	r2, r2, #31
 8004b62:	430a      	orrs	r2, r1
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	e745      	b.n	80049f4 <HAL_RCC_OscConfig+0x4f4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b68:	f022 021f 	bic.w	r2, r2, #31
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	e743      	b.n	80049fa <HAL_RCC_OscConfig+0x4fa>
      __HAL_RCC_SHSI_DISABLE();
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b78:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004b7a:	f7fd fd9d 	bl	80026b8 <HAL_GetTick>
 8004b7e:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004b80:	e005      	b.n	8004b8e <HAL_RCC_OscConfig+0x68e>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004b82:	f7fd fd99 	bl	80026b8 <HAL_GetTick>
 8004b86:	1b80      	subs	r0, r0, r6
 8004b88:	2802      	cmp	r0, #2
 8004b8a:	f63f aef2 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004b8e:	682b      	ldr	r3, [r5, #0]
 8004b90:	0419      	lsls	r1, r3, #16
 8004b92:	d4f6      	bmi.n	8004b82 <HAL_RCC_OscConfig+0x682>
 8004b94:	e623      	b.n	80047de <HAL_RCC_OscConfig+0x2de>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b96:	4a57      	ldr	r2, [pc, #348]	@ (8004cf4 <HAL_RCC_OscConfig+0x7f4>)
 8004b98:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ba4:	e5b3      	b.n	800470e <HAL_RCC_OscConfig+0x20e>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004ba6:	4b53      	ldr	r3, [pc, #332]	@ (8004cf4 <HAL_RCC_OscConfig+0x7f4>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004bbe:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc0:	e74e      	b.n	8004a60 <HAL_RCC_OscConfig+0x560>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc2:	4a4c      	ldr	r2, [pc, #304]	@ (8004cf4 <HAL_RCC_OscConfig+0x7f4>)
 8004bc4:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004bc8:	f023 0304 	bic.w	r3, r3, #4
 8004bcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004bd0:	e56e      	b.n	80046b0 <HAL_RCC_OscConfig+0x1b0>
          __HAL_RCC_LSI_DISABLE();
 8004bd2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8004bd6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004bda:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
          tickstart = HAL_GetTick();
 8004bde:	f7fd fd6b 	bl	80026b8 <HAL_GetTick>
 8004be2:	4607      	mov	r7, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004be4:	e005      	b.n	8004bf2 <HAL_RCC_OscConfig+0x6f2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be6:	f7fd fd67 	bl	80026b8 <HAL_GetTick>
 8004bea:	1bc0      	subs	r0, r0, r7
 8004bec:	2805      	cmp	r0, #5
 8004bee:	f63f aec0 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004bf2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8004bf6:	0119      	lsls	r1, r3, #4
 8004bf8:	d4f5      	bmi.n	8004be6 <HAL_RCC_OscConfig+0x6e6>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004bfa:	69a2      	ldr	r2, [r4, #24]
 8004bfc:	e538      	b.n	8004670 <HAL_RCC_OscConfig+0x170>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004bfe:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 8004c06:	f7fd fd57 	bl	80026b8 <HAL_GetTick>
 8004c0a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004c0c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8004c0e:	07db      	lsls	r3, r3, #31
 8004c10:	f53f ad69 	bmi.w	80046e6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fd fd50 	bl	80026b8 <HAL_GetTick>
 8004c18:	1bc0      	subs	r0, r0, r7
 8004c1a:	2802      	cmp	r0, #2
 8004c1c:	d9f6      	bls.n	8004c0c <HAL_RCC_OscConfig+0x70c>
 8004c1e:	e6a8      	b.n	8004972 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004c20:	4b34      	ldr	r3, [pc, #208]	@ (8004cf4 <HAL_RCC_OscConfig+0x7f4>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004c38:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c3a:	e711      	b.n	8004a60 <HAL_RCC_OscConfig+0x560>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c3c:	f7ff fa0e 	bl	800405c <RCC_SetFlashLatencyFromMSIRange>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	f47f ae5c 	bne.w	80048fe <HAL_RCC_OscConfig+0x3fe>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004c46:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004c48:	e634      	b.n	80048b4 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	f2c0 80a4 	blt.w	8004d98 <HAL_RCC_OscConfig+0x898>
 8004c50:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004c54:	bf2b      	itete	cs
 8004c56:	f423 43f8 	biccs.w	r3, r3, #31744	@ 0x7c00
 8004c5a:	f423 2378 	biccc.w	r3, r3, #1015808	@ 0xf8000
 8004c5e:	ea43 2381 	orrcs.w	r3, r3, r1, lsl #10
 8004c62:	ea43 33c1 	orrcc.w	r3, r3, r1, lsl #15
 8004c66:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	e48c      	b.n	8004586 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c6c:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8004c70:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	e6bd      	b.n	80049f4 <HAL_RCC_OscConfig+0x4f4>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	f2c0 811e 	blt.w	8004eba <HAL_RCC_OscConfig+0x9ba>
 8004c7e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	bf2b      	itete	cs
 8004c86:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8004c8a:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8004c8e:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8004c92:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	e5be      	b.n	8004818 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_MSIK_DISABLE();
 8004c9a:	4d16      	ldr	r5, [pc, #88]	@ (8004cf4 <HAL_RCC_OscConfig+0x7f4>)
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	f023 0310 	bic.w	r3, r3, #16
 8004ca2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004ca4:	f7fd fd08 	bl	80026b8 <HAL_GetTick>
 8004ca8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004caa:	e005      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7b8>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004cac:	f7fd fd04 	bl	80026b8 <HAL_GetTick>
 8004cb0:	1b80      	subs	r0, r0, r6
 8004cb2:	2802      	cmp	r0, #2
 8004cb4:	f63f ae5d 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	069f      	lsls	r7, r3, #26
 8004cbc:	d4f6      	bmi.n	8004cac <HAL_RCC_OscConfig+0x7ac>
 8004cbe:	e5bd      	b.n	800483c <HAL_RCC_OscConfig+0x33c>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004cc0:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8004cc4:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	e696      	b.n	80049fa <HAL_RCC_OscConfig+0x4fa>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004cd8:	4f06      	ldr	r7, [pc, #24]	@ (8004cf4 <HAL_RCC_OscConfig+0x7f4>)
 8004cda:	e005      	b.n	8004ce8 <HAL_RCC_OscConfig+0x7e8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fd fcec 	bl	80026b8 <HAL_GetTick>
 8004ce0:	1b80      	subs	r0, r0, r6
 8004ce2:	4540      	cmp	r0, r8
 8004ce4:	f63f ae45 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ce8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004cec:	051a      	lsls	r2, r3, #20
 8004cee:	d4f5      	bmi.n	8004cdc <HAL_RCC_OscConfig+0x7dc>
 8004cf0:	e537      	b.n	8004762 <HAL_RCC_OscConfig+0x262>
 8004cf2:	bf00      	nop
 8004cf4:	46020c00 	.word	0x46020c00
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf8:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004cfa:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cfc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfe:	f43f adfe 	beq.w	80048fe <HAL_RCC_OscConfig+0x3fe>
 8004d02:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004d04:	f002 0103 	and.w	r1, r2, #3
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d08:	4299      	cmp	r1, r3
 8004d0a:	f47f adf8 	bne.w	80048fe <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004d0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004d10:	f3c2 2103 	ubfx	r1, r2, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004d14:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004d16:	4299      	cmp	r1, r3
 8004d18:	f47f adf1 	bne.w	80048fe <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004d1c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004d1e:	f402 4270 	and.w	r2, r2, #61440	@ 0xf000
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f47f adeb 	bne.w	80048fe <HAL_RCC_OscConfig+0x3fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d28:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004d2a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8004d2e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	f47f ade4 	bne.w	80048fe <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d36:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004d38:	f3c0 2246 	ubfx	r2, r0, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d3c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	f47f addd 	bne.w	80048fe <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d44:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004d46:	f3c0 4206 	ubfx	r2, r0, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d4a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	f47f add6 	bne.w	80048fe <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004d54:	f3c0 6006 	ubfx	r0, r0, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d58:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d5a:	4298      	cmp	r0, r3
 8004d5c:	f47f adcf 	bne.w	80048fe <HAL_RCC_OscConfig+0x3fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d60:	4b59      	ldr	r3, [pc, #356]	@ (8004ec8 <HAL_RCC_OscConfig+0x9c8>)
 8004d62:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d66:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8004d6a:	428a      	cmp	r2, r1
 8004d6c:	f43f ad89 	beq.w	8004882 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d72:	f022 0210 	bic.w	r2, r2, #16
 8004d76:	629a      	str	r2, [r3, #40]	@ 0x28
        tickstart = HAL_GetTick();
 8004d78:	f7fd fc9e 	bl	80026b8 <HAL_GetTick>
 8004d7c:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004d7e:	f7fd fc9b 	bl	80026b8 <HAL_GetTick>
 8004d82:	42a8      	cmp	r0, r5
 8004d84:	d0fb      	beq.n	8004d7e <HAL_RCC_OscConfig+0x87e>
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004d86:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004d88:	4b4f      	ldr	r3, [pc, #316]	@ (8004ec8 <HAL_RCC_OscConfig+0x9c8>)
 8004d8a:	00d2      	lsls	r2, r2, #3
 8004d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004d8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d90:	f042 0210 	orr.w	r2, r2, #16
 8004d94:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d96:	e574      	b.n	8004882 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004d98:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8004d9c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8004da0:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f7ff bbef 	b.w	8004586 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8004da8:	f7fd fc86 	bl	80026b8 <HAL_GetTick>
 8004dac:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dae:	e005      	b.n	8004dbc <HAL_RCC_OscConfig+0x8bc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db0:	f7fd fc82 	bl	80026b8 <HAL_GetTick>
 8004db4:	1b80      	subs	r0, r0, r6
 8004db6:	2802      	cmp	r0, #2
 8004db8:	f63f addb 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8004dc2:	d1f5      	bne.n	8004db0 <HAL_RCC_OscConfig+0x8b0>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc4:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8004dc8:	0756      	lsls	r6, r2, #29
 8004dca:	d40c      	bmi.n	8004de6 <HAL_RCC_OscConfig+0x8e6>
          pwrclkchanged = SET;
 8004dcc:	2301      	movs	r3, #1
          __HAL_RCC_PWR_CLK_ENABLE();
 8004dce:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8004dd2:	f042 0204 	orr.w	r2, r2, #4
 8004dd6:	f8c5 2094 	str.w	r2, [r5, #148]	@ 0x94
 8004dda:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8004dde:	f002 0204 	and.w	r2, r2, #4
 8004de2:	9203      	str	r2, [sp, #12]
 8004de4:	9a03      	ldr	r2, [sp, #12]
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004de6:	4d39      	ldr	r5, [pc, #228]	@ (8004ecc <HAL_RCC_OscConfig+0x9cc>)
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004de8:	4937      	ldr	r1, [pc, #220]	@ (8004ec8 <HAL_RCC_OscConfig+0x9c8>)
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004dea:	68ee      	ldr	r6, [r5, #12]
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004dec:	68ea      	ldr	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004dee:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8004ed0 <HAL_RCC_OscConfig+0x9d0>
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004df2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004df6:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004df8:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8004dfa:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8004dfc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004dfe:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 8004e02:	f020 0003 	bic.w	r0, r0, #3
 8004e06:	433a      	orrs	r2, r7
 8004e08:	4302      	orrs	r2, r0
 8004e0a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004e0c:	3801      	subs	r0, #1
 8004e0e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004e12:	628a      	str	r2, [r1, #40]	@ 0x28
 8004e14:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004e16:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004e18:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 8004e1c:	1e47      	subs	r7, r0, #1
 8004e1e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004e20:	3a01      	subs	r2, #1
 8004e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e26:	027f      	lsls	r7, r7, #9
 8004e28:	3801      	subs	r0, #1
 8004e2a:	ea0e 0c0c 	and.w	ip, lr, ip
 8004e2e:	b2bf      	uxth	r7, r7
 8004e30:	0400      	lsls	r0, r0, #16
 8004e32:	ea42 020c 	orr.w	r2, r2, ip
 8004e36:	f400 00fe 	and.w	r0, r0, #8323072	@ 0x7f0000
 8004e3a:	433a      	orrs	r2, r7
 8004e3c:	4302      	orrs	r2, r0
 8004e3e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004e40:	3801      	subs	r0, #1
 8004e42:	0600      	lsls	r0, r0, #24
 8004e44:	f000 40fe 	and.w	r0, r0, #2130706432	@ 0x7f000000
 8004e48:	4302      	orrs	r2, r0
 8004e4a:	634a      	str	r2, [r1, #52]	@ 0x34
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e4c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004e4e:	f022 0210 	bic.w	r2, r2, #16
 8004e52:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004e54:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004e56:	00d2      	lsls	r2, r2, #3
 8004e58:	638a      	str	r2, [r1, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004e5a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004e5c:	f042 0210 	orr.w	r2, r2, #16
 8004e60:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004e62:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e66:	f022 020c 	bic.w	r2, r2, #12
 8004e6a:	4302      	orrs	r2, r0
        if (pwrboosten == SET)
 8004e6c:	0374      	lsls	r4, r6, #13
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004e6e:	628a      	str	r2, [r1, #40]	@ 0x28
        if (pwrboosten == SET)
 8004e70:	d41e      	bmi.n	8004eb0 <HAL_RCC_OscConfig+0x9b0>
        if (pwrclkchanged == SET)
 8004e72:	b133      	cbz	r3, 8004e82 <HAL_RCC_OscConfig+0x982>
          __HAL_RCC_PWR_CLK_DISABLE();
 8004e74:	4a14      	ldr	r2, [pc, #80]	@ (8004ec8 <HAL_RCC_OscConfig+0x9c8>)
 8004e76:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004e7a:	f023 0304 	bic.w	r3, r3, #4
 8004e7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        __HAL_RCC_PLL_ENABLE();
 8004e82:	4c11      	ldr	r4, [pc, #68]	@ (8004ec8 <HAL_RCC_OscConfig+0x9c8>)
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004e8c:	f7fd fc14 	bl	80026b8 <HAL_GetTick>
 8004e90:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004e92:	e005      	b.n	8004ea0 <HAL_RCC_OscConfig+0x9a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fd fc10 	bl	80026b8 <HAL_GetTick>
 8004e98:	1b40      	subs	r0, r0, r5
 8004e9a:	2802      	cmp	r0, #2
 8004e9c:	f63f ad69 	bhi.w	8004972 <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	0198      	lsls	r0, r3, #6
 8004ea4:	d5f6      	bpl.n	8004e94 <HAL_RCC_OscConfig+0x994>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ea6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004eac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004eae:	e4e8      	b.n	8004882 <HAL_RCC_OscConfig+0x382>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004eb0:	68ea      	ldr	r2, [r5, #12]
 8004eb2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004eb6:	60ea      	str	r2, [r5, #12]
 8004eb8:	e7db      	b.n	8004e72 <HAL_RCC_OscConfig+0x972>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8004ec0:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8004ec4:	60da      	str	r2, [r3, #12]
 8004ec6:	e4a7      	b.n	8004818 <HAL_RCC_OscConfig+0x318>
 8004ec8:	46020c00 	.word	0x46020c00
 8004ecc:	46020800 	.word	0x46020800
 8004ed0:	80800000 	.word	0x80800000

08004ed4 <HAL_RCC_GetHCLKFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed4:	4a47      	ldr	r2, [pc, #284]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x120>)
{
 8004ed6:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed8:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eda:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004edc:	f013 030c 	ands.w	r3, r3, #12
 8004ee0:	d016      	beq.n	8004f10 <HAL_RCC_GetHCLKFreq+0x3c>
 8004ee2:	2b0c      	cmp	r3, #12
 8004ee4:	d06a      	beq.n	8004fbc <HAL_RCC_GetHCLKFreq+0xe8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ee6:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 8004ee8:	4843      	ldr	r0, [pc, #268]	@ (8004ff8 <HAL_RCC_GetHCLKFreq+0x124>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eea:	f002 020c 	and.w	r2, r2, #12
 8004eee:	2a04      	cmp	r2, #4
 8004ef0:	d002      	beq.n	8004ef8 <HAL_RCC_GetHCLKFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	bf18      	it	ne
 8004ef6:	2000      	movne	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x120>)
 8004efa:	4940      	ldr	r1, [pc, #256]	@ (8004ffc <HAL_RCC_GetHCLKFreq+0x128>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	4a40      	ldr	r2, [pc, #256]	@ (8005000 <HAL_RCC_GetHCLKFreq+0x12c>)
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
}
 8004f06:	f85d 4b04 	ldr.w	r4, [sp], #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004f0a:	40d8      	lsrs	r0, r3
 8004f0c:	6010      	str	r0, [r2, #0]
}
 8004f0e:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004f10:	4a38      	ldr	r2, [pc, #224]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x120>)
 8004f12:	6891      	ldr	r1, [r2, #8]
 8004f14:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004f16:	bf54      	ite	pl
 8004f18:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004f1c:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8004f1e:	4939      	ldr	r1, [pc, #228]	@ (8005004 <HAL_RCC_GetHCLKFreq+0x130>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004f20:	bf54      	ite	pl
 8004f22:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004f26:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8004f28:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0e3      	beq.n	8004ef8 <HAL_RCC_GetHCLKFreq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f30:	4930      	ldr	r1, [pc, #192]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x120>)
 8004f32:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004f34:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f36:	f004 0c03 	and.w	ip, r4, #3
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f3a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f3c:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f42:	f3c4 04cc 	ubfx	r4, r4, #3, #13
 8004f46:	fb04 f303 	mul.w	r3, r4, r3
 8004f4a:	ee07 3a90 	vmov	s15, r3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004f4e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    switch (pllsource)
 8004f52:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004f5a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8004f5e:	d002      	beq.n	8004f66 <HAL_RCC_GetHCLKFreq+0x92>
 8004f60:	f1bc 0f03 	cmp.w	ip, #3
 8004f64:	d131      	bne.n	8004fca <HAL_RCC_GetHCLKFreq+0xf6>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f66:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004f68:	ee07 2a10 	vmov	s14, r2
 8004f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f70:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f78:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f7c:	eddf 5a22 	vldr	s11, [pc, #136]	@ 8005008 <HAL_RCC_GetHCLKFreq+0x134>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f84:	ed9f 5a21 	vldr	s10, [pc, #132]	@ 800500c <HAL_RCC_GetHCLKFreq+0x138>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f88:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f8c:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f90:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004f94:	4b17      	ldr	r3, [pc, #92]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x120>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f96:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f9c:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004fa0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004fa4:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004fb2:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8004fb6:	ee17 0a90 	vmov	r0, s15
 8004fba:	e79d      	b.n	8004ef8 <HAL_RCC_GetHCLKFreq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fbc:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fc0:	2901      	cmp	r1, #1
 8004fc2:	d0a5      	beq.n	8004f10 <HAL_RCC_GetHCLKFreq+0x3c>
  uint32_t msirange = 0U;
 8004fc4:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fc6:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fc8:	e7b2      	b.n	8004f30 <HAL_RCC_GetHCLKFreq+0x5c>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fca:	ee07 0a10 	vmov	s14, r0
 8004fce:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004fd0:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8004fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd8:	ee06 3a10 	vmov	s12, r3
 8004fdc:	ee07 2a10 	vmov	s14, r2
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004fe0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fe4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004fe8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004fec:	eddf 5a06 	vldr	s11, [pc, #24]	@ 8005008 <HAL_RCC_GetHCLKFreq+0x134>
 8004ff0:	e7ca      	b.n	8004f88 <HAL_RCC_GetHCLKFreq+0xb4>
 8004ff2:	bf00      	nop
 8004ff4:	46020c00 	.word	0x46020c00
 8004ff8:	00f42400 	.word	0x00f42400
 8004ffc:	080080e4 	.word	0x080080e4
 8005000:	2000005c 	.word	0x2000005c
 8005004:	0800809c 	.word	0x0800809c
 8005008:	39000000 	.word	0x39000000
 800500c:	4b742400 	.word	0x4b742400

08005010 <HAL_RCC_GetPCLK1Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005010:	4949      	ldr	r1, [pc, #292]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x128>)
{
 8005012:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005014:	69ca      	ldr	r2, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005016:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005018:	f012 020c 	ands.w	r2, r2, #12
 800501c:	d01c      	beq.n	8005058 <HAL_RCC_GetPCLK1Freq+0x48>
 800501e:	2a0c      	cmp	r2, #12
 8005020:	d06e      	beq.n	8005100 <HAL_RCC_GetPCLK1Freq+0xf0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005022:	69cb      	ldr	r3, [r1, #28]
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	2b04      	cmp	r3, #4
    sysclockfreq = HSI_VALUE;
 800502a:	4b44      	ldr	r3, [pc, #272]	@ (800513c <HAL_RCC_GetPCLK1Freq+0x12c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800502c:	d002      	beq.n	8005034 <HAL_RCC_GetPCLK1Freq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800502e:	2a08      	cmp	r2, #8
 8005030:	bf18      	it	ne
 8005032:	2300      	movne	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005034:	4940      	ldr	r1, [pc, #256]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x128>)
 8005036:	4c42      	ldr	r4, [pc, #264]	@ (8005140 <HAL_RCC_GetPCLK1Freq+0x130>)
 8005038:	6a0a      	ldr	r2, [r1, #32]
 800503a:	4842      	ldr	r0, [pc, #264]	@ (8005144 <HAL_RCC_GetPCLK1Freq+0x134>)
 800503c:	f002 020f 	and.w	r2, r2, #15
 8005040:	5ca2      	ldrb	r2, [r4, r2]
}
 8005042:	bc30      	pop	{r4, r5}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005044:	40d3      	lsrs	r3, r2
 8005046:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005048:	6a0a      	ldr	r2, [r1, #32]
 800504a:	493f      	ldr	r1, [pc, #252]	@ (8005148 <HAL_RCC_GetPCLK1Freq+0x138>)
 800504c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005050:	5c88      	ldrb	r0, [r1, r2]
}
 8005052:	fa23 f000 	lsr.w	r0, r3, r0
 8005056:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005058:	4b37      	ldr	r3, [pc, #220]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x128>)
 800505a:	6899      	ldr	r1, [r3, #8]
 800505c:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800505e:	bf54      	ite	pl
 8005060:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005064:	689b      	ldrmi	r3, [r3, #8]
    msirange = MSIRangeTable[msirange];
 8005066:	4939      	ldr	r1, [pc, #228]	@ (800514c <HAL_RCC_GetPCLK1Freq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005068:	bf54      	ite	pl
 800506a:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800506e:	0f1b      	lsrmi	r3, r3, #28
    msirange = MSIRangeTable[msirange];
 8005070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005074:	2a00      	cmp	r2, #0
 8005076:	d0dd      	beq.n	8005034 <HAL_RCC_GetPCLK1Freq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005078:	482f      	ldr	r0, [pc, #188]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x128>)
 800507a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800507c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800507e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005080:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005082:	f3c2 1200 	ubfx	r2, r2, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005086:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 800508a:	fb0c f202 	mul.w	r2, ip, r2
 800508e:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005092:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005096:	f3c1 2103 	ubfx	r1, r1, #8, #4
    switch (pllsource)
 800509a:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800509c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80050a0:	f101 0101 	add.w	r1, r1, #1
    switch (pllsource)
 80050a4:	d001      	beq.n	80050aa <HAL_RCC_GetPCLK1Freq+0x9a>
 80050a6:	2c03      	cmp	r4, #3
 80050a8:	d131      	bne.n	800510e <HAL_RCC_GetPCLK1Freq+0xfe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80050ac:	ee07 1a10 	vmov	s14, r1
 80050b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b4:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050bc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050c0:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8005150 <HAL_RCC_GetPCLK1Freq+0x140>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80050c8:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 8005154 <HAL_RCC_GetPCLK1Freq+0x144>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050cc:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050d0:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050d4:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80050d8:	4b17      	ldr	r3, [pc, #92]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x128>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050da:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80050de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050e0:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80050e4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80050e8:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80050f6:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80050fa:	ee17 3a90 	vmov	r3, s15
 80050fe:	e799      	b.n	8005034 <HAL_RCC_GetPCLK1Freq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005100:	f000 0003 	and.w	r0, r0, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005104:	2801      	cmp	r0, #1
 8005106:	d0a7      	beq.n	8005058 <HAL_RCC_GetPCLK1Freq+0x48>
  uint32_t msirange = 0U;
 8005108:	2300      	movs	r3, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800510a:	69ca      	ldr	r2, [r1, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800510c:	e7b4      	b.n	8005078 <HAL_RCC_GetPCLK1Freq+0x68>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800510e:	ee07 3a10 	vmov	s14, r3
 8005112:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8005114:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8005118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511c:	ee06 2a10 	vmov	s12, r2
 8005120:	ee07 1a10 	vmov	s14, r1
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005124:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005128:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800512c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005130:	eddf 5a07 	vldr	s11, [pc, #28]	@ 8005150 <HAL_RCC_GetPCLK1Freq+0x140>
 8005134:	e7ca      	b.n	80050cc <HAL_RCC_GetPCLK1Freq+0xbc>
 8005136:	bf00      	nop
 8005138:	46020c00 	.word	0x46020c00
 800513c:	00f42400 	.word	0x00f42400
 8005140:	080080e4 	.word	0x080080e4
 8005144:	2000005c 	.word	0x2000005c
 8005148:	080080dc 	.word	0x080080dc
 800514c:	0800809c 	.word	0x0800809c
 8005150:	39000000 	.word	0x39000000
 8005154:	4b742400 	.word	0x4b742400

08005158 <HAL_RCC_GetPCLK2Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005158:	4949      	ldr	r1, [pc, #292]	@ (8005280 <HAL_RCC_GetPCLK2Freq+0x128>)
{
 800515a:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800515c:	69ca      	ldr	r2, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800515e:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005160:	f012 020c 	ands.w	r2, r2, #12
 8005164:	d01c      	beq.n	80051a0 <HAL_RCC_GetPCLK2Freq+0x48>
 8005166:	2a0c      	cmp	r2, #12
 8005168:	d06e      	beq.n	8005248 <HAL_RCC_GetPCLK2Freq+0xf0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800516a:	69cb      	ldr	r3, [r1, #28]
 800516c:	f003 030c 	and.w	r3, r3, #12
 8005170:	2b04      	cmp	r3, #4
    sysclockfreq = HSI_VALUE;
 8005172:	4b44      	ldr	r3, [pc, #272]	@ (8005284 <HAL_RCC_GetPCLK2Freq+0x12c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005174:	d002      	beq.n	800517c <HAL_RCC_GetPCLK2Freq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005176:	2a08      	cmp	r2, #8
 8005178:	bf18      	it	ne
 800517a:	2300      	movne	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800517c:	4940      	ldr	r1, [pc, #256]	@ (8005280 <HAL_RCC_GetPCLK2Freq+0x128>)
 800517e:	4c42      	ldr	r4, [pc, #264]	@ (8005288 <HAL_RCC_GetPCLK2Freq+0x130>)
 8005180:	6a0a      	ldr	r2, [r1, #32]
 8005182:	4842      	ldr	r0, [pc, #264]	@ (800528c <HAL_RCC_GetPCLK2Freq+0x134>)
 8005184:	f002 020f 	and.w	r2, r2, #15
 8005188:	5ca2      	ldrb	r2, [r4, r2]
}
 800518a:	bc30      	pop	{r4, r5}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800518c:	40d3      	lsrs	r3, r2
 800518e:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005190:	6a0a      	ldr	r2, [r1, #32]
 8005192:	493f      	ldr	r1, [pc, #252]	@ (8005290 <HAL_RCC_GetPCLK2Freq+0x138>)
 8005194:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8005198:	5c88      	ldrb	r0, [r1, r2]
}
 800519a:	fa23 f000 	lsr.w	r0, r3, r0
 800519e:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80051a0:	4b37      	ldr	r3, [pc, #220]	@ (8005280 <HAL_RCC_GetPCLK2Freq+0x128>)
 80051a2:	6899      	ldr	r1, [r3, #8]
 80051a4:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80051a6:	bf54      	ite	pl
 80051a8:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80051ac:	689b      	ldrmi	r3, [r3, #8]
    msirange = MSIRangeTable[msirange];
 80051ae:	4939      	ldr	r1, [pc, #228]	@ (8005294 <HAL_RCC_GetPCLK2Freq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80051b0:	bf54      	ite	pl
 80051b2:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80051b6:	0f1b      	lsrmi	r3, r3, #28
    msirange = MSIRangeTable[msirange];
 80051b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051bc:	2a00      	cmp	r2, #0
 80051be:	d0dd      	beq.n	800517c <HAL_RCC_GetPCLK2Freq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80051c0:	482f      	ldr	r0, [pc, #188]	@ (8005280 <HAL_RCC_GetPCLK2Freq+0x128>)
 80051c2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80051c4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80051c6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80051c8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80051ca:	f3c2 1200 	ubfx	r2, r2, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80051ce:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 80051d2:	fb0c f202 	mul.w	r2, ip, r2
 80051d6:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80051da:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80051de:	f3c1 2103 	ubfx	r1, r1, #8, #4
    switch (pllsource)
 80051e2:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80051e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80051e8:	f101 0101 	add.w	r1, r1, #1
    switch (pllsource)
 80051ec:	d001      	beq.n	80051f2 <HAL_RCC_GetPCLK2Freq+0x9a>
 80051ee:	2c03      	cmp	r4, #3
 80051f0:	d131      	bne.n	8005256 <HAL_RCC_GetPCLK2Freq+0xfe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80051f4:	ee07 1a10 	vmov	s14, r1
 80051f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fc:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005200:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005204:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005208:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8005298 <HAL_RCC_GetPCLK2Freq+0x140>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800520c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005210:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 800529c <HAL_RCC_GetPCLK2Freq+0x144>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005214:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005218:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800521c:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005220:	4b17      	ldr	r3, [pc, #92]	@ (8005280 <HAL_RCC_GetPCLK2Freq+0x128>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005222:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005228:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800522c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005230:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800523a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800523e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8005242:	ee17 3a90 	vmov	r3, s15
 8005246:	e799      	b.n	800517c <HAL_RCC_GetPCLK2Freq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005248:	f000 0003 	and.w	r0, r0, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800524c:	2801      	cmp	r0, #1
 800524e:	d0a7      	beq.n	80051a0 <HAL_RCC_GetPCLK2Freq+0x48>
  uint32_t msirange = 0U;
 8005250:	2300      	movs	r3, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005252:	69ca      	ldr	r2, [r1, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005254:	e7b4      	b.n	80051c0 <HAL_RCC_GetPCLK2Freq+0x68>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005256:	ee07 3a10 	vmov	s14, r3
 800525a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800525c:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8005260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005264:	ee06 2a10 	vmov	s12, r2
 8005268:	ee07 1a10 	vmov	s14, r1
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800526c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005270:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005274:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005278:	eddf 5a07 	vldr	s11, [pc, #28]	@ 8005298 <HAL_RCC_GetPCLK2Freq+0x140>
 800527c:	e7ca      	b.n	8005214 <HAL_RCC_GetPCLK2Freq+0xbc>
 800527e:	bf00      	nop
 8005280:	46020c00 	.word	0x46020c00
 8005284:	00f42400 	.word	0x00f42400
 8005288:	080080e4 	.word	0x080080e4
 800528c:	2000005c 	.word	0x2000005c
 8005290:	080080dc 	.word	0x080080dc
 8005294:	0800809c 	.word	0x0800809c
 8005298:	39000000 	.word	0x39000000
 800529c:	4b742400 	.word	0x4b742400

080052a0 <HAL_RCC_GetPCLK3Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a0:	4949      	ldr	r1, [pc, #292]	@ (80053c8 <HAL_RCC_GetPCLK3Freq+0x128>)
{
 80052a2:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a4:	69ca      	ldr	r2, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052a6:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052a8:	f012 020c 	ands.w	r2, r2, #12
 80052ac:	d01c      	beq.n	80052e8 <HAL_RCC_GetPCLK3Freq+0x48>
 80052ae:	2a0c      	cmp	r2, #12
 80052b0:	d06e      	beq.n	8005390 <HAL_RCC_GetPCLK3Freq+0xf0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052b2:	69cb      	ldr	r3, [r1, #28]
 80052b4:	f003 030c 	and.w	r3, r3, #12
 80052b8:	2b04      	cmp	r3, #4
    sysclockfreq = HSI_VALUE;
 80052ba:	4b44      	ldr	r3, [pc, #272]	@ (80053cc <HAL_RCC_GetPCLK3Freq+0x12c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052bc:	d002      	beq.n	80052c4 <HAL_RCC_GetPCLK3Freq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052be:	2a08      	cmp	r2, #8
 80052c0:	bf18      	it	ne
 80052c2:	2300      	movne	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80052c4:	4940      	ldr	r1, [pc, #256]	@ (80053c8 <HAL_RCC_GetPCLK3Freq+0x128>)
 80052c6:	4c42      	ldr	r4, [pc, #264]	@ (80053d0 <HAL_RCC_GetPCLK3Freq+0x130>)
 80052c8:	6a0a      	ldr	r2, [r1, #32]
 80052ca:	4842      	ldr	r0, [pc, #264]	@ (80053d4 <HAL_RCC_GetPCLK3Freq+0x134>)
 80052cc:	f002 020f 	and.w	r2, r2, #15
 80052d0:	5ca2      	ldrb	r2, [r4, r2]
}
 80052d2:	bc30      	pop	{r4, r5}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80052d4:	40d3      	lsrs	r3, r2
 80052d6:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80052d8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80052da:	493f      	ldr	r1, [pc, #252]	@ (80053d8 <HAL_RCC_GetPCLK3Freq+0x138>)
 80052dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80052e0:	5c88      	ldrb	r0, [r1, r2]
}
 80052e2:	fa23 f000 	lsr.w	r0, r3, r0
 80052e6:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80052e8:	4b37      	ldr	r3, [pc, #220]	@ (80053c8 <HAL_RCC_GetPCLK3Freq+0x128>)
 80052ea:	6899      	ldr	r1, [r3, #8]
 80052ec:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80052ee:	bf54      	ite	pl
 80052f0:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80052f4:	689b      	ldrmi	r3, [r3, #8]
    msirange = MSIRangeTable[msirange];
 80052f6:	4939      	ldr	r1, [pc, #228]	@ (80053dc <HAL_RCC_GetPCLK3Freq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80052f8:	bf54      	ite	pl
 80052fa:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80052fe:	0f1b      	lsrmi	r3, r3, #28
    msirange = MSIRangeTable[msirange];
 8005300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005304:	2a00      	cmp	r2, #0
 8005306:	d0dd      	beq.n	80052c4 <HAL_RCC_GetPCLK3Freq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005308:	482f      	ldr	r0, [pc, #188]	@ (80053c8 <HAL_RCC_GetPCLK3Freq+0x128>)
 800530a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800530c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800530e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005310:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005312:	f3c2 1200 	ubfx	r2, r2, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005316:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 800531a:	fb0c f202 	mul.w	r2, ip, r2
 800531e:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005322:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005326:	f3c1 2103 	ubfx	r1, r1, #8, #4
    switch (pllsource)
 800532a:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800532c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005330:	f101 0101 	add.w	r1, r1, #1
    switch (pllsource)
 8005334:	d001      	beq.n	800533a <HAL_RCC_GetPCLK3Freq+0x9a>
 8005336:	2c03      	cmp	r4, #3
 8005338:	d131      	bne.n	800539e <HAL_RCC_GetPCLK3Freq+0xfe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800533a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800533c:	ee07 1a10 	vmov	s14, r1
 8005340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005344:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005348:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800534c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005350:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80053e0 <HAL_RCC_GetPCLK3Freq+0x140>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005358:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 80053e4 <HAL_RCC_GetPCLK3Freq+0x144>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800535c:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005360:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005364:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005368:	4b17      	ldr	r3, [pc, #92]	@ (80053c8 <HAL_RCC_GetPCLK3Freq+0x128>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800536a:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800536e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005370:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005374:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005378:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005382:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005386:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800538a:	ee17 3a90 	vmov	r3, s15
 800538e:	e799      	b.n	80052c4 <HAL_RCC_GetPCLK3Freq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005390:	f000 0003 	and.w	r0, r0, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005394:	2801      	cmp	r0, #1
 8005396:	d0a7      	beq.n	80052e8 <HAL_RCC_GetPCLK3Freq+0x48>
  uint32_t msirange = 0U;
 8005398:	2300      	movs	r3, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800539a:	69ca      	ldr	r2, [r1, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800539c:	e7b4      	b.n	8005308 <HAL_RCC_GetPCLK3Freq+0x68>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800539e:	ee07 3a10 	vmov	s14, r3
 80053a2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80053a4:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 80053a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ac:	ee06 2a10 	vmov	s12, r2
 80053b0:	ee07 1a10 	vmov	s14, r1
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053b8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80053bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053c0:	eddf 5a07 	vldr	s11, [pc, #28]	@ 80053e0 <HAL_RCC_GetPCLK3Freq+0x140>
 80053c4:	e7ca      	b.n	800535c <HAL_RCC_GetPCLK3Freq+0xbc>
 80053c6:	bf00      	nop
 80053c8:	46020c00 	.word	0x46020c00
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	080080e4 	.word	0x080080e4
 80053d4:	2000005c 	.word	0x2000005c
 80053d8:	080080dc 	.word	0x080080dc
 80053dc:	0800809c 	.word	0x0800809c
 80053e0:	39000000 	.word	0x39000000
 80053e4:	4b742400 	.word	0x4b742400

080053e8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80053e8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80053ea:	4c33      	ldr	r4, [pc, #204]	@ (80054b8 <RCCEx_PLL3_Config+0xd0>)
{
 80053ec:	4606      	mov	r6, r0
  __HAL_RCC_PLL3_DISABLE();
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053f4:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053f6:	f7fd f95f 	bl	80026b8 <HAL_GetTick>
 80053fa:	4605      	mov	r5, r0

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053fc:	e004      	b.n	8005408 <RCCEx_PLL3_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053fe:	f7fd f95b 	bl	80026b8 <HAL_GetTick>
 8005402:	1b40      	subs	r0, r0, r5
 8005404:	2802      	cmp	r0, #2
 8005406:	d854      	bhi.n	80054b2 <RCCEx_PLL3_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	d4f7      	bmi.n	80053fe <RCCEx_PLL3_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800540e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005410:	e9d6 1200 	ldrd	r1, r2, [r6]
 8005414:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005418:	f023 0303 	bic.w	r3, r3, #3
 800541c:	3a01      	subs	r2, #1
 800541e:	430b      	orrs	r3, r1
 8005420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005424:	6323      	str	r3, [r4, #48]	@ 0x30
 8005426:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005428:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800542c:	4d23      	ldr	r5, [pc, #140]	@ (80054bc <RCCEx_PLL3_Config+0xd4>)
 800542e:	1e51      	subs	r1, r2, #1
 8005430:	6932      	ldr	r2, [r6, #16]
 8005432:	3b01      	subs	r3, #1
 8005434:	4005      	ands	r5, r0
 8005436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543a:	0249      	lsls	r1, r1, #9
 800543c:	3a01      	subs	r2, #1
 800543e:	b289      	uxth	r1, r1
 8005440:	432b      	orrs	r3, r5
 8005442:	0412      	lsls	r2, r2, #16
 8005444:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005448:	430b      	orrs	r3, r1
 800544a:	4313      	orrs	r3, r2
 800544c:	6972      	ldr	r2, [r6, #20]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800544e:	4d1a      	ldr	r5, [pc, #104]	@ (80054b8 <RCCEx_PLL3_Config+0xd0>)
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005450:	3a01      	subs	r2, #1
 8005452:	0612      	lsls	r2, r2, #24
 8005454:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005458:	4313      	orrs	r3, r2
 800545a:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800545c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800545e:	69b2      	ldr	r2, [r6, #24]
 8005460:	f023 030c 	bic.w	r3, r3, #12
 8005464:	4313      	orrs	r3, r2
 8005466:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005468:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800546a:	6a32      	ldr	r2, [r6, #32]
 800546c:	4313      	orrs	r3, r2
 800546e:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005470:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005472:	f023 0310 	bic.w	r3, r3, #16
 8005476:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005478:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800547a:	69f2      	ldr	r2, [r6, #28]
 800547c:	f36f 03cf 	bfc	r3, #3, #13
 8005480:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005484:	64a3      	str	r3, [r4, #72]	@ 0x48
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005486:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005488:	f043 0310 	orr.w	r3, r3, #16
 800548c:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_ENABLE();
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005494:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005496:	f7fd f90f 	bl	80026b8 <HAL_GetTick>
 800549a:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800549c:	e004      	b.n	80054a8 <RCCEx_PLL3_Config+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800549e:	f7fd f90b 	bl	80026b8 <HAL_GetTick>
 80054a2:	1b00      	subs	r0, r0, r4
 80054a4:	2802      	cmp	r0, #2
 80054a6:	d804      	bhi.n	80054b2 <RCCEx_PLL3_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	d5f7      	bpl.n	800549e <RCCEx_PLL3_Config+0xb6>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80054ae:	2000      	movs	r0, #0
}
 80054b0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80054b2:	2003      	movs	r0, #3
}
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	bf00      	nop
 80054b8:	46020c00 	.word	0x46020c00
 80054bc:	80800000 	.word	0x80800000

080054c0 <RCCEx_PLL2_Config>:
{
 80054c0:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLL2_DISABLE();
 80054c2:	4c33      	ldr	r4, [pc, #204]	@ (8005590 <RCCEx_PLL2_Config+0xd0>)
{
 80054c4:	4606      	mov	r6, r0
  __HAL_RCC_PLL2_DISABLE();
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054cc:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80054ce:	f7fd f8f3 	bl	80026b8 <HAL_GetTick>
 80054d2:	4605      	mov	r5, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054d4:	e004      	b.n	80054e0 <RCCEx_PLL2_Config+0x20>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054d6:	f7fd f8ef 	bl	80026b8 <HAL_GetTick>
 80054da:	1b40      	subs	r0, r0, r5
 80054dc:	2802      	cmp	r0, #2
 80054de:	d854      	bhi.n	800558a <RCCEx_PLL2_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	011a      	lsls	r2, r3, #4
 80054e4:	d4f7      	bmi.n	80054d6 <RCCEx_PLL2_Config+0x16>
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80054e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80054e8:	e9d6 1200 	ldrd	r1, r2, [r6]
 80054ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054f0:	f023 0303 	bic.w	r3, r3, #3
 80054f4:	3a01      	subs	r2, #1
 80054f6:	430b      	orrs	r3, r1
 80054f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80054fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054fe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005500:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005504:	4d23      	ldr	r5, [pc, #140]	@ (8005594 <RCCEx_PLL2_Config+0xd4>)
 8005506:	1e51      	subs	r1, r2, #1
 8005508:	6932      	ldr	r2, [r6, #16]
 800550a:	3b01      	subs	r3, #1
 800550c:	4005      	ands	r5, r0
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	0249      	lsls	r1, r1, #9
 8005514:	3a01      	subs	r2, #1
 8005516:	b289      	uxth	r1, r1
 8005518:	432b      	orrs	r3, r5
 800551a:	0412      	lsls	r2, r2, #16
 800551c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005520:	430b      	orrs	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	6972      	ldr	r2, [r6, #20]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005526:	4d1a      	ldr	r5, [pc, #104]	@ (8005590 <RCCEx_PLL2_Config+0xd0>)
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005528:	3a01      	subs	r2, #1
 800552a:	0612      	lsls	r2, r2, #24
 800552c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005530:	4313      	orrs	r3, r2
 8005532:	63e3      	str	r3, [r4, #60]	@ 0x3c
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005534:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005536:	69b2      	ldr	r2, [r6, #24]
 8005538:	f023 030c 	bic.w	r3, r3, #12
 800553c:	4313      	orrs	r3, r2
 800553e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005540:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005542:	6a32      	ldr	r2, [r6, #32]
 8005544:	4313      	orrs	r3, r2
 8005546:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005548:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800554a:	f023 0310 	bic.w	r3, r3, #16
 800554e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005550:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005552:	69f2      	ldr	r2, [r6, #28]
 8005554:	f36f 03cf 	bfc	r3, #3, #13
 8005558:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800555c:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_RCC_PLL2FRACN_ENABLE();
 800555e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005560:	f043 0310 	orr.w	r3, r3, #16
 8005564:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800556c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800556e:	f7fd f8a3 	bl	80026b8 <HAL_GetTick>
 8005572:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005574:	e004      	b.n	8005580 <RCCEx_PLL2_Config+0xc0>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005576:	f7fd f89f 	bl	80026b8 <HAL_GetTick>
 800557a:	1b00      	subs	r0, r0, r4
 800557c:	2802      	cmp	r0, #2
 800557e:	d804      	bhi.n	800558a <RCCEx_PLL2_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	d5f7      	bpl.n	8005576 <RCCEx_PLL2_Config+0xb6>
  return HAL_OK;
 8005586:	2000      	movs	r0, #0
}
 8005588:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800558a:	2003      	movs	r0, #3
}
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	bf00      	nop
 8005590:	46020c00 	.word	0x46020c00
 8005594:	80800000 	.word	0x80800000

08005598 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800559c:	6803      	ldr	r3, [r0, #0]
{
 800559e:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055a0:	07d8      	lsls	r0, r3, #31
{
 80055a2:	b082      	sub	sp, #8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055a4:	d508      	bpl.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80055a6:	499d      	ldr	r1, [pc, #628]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055a8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80055aa:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80055ae:	f022 0203 	bic.w	r2, r2, #3
 80055b2:	4302      	orrs	r2, r0
 80055b4:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055b8:	0799      	lsls	r1, r3, #30
 80055ba:	d508      	bpl.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80055bc:	4997      	ldr	r1, [pc, #604]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055be:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80055c0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80055c4:	f022 020c 	bic.w	r2, r2, #12
 80055c8:	4302      	orrs	r2, r0
 80055ca:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055ce:	075a      	lsls	r2, r3, #29
 80055d0:	d508      	bpl.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80055d2:	4992      	ldr	r1, [pc, #584]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055d6:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80055da:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80055de:	4302      	orrs	r2, r0
 80055e0:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055e4:	071f      	lsls	r7, r3, #28
 80055e6:	d508      	bpl.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80055e8:	498c      	ldr	r1, [pc, #560]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055ea:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80055ec:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80055f0:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80055f4:	4302      	orrs	r2, r0
 80055f6:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055fa:	06de      	lsls	r6, r3, #27
 80055fc:	d508      	bpl.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x78>
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80055fe:	4987      	ldr	r1, [pc, #540]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005600:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005602:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8005606:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800560a:	4302      	orrs	r2, r0
 800560c:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005610:	069d      	lsls	r5, r3, #26
 8005612:	d508      	bpl.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005614:	4981      	ldr	r1, [pc, #516]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005616:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005618:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 800561c:	f022 0207 	bic.w	r2, r2, #7
 8005620:	4302      	orrs	r2, r0
 8005622:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005626:	0658      	lsls	r0, r3, #25
 8005628:	d508      	bpl.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800562a:	497c      	ldr	r1, [pc, #496]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800562c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800562e:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8005632:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005636:	4302      	orrs	r2, r0
 8005638:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800563c:	0619      	lsls	r1, r3, #24
 800563e:	d508      	bpl.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005640:	4976      	ldr	r1, [pc, #472]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005642:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005644:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8005648:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800564c:	4302      	orrs	r2, r0
 800564e:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005652:	05da      	lsls	r2, r3, #23
 8005654:	d508      	bpl.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005656:	4971      	ldr	r1, [pc, #452]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005658:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800565a:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 800565e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8005662:	4302      	orrs	r2, r0
 8005664:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005668:	025f      	lsls	r7, r3, #9
 800566a:	d508      	bpl.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800566c:	496b      	ldr	r1, [pc, #428]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800566e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005670:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8005674:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005678:	4302      	orrs	r2, r0
 800567a:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800567e:	059e      	lsls	r6, r3, #22
 8005680:	d508      	bpl.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005682:	4966      	ldr	r1, [pc, #408]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005684:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005686:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 800568a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800568e:	4302      	orrs	r2, r0
 8005690:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005694:	055d      	lsls	r5, r3, #21
 8005696:	d508      	bpl.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005698:	4960      	ldr	r1, [pc, #384]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800569a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800569c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80056a0:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80056a4:	4302      	orrs	r2, r0
 80056a6:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80056aa:	0518      	lsls	r0, r3, #20
 80056ac:	d509      	bpl.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80056ae:	495b      	ldr	r1, [pc, #364]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056b0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80056b4:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80056b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80056bc:	4302      	orrs	r2, r0
 80056be:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056c2:	0499      	lsls	r1, r3, #18
 80056c4:	f403 5600 	and.w	r6, r3, #8192	@ 0x2000
 80056c8:	d51e      	bpl.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80056ca:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80056ce:	2a40      	cmp	r2, #64	@ 0x40
 80056d0:	f000 8235 	beq.w	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80056d4:	f200 8254 	bhi.w	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 80056d8:	2a00      	cmp	r2, #0
 80056da:	f000 8248 	beq.w	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 80056de:	2a20      	cmp	r2, #32
 80056e0:	f040 8254 	bne.w	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056e4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80056e8:	f7ff fe7e 	bl	80053e8 <RCCEx_PLL3_Config>
 80056ec:	4606      	mov	r6, r0
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056ee:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80056f0:	b956      	cbnz	r6, 8005708 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80056f2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056f6:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80056f8:	4848      	ldr	r0, [pc, #288]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056fa:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 80056fe:	f021 01e0 	bic.w	r1, r1, #224	@ 0xe0
 8005702:	430a      	orrs	r2, r1
 8005704:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005708:	045a      	lsls	r2, r3, #17
 800570a:	d539      	bpl.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (pPeriphClkInit->Sai2ClockSelection)
 800570c:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 8005710:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8005714:	f000 8219 	beq.w	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8005718:	d829      	bhi.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800571a:	2a00      	cmp	r2, #0
 800571c:	f000 8220 	beq.w	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005720:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005724:	d12b      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005726:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800572a:	f7ff fe5d 	bl	80053e8 <RCCEx_PLL3_Config>
 800572e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005730:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8005732:	2d00      	cmp	r5, #0
 8005734:	f040 8212 	bne.w	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005738:	4938      	ldr	r1, [pc, #224]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800573a:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800573e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005742:	041f      	lsls	r7, r3, #16
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005744:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005748:	ea42 0200 	orr.w	r2, r2, r0
 800574c:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005750:	d419      	bmi.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005752:	03d8      	lsls	r0, r3, #15
 8005754:	d52d      	bpl.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005756:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 800575a:	2a04      	cmp	r2, #4
 800575c:	f200 822c 	bhi.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x620>
 8005760:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005764:	0145014a 	.word	0x0145014a
 8005768:	014a01e4 	.word	0x014a01e4
 800576c:	014a      	.short	0x014a
    switch (pPeriphClkInit->Sai2ClockSelection)
 800576e:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005772:	f000 81ef 	beq.w	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005776:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800577a:	f000 81eb 	beq.w	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800577e:	2601      	movs	r6, #1
 8005780:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005782:	041f      	lsls	r7, r3, #16
 8005784:	d5e5      	bpl.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8005786:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 800578a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800578e:	f000 8191 	beq.w	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8005792:	f240 81a1 	bls.w	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005796:	f422 5180 	bic.w	r1, r2, #4096	@ 0x1000
 800579a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800579e:	f000 818f 	beq.w	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80057a2:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 80057a6:	f000 818b 	beq.w	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80057aa:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80057ac:	03d8      	lsls	r0, r3, #15
    switch (pPeriphClkInit->AdcDacClockSelection)
 80057ae:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80057b0:	d4d1      	bmi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80057b2:	0399      	lsls	r1, r3, #14
 80057b4:	d51e      	bpl.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (pPeriphClkInit->Adf1ClockSelection)
 80057b6:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80057ba:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 80057be:	f000 81a4 	beq.w	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80057c2:	f200 81e5 	bhi.w	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80057c6:	b142      	cbz	r2, 80057da <HAL_RCCEx_PeriphCLKConfig+0x242>
 80057c8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80057cc:	f040 81e8 	bne.w	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x608>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057d0:	4912      	ldr	r1, [pc, #72]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057d2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80057d4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80057d8:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80057da:	2d00      	cmp	r5, #0
 80057dc:	f040 8156 	bne.w	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80057e0:	490e      	ldr	r1, [pc, #56]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057e2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80057e6:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80057ea:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80057ee:	4302      	orrs	r2, r0
 80057f0:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057f4:	035a      	lsls	r2, r3, #13
 80057f6:	d560      	bpl.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x322>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f8:	4b08      	ldr	r3, [pc, #32]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057fa:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80057fe:	0757      	lsls	r7, r2, #29
 8005800:	f140 8107 	bpl.w	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    FlagStatus       pwrclkchanged = RESET;
 8005804:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005808:	4f05      	ldr	r7, [pc, #20]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	62bb      	str	r3, [r7, #40]	@ 0x28
    tickstart = HAL_GetTick();
 8005812:	f7fc ff51 	bl	80026b8 <HAL_GetTick>
 8005816:	4681      	mov	r9, r0
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005818:	e00b      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800581a:	bf00      	nop
 800581c:	46020c00 	.word	0x46020c00
 8005820:	46020800 	.word	0x46020800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005824:	f7fc ff48 	bl	80026b8 <HAL_GetTick>
 8005828:	eba0 0309 	sub.w	r3, r0, r9
 800582c:	2b02      	cmp	r3, #2
 800582e:	f200 811e 	bhi.w	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	07d8      	lsls	r0, r3, #31
 8005836:	d5f5      	bpl.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    if (ret == HAL_OK)
 8005838:	2d00      	cmp	r5, #0
 800583a:	f040 81bb 	bne.w	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800583e:	f8df a33c 	ldr.w	sl, [pc, #828]	@ 8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005842:	f8d4 20bc 	ldr.w	r2, [r4, #188]	@ 0xbc
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005846:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800584a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800584e:	d027      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005850:	4293      	cmp	r3, r2
 8005852:	d025      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005854:	f8da 10f0 	ldr.w	r1, [sl, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 8005858:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 800585c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005860:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005864:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 8005868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800586c:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005870:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005874:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005876:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800587a:	d511      	bpl.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        tickstart = HAL_GetTick();
 800587c:	f7fc ff1c 	bl	80026b8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005880:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005884:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005886:	e005      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005888:	f7fc ff16 	bl	80026b8 <HAL_GetTick>
 800588c:	1bc0      	subs	r0, r0, r7
 800588e:	4548      	cmp	r0, r9
 8005890:	f200 80ed 	bhi.w	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005894:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 8005898:	079b      	lsls	r3, r3, #30
 800589a:	d5f5      	bpl.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800589c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	@ 0xbc
 80058a0:	49b6      	ldr	r1, [pc, #728]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058a2:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 80058a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80058b0:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80058b2:	f1b8 0f00 	cmp.w	r8, #0
 80058b6:	f040 80e1 	bne.w	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80058ba:	02df      	lsls	r7, r3, #11
 80058bc:	d51f      	bpl.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x366>
    switch (pPeriphClkInit->IclkClockSelection)
 80058be:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 80058c2:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 80058c6:	f000 8116 	beq.w	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80058ca:	f200 816c 	bhi.w	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
 80058ce:	b14a      	cbz	r2, 80058e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80058d0:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 80058d4:	f040 816b 	bne.w	8005bae <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058d8:	f104 0008 	add.w	r0, r4, #8
 80058dc:	f7ff fdf0 	bl	80054c0 <RCCEx_PLL2_Config>
 80058e0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058e2:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	f040 80d3 	bne.w	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80058ea:	49a4      	ldr	r1, [pc, #656]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058ec:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80058f0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80058f4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80058f8:	4302      	orrs	r2, r0
 80058fa:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058fe:	0318      	lsls	r0, r3, #12
 8005900:	d50b      	bpl.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch (pPeriphClkInit->RngClockSelection)
 8005902:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8005906:	f432 5180 	bics.w	r1, r2, #4096	@ 0x1000
 800590a:	f000 80a3 	beq.w	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800590e:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005912:	f000 809f 	beq.w	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005916:	2601      	movs	r6, #1
 8005918:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800591a:	0299      	lsls	r1, r3, #10
 800591c:	d50d      	bpl.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800591e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8005922:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8005926:	f000 80b9 	beq.w	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800592a:	4994      	ldr	r1, [pc, #592]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800592c:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 8005930:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005934:	4302      	orrs	r2, r0
 8005936:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800593a:	021a      	lsls	r2, r3, #8
 800593c:	d509      	bpl.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800593e:	498f      	ldr	r1, [pc, #572]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005940:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8005944:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8005948:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800594c:	4302      	orrs	r2, r0
 800594e:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005952:	01df      	lsls	r7, r3, #7
 8005954:	d509      	bpl.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005956:	4989      	ldr	r1, [pc, #548]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005958:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 800595c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8005960:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005964:	4302      	orrs	r2, r0
 8005966:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800596a:	0198      	lsls	r0, r3, #6
 800596c:	d509      	bpl.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800596e:	4983      	ldr	r1, [pc, #524]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005970:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 8005974:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8005978:	f022 0218 	bic.w	r2, r2, #24
 800597c:	4302      	orrs	r2, r0
 800597e:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005982:	0159      	lsls	r1, r3, #5
 8005984:	d515      	bpl.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005986:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 800598a:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800598e:	f000 808b 	beq.w	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005992:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8005996:	f000 80a7 	beq.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    if (ret == HAL_OK)
 800599a:	2d00      	cmp	r5, #0
 800599c:	d165      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800599e:	4977      	ldr	r1, [pc, #476]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059a0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80059a4:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 80059a8:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80059ac:	4302      	orrs	r2, r0
 80059ae:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80059b2:	011a      	lsls	r2, r3, #4
 80059b4:	d50b      	bpl.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x436>
    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80059b6:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 80059ba:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80059be:	f000 80ad 	beq.w	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80059c2:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 80059c6:	d033      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80059c8:	2a00      	cmp	r2, #0
 80059ca:	d037      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80059cc:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	d509      	bpl.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80059d2:	4a6a      	ldr	r2, [pc, #424]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059d4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80059d8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80059dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059e0:	430b      	orrs	r3, r1
 80059e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 80059e6:	4630      	mov	r0, r6
 80059e8:	b002      	add	sp, #8
 80059ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059ee:	4963      	ldr	r1, [pc, #396]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059f0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80059f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80059f6:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80059f8:	2d00      	cmp	r5, #0
 80059fa:	d14d      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x500>
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80059fc:	495f      	ldr	r1, [pc, #380]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059fe:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8005a02:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 8005a06:	f022 0207 	bic.w	r2, r2, #7
 8005a0a:	4302      	orrs	r2, r0
 8005a0c:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
 8005a10:	e6cf      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a12:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
      pwrclkchanged = SET;
 8005a16:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a1a:	f042 0204 	orr.w	r2, r2, #4
 8005a1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005a2e:	e6eb      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x270>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a30:	f104 0008 	add.w	r0, r4, #8
 8005a34:	f7ff fd44 	bl	80054c0 <RCCEx_PLL2_Config>
 8005a38:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005a3a:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8005a3c:	bb55      	cbnz	r5, 8005a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005a3e:	494f      	ldr	r1, [pc, #316]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a40:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005a44:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8005a48:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005a4c:	4302      	orrs	r2, r0
 8005a4e:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
 8005a52:	e7bc      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x436>
    if (ret == HAL_OK)
 8005a54:	2d00      	cmp	r5, #0
 8005a56:	d156      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005a58:	4848      	ldr	r0, [pc, #288]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a5a:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 8005a5e:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005a62:	430a      	orrs	r2, r1
 8005a64:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
 8005a68:	e757      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x382>
      status = ret;
 8005a6a:	462e      	mov	r6, r5
 8005a6c:	e7a1      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
        ret = HAL_TIMEOUT;
 8005a6e:	2603      	movs	r6, #3
 8005a70:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005a72:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8005a74:	f1b8 0f00 	cmp.w	r8, #0
 8005a78:	f43f af1f 	beq.w	80058ba <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7c:	493f      	ldr	r1, [pc, #252]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a7e:	f8d1 2094 	ldr.w	r2, [r1, #148]	@ 0x94
 8005a82:	f022 0204 	bic.w	r2, r2, #4
 8005a86:	f8c1 2094 	str.w	r2, [r1, #148]	@ 0x94
 8005a8a:	e716      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x322>
      status = ret;
 8005a8c:	462e      	mov	r6, r5
 8005a8e:	e6b1      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      status = ret;
 8005a90:	462e      	mov	r6, r5
 8005a92:	e734      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x366>
      status = ret;
 8005a94:	462e      	mov	r6, r5
 8005a96:	e79a      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x436>
      status = ret;
 8005a98:	462e      	mov	r6, r5
 8005a9a:	e68a      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a9c:	4937      	ldr	r1, [pc, #220]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005a9e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8005aa0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005aa4:	628a      	str	r2, [r1, #40]	@ 0x28
 8005aa6:	e740      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa8:	4934      	ldr	r1, [pc, #208]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005aaa:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8005aac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005ab0:	628a      	str	r2, [r1, #40]	@ 0x28
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005ab2:	e772      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x402>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ab4:	f104 0008 	add.w	r0, r4, #8
 8005ab8:	f7ff fd02 	bl	80054c0 <RCCEx_PLL2_Config>
 8005abc:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005abe:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8005ac0:	b985      	cbnz	r5, 8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005ac2:	492e      	ldr	r1, [pc, #184]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ac4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8005ac8:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8005acc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005ad0:	4302      	orrs	r2, r0
 8005ad2:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
 8005ad6:	e63c      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8005ad8:	f432 5280 	bics.w	r2, r2, #4096	@ 0x1000
 8005adc:	f47f ae65 	bne.w	80057aa <HAL_RCCEx_PeriphCLKConfig+0x212>
    if (ret == HAL_OK)
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	d0ee      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      status = ret;
 8005ae4:	462e      	mov	r6, r5
 8005ae6:	e634      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ae8:	f104 0008 	add.w	r0, r4, #8
 8005aec:	f7ff fce8 	bl	80054c0 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005af0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005af2:	4605      	mov	r5, r0
 8005af4:	e751      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x402>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af6:	4921      	ldr	r1, [pc, #132]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005af8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8005afa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005afe:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	d1c5      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005b04:	e6f1      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x352>
      status = ret;
 8005b06:	462e      	mov	r6, r5
 8005b08:	e707      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x382>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b0a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8005b0e:	f7ff fc6b 	bl	80053e8 <RCCEx_PLL3_Config>
 8005b12:	4605      	mov	r5, r0
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b14:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	d1b8      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005b1a:	e661      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b1c:	4917      	ldr	r1, [pc, #92]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b1e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8005b20:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005b24:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8005b26:	2d00      	cmp	r5, #0
 8005b28:	d1b4      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005b2a:	e788      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b2c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8005b30:	f7ff fc5a 	bl	80053e8 <RCCEx_PLL3_Config>
 8005b34:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005b36:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8005b38:	2d00      	cmp	r5, #0
 8005b3a:	d1ad      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005b3c:	e75e      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b3e:	480f      	ldr	r0, [pc, #60]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b40:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8005b42:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8005b46:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 8005b48:	e5d5      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b4a:	490c      	ldr	r1, [pc, #48]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b4c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8005b4e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005b52:	628a      	str	r2, [r1, #40]	@ 0x28
    switch (pPeriphClkInit->Sai1ClockSelection)
 8005b54:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005b56:	2d00      	cmp	r5, #0
 8005b58:	f43f adee 	beq.w	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      status = ret;
 8005b5c:	462e      	mov	r6, r5
 8005b5e:	e610      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b60:	f104 0008 	add.w	r0, r4, #8
 8005b64:	f7ff fcac 	bl	80054c0 <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005b68:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b6a:	4605      	mov	r5, r0
        break;
 8005b6c:	e5e1      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b6e:	f104 0008 	add.w	r0, r4, #8
 8005b72:	f7ff fca5 	bl	80054c0 <RCCEx_PLL2_Config>
 8005b76:	4606      	mov	r6, r0
        break;
 8005b78:	e5b9      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005b7a:	bf00      	nop
 8005b7c:	46020c00 	.word	0x46020c00
    switch (pPeriphClkInit->Sai1ClockSelection)
 8005b80:	2a60      	cmp	r2, #96	@ 0x60
 8005b82:	f43f adb8 	beq.w	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005b86:	2a80      	cmp	r2, #128	@ 0x80
 8005b88:	f43f adb5 	beq.w	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005b8c:	2601      	movs	r6, #1
 8005b8e:	e5bb      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005b90:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8005b94:	f43f ae21 	beq.w	80057da <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005b98:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8005b9c:	f43f ae1d 	beq.w	80057da <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005ba0:	2601      	movs	r6, #1
 8005ba2:	4635      	mov	r5, r6
 8005ba4:	e626      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (pPeriphClkInit->IclkClockSelection)
 8005ba6:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8005baa:	f43f ae9b 	beq.w	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005bae:	2601      	movs	r6, #1
 8005bb0:	4635      	mov	r5, r6
 8005bb2:	e6a4      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x366>
      status = ret;
 8005bb4:	462e      	mov	r6, r5
 8005bb6:	e75c      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x4da>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005bb8:	2601      	movs	r6, #1
 8005bba:	4635      	mov	r5, r6
 8005bbc:	e5f9      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005bbe:	bf00      	nop

08005bc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005bc0:	4953      	ldr	r1, [pc, #332]	@ (8005d10 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
{
 8005bc2:	b510      	push	{r4, lr}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005bc4:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005bc6:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005bc8:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005bca:	f002 0c03 	and.w	ip, r2, #3
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005bce:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005bd0:	f3c3 2303 	ubfx	r3, r3, #8, #4
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005bd4:	f3c2 1e00 	ubfx	lr, r2, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bd8:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
  switch (pll1source)
 8005bda:	f1bc 0f02 	cmp.w	ip, #2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bde:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8005be2:	fb0e f202 	mul.w	r2, lr, r2
 8005be6:	ee07 2a90 	vmov	s15, r2
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005bea:	f103 0301 	add.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pll1source)
 8005bf2:	d02c      	beq.n	8005c4e <HAL_RCCEx_GetPLL1ClockFreq+0x8e>
 8005bf4:	f1bc 0f03 	cmp.w	ip, #3
 8005bf8:	d029      	beq.n	8005c4e <HAL_RCCEx_GetPLL1ClockFreq+0x8e>
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005bfa:	f3c4 0408 	ubfx	r4, r4, #0, #9
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bfe:	ee07 4a90 	vmov	s15, r4
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c02:	688a      	ldr	r2, [r1, #8]
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c08:	0212      	lsls	r2, r2, #8
 8005c0a:	bf4c      	ite	mi
 8005c0c:	688a      	ldrmi	r2, [r1, #8]
 8005c0e:	f8d1 20f4 	ldrpl.w	r2, [r1, #244]	@ 0xf4
 8005c12:	4940      	ldr	r1, [pc, #256]	@ (8005d14 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
 8005c14:	bf4c      	ite	mi
 8005c16:	0f12      	lsrmi	r2, r2, #28
 8005c18:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eb01 0382 	add.w	r3, r1, r2, lsl #2
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c24:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c28:	edd3 5a00 	vldr	s11, [r3]
 8005c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c30:	ee76 6a86 	vadd.f32	s13, s13, s12
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c34:	eef8 5a65 	vcvt.f32.u32	s11, s11
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c38:	ed9f 5a37 	vldr	s10, [pc, #220]	@ 8005d18 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c3c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c40:	eef0 7a66 	vmov.f32	s15, s13
 8005c44:	eee7 7a05 	vfma.f32	s15, s14, s10
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c48:	ee26 7a27 	vmul.f32	s14, s12, s15
      break;
 8005c4c:	e01a      	b.n	8005c84 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c4e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c58:	ee06 2a10 	vmov	s12, r2
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c68:	ee36 6a26 	vadd.f32	s12, s12, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c6c:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 8005d1c <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c70:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8005d18 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c74:	eec5 6a27 	vdiv.f32	s13, s10, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c78:	eef0 7a46 	vmov.f32	s15, s12
 8005c7c:	eee7 7a25 	vfma.f32	s15, s14, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c80:	ee26 7aa7 	vmul.f32	s14, s13, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005c84:	4a22      	ldr	r2, [pc, #136]	@ (8005d10 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 8005c86:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8005c88:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8005c8c:	d010      	beq.n	8005cb0 <HAL_RCCEx_GetPLL1ClockFreq+0xf0>
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c8e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005c90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c94:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005c98:	ee06 3a90 	vmov	s13, r3
 8005c9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005ca0:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cac:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005cb0:	4a17      	ldr	r2, [pc, #92]	@ (8005d10 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 8005cb2:	6003      	str	r3, [r0, #0]
 8005cb4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8005cb6:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8005cba:	d010      	beq.n	8005cde <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005cbc:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005cbe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005cc2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005cc6:	ee06 3a90 	vmov	s13, r3
 8005cca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005cce:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cda:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005cde:	4a0c      	ldr	r2, [pc, #48]	@ (8005d10 <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 8005ce0:	6043      	str	r3, [r0, #4]
 8005ce2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8005ce4:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
 8005ce8:	d010      	beq.n	8005d0c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005cea:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005cec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005cf0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005cf4:	ee06 3a90 	vmov	s13, r3
 8005cf8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005cfc:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d08:	ee17 3a90 	vmov	r3, s15
 8005d0c:	6083      	str	r3, [r0, #8]
}
 8005d0e:	bd10      	pop	{r4, pc}
 8005d10:	46020c00 	.word	0x46020c00
 8005d14:	0800809c 	.word	0x0800809c
 8005d18:	39000000 	.word	0x39000000
 8005d1c:	4b742400 	.word	0x4b742400

08005d20 <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005d20:	4953      	ldr	r1, [pc, #332]	@ (8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
{
 8005d22:	b510      	push	{r4, lr}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005d24:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005d26:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005d28:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005d2a:	f002 0c03 	and.w	ip, r2, #3
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005d2e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005d30:	f3c3 2303 	ubfx	r3, r3, #8, #4
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005d34:	f3c2 1e00 	ubfx	lr, r2, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005d38:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
  switch (pll2source)
 8005d3a:	f1bc 0f02 	cmp.w	ip, #2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005d3e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8005d42:	fb0e f202 	mul.w	r2, lr, r2
 8005d46:	ee07 2a90 	vmov	s15, r2
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005d4a:	f103 0301 	add.w	r3, r3, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pll2source)
 8005d52:	d02c      	beq.n	8005dae <HAL_RCCEx_GetPLL2ClockFreq+0x8e>
 8005d54:	f1bc 0f03 	cmp.w	ip, #3
 8005d58:	d029      	beq.n	8005dae <HAL_RCCEx_GetPLL2ClockFreq+0x8e>
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005d5a:	f3c4 0408 	ubfx	r4, r4, #0, #9
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d5e:	ee07 4a90 	vmov	s15, r4
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d62:	688a      	ldr	r2, [r1, #8]
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d68:	0212      	lsls	r2, r2, #8
 8005d6a:	bf4c      	ite	mi
 8005d6c:	688a      	ldrmi	r2, [r1, #8]
 8005d6e:	f8d1 20f4 	ldrpl.w	r2, [r1, #244]	@ 0xf4
 8005d72:	4940      	ldr	r1, [pc, #256]	@ (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x154>)
 8005d74:	bf4c      	ite	mi
 8005d76:	0f12      	lsrmi	r2, r2, #28
 8005d78:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eb01 0382 	add.w	r3, r1, r2, lsl #2
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d84:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d88:	edd3 5a00 	vldr	s11, [r3]
 8005d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d90:	ee76 6a86 	vadd.f32	s13, s13, s12
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d94:	eef8 5a65 	vcvt.f32.u32	s11, s11
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d98:	ed9f 5a37 	vldr	s10, [pc, #220]	@ 8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d9c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da0:	eef0 7a66 	vmov.f32	s15, s13
 8005da4:	eee7 7a05 	vfma.f32	s15, s14, s10
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005da8:	ee26 7a27 	vmul.f32	s14, s12, s15
      break;
 8005dac:	e01a      	b.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005dae:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005db0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005db8:	ee06 2a10 	vmov	s12, r2
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dc8:	ee36 6a26 	vadd.f32	s12, s12, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005dcc:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dd0:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005dd4:	eec5 6a27 	vdiv.f32	s13, s10, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dd8:	eef0 7a46 	vmov.f32	s15, s12
 8005ddc:	eee7 7a25 	vfma.f32	s15, s14, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005de0:	ee26 7aa7 	vmul.f32	s14, s13, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005de4:	4a22      	ldr	r2, [pc, #136]	@ (8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8005de6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005de8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8005dec:	d010      	beq.n	8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0xf0>
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005dee:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005df0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005df4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005df8:	ee06 3a90 	vmov	s13, r3
 8005dfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005e00:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0c:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005e10:	4a17      	ldr	r2, [pc, #92]	@ (8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8005e12:	6003      	str	r3, [r0, #0]
 8005e14:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005e16:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8005e1a:	d010      	beq.n	8005e3e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e1c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005e1e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e22:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005e26:	ee06 3a90 	vmov	s13, r3
 8005e2a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005e2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e3a:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8005e40:	6043      	str	r3, [r0, #4]
 8005e42:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005e44:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
 8005e48:	d010      	beq.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e4a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005e4c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e50:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005e54:	ee06 3a90 	vmov	s13, r3
 8005e58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005e5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e68:	ee17 3a90 	vmov	r3, s15
 8005e6c:	6083      	str	r3, [r0, #8]
}
 8005e6e:	bd10      	pop	{r4, pc}
 8005e70:	46020c00 	.word	0x46020c00
 8005e74:	0800809c 	.word	0x0800809c
 8005e78:	39000000 	.word	0x39000000
 8005e7c:	4b742400 	.word	0x4b742400

08005e80 <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005e80:	4953      	ldr	r1, [pc, #332]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
{
 8005e82:	b510      	push	{r4, lr}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005e84:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005e86:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005e88:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005e8a:	f002 0c03 	and.w	ip, r2, #3
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005e8e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005e90:	f3c3 2303 	ubfx	r3, r3, #8, #4
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005e94:	f3c2 1e00 	ubfx	lr, r2, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005e98:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
  switch (pll3source)
 8005e9a:	f1bc 0f02 	cmp.w	ip, #2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005e9e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8005ea2:	fb0e f202 	mul.w	r2, lr, r2
 8005ea6:	ee07 2a90 	vmov	s15, r2
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005eaa:	f103 0301 	add.w	r3, r3, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pll3source)
 8005eb2:	d02c      	beq.n	8005f0e <HAL_RCCEx_GetPLL3ClockFreq+0x8e>
 8005eb4:	f1bc 0f03 	cmp.w	ip, #3
 8005eb8:	d029      	beq.n	8005f0e <HAL_RCCEx_GetPLL3ClockFreq+0x8e>
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005eba:	f3c4 0408 	ubfx	r4, r4, #0, #9
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ebe:	ee07 4a90 	vmov	s15, r4
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ec2:	688a      	ldr	r2, [r1, #8]
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ec4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ec8:	0212      	lsls	r2, r2, #8
 8005eca:	bf4c      	ite	mi
 8005ecc:	688a      	ldrmi	r2, [r1, #8]
 8005ece:	f8d1 20f4 	ldrpl.w	r2, [r1, #244]	@ 0xf4
 8005ed2:	4940      	ldr	r1, [pc, #256]	@ (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>)
 8005ed4:	bf4c      	ite	mi
 8005ed6:	0f12      	lsrmi	r2, r2, #28
 8005ed8:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ee4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ee8:	edd3 5a00 	vldr	s11, [r3]
 8005eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ef0:	ee76 6a86 	vadd.f32	s13, s13, s12
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ef4:	eef8 5a65 	vcvt.f32.u32	s11, s11
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ef8:	ed9f 5a37 	vldr	s10, [pc, #220]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005efc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f00:	eef0 7a66 	vmov.f32	s15, s13
 8005f04:	eee7 7a05 	vfma.f32	s15, s14, s10
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f08:	ee26 7a27 	vmul.f32	s14, s12, s15
      break;
 8005f0c:	e01a      	b.n	8005f44 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f0e:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f18:	ee06 2a10 	vmov	s12, r2
 8005f1c:	ee07 3a90 	vmov	s15, r3
 8005f20:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f28:	ee36 6a26 	vadd.f32	s12, s12, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f2c:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f30:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f34:	eec5 6a27 	vdiv.f32	s13, s10, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f38:	eef0 7a46 	vmov.f32	s15, s12
 8005f3c:	eee7 7a25 	vfma.f32	s15, s14, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f40:	ee26 7aa7 	vmul.f32	s14, s13, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005f44:	4a22      	ldr	r2, [pc, #136]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8005f46:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005f48:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8005f4c:	d010      	beq.n	8005f70 <HAL_RCCEx_GetPLL3ClockFreq+0xf0>
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f4e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005f50:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f54:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005f58:	ee06 3a90 	vmov	s13, r3
 8005f5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005f60:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f6c:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005f70:	4a17      	ldr	r2, [pc, #92]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8005f72:	6003      	str	r3, [r0, #0]
 8005f74:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005f76:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8005f7a:	d010      	beq.n	8005f9e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f7c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f7e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f82:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005f86:	ee06 3a90 	vmov	s13, r3
 8005f8a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005f8e:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9a:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8005fa0:	6043      	str	r3, [r0, #4]
 8005fa2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005fa4:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
 8005fa8:	d010      	beq.n	8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005faa:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005fac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fb0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005fb4:	ee06 3a90 	vmov	s13, r3
 8005fb8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005fbc:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fc8:	ee17 3a90 	vmov	r3, s15
 8005fcc:	6083      	str	r3, [r0, #8]
}
 8005fce:	bd10      	pop	{r4, pc}
 8005fd0:	46020c00 	.word	0x46020c00
 8005fd4:	0800809c 	.word	0x0800809c
 8005fd8:	39000000 	.word	0x39000000
 8005fdc:	4b742400 	.word	0x4b742400

08005fe0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8005fe0:	b500      	push	{lr}
 8005fe2:	f5a0 4300 	sub.w	r3, r0, #32768	@ 0x8000
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	b085      	sub	sp, #20
 8005fea:	f000 83df 	beq.w	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8005fee:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005ff2:	4298      	cmp	r0, r3
 8005ff4:	f171 0300 	sbcs.w	r3, r1, #0
 8005ff8:	d21d      	bcs.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8005ffa:	f1a0 0380 	sub.w	r3, r0, #128	@ 0x80
 8005ffe:	430b      	orrs	r3, r1
 8006000:	f000 83fb 	beq.w	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8006004:	2881      	cmp	r0, #129	@ 0x81
 8006006:	f171 0300 	sbcs.w	r3, r1, #0
 800600a:	d248      	bcs.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800600c:	2821      	cmp	r0, #33	@ 0x21
 800600e:	f171 0300 	sbcs.w	r3, r1, #0
 8006012:	f080 83a8 	bcs.w	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8006016:	ea50 0301 	orrs.w	r3, r0, r1
 800601a:	f000 85d0 	beq.w	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xbde>
 800601e:	3801      	subs	r0, #1
 8006020:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 8006024:	2820      	cmp	r0, #32
 8006026:	f171 0100 	sbcs.w	r1, r1, #0
 800602a:	f0c0 8104 	bcc.w	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = 0U;
 800602e:	2000      	movs	r0, #0
}
 8006030:	b005      	add	sp, #20
 8006032:	f85d fb04 	ldr.w	pc, [sp], #4
 8006036:	f5a0 0380 	sub.w	r3, r0, #4194304	@ 0x400000
 800603a:	430b      	orrs	r3, r1
 800603c:	f000 8412 	beq.w	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8006040:	4bbd      	ldr	r3, [pc, #756]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006042:	4298      	cmp	r0, r3
 8006044:	f171 0300 	sbcs.w	r3, r1, #0
 8006048:	d254      	bcs.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800604a:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800604e:	430b      	orrs	r3, r1
 8006050:	f000 8138 	beq.w	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8006054:	4bb9      	ldr	r3, [pc, #740]	@ (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8006056:	4298      	cmp	r0, r3
 8006058:	f171 0300 	sbcs.w	r3, r1, #0
 800605c:	f080 809e 	bcs.w	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006060:	f5a0 3300 	sub.w	r3, r0, #131072	@ 0x20000
 8006064:	430b      	orrs	r3, r1
 8006066:	f000 825f 	beq.w	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800606a:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
 800606e:	430b      	orrs	r3, r1
 8006070:	f000 81a6 	beq.w	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8006074:	f5a0 3080 	sub.w	r0, r0, #65536	@ 0x10000
 8006078:	4308      	orrs	r0, r1
          frequency = 0U;
 800607a:	bf18      	it	ne
 800607c:	2000      	movne	r0, #0
 800607e:	d1d7      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006080:	4baf      	ldr	r3, [pc, #700]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8006082:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006086:	f003 0307 	and.w	r3, r3, #7
    switch (srcclk)
 800608a:	2b04      	cmp	r3, #4
 800608c:	f200 8650 	bhi.w	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
 8006090:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006094:	0255025a 	.word	0x0255025a
 8006098:	0264025f 	.word	0x0264025f
 800609c:	0267      	.short	0x0267
 800609e:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 80060a2:	430b      	orrs	r3, r1
 80060a4:	f000 812d 	beq.w	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80060a8:	f640 0301 	movw	r3, #2049	@ 0x801
 80060ac:	4298      	cmp	r0, r3
 80060ae:	f171 0300 	sbcs.w	r3, r1, #0
 80060b2:	d24c      	bcs.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80060b4:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 80060b8:	430b      	orrs	r3, r1
 80060ba:	f000 83bc 	beq.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060be:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80060c2:	430b      	orrs	r3, r1
 80060c4:	f000 81dc 	beq.w	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 80060c8:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 80060cc:	4308      	orrs	r0, r1
          frequency = 0U;
 80060ce:	bf18      	it	ne
 80060d0:	2000      	movne	r0, #0
 80060d2:	d1ad      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80060d4:	4b9a      	ldr	r3, [pc, #616]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80060d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
    switch (srcclk)
 80060de:	2b80      	cmp	r3, #128	@ 0x80
 80060e0:	f000 84fa 	beq.w	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80060e4:	f200 8482 	bhi.w	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 80060e8:	bb63      	cbnz	r3, 8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
}
 80060ea:	b005      	add	sp, #20
 80060ec:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK3Freq();
 80060f0:	f7ff b8d6 	b.w	80052a0 <HAL_RCC_GetPCLK3Freq>
 80060f4:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
 80060f8:	430b      	orrs	r3, r1
 80060fa:	f000 813e 	beq.w	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80060fe:	4b91      	ldr	r3, [pc, #580]	@ (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8006100:	4298      	cmp	r0, r3
 8006102:	f171 0300 	sbcs.w	r3, r1, #0
 8006106:	d26d      	bcs.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8006108:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
 800610c:	430b      	orrs	r3, r1
 800610e:	f000 8317 	beq.w	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006112:	f100 437e 	add.w	r3, r0, #4261412864	@ 0xfe000000
 8006116:	430b      	orrs	r3, r1
 8006118:	f000 8174 	beq.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 800611c:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 8006120:	4308      	orrs	r0, r1
          frequency = 0U;
 8006122:	bf18      	it	ne
 8006124:	2000      	movne	r0, #0
 8006126:	d183      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006128:	4b85      	ldr	r3, [pc, #532]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800612a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800612e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (srcclk)
 8006132:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006136:	f000 84c6 	beq.w	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 800613a:	f200 8477 	bhi.w	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 83bd 	beq.w	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
}
 8006144:	b005      	add	sp, #20
 8006146:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetSysClockFreq();
 800614a:	f7fd bfe5 	b.w	8004118 <HAL_RCC_GetSysClockFreq>
 800614e:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8006152:	430b      	orrs	r3, r1
 8006154:	f000 81cf 	beq.w	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006158:	f5a0 4080 	sub.w	r0, r0, #16384	@ 0x4000
 800615c:	4308      	orrs	r0, r1
          frequency = 0U;
 800615e:	bf18      	it	ne
 8006160:	2000      	movne	r0, #0
 8006162:	f47f af65 	bne.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006166:	4b76      	ldr	r3, [pc, #472]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8006168:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800616c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    switch (srcclk)
 8006170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006174:	f000 81e3 	beq.w	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 8006178:	f240 8393 	bls.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800617c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006180:	f000 84e5 	beq.w	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006188:	f040 855c 	bne.w	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800618c:	4b6c      	ldr	r3, [pc, #432]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
          frequency = 0U;
 800618e:	486e      	ldr	r0, [pc, #440]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006190:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8006192:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006196:	bf08      	it	eq
 8006198:	2000      	moveq	r0, #0
 800619a:	e749      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800619c:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
 80061a0:	430b      	orrs	r3, r1
 80061a2:	f000 8192 	beq.w	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80061a6:	f5a0 1000 	sub.w	r0, r0, #2097152	@ 0x200000
 80061aa:	4308      	orrs	r0, r1
 80061ac:	bf18      	it	ne
 80061ae:	2000      	movne	r0, #0
 80061b0:	f47f af3e 	bne.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80061b4:	4b62      	ldr	r3, [pc, #392]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80061b6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80061ba:	0452      	lsls	r2, r2, #17
 80061bc:	f100 83f6 	bmi.w	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80061c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061c4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
      switch (srcclk)
 80061c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061cc:	f000 8371 	beq.w	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80061d0:	f200 848b 	bhi.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 84e3 	beq.w	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061da:	a801      	add	r0, sp, #4
 80061dc:	f7ff fda0 	bl	8005d20 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80061e0:	9802      	ldr	r0, [sp, #8]
        break;
 80061e2:	e725      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80061e4:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 80061e8:	430b      	orrs	r3, r1
 80061ea:	f000 80b1 	beq.w	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80061ee:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
 80061f2:	4308      	orrs	r0, r1
          frequency = 0U;
 80061f4:	bf18      	it	ne
 80061f6:	2000      	movne	r0, #0
 80061f8:	f47f af1a 	bne.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80061fc:	4b50      	ldr	r3, [pc, #320]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80061fe:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006202:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006206:	f400 4000 	and.w	r0, r0, #32768	@ 0x8000
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800620a:	0792      	lsls	r2, r2, #30
 800620c:	f140 83a1 	bpl.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8006210:	2800      	cmp	r0, #0
 8006212:	f000 848a 	beq.w	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006216:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 800621a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800621e:	f43f af07 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006222:	4b47      	ldr	r3, [pc, #284]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8006224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8006228:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800622c:	bf14      	ite	ne
 800622e:	20fa      	movne	r0, #250	@ 0xfa
 8006230:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8006234:	e6fc      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006236:	281f      	cmp	r0, #31
 8006238:	f63f aef9 	bhi.w	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 800623c:	a301      	add	r3, pc, #4	@ (adr r3, 8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800623e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8006242:	bf00      	nop
 8006244:	0800668f 	.word	0x0800668f
 8006248:	08006655 	.word	0x08006655
 800624c:	0800602f 	.word	0x0800602f
 8006250:	08006619 	.word	0x08006619
 8006254:	0800602f 	.word	0x0800602f
 8006258:	0800602f 	.word	0x0800602f
 800625c:	0800602f 	.word	0x0800602f
 8006260:	080065c7 	.word	0x080065c7
 8006264:	0800602f 	.word	0x0800602f
 8006268:	0800602f 	.word	0x0800602f
 800626c:	0800602f 	.word	0x0800602f
 8006270:	0800602f 	.word	0x0800602f
 8006274:	0800602f 	.word	0x0800602f
 8006278:	0800602f 	.word	0x0800602f
 800627c:	0800602f 	.word	0x0800602f
 8006280:	08006703 	.word	0x08006703
 8006284:	0800602f 	.word	0x0800602f
 8006288:	0800602f 	.word	0x0800602f
 800628c:	0800602f 	.word	0x0800602f
 8006290:	0800602f 	.word	0x0800602f
 8006294:	0800602f 	.word	0x0800602f
 8006298:	0800602f 	.word	0x0800602f
 800629c:	0800602f 	.word	0x0800602f
 80062a0:	0800602f 	.word	0x0800602f
 80062a4:	0800602f 	.word	0x0800602f
 80062a8:	0800602f 	.word	0x0800602f
 80062ac:	0800602f 	.word	0x0800602f
 80062b0:	0800602f 	.word	0x0800602f
 80062b4:	0800602f 	.word	0x0800602f
 80062b8:	0800602f 	.word	0x0800602f
 80062bc:	0800602f 	.word	0x0800602f
 80062c0:	080066bd 	.word	0x080066bd
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80062c4:	4a1e      	ldr	r2, [pc, #120]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80062c6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80062ca:	6812      	ldr	r2, [r2, #0]
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80062cc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80062d0:	0491      	lsls	r1, r2, #18
 80062d2:	d502      	bpl.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8422 	beq.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80062da:	4a19      	ldr	r2, [pc, #100]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	0492      	lsls	r2, r2, #18
 80062e0:	d503      	bpl.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e6:	f000 8496 	beq.w	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80062ea:	4a15      	ldr	r2, [pc, #84]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80062ec:	6810      	ldr	r0, [r2, #0]
 80062ee:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 80062f2:	f43f ae9d 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 80062f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062fa:	4813      	ldr	r0, [pc, #76]	@ (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 80062fc:	bf18      	it	ne
 80062fe:	2000      	movne	r0, #0
 8006300:	e696      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006302:	490f      	ldr	r1, [pc, #60]	@ (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8006304:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006308:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 800630c:	f040 8302 	bne.w	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006310:	6808      	ldr	r0, [r1, #0]
 8006312:	f010 0020 	ands.w	r0, r0, #32
 8006316:	f43f ae8b 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800631a:	688b      	ldr	r3, [r1, #8]
 800631c:	021a      	lsls	r2, r3, #8
 800631e:	bf4c      	ite	mi
 8006320:	688b      	ldrmi	r3, [r1, #8]
 8006322:	f8d1 30f4 	ldrpl.w	r3, [r1, #244]	@ 0xf4
 8006326:	4a09      	ldr	r2, [pc, #36]	@ (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006328:	bf4c      	ite	mi
 800632a:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 800632e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006332:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006336:	e67b      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006338:	00400001 	.word	0x00400001
 800633c:	00080001 	.word	0x00080001
 8006340:	46020c00 	.word	0x46020c00
 8006344:	04000001 	.word	0x04000001
 8006348:	00f42400 	.word	0x00f42400
 800634c:	0800809c 	.word	0x0800809c
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006350:	4aac      	ldr	r2, [pc, #688]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8006352:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006356:	6812      	ldr	r2, [r2, #0]
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006358:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800635c:	0392      	lsls	r2, r2, #14
 800635e:	d502      	bpl.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 83df 	beq.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800636a:	f000 83e2 	beq.w	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800636e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006372:	f000 841e 	beq.w	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
          frequency = 0U;
 8006376:	2000      	movs	r0, #0
 8006378:	e65a      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800637a:	4aa2      	ldr	r2, [pc, #648]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800637c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006380:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (srcclk)
 8006384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006388:	f000 8293 	beq.w	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800638c:	f200 8347 	bhi.w	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8006390:	2b00      	cmp	r3, #0
 8006392:	f43f aed7 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006396:	6810      	ldr	r0, [r2, #0]
 8006398:	f010 0020 	ands.w	r0, r0, #32
 800639c:	f43f ae48 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063a0:	6893      	ldr	r3, [r2, #8]
 80063a2:	4a99      	ldr	r2, [pc, #612]	@ (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 80063a4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80063a8:	4b96      	ldr	r3, [pc, #600]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80063aa:	bf15      	itete	ne
 80063ac:	689b      	ldrne	r3, [r3, #8]
 80063ae:	f8d3 30f4 	ldreq.w	r3, [r3, #244]	@ 0xf4
 80063b2:	f3c3 6303 	ubfxne	r3, r3, #24, #4
 80063b6:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 80063ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80063be:	e637      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80063c0:	4a90      	ldr	r2, [pc, #576]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80063c2:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80063c6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80063ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80063ce:	0792      	lsls	r2, r2, #30
 80063d0:	d503      	bpl.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d6:	f000 840e 	beq.w	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80063da:	4a8a      	ldr	r2, [pc, #552]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80063dc:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 80063e0:	0109      	lsls	r1, r1, #4
 80063e2:	d503      	bpl.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e8:	f000 83bb 	beq.w	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80063ec:	4a85      	ldr	r2, [pc, #532]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80063ee:	6810      	ldr	r0, [r2, #0]
 80063f0:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80063f4:	f43f ae1c 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 80063f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063fc:	4883      	ldr	r0, [pc, #524]	@ (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 80063fe:	bf18      	it	ne
 8006400:	2000      	movne	r0, #0
 8006402:	e615      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006404:	4b7f      	ldr	r3, [pc, #508]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8006406:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800640a:	f003 0318 	and.w	r3, r3, #24
    switch (srcclk)
 800640e:	2b18      	cmp	r3, #24
 8006410:	f200 8088 	bhi.w	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006414:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	080060eb 	.word	0x080060eb
 8006420:	08006525 	.word	0x08006525
 8006424:	08006525 	.word	0x08006525
 8006428:	08006525 	.word	0x08006525
 800642c:	08006525 	.word	0x08006525
 8006430:	08006525 	.word	0x08006525
 8006434:	08006525 	.word	0x08006525
 8006438:	08006525 	.word	0x08006525
 800643c:	08006145 	.word	0x08006145
 8006440:	08006525 	.word	0x08006525
 8006444:	08006525 	.word	0x08006525
 8006448:	08006525 	.word	0x08006525
 800644c:	08006525 	.word	0x08006525
 8006450:	08006525 	.word	0x08006525
 8006454:	08006525 	.word	0x08006525
 8006458:	08006525 	.word	0x08006525
 800645c:	0800658d 	.word	0x0800658d
 8006460:	08006525 	.word	0x08006525
 8006464:	08006525 	.word	0x08006525
 8006468:	08006525 	.word	0x08006525
 800646c:	08006525 	.word	0x08006525
 8006470:	08006525 	.word	0x08006525
 8006474:	08006525 	.word	0x08006525
 8006478:	08006525 	.word	0x08006525
 800647c:	0800659d 	.word	0x0800659d
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006480:	4a60      	ldr	r2, [pc, #384]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8006482:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006486:	f413 2340 	ands.w	r3, r3, #786432	@ 0xc0000
 800648a:	f000 8167 	beq.w	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800648e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 8006492:	0112      	lsls	r2, r2, #4
 8006494:	d503      	bpl.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006496:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800649a:	f000 83a1 	beq.w	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xc00>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800649e:	4a59      	ldr	r2, [pc, #356]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	0551      	lsls	r1, r2, #21
 80064a4:	d503      	bpl.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80064a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80064aa:	f000 8416 	beq.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xcfa>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80064ae:	4a55      	ldr	r2, [pc, #340]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80064b0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80064b4:	f010 0002 	ands.w	r0, r0, #2
 80064b8:	f43f adba 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80064bc:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80064c0:	fab3 f383 	clz	r3, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	03d8      	lsls	r0, r3, #15
 80064c8:	e5b2      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80064ca:	4b4e      	ldr	r3, [pc, #312]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80064cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064d0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
    switch (srcclk)
 80064d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064d8:	f000 81eb 	beq.w	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80064dc:	f200 82c0 	bhi.w	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f47f ae7a 	bne.w	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80064e6:	4b47      	ldr	r3, [pc, #284]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
          frequency = 0U;
 80064e8:	4849      	ldr	r0, [pc, #292]	@ (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80064ea:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 80064ec:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80064f0:	bf08      	it	eq
 80064f2:	2000      	moveq	r0, #0
 80064f4:	e59c      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80064f6:	4b43      	ldr	r3, [pc, #268]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80064f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064fc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
    switch (srcclk)
 8006500:	2b40      	cmp	r3, #64	@ 0x40
 8006502:	d01c      	beq.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 8006504:	f240 81cd 	bls.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006508:	2b60      	cmp	r3, #96	@ 0x60
 800650a:	f000 831c 	beq.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
 800650e:	2b80      	cmp	r3, #128	@ 0x80
 8006510:	f040 839e 	bne.w	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006514:	4b3b      	ldr	r3, [pc, #236]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
          frequency = 0U;
 8006516:	483f      	ldr	r0, [pc, #252]	@ (8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006518:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 800651a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800651e:	bf08      	it	eq
 8006520:	2000      	moveq	r0, #0
 8006522:	e585      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006524:	2000      	movs	r0, #0
 8006526:	e583      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006528:	4b36      	ldr	r3, [pc, #216]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800652a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800652e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8006532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006536:	d00c      	beq.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8006538:	f200 8214 	bhi.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 800653c:	b123      	cbz	r3, 8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800653e:	a801      	add	r0, sp, #4
 8006540:	f7ff fb3e 	bl	8005bc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006544:	9801      	ldr	r0, [sp, #4]
        break;
 8006546:	e573      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
}
 8006548:	b005      	add	sp, #20
 800654a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetHCLKFreq();
 800654e:	f7fe bcc1 	b.w	8004ed4 <HAL_RCC_GetHCLKFreq>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006552:	a801      	add	r0, sp, #4
 8006554:	f7ff fc94 	bl	8005e80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006558:	9802      	ldr	r0, [sp, #8]
        break;
 800655a:	e569      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800655c:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8006560:	e566      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006562:	4a28      	ldr	r2, [pc, #160]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8006564:	6810      	ldr	r0, [r2, #0]
 8006566:	f010 0020 	ands.w	r0, r0, #32
 800656a:	f43f ad61 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800656e:	6893      	ldr	r3, [r2, #8]
 8006570:	0218      	lsls	r0, r3, #8
 8006572:	bf4c      	ite	mi
 8006574:	6893      	ldrmi	r3, [r2, #8]
 8006576:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 800657a:	4a23      	ldr	r2, [pc, #140]	@ (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 800657c:	bf4c      	ite	mi
 800657e:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006582:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006586:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800658a:	e551      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800658c:	4b1d      	ldr	r3, [pc, #116]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
          frequency = 0U;
 800658e:	4821      	ldr	r0, [pc, #132]	@ (8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006590:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8006592:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006596:	bf08      	it	eq
 8006598:	2000      	moveq	r0, #0
 800659a:	e549      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800659c:	4a19      	ldr	r2, [pc, #100]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800659e:	6810      	ldr	r0, [r2, #0]
 80065a0:	f010 0020 	ands.w	r0, r0, #32
 80065a4:	f43f ad44 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065a8:	6893      	ldr	r3, [r2, #8]
 80065aa:	0219      	lsls	r1, r3, #8
 80065ac:	bf4c      	ite	mi
 80065ae:	6893      	ldrmi	r3, [r2, #8]
 80065b0:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80065b4:	4a14      	ldr	r2, [pc, #80]	@ (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 80065b6:	bf4c      	ite	mi
 80065b8:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80065bc:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80065c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80065c4:	e534      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80065c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80065c8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80065cc:	f013 03c0 	ands.w	r3, r3, #192	@ 0xc0
 80065d0:	f000 80c4 	beq.w	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80065d4:	2b40      	cmp	r3, #64	@ 0x40
 80065d6:	f43f adb5 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	0552      	lsls	r2, r2, #21
 80065de:	d502      	bpl.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80065e0:	2b80      	cmp	r3, #128	@ 0x80
 80065e2:	f000 8392 	beq.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80065e6:	4a07      	ldr	r2, [pc, #28]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80065e8:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80065ec:	f010 0002 	ands.w	r0, r0, #2
 80065f0:	f43f ad1e 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80065f4:	f1a3 03c0 	sub.w	r3, r3, #192	@ 0xc0
 80065f8:	fab3 f383 	clz	r3, r3
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	03d8      	lsls	r0, r3, #15
 8006600:	e516      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006602:	bf00      	nop
 8006604:	46020c00 	.word	0x46020c00
 8006608:	0800809c 	.word	0x0800809c
 800660c:	0007a120 	.word	0x0007a120
 8006610:	02dc6c00 	.word	0x02dc6c00
 8006614:	00f42400 	.word	0x00f42400
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006618:	4aab      	ldr	r2, [pc, #684]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800661a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800661e:	f013 0330 	ands.w	r3, r3, #48	@ 0x30
 8006622:	f000 809b 	beq.w	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006626:	2b10      	cmp	r3, #16
 8006628:	f43f ad8c 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	0551      	lsls	r1, r2, #21
 8006630:	d502      	bpl.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006632:	2b20      	cmp	r3, #32
 8006634:	f000 8366 	beq.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006638:	4aa3      	ldr	r2, [pc, #652]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800663a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 800663e:	f010 0002 	ands.w	r0, r0, #2
 8006642:	f43f acf5 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006646:	f1a3 0330 	sub.w	r3, r3, #48	@ 0x30
 800664a:	fab3 f383 	clz	r3, r3
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	03d8      	lsls	r0, r3, #15
 8006652:	e4ed      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006654:	4a9c      	ldr	r2, [pc, #624]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006656:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800665a:	f013 030c 	ands.w	r3, r3, #12
 800665e:	d07d      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006660:	2b04      	cmp	r3, #4
 8006662:	f43f ad6f 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006666:	6812      	ldr	r2, [r2, #0]
 8006668:	0550      	lsls	r0, r2, #21
 800666a:	d502      	bpl.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800666c:	2b08      	cmp	r3, #8
 800666e:	f000 8346 	beq.w	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006672:	4a95      	ldr	r2, [pc, #596]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006674:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8006678:	f010 0002 	ands.w	r0, r0, #2
 800667c:	f43f acd8 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006680:	f1a3 030c 	sub.w	r3, r3, #12
 8006684:	fab3 f383 	clz	r3, r3
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	03d8      	lsls	r0, r3, #15
 800668c:	e4d0      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800668e:	498e      	ldr	r1, [pc, #568]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006690:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006694:	f012 0203 	ands.w	r2, r2, #3
 8006698:	f000 8111 	beq.w	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800669c:	2a01      	cmp	r2, #1
 800669e:	f43f ad51 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80066a2:	680b      	ldr	r3, [r1, #0]
 80066a4:	0558      	lsls	r0, r3, #21
 80066a6:	f140 81f5 	bpl.w	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80066aa:	2a02      	cmp	r2, #2
 80066ac:	f000 8318 	beq.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80066b0:	f8d1 00f0 	ldr.w	r0, [r1, #240]	@ 0xf0
 80066b4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80066b8:	03c0      	lsls	r0, r0, #15
 80066ba:	e4b9      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80066bc:	4982      	ldr	r1, [pc, #520]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80066be:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80066c2:	f012 0207 	ands.w	r2, r2, #7
 80066c6:	f43f ad10 	beq.w	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80066ca:	2a01      	cmp	r2, #1
 80066cc:	f43f ad3a 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80066d0:	680b      	ldr	r3, [r1, #0]
 80066d2:	0559      	lsls	r1, r3, #21
 80066d4:	d502      	bpl.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80066d6:	2a02      	cmp	r2, #2
 80066d8:	f000 830e 	beq.w	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80066dc:	4b7a      	ldr	r3, [pc, #488]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80066de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e2:	079b      	lsls	r3, r3, #30
 80066e4:	d502      	bpl.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80066e6:	2a03      	cmp	r2, #3
 80066e8:	f000 8315 	beq.w	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80066ec:	4976      	ldr	r1, [pc, #472]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80066ee:	6808      	ldr	r0, [r1, #0]
 80066f0:	f010 0020 	ands.w	r0, r0, #32
 80066f4:	f43f ac9c 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80066f8:	2a04      	cmp	r2, #4
 80066fa:	f000 82dc 	beq.w	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
          frequency = 0U;
 80066fe:	2000      	movs	r0, #0
 8006700:	e496      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006702:	4a71      	ldr	r2, [pc, #452]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006704:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006708:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800670c:	d026      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800670e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006712:	f43f ad17 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	0550      	lsls	r0, r2, #21
 800671a:	d503      	bpl.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800671c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006720:	f000 82e4 	beq.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006724:	4a68      	ldr	r2, [pc, #416]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006726:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 800672a:	f010 0002 	ands.w	r0, r0, #2
 800672e:	f43f ac7f 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006732:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8006736:	fab3 f383 	clz	r3, r3
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	03d8      	lsls	r0, r3, #15
 800673e:	e477      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006740:	4a61      	ldr	r2, [pc, #388]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006742:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8006746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 800674a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800674e:	f000 81b2 	beq.w	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8006752:	f200 8131 	bhi.w	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8006756:	2b00      	cmp	r3, #0
 8006758:	f47f acf4 	bne.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
}
 800675c:	b005      	add	sp, #20
 800675e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8006762:	f7fe bc55 	b.w	8005010 <HAL_RCC_GetPCLK1Freq>
 8006766:	3840      	subs	r0, #64	@ 0x40
 8006768:	4308      	orrs	r0, r1
          frequency = 0U;
 800676a:	bf18      	it	ne
 800676c:	2000      	movne	r0, #0
 800676e:	f47f ac5f 	bne.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006772:	4a55      	ldr	r2, [pc, #340]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006774:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006778:	f413 6340 	ands.w	r3, r3, #3072	@ 0xc00
 800677c:	d0ee      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800677e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006782:	f43f acdf 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	0552      	lsls	r2, r2, #21
 800678a:	d503      	bpl.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 800678c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006790:	f000 82be 	beq.w	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006794:	4a4c      	ldr	r2, [pc, #304]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006796:	6810      	ldr	r0, [r2, #0]
 8006798:	f010 0020 	ands.w	r0, r0, #32
 800679c:	f43f ac48 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80067a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067a4:	f000 8257 	beq.w	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80067a8:	2000      	movs	r0, #0
 80067aa:	e441      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80067ac:	4946      	ldr	r1, [pc, #280]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80067ae:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80067b2:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80067b6:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80067ba:	f43f acc3 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80067be:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80067c2:	f000 81c8 	beq.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	f43f aebe 	beq.w	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80067cc:	f5b2 4fa0 	cmp.w	r2, #20480	@ 0x5000
 80067d0:	f000 81d1 	beq.w	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xb96>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80067d4:	680b      	ldr	r3, [r1, #0]
 80067d6:	039b      	lsls	r3, r3, #14
 80067d8:	d503      	bpl.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 80067da:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 80067de:	f000 82a4 	beq.w	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80067e2:	4b39      	ldr	r3, [pc, #228]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 80067ea:	f43f ac21 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 80067ee:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 80067f2:	4836      	ldr	r0, [pc, #216]	@ (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 80067f4:	bf18      	it	ne
 80067f6:	2000      	movne	r0, #0
 80067f8:	e41a      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80067fa:	4a33      	ldr	r2, [pc, #204]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80067fc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006800:	f413 5340 	ands.w	r3, r3, #12288	@ 0x3000
 8006804:	d0aa      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800680a:	f43f ac9b 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	0550      	lsls	r0, r2, #21
 8006812:	d503      	bpl.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8006814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006818:	f000 8265 	beq.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800681c:	4a2a      	ldr	r2, [pc, #168]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800681e:	6810      	ldr	r0, [r2, #0]
 8006820:	f010 0020 	ands.w	r0, r0, #32
 8006824:	f43f ac04 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006828:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800682c:	f000 8223 	beq.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = 0U;
 8006830:	2000      	movs	r0, #0
 8006832:	f7ff bbfd 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006836:	4924      	ldr	r1, [pc, #144]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006838:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800683c:	f412 6240 	ands.w	r2, r2, #3072	@ 0xc00
 8006840:	d148      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006842:	6808      	ldr	r0, [r1, #0]
 8006844:	f010 0020 	ands.w	r0, r0, #32
 8006848:	f43f abf2 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800684c:	688b      	ldr	r3, [r1, #8]
 800684e:	0218      	lsls	r0, r3, #8
 8006850:	f140 81b8 	bpl.w	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8006854:	688b      	ldr	r3, [r1, #8]
 8006856:	f3c3 6303 	ubfx	r3, r3, #24, #4
 800685a:	4a1d      	ldr	r2, [pc, #116]	@ (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
 800685c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006860:	f7ff bbe6 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006864:	4a18      	ldr	r2, [pc, #96]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006866:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800686a:	f413 4340 	ands.w	r3, r3, #49152	@ 0xc000
 800686e:	f43f af75 	beq.w	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006872:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006876:	f43f ac65 	beq.w	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	0550      	lsls	r0, r2, #21
 800687e:	d503      	bpl.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 8006880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006884:	f000 8235 	beq.w	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xd12>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006888:	4a0f      	ldr	r2, [pc, #60]	@ (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800688a:	6810      	ldr	r0, [r2, #0]
 800688c:	f010 0020 	ands.w	r0, r0, #32
 8006890:	f43f abce 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006894:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006898:	f000 81fd 	beq.w	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
          frequency = 0U;
 800689c:	2000      	movs	r0, #0
 800689e:	f7ff bbc7 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d07c      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a6:	a801      	add	r0, sp, #4
 80068a8:	f7ff faea 	bl	8005e80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80068ac:	9801      	ldr	r0, [sp, #4]
        break;
 80068ae:	f7ff bbbf 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068b2:	a801      	add	r0, sp, #4
 80068b4:	f7ff f984 	bl	8005bc0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80068b8:	9802      	ldr	r0, [sp, #8]
        break;
 80068ba:	f7ff bbb9 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
}
 80068be:	b005      	add	sp, #20
 80068c0:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK2Freq();
 80068c4:	f7fe bc48 	b.w	8005158 <HAL_RCC_GetPCLK2Freq>
 80068c8:	46020c00 	.word	0x46020c00
 80068cc:	00f42400 	.word	0x00f42400
 80068d0:	0800809c 	.word	0x0800809c
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80068d4:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 80068d8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068dc:	4bbc      	ldr	r3, [pc, #752]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80068de:	d003      	beq.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
 80068e0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80068e4:	f000 81a4 	beq.w	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xc50>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	0559      	lsls	r1, r3, #21
 80068ec:	d503      	bpl.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 80068ee:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80068f2:	f000 8214 	beq.w	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80068f6:	4bb6      	ldr	r3, [pc, #728]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80068f8:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80068fc:	f010 0002 	ands.w	r0, r0, #2
 8006900:	f43f ab96 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006904:	f5a2 6340 	sub.w	r3, r2, #3072	@ 0xc00
 8006908:	fab3 f383 	clz	r3, r3
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	03d8      	lsls	r0, r3, #15
 8006910:	f7ff bb8e 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006914:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	d503      	bpl.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800691c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8006920:	f000 817c 	beq.w	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006924:	4baa      	ldr	r3, [pc, #680]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	055b      	lsls	r3, r3, #21
 800692a:	d503      	bpl.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 800692c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8006930:	f000 81f8 	beq.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006934:	4ba6      	ldr	r3, [pc, #664]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8006936:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 800693a:	f010 0002 	ands.w	r0, r0, #2
 800693e:	f43f ab77 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006942:	f5a2 7340 	sub.w	r3, r2, #768	@ 0x300
 8006946:	fab3 f383 	clz	r3, r3
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	03d8      	lsls	r0, r3, #15
 800694e:	f7ff bb6f 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	f140 80aa 	bpl.w	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
 800695c:	2800      	cmp	r0, #0
 800695e:	f43f ab67 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006962:	e45e      	b.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
    switch (srcclk)
 8006964:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006968:	f000 80e9 	beq.w	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800696c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006970:	f040 816b 	bne.w	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006974:	4a96      	ldr	r2, [pc, #600]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8006976:	6810      	ldr	r0, [r2, #0]
 8006978:	f010 0020 	ands.w	r0, r0, #32
 800697c:	f43f ab58 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006980:	6893      	ldr	r3, [r2, #8]
 8006982:	0219      	lsls	r1, r3, #8
 8006984:	bf4c      	ite	mi
 8006986:	6893      	ldrmi	r3, [r2, #8]
 8006988:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 800698c:	4a91      	ldr	r2, [pc, #580]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 800698e:	bf4c      	ite	mi
 8006990:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006994:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006998:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800699c:	f7ff bb48 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a0:	a801      	add	r0, sp, #4
 80069a2:	f7ff f9bd 	bl	8005d20 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80069a6:	9801      	ldr	r0, [sp, #4]
        break;
 80069a8:	f7ff bb42 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069ac:	a801      	add	r0, sp, #4
 80069ae:	f7ff f907 	bl	8005bc0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80069b2:	9801      	ldr	r0, [sp, #4]
 80069b4:	f7ff bb3c 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 80069b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069bc:	f040 8128 	bne.w	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069c0:	4a83      	ldr	r2, [pc, #524]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80069c2:	6810      	ldr	r0, [r2, #0]
 80069c4:	f010 0020 	ands.w	r0, r0, #32
 80069c8:	f43f ab32 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069cc:	6893      	ldr	r3, [r2, #8]
 80069ce:	0218      	lsls	r0, r3, #8
 80069d0:	bf4c      	ite	mi
 80069d2:	6893      	ldrmi	r3, [r2, #8]
 80069d4:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80069d8:	4a7e      	ldr	r2, [pc, #504]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 80069da:	bf4c      	ite	mi
 80069dc:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80069e0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80069e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80069e8:	f7ff bb22 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 80069ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80069ee:	f040 8109 	bne.w	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069f2:	4a77      	ldr	r2, [pc, #476]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80069f4:	6810      	ldr	r0, [r2, #0]
 80069f6:	f010 0020 	ands.w	r0, r0, #32
 80069fa:	f43f ab19 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069fe:	6893      	ldr	r3, [r2, #8]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	bf4c      	ite	mi
 8006a04:	6893      	ldrmi	r3, [r2, #8]
 8006a06:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8006a0a:	4a72      	ldr	r2, [pc, #456]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 8006a0c:	bf4c      	ite	mi
 8006a0e:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006a12:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006a16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006a1a:	f7ff bb09 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 8006a1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a22:	f43f abda 	beq.w	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
          frequency = 0U;
 8006a26:	2000      	movs	r0, #0
 8006a28:	f7ff bb02 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 8006a2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a30:	f040 80e5 	bne.w	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0xc1e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a34:	4a66      	ldr	r2, [pc, #408]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8006a36:	6810      	ldr	r0, [r2, #0]
 8006a38:	f010 0020 	ands.w	r0, r0, #32
 8006a3c:	f43f aaf8 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a40:	6893      	ldr	r3, [r2, #8]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	bf4c      	ite	mi
 8006a46:	6893      	ldrmi	r3, [r2, #8]
 8006a48:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8006a4c:	4a61      	ldr	r2, [pc, #388]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 8006a4e:	bf4c      	ite	mi
 8006a50:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006a54:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006a58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006a5c:	f7ff bae8 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 8006a60:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a64:	f040 80d1 	bne.w	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a68:	4a59      	ldr	r2, [pc, #356]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8006a6a:	6810      	ldr	r0, [r2, #0]
 8006a6c:	f010 0020 	ands.w	r0, r0, #32
 8006a70:	f43f aade 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a74:	6893      	ldr	r3, [r2, #8]
 8006a76:	0219      	lsls	r1, r3, #8
 8006a78:	bf4c      	ite	mi
 8006a7a:	6893      	ldrmi	r3, [r2, #8]
 8006a7c:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8006a80:	4a54      	ldr	r2, [pc, #336]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 8006a82:	bf4c      	ite	mi
 8006a84:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006a88:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006a8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006a90:	f7ff bace 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006a94:	f8d1 00f0 	ldr.w	r0, [r1, #240]	@ 0xf0
 8006a98:	f010 0002 	ands.w	r0, r0, #2
 8006a9c:	f43f aac8 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006aa0:	f1a2 0303 	sub.w	r3, r2, #3
 8006aa4:	fab3 f383 	clz	r3, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	03d8      	lsls	r0, r3, #15
 8006aac:	f7ff bac0 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f7ff babd 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ab6:	6813      	ldr	r3, [r2, #0]
          frequency = 0U;
 8006ab8:	4847      	ldr	r0, [pc, #284]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
 8006aba:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006abe:	bf08      	it	eq
 8006ac0:	2000      	moveq	r0, #0
 8006ac2:	f7ff bab5 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ac6:	4b42      	ldr	r3, [pc, #264]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
          frequency = 0U;
 8006ac8:	4843      	ldr	r0, [pc, #268]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006aca:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8006acc:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006ad0:	bf08      	it	eq
 8006ad2:	2000      	moveq	r0, #0
 8006ad4:	f7ff baac 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
          frequency = 0U;
 8006ada:	483f      	ldr	r0, [pc, #252]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006adc:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8006ade:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006ae2:	bf08      	it	eq
 8006ae4:	2000      	moveq	r0, #0
 8006ae6:	f7ff baa3 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      switch (srcclk)
 8006aea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006aee:	f040 80f1 	bne.w	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf4>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006af2:	4a37      	ldr	r2, [pc, #220]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8006af4:	6810      	ldr	r0, [r2, #0]
 8006af6:	f010 0020 	ands.w	r0, r0, #32
 8006afa:	f43f aa99 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006afe:	6893      	ldr	r3, [r2, #8]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	bf4c      	ite	mi
 8006b04:	6893      	ldrmi	r3, [r2, #8]
 8006b06:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8006b0a:	4a32      	ldr	r2, [pc, #200]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 8006b0c:	bf4c      	ite	mi
 8006b0e:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006b12:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006b16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006b1a:	f7ff ba89 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI48_VALUE;
 8006b1e:	482f      	ldr	r0, [pc, #188]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>)
 8006b20:	f7ff ba86 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI_VALUE;
 8006b24:	482c      	ldr	r0, [pc, #176]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
 8006b26:	f7ff ba83 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = LSE_VALUE;
 8006b2a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006b2e:	f7ff ba7f 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b32:	a801      	add	r0, sp, #4
 8006b34:	f7ff f844 	bl	8005bc0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b38:	9802      	ldr	r0, [sp, #8]
 8006b3a:	f7ff ba79 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b3e:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8006b42:	f7ff ba75 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006b46:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8006b4a:	f7ff ba71 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006b4e:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8006b52:	f7ff ba6d 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b56:	a801      	add	r0, sp, #4
 8006b58:	f7ff f8e2 	bl	8005d20 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006b5c:	9803      	ldr	r0, [sp, #12]
 8006b5e:	f7ff ba67 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b62:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8006b66:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8006b6a:	bf14      	ite	ne
 8006b6c:	20fa      	movne	r0, #250	@ 0xfa
 8006b6e:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8006b72:	f7ff ba5d 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b76:	6808      	ldr	r0, [r1, #0]
 8006b78:	f010 0020 	ands.w	r0, r0, #32
 8006b7c:	f43f aa58 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b80:	688b      	ldr	r3, [r1, #8]
 8006b82:	021a      	lsls	r2, r3, #8
 8006b84:	bf4c      	ite	mi
 8006b86:	688b      	ldrmi	r3, [r1, #8]
 8006b88:	f8d1 30f4 	ldrpl.w	r3, [r1, #244]	@ 0xf4
 8006b8c:	4a11      	ldr	r2, [pc, #68]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 8006b8e:	bf4c      	ite	mi
 8006b90:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006b94:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006b98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006b9c:	f7ff ba48 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
          frequency = 0U;
 8006ba2:	480e      	ldr	r0, [pc, #56]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>)
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006ba4:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8006ba6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006baa:	bf08      	it	eq
 8006bac:	2000      	moveq	r0, #0
 8006bae:	f7ff ba3f 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bb2:	a801      	add	r0, sp, #4
 8006bb4:	f7ff f8b4 	bl	8005d20 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006bb8:	9801      	ldr	r0, [sp, #4]
 8006bba:	f7ff ba39 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f7ff ba36 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bc4:	4b02      	ldr	r3, [pc, #8]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8006bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bca:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006bce:	e644      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8006bd0:	46020c00 	.word	0x46020c00
 8006bd4:	0800809c 	.word	0x0800809c
 8006bd8:	00f42400 	.word	0x00f42400
 8006bdc:	02dc6c00 	.word	0x02dc6c00
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006be0:	4b55      	ldr	r3, [pc, #340]	@ (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 8006be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8006be6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8006bea:	bf14      	ite	ne
 8006bec:	20fa      	movne	r0, #250	@ 0xfa
 8006bee:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8006bf2:	f7ff ba1d 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = LSE_VALUE;
 8006bf6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006bfa:	f7ff ba19 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8006bfe:	2000      	movs	r0, #0
 8006c00:	f7ff ba16 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006c04:	2000      	movs	r0, #0
 8006c06:	f7ff ba13 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	f7ff ba10 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006c10:	2000      	movs	r0, #0
 8006c12:	f7ff ba0d 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = HSI48_VALUE >> 1U ;
 8006c16:	4849      	ldr	r0, [pc, #292]	@ (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006c18:	f7ff ba0a 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c1c:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8006c20:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8006c24:	bf14      	ite	ne
 8006c26:	20fa      	movne	r0, #250	@ 0xfa
 8006c28:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8006c2c:	f7ff ba00 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8006c34:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8006c38:	bf14      	ite	ne
 8006c3a:	20fa      	movne	r0, #250	@ 0xfa
 8006c3c:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8006c40:	f7ff b9f6 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8006c44:	2000      	movs	r0, #0
 8006c46:	f7ff b9f3 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	f7ff b9f0 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006c50:	2000      	movs	r0, #0
 8006c52:	f7ff b9ed 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c56:	6893      	ldr	r3, [r2, #8]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	bf4c      	ite	mi
 8006c5c:	6893      	ldrmi	r3, [r2, #8]
 8006c5e:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8006c62:	4a37      	ldr	r2, [pc, #220]	@ (8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006c64:	bf4c      	ite	mi
 8006c66:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006c6a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006c6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c72:	f7ff b9dd 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c76:	6893      	ldr	r3, [r2, #8]
 8006c78:	0219      	lsls	r1, r3, #8
 8006c7a:	bf4c      	ite	mi
 8006c7c:	6893      	ldrmi	r3, [r2, #8]
 8006c7e:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8006c82:	4a2f      	ldr	r2, [pc, #188]	@ (8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006c84:	bf4c      	ite	mi
 8006c86:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006c8a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006c8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c92:	f7ff b9cd 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c96:	6893      	ldr	r3, [r2, #8]
 8006c98:	0219      	lsls	r1, r3, #8
 8006c9a:	bf4c      	ite	mi
 8006c9c:	6893      	ldrmi	r3, [r2, #8]
 8006c9e:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8006ca2:	4a27      	ldr	r2, [pc, #156]	@ (8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006ca4:	bf4c      	ite	mi
 8006ca6:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006caa:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006cae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006cb2:	f7ff b9bd 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cb6:	688b      	ldr	r3, [r1, #8]
 8006cb8:	4a21      	ldr	r2, [pc, #132]	@ (8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006cba:	0218      	lsls	r0, r3, #8
 8006cbc:	bf4b      	itete	mi
 8006cbe:	688b      	ldrmi	r3, [r1, #8]
 8006cc0:	f8d1 30f4 	ldrpl.w	r3, [r1, #244]	@ 0xf4
 8006cc4:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8006cc8:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8006ccc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006cd0:	f7ff b9ae 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	f7ff b9ab 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI_VALUE;
 8006cda:	481a      	ldr	r0, [pc, #104]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006cdc:	f7ff b9a8 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006ce0:	4818      	ldr	r0, [pc, #96]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006ce2:	f7ff b9a5 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006ce6:	4817      	ldr	r0, [pc, #92]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006ce8:	f7ff b9a2 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006cec:	4815      	ldr	r0, [pc, #84]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006cee:	f7ff b99f 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006cf2:	4814      	ldr	r0, [pc, #80]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006cf4:	f7ff b99c 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006cf8:	4812      	ldr	r0, [pc, #72]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006cfa:	f7ff b999 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006cfe:	4811      	ldr	r0, [pc, #68]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006d00:	f7ff b996 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006d04:	480f      	ldr	r0, [pc, #60]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006d06:	f7ff b993 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006d0a:	480e      	ldr	r0, [pc, #56]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006d0c:	f7ff b990 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006d10:	480c      	ldr	r0, [pc, #48]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006d12:	f7ff b98d 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = LSE_VALUE;
 8006d16:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006d1a:	f7ff b989 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI_VALUE;
 8006d1e:	4809      	ldr	r0, [pc, #36]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006d20:	f7ff b986 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006d24:	4807      	ldr	r0, [pc, #28]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006d26:	f7ff b983 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006d2a:	4806      	ldr	r0, [pc, #24]	@ (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006d2c:	f7ff b980 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8006d30:	2000      	movs	r0, #0
 8006d32:	f7ff b97d 	b.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8006d36:	bf00      	nop
 8006d38:	46020c00 	.word	0x46020c00
 8006d3c:	016e3600 	.word	0x016e3600
 8006d40:	0800809c 	.word	0x0800809c
 8006d44:	00f42400 	.word	0x00f42400

08006d48 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	f000 80a8 	beq.w	8006e9e <HAL_TIM_Base_Init+0x156>
{
 8006d4e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d50:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006d54:	4604      	mov	r4, r0
 8006d56:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 809a 	beq.w	8006e94 <HAL_TIM_Base_Init+0x14c>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d60:	2202      	movs	r2, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d62:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	495d      	ldr	r1, [pc, #372]	@ (8006edc <HAL_TIM_Base_Init+0x194>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006d66:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d6a:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8006d6c:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d6e:	d048      	beq.n	8006e02 <HAL_TIM_Base_Init+0xba>
 8006d70:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006d74:	428b      	cmp	r3, r1
 8006d76:	d044      	beq.n	8006e02 <HAL_TIM_Base_Init+0xba>
 8006d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d7c:	d078      	beq.n	8006e70 <HAL_TIM_Base_Init+0x128>
 8006d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d82:	d075      	beq.n	8006e70 <HAL_TIM_Base_Init+0x128>
 8006d84:	4956      	ldr	r1, [pc, #344]	@ (8006ee0 <HAL_TIM_Base_Init+0x198>)
 8006d86:	428b      	cmp	r3, r1
 8006d88:	d072      	beq.n	8006e70 <HAL_TIM_Base_Init+0x128>
 8006d8a:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006d8e:	428b      	cmp	r3, r1
 8006d90:	d06e      	beq.n	8006e70 <HAL_TIM_Base_Init+0x128>
 8006d92:	4954      	ldr	r1, [pc, #336]	@ (8006ee4 <HAL_TIM_Base_Init+0x19c>)
 8006d94:	428b      	cmp	r3, r1
 8006d96:	d06b      	beq.n	8006e70 <HAL_TIM_Base_Init+0x128>
 8006d98:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	d067      	beq.n	8006e70 <HAL_TIM_Base_Init+0x128>
 8006da0:	4951      	ldr	r1, [pc, #324]	@ (8006ee8 <HAL_TIM_Base_Init+0x1a0>)
 8006da2:	428b      	cmp	r3, r1
 8006da4:	d064      	beq.n	8006e70 <HAL_TIM_Base_Init+0x128>
 8006da6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006daa:	428b      	cmp	r3, r1
 8006dac:	d07f      	beq.n	8006eae <HAL_TIM_Base_Init+0x166>
 8006dae:	494f      	ldr	r1, [pc, #316]	@ (8006eec <HAL_TIM_Base_Init+0x1a4>)
 8006db0:	428b      	cmp	r3, r1
 8006db2:	f000 8081 	beq.w	8006eb8 <HAL_TIM_Base_Init+0x170>
 8006db6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006dba:	428b      	cmp	r3, r1
 8006dbc:	d021      	beq.n	8006e02 <HAL_TIM_Base_Init+0xba>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dbe:	494c      	ldr	r1, [pc, #304]	@ (8006ef0 <HAL_TIM_Base_Init+0x1a8>)
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	d059      	beq.n	8006e78 <HAL_TIM_Base_Init+0x130>
 8006dc4:	494b      	ldr	r1, [pc, #300]	@ (8006ef4 <HAL_TIM_Base_Init+0x1ac>)
 8006dc6:	428b      	cmp	r3, r1
 8006dc8:	d06b      	beq.n	8006ea2 <HAL_TIM_Base_Init+0x15a>
 8006dca:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006dce:	428b      	cmp	r3, r1
 8006dd0:	d067      	beq.n	8006ea2 <HAL_TIM_Base_Init+0x15a>
 8006dd2:	4949      	ldr	r1, [pc, #292]	@ (8006ef8 <HAL_TIM_Base_Init+0x1b0>)
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	d064      	beq.n	8006ea2 <HAL_TIM_Base_Init+0x15a>
 8006dd8:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006ddc:	428b      	cmp	r3, r1
 8006dde:	d060      	beq.n	8006ea2 <HAL_TIM_Base_Init+0x15a>
 8006de0:	4946      	ldr	r1, [pc, #280]	@ (8006efc <HAL_TIM_Base_Init+0x1b4>)
 8006de2:	428b      	cmp	r3, r1
 8006de4:	d05d      	beq.n	8006ea2 <HAL_TIM_Base_Init+0x15a>
 8006de6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 8006dea:	428b      	cmp	r3, r1
 8006dec:	d059      	beq.n	8006ea2 <HAL_TIM_Base_Init+0x15a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dee:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df0:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006df8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006dfa:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dfc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006dfe:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e00:	e012      	b.n	8006e28 <HAL_TIM_Base_Init+0xe0>
    tmpcr1 |= Structure->CounterMode;
 8006e02:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e04:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e08:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8006e0a:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e0c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e10:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e12:	69a1      	ldr	r1, [r4, #24]
 8006e14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e18:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006e1a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e1c:	68e2      	ldr	r2, [r4, #12]
 8006e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e20:	6862      	ldr	r2, [r4, #4]
 8006e22:	629a      	str	r2, [r3, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e24:	6962      	ldr	r2, [r4, #20]
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e28:	2201      	movs	r2, #1
 8006e2a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e2c:	691a      	ldr	r2, [r3, #16]
 8006e2e:	07d2      	lsls	r2, r2, #31
 8006e30:	d503      	bpl.n	8006e3a <HAL_TIM_Base_Init+0xf2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	f022 0201 	bic.w	r2, r2, #1
 8006e38:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e40:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006e44:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006e48:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006e4c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e58:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006e5c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006e60:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006e64:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006e68:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006e6c:	2000      	movs	r0, #0
}
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006e70:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e72:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e76:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e78:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e7a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e7e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e80:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e86:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e88:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8006e8a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006e8c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e8e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e90:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e92:	e7c9      	b.n	8006e28 <HAL_TIM_Base_Init+0xe0>
    htim->Lock = HAL_UNLOCKED;
 8006e94:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006e98:	f7fb f9e4 	bl	8002264 <HAL_TIM_Base_MspInit>
 8006e9c:	e760      	b.n	8006d60 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8006e9e:	2001      	movs	r0, #1
}
 8006ea0:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ea2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ea4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ea8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eaa:	4302      	orrs	r2, r0
 8006eac:	e7b2      	b.n	8006e14 <HAL_TIM_Base_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8006eae:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006eb4:	430a      	orrs	r2, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eb6:	e782      	b.n	8006dbe <HAL_TIM_Base_Init+0x76>
    tmpcr1 |= Structure->CounterMode;
 8006eb8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ebe:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8006ec0:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ec2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec6:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec8:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ece:	4302      	orrs	r2, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ed0:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8006ed2:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8006ed4:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ed6:	62d9      	str	r1, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eda:	e7a3      	b.n	8006e24 <HAL_TIM_Base_Init+0xdc>
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00
 8006eec:	40013400 	.word	0x40013400
 8006ef0:	50000c00 	.word	0x50000c00
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40014400 	.word	0x40014400
 8006efc:	40014800 	.word	0x40014800

08006f00 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006f00:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006f04:	2a01      	cmp	r2, #1
 8006f06:	d075      	beq.n	8006ff4 <HAL_TIM_ConfigClockSource+0xf4>
 8006f08:	4603      	mov	r3, r0
{
 8006f0a:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006f0c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0e:	2502      	movs	r5, #2
  tmpsmcr = htim->Instance->SMCR;
 8006f10:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(htim);
 8006f12:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006f16:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006f1a:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f1c:	4c5e      	ldr	r4, [pc, #376]	@ (8007098 <HAL_TIM_ConfigClockSource+0x198>)
 8006f1e:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8006f20:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006f22:	680c      	ldr	r4, [r1, #0]
 8006f24:	2c70      	cmp	r4, #112	@ 0x70
 8006f26:	f000 8091 	beq.w	800704c <HAL_TIM_ConfigClockSource+0x14c>
 8006f2a:	d827      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x7c>
 8006f2c:	2c50      	cmp	r4, #80	@ 0x50
 8006f2e:	d063      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0xf8>
 8006f30:	d82d      	bhi.n	8006f8e <HAL_TIM_ConfigClockSource+0x8e>
 8006f32:	2c40      	cmp	r4, #64	@ 0x40
 8006f34:	f040 809a 	bne.w	800706c <HAL_TIM_ConfigClockSource+0x16c>
                               sClockSourceConfig->ClockPolarity,
 8006f38:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006f3a:	68cc      	ldr	r4, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f3c:	6a11      	ldr	r1, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f3e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006f42:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f44:	6a11      	ldr	r1, [r2, #32]
 8006f46:	f021 0101 	bic.w	r1, r1, #1
 8006f4a:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f4c:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f4e:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f52:	ea41 1104 	orr.w	r1, r1, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f56:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006f58:	6210      	str	r0, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f5a:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f5c:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006f60:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f64:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f68:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006f6e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006f78:	bc30      	pop	{r4, r5}
 8006f7a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006f7c:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8006f80:	d054      	beq.n	800702c <HAL_TIM_ConfigClockSource+0x12c>
 8006f82:	d821      	bhi.n	8006fc8 <HAL_TIM_ConfigClockSource+0xc8>
 8006f84:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8006f88:	bf18      	it	ne
 8006f8a:	2001      	movne	r0, #1
 8006f8c:	e7ee      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x6c>
 8006f8e:	2c60      	cmp	r4, #96	@ 0x60
 8006f90:	d1ec      	bne.n	8006f6c <HAL_TIM_ConfigClockSource+0x6c>
                               sClockSourceConfig->ClockPolarity,
 8006f92:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006f94:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8006f96:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f98:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f9c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fa0:	6a10      	ldr	r0, [r2, #32]
 8006fa2:	f020 0010 	bic.w	r0, r0, #16
 8006fa6:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa8:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006faa:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fae:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006fb2:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006fb4:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006fb6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fb8:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006fbc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fc0:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006fc4:	6091      	str	r1, [r2, #8]
}
 8006fc6:	e7d0      	b.n	8006f6a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8006fc8:	4934      	ldr	r1, [pc, #208]	@ (800709c <HAL_TIM_ConfigClockSource+0x19c>)
 8006fca:	428c      	cmp	r4, r1
 8006fcc:	d008      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0xe0>
 8006fce:	d857      	bhi.n	8007080 <HAL_TIM_ConfigClockSource+0x180>
 8006fd0:	f024 0110 	bic.w	r1, r4, #16
 8006fd4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006fd8:	d002      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0xe0>
 8006fda:	4931      	ldr	r1, [pc, #196]	@ (80070a0 <HAL_TIM_ConfigClockSource+0x1a0>)
 8006fdc:	428c      	cmp	r4, r1
 8006fde:	d1c5      	bne.n	8006f6c <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 8006fe0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fe2:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006fe6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fea:	4321      	orrs	r1, r4
 8006fec:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8006ff0:	6091      	str	r1, [r2, #8]
}
 8006ff2:	e7ba      	b.n	8006f6a <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 8006ff4:	2002      	movs	r0, #2
}
 8006ff6:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8006ff8:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006ffa:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8006ffc:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ffe:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8007002:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007004:	6a11      	ldr	r1, [r2, #32]
 8007006:	f021 0101 	bic.w	r1, r1, #1
 800700a:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700c:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800700e:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007012:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007016:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8007018:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800701a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800701c:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8007020:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007024:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8007028:	6091      	str	r1, [r2, #8]
}
 800702a:	e79e      	b.n	8006f6a <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800702c:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007030:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007032:	4328      	orrs	r0, r5
 8007034:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007036:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800703a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800703e:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007040:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007042:	6891      	ldr	r1, [r2, #8]
 8007044:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8007048:	6091      	str	r1, [r2, #8]
      break;
 800704a:	e78e      	b.n	8006f6a <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800704c:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007050:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007052:	4328      	orrs	r0, r5
 8007054:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007056:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800705a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800705e:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8007060:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007062:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007064:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007068:	6091      	str	r1, [r2, #8]
      break;
 800706a:	e77e      	b.n	8006f6a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800706c:	f63f af7e 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x6c>
 8007070:	2c20      	cmp	r4, #32
 8007072:	d0b5      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0xe0>
 8007074:	d80c      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x190>
 8007076:	f034 0110 	bics.w	r1, r4, #16
 800707a:	f47f af77 	bne.w	8006f6c <HAL_TIM_ConfigClockSource+0x6c>
 800707e:	e7af      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0xe0>
 8007080:	4908      	ldr	r1, [pc, #32]	@ (80070a4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007082:	428c      	cmp	r4, r1
 8007084:	d0ac      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0xe0>
 8007086:	3130      	adds	r1, #48	@ 0x30
 8007088:	428c      	cmp	r4, r1
 800708a:	f47f af6f 	bne.w	8006f6c <HAL_TIM_ConfigClockSource+0x6c>
 800708e:	e7a7      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0xe0>
 8007090:	2c30      	cmp	r4, #48	@ 0x30
 8007092:	d0a5      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0xe0>
      status = HAL_ERROR;
 8007094:	2001      	movs	r0, #1
 8007096:	e769      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x6c>
 8007098:	ffce0088 	.word	0xffce0088
 800709c:	00100030 	.word	0x00100030
 80070a0:	00100020 	.word	0x00100020
 80070a4:	00100040 	.word	0x00100040

080070a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070a8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d062      	beq.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xce>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	2302      	movs	r3, #2
{
 80070b2:	b430      	push	{r4, r5}

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b4:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070b6:	4d31      	ldr	r5, [pc, #196]	@ (800717c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80070b8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070bc:	42aa      	cmp	r2, r5
 80070be:	4684      	mov	ip, r0
  tmpcr2 = htim->Instance->CR2;
 80070c0:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c2:	680c      	ldr	r4, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80070c4:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070c6:	d040      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c8:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80070cc:	42aa      	cmp	r2, r5
 80070ce:	d047      	beq.n	8007160 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80070d0:	4d2b      	ldr	r5, [pc, #172]	@ (8007180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070d2:	42aa      	cmp	r2, r5
 80070d4:	d039      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d6:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 80070da:	42aa      	cmp	r2, r5
 80070dc:	d035      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
  tmpcr2 &= ~TIM_CR2_MMS;
 80070de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070e6:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80070ec:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ee:	d01e      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80070f0:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80070f4:	d01b      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80070f6:	4b23      	ldr	r3, [pc, #140]	@ (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d018      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80070fc:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8007100:	429a      	cmp	r2, r3
 8007102:	d014      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007104:	4b20      	ldr	r3, [pc, #128]	@ (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007106:	429a      	cmp	r2, r3
 8007108:	d011      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800710a:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800710e:	429a      	cmp	r2, r3
 8007110:	d00d      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007112:	4b1e      	ldr	r3, [pc, #120]	@ (800718c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007114:	429a      	cmp	r2, r3
 8007116:	d00a      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007118:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800711c:	429a      	cmp	r2, r3
 800711e:	d006      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007120:	4b1b      	ldr	r3, [pc, #108]	@ (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007122:	429a      	cmp	r2, r3
 8007124:	d003      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007126:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 800712a:	429a      	cmp	r2, r3
 800712c:	d104      	bne.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800712e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007130:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007134:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007136:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007138:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800713a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800713c:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8007140:	f88c 203d 	strb.w	r2, [ip, #61]	@ 0x3d

  return HAL_OK;
 8007144:	4618      	mov	r0, r3
}
 8007146:	bc30      	pop	{r4, r5}
 8007148:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800714a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800714c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007150:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8007152:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800715a:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800715c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800715e:	e7e6      	b.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007160:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007162:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007166:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8007168:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800716c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007170:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 8007172:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007174:	e7db      	b.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x86>
  __HAL_LOCK(htim);
 8007176:	2002      	movs	r0, #2
}
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40012c00 	.word	0x40012c00
 8007180:	40013400 	.word	0x40013400
 8007184:	40000400 	.word	0x40000400
 8007188:	40000800 	.word	0x40000800
 800718c:	40000c00 	.word	0x40000c00
 8007190:	40014000 	.word	0x40014000

08007194 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007194:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8007196:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007198:	071a      	lsls	r2, r3, #28
 800719a:	d506      	bpl.n	80071aa <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800719c:	6801      	ldr	r1, [r0, #0]
 800719e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80071a0:	684a      	ldr	r2, [r1, #4]
 80071a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071a6:	4322      	orrs	r2, r4
 80071a8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071aa:	07dc      	lsls	r4, r3, #31
 80071ac:	d506      	bpl.n	80071bc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071ae:	6801      	ldr	r1, [r0, #0]
 80071b0:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80071b2:	684a      	ldr	r2, [r1, #4]
 80071b4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80071b8:	4322      	orrs	r2, r4
 80071ba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071bc:	0799      	lsls	r1, r3, #30
 80071be:	d506      	bpl.n	80071ce <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071c0:	6801      	ldr	r1, [r0, #0]
 80071c2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80071c4:	684a      	ldr	r2, [r1, #4]
 80071c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80071ca:	4322      	orrs	r2, r4
 80071cc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071ce:	075a      	lsls	r2, r3, #29
 80071d0:	d506      	bpl.n	80071e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071d2:	6801      	ldr	r1, [r0, #0]
 80071d4:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80071d6:	684a      	ldr	r2, [r1, #4]
 80071d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80071dc:	4322      	orrs	r2, r4
 80071de:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071e0:	06dc      	lsls	r4, r3, #27
 80071e2:	d506      	bpl.n	80071f2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071e4:	6801      	ldr	r1, [r0, #0]
 80071e6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80071e8:	688a      	ldr	r2, [r1, #8]
 80071ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80071ee:	4322      	orrs	r2, r4
 80071f0:	608a      	str	r2, [r1, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071f2:	0699      	lsls	r1, r3, #26
 80071f4:	d506      	bpl.n	8007204 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071f6:	6801      	ldr	r1, [r0, #0]
 80071f8:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80071fa:	688a      	ldr	r2, [r1, #8]
 80071fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007200:	4322      	orrs	r2, r4
 8007202:	608a      	str	r2, [r1, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007204:	065a      	lsls	r2, r3, #25
 8007206:	d50a      	bpl.n	800721e <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007208:	6801      	ldr	r1, [r0, #0]
 800720a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800720c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800720e:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007212:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007216:	ea42 0204 	orr.w	r2, r2, r4
 800721a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800721c:	d00b      	beq.n	8007236 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800721e:	061b      	lsls	r3, r3, #24
 8007220:	d506      	bpl.n	8007230 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007222:	6802      	ldr	r2, [r0, #0]
 8007224:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007226:	6853      	ldr	r3, [r2, #4]
 8007228:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800722c:	430b      	orrs	r3, r1
 800722e:	6053      	str	r3, [r2, #4]
  }
}
 8007230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007234:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007236:	684a      	ldr	r2, [r1, #4]
 8007238:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800723a:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800723e:	4322      	orrs	r2, r4
 8007240:	604a      	str	r2, [r1, #4]
 8007242:	e7ec      	b.n	800721e <UART_AdvFeatureConfig+0x8a>

08007244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007244:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007246:	2300      	movs	r3, #0
{
 8007248:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800724e:	f7fb fa33 	bl	80026b8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007252:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8007254:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007256:	6813      	ldr	r3, [r2, #0]
 8007258:	071b      	lsls	r3, r3, #28
 800725a:	d40f      	bmi.n	800727c <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800725c:	6813      	ldr	r3, [r2, #0]
 800725e:	0759      	lsls	r1, r3, #29
 8007260:	d431      	bmi.n	80072c6 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007264:	2220      	movs	r2, #32
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8007266:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8007268:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800726c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007270:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007272:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8007274:	2300      	movs	r3, #0
 8007276:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800727a:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800727c:	69d3      	ldr	r3, [r2, #28]
 800727e:	0298      	lsls	r0, r3, #10
 8007280:	d4ec      	bmi.n	800725c <UART_CheckIdleState+0x18>
 8007282:	e00c      	b.n	800729e <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007284:	6819      	ldr	r1, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	0749      	lsls	r1, r1, #29
 800728a:	d505      	bpl.n	8007298 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800728c:	69d9      	ldr	r1, [r3, #28]
 800728e:	0708      	lsls	r0, r1, #28
 8007290:	d44a      	bmi.n	8007328 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007292:	69d9      	ldr	r1, [r3, #28]
 8007294:	0509      	lsls	r1, r1, #20
 8007296:	d475      	bmi.n	8007384 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	0298      	lsls	r0, r3, #10
 800729c:	d4de      	bmi.n	800725c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729e:	f7fb fa0b 	bl	80026b8 <HAL_GetTick>
 80072a2:	1b43      	subs	r3, r0, r5
 80072a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072a8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072aa:	d3eb      	bcc.n	8007284 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	e843 2100 	strex	r1, r2, [r3]
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d1f7      	bne.n	80072ac <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 80072bc:	2320      	movs	r3, #32
 80072be:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80072c2:	2003      	movs	r0, #3
 80072c4:	e7d6      	b.n	8007274 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c6:	69d3      	ldr	r3, [r2, #28]
 80072c8:	025b      	lsls	r3, r3, #9
 80072ca:	d4ca      	bmi.n	8007262 <UART_CheckIdleState+0x1e>
 80072cc:	e00d      	b.n	80072ea <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	0750      	lsls	r0, r2, #29
 80072d2:	d507      	bpl.n	80072e4 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	0711      	lsls	r1, r2, #28
 80072d8:	f100 8082 	bmi.w	80073e0 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072dc:	69da      	ldr	r2, [r3, #28]
 80072de:	0512      	lsls	r2, r2, #20
 80072e0:	f100 80ac 	bmi.w	800743c <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	025b      	lsls	r3, r3, #9
 80072e8:	d4bb      	bmi.n	8007262 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ea:	f7fb f9e5 	bl	80026b8 <HAL_GetTick>
 80072ee:	1b43      	subs	r3, r0, r5
 80072f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	d3ea      	bcc.n	80072ce <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072fc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	e843 2100 	strex	r1, r2, [r3]
 8007304:	2900      	cmp	r1, #0
 8007306:	d1f7      	bne.n	80072f8 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	f103 0208 	add.w	r2, r3, #8
 800730c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007310:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	f103 0008 	add.w	r0, r3, #8
 8007318:	e840 2100 	strex	r1, r2, [r0]
 800731c:	2900      	cmp	r1, #0
 800731e:	d1f3      	bne.n	8007308 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8007320:	2320      	movs	r3, #32
 8007322:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8007326:	e7cc      	b.n	80072c2 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007328:	2208      	movs	r2, #8
 800732a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007330:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	e843 2100 	strex	r1, r2, [r3]
 8007338:	2900      	cmp	r1, #0
 800733a:	d1f7      	bne.n	800732c <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800733c:	4856      	ldr	r0, [pc, #344]	@ (8007498 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	f103 0208 	add.w	r2, r3, #8
 8007342:	e852 2f00 	ldrex	r2, [r2]
 8007346:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	f103 0508 	add.w	r5, r3, #8
 800734c:	e845 2100 	strex	r1, r2, [r5]
 8007350:	2900      	cmp	r1, #0
 8007352:	d1f4      	bne.n	800733e <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007354:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007356:	2a01      	cmp	r2, #1
 8007358:	d00b      	beq.n	8007372 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800735c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800735e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007360:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007364:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007366:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007368:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800736c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8007370:	e79c      	b.n	80072ac <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007376:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	e843 2100 	strex	r1, r2, [r3]
 800737e:	2900      	cmp	r1, #0
 8007380:	d1f7      	bne.n	8007372 <UART_CheckIdleState+0x12e>
 8007382:	e7ea      	b.n	800735a <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007384:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007388:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800738e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	e843 2100 	strex	r1, r2, [r3]
 8007396:	2900      	cmp	r1, #0
 8007398:	d1f7      	bne.n	800738a <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800739a:	483f      	ldr	r0, [pc, #252]	@ (8007498 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	f103 0208 	add.w	r2, r3, #8
 80073a0:	e852 2f00 	ldrex	r2, [r2]
 80073a4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	f103 0508 	add.w	r5, r3, #8
 80073aa:	e845 2100 	strex	r1, r2, [r5]
 80073ae:	2900      	cmp	r1, #0
 80073b0:	d1f4      	bne.n	800739c <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80073b4:	2a01      	cmp	r2, #1
 80073b6:	d00a      	beq.n	80073ce <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80073ba:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 80073bc:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073be:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 80073c2:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073c8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80073cc:	e76e      	b.n	80072ac <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	e843 2100 	strex	r1, r2, [r3]
 80073da:	2900      	cmp	r1, #0
 80073dc:	d1f7      	bne.n	80073ce <UART_CheckIdleState+0x18a>
 80073de:	e7eb      	b.n	80073b8 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073e0:	2208      	movs	r2, #8
 80073e2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073e8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	e843 2100 	strex	r1, r2, [r3]
 80073f0:	2900      	cmp	r1, #0
 80073f2:	d1f7      	bne.n	80073e4 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073f4:	4828      	ldr	r0, [pc, #160]	@ (8007498 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	f103 0208 	add.w	r2, r3, #8
 80073fa:	e852 2f00 	ldrex	r2, [r2]
 80073fe:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	f103 0508 	add.w	r5, r3, #8
 8007404:	e845 2100 	strex	r1, r2, [r5]
 8007408:	2900      	cmp	r1, #0
 800740a:	d1f4      	bne.n	80073f6 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800740c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800740e:	2a01      	cmp	r2, #1
 8007410:	d00b      	beq.n	800742a <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007412:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007414:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007416:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007418:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800741c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007420:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007424:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8007428:	e766      	b.n	80072f8 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	e843 2100 	strex	r1, r2, [r3]
 8007436:	2900      	cmp	r1, #0
 8007438:	d1f7      	bne.n	800742a <UART_CheckIdleState+0x1e6>
 800743a:	e7ea      	b.n	8007412 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800743c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007440:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007446:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	e843 2100 	strex	r1, r2, [r3]
 800744e:	2900      	cmp	r1, #0
 8007450:	d1f7      	bne.n	8007442 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007452:	4811      	ldr	r0, [pc, #68]	@ (8007498 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	f103 0208 	add.w	r2, r3, #8
 8007458:	e852 2f00 	ldrex	r2, [r2]
 800745c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	f103 0508 	add.w	r5, r3, #8
 8007462:	e845 2100 	strex	r1, r2, [r5]
 8007466:	2900      	cmp	r1, #0
 8007468:	d1f4      	bne.n	8007454 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800746c:	2a01      	cmp	r2, #1
 800746e:	d00a      	beq.n	8007486 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007470:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007472:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8007474:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007476:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800747a:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007480:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8007484:	e738      	b.n	80072f8 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	e843 2100 	strex	r1, r2, [r3]
 8007492:	2900      	cmp	r1, #0
 8007494:	d1f7      	bne.n	8007486 <UART_CheckIdleState+0x242>
 8007496:	e7eb      	b.n	8007470 <UART_CheckIdleState+0x22c>
 8007498:	effffffe 	.word	0xeffffffe

0800749c <HAL_UART_Init>:
  if (huart == NULL)
 800749c:	2800      	cmp	r0, #0
 800749e:	f000 8113 	beq.w	80076c8 <HAL_UART_Init+0x22c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80074a2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 80074a6:	b570      	push	{r4, r5, r6, lr}
 80074a8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 8088 	beq.w	80075c0 <HAL_UART_Init+0x124>
  huart->gState = HAL_UART_STATE_BUSY;
 80074b0:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80074b2:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80074b4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80074b8:	682b      	ldr	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074ba:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  __HAL_UART_DISABLE(huart);
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d178      	bne.n	80075b8 <HAL_UART_Init+0x11c>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074c6:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80074ca:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074cc:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074ce:	4313      	orrs	r3, r2
 80074d0:	430b      	orrs	r3, r1
 80074d2:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074d4:	4989      	ldr	r1, [pc, #548]	@ (80076fc <HAL_UART_Init+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074d6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074d8:	4001      	ands	r1, r0
 80074da:	430b      	orrs	r3, r1
 80074dc:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074de:	686b      	ldr	r3, [r5, #4]
 80074e0:	68e1      	ldr	r1, [r4, #12]
 80074e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80074e6:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074e8:	4985      	ldr	r1, [pc, #532]	@ (8007700 <HAL_UART_Init+0x264>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ea:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074ec:	428d      	cmp	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074ee:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074f0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074f2:	f000 80f3 	beq.w	80076dc <HAL_UART_Init+0x240>
 80074f6:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80074fa:	428d      	cmp	r5, r1
 80074fc:	d065      	beq.n	80075ca <HAL_UART_Init+0x12e>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074fe:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8007500:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007502:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8007506:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800750a:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800750c:	430b      	orrs	r3, r1
 800750e:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007510:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007512:	497c      	ldr	r1, [pc, #496]	@ (8007704 <HAL_UART_Init+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007514:	f023 030f 	bic.w	r3, r3, #15
 8007518:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800751a:	428d      	cmp	r5, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800751c:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800751e:	d010      	beq.n	8007542 <HAL_UART_Init+0xa6>
 8007520:	4b79      	ldr	r3, [pc, #484]	@ (8007708 <HAL_UART_Init+0x26c>)
 8007522:	429d      	cmp	r5, r3
 8007524:	f000 80cd 	beq.w	80076c2 <HAL_UART_Init+0x226>
 8007528:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800752c:	429d      	cmp	r5, r3
 800752e:	f000 808c 	beq.w	800764a <HAL_UART_Init+0x1ae>
 8007532:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007536:	429d      	cmp	r5, r3
 8007538:	f040 80c8 	bne.w	80076cc <HAL_UART_Init+0x230>
 800753c:	2008      	movs	r0, #8
 800753e:	2100      	movs	r1, #0
 8007540:	e001      	b.n	8007546 <HAL_UART_Init+0xaa>
 8007542:	2001      	movs	r0, #1
 8007544:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007546:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800754a:	f000 8086 	beq.w	800765a <HAL_UART_Init+0x1be>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800754e:	f7fe fd47 	bl	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8007552:	b1d0      	cbz	r0, 800758a <HAL_UART_Init+0xee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007554:	4a6d      	ldr	r2, [pc, #436]	@ (800770c <HAL_UART_Init+0x270>)
 8007556:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007558:	6863      	ldr	r3, [r4, #4]
 800755a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800755e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007562:	fbb0 f0f1 	udiv	r0, r0, r1
 8007566:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800756a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800756e:	f1a0 0310 	sub.w	r3, r0, #16
 8007572:	4293      	cmp	r3, r2
 8007574:	f200 8096 	bhi.w	80076a4 <HAL_UART_Init+0x208>
  huart->RxISR = NULL;
 8007578:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800757a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
        huart->Instance->BRR = (uint16_t)usartdiv;
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8007582:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007584:	66a1      	str	r1, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8007586:	67a3      	str	r3, [r4, #120]	@ 0x78
  return ret;
 8007588:	e005      	b.n	8007596 <HAL_UART_Init+0xfa>
  huart->NbRxDataToProcess = 1;
 800758a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  huart->TxISR = NULL;
 800758e:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
        huart->Instance->BRR = brrtemp;
 8007592:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8007594:	66a3      	str	r3, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007596:	6853      	ldr	r3, [r2, #4]
  return (UART_CheckIdleState(huart));
 8007598:	4620      	mov	r0, r4
}
 800759a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800759e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80075a2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a4:	6893      	ldr	r3, [r2, #8]
 80075a6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80075aa:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80075ac:	6813      	ldr	r3, [r2, #0]
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80075b4:	f7ff be46 	b.w	8007244 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7ff fdeb 	bl	8007194 <UART_AdvFeatureConfig>
 80075be:	e782      	b.n	80074c6 <HAL_UART_Init+0x2a>
    huart->Lock = HAL_UNLOCKED;
 80075c0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80075c4:	f7fa fe68 	bl	8002298 <HAL_UART_MspInit>
 80075c8:	e772      	b.n	80074b0 <HAL_UART_Init+0x14>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075ca:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075cc:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075ce:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 80075d2:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 80075d6:	431a      	orrs	r2, r3
 80075d8:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075da:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80075dc:	f023 030f 	bic.w	r3, r3, #15
 80075e0:	4303      	orrs	r3, r0
 80075e2:	2000      	movs	r0, #0
 80075e4:	62eb      	str	r3, [r5, #44]	@ 0x2c
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80075e6:	f7fe fcfb 	bl	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d062      	beq.n	80076b4 <HAL_UART_Init+0x218>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80075f0:	4a46      	ldr	r2, [pc, #280]	@ (800770c <HAL_UART_Init+0x270>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075f2:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075f4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075f8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075fc:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007600:	428b      	cmp	r3, r1
 8007602:	d34f      	bcc.n	80076a4 <HAL_UART_Init+0x208>
 8007604:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007608:	d84c      	bhi.n	80076a4 <HAL_UART_Init+0x208>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800760a:	2600      	movs	r6, #0
 800760c:	4633      	mov	r3, r6
 800760e:	4631      	mov	r1, r6
 8007610:	f7fa fa4c 	bl	8001aac <__aeabi_uldivmod>
 8007614:	0209      	lsls	r1, r1, #8
 8007616:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800761a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800761e:	0200      	lsls	r0, r0, #8
 8007620:	eb10 000c 	adds.w	r0, r0, ip
 8007624:	462a      	mov	r2, r5
 8007626:	4633      	mov	r3, r6
 8007628:	f141 0100 	adc.w	r1, r1, #0
 800762c:	f7fa fa3e 	bl	8001aac <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007630:	4b37      	ldr	r3, [pc, #220]	@ (8007710 <HAL_UART_Init+0x274>)
 8007632:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007636:	429a      	cmp	r2, r3
 8007638:	d834      	bhi.n	80076a4 <HAL_UART_Init+0x208>
  huart->NbRxDataToProcess = 1;
 800763a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
          huart->Instance->BRR = usartdiv;
 800763e:	6822      	ldr	r2, [r4, #0]
 8007640:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8007642:	e9c4 661d 	strd	r6, r6, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8007646:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 8007648:	e7a5      	b.n	8007596 <HAL_UART_Init+0xfa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800764a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800764e:	f04f 0004 	mov.w	r0, #4
 8007652:	f04f 0100 	mov.w	r1, #0
 8007656:	f47f af7a 	bne.w	800754e <HAL_UART_Init+0xb2>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800765a:	f7fe fcc1 	bl	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800765e:	2800      	cmp	r0, #0
 8007660:	d093      	beq.n	800758a <HAL_UART_Init+0xee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007662:	4b2a      	ldr	r3, [pc, #168]	@ (800770c <HAL_UART_Init+0x270>)
 8007664:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007666:	6862      	ldr	r2, [r4, #4]
 8007668:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800766c:	0853      	lsrs	r3, r2, #1
 800766e:	fbb0 f0f1 	udiv	r0, r0, r1
 8007672:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007676:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800767a:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 800767e:	f1a3 0210 	sub.w	r2, r3, #16
 8007682:	428a      	cmp	r2, r1
 8007684:	d80e      	bhi.n	80076a4 <HAL_UART_Init+0x208>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007686:	f023 010f 	bic.w	r1, r3, #15
 800768a:	b289      	uxth	r1, r1
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800768c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007690:	430b      	orrs	r3, r1
  huart->NbRxDataToProcess = 1;
 8007692:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
  huart->RxISR = NULL;
 8007696:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8007698:	6822      	ldr	r2, [r4, #0]
 800769a:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800769c:	6761      	str	r1, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800769e:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80076a0:	67a1      	str	r1, [r4, #120]	@ 0x78
  return ret;
 80076a2:	e778      	b.n	8007596 <HAL_UART_Init+0xfa>
  huart->RxISR = NULL;
 80076a4:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80076a6:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
}
 80076aa:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80076ac:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80076ae:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80076b0:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
  huart->NbRxDataToProcess = 1;
 80076b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  huart->TxISR = NULL;
 80076b8:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
          huart->Instance->BRR = usartdiv;
 80076bc:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80076be:	66a1      	str	r1, [r4, #104]	@ 0x68
  return ret;
 80076c0:	e769      	b.n	8007596 <HAL_UART_Init+0xfa>
 80076c2:	2002      	movs	r0, #2
 80076c4:	2100      	movs	r1, #0
 80076c6:	e73e      	b.n	8007546 <HAL_UART_Init+0xaa>
}
 80076c8:	2001      	movs	r0, #1
 80076ca:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076cc:	4811      	ldr	r0, [pc, #68]	@ (8007714 <HAL_UART_Init+0x278>)
 80076ce:	2100      	movs	r1, #0
 80076d0:	1a28      	subs	r0, r5, r0
 80076d2:	fab0 f080 	clz	r0, r0
 80076d6:	0940      	lsrs	r0, r0, #5
 80076d8:	0100      	lsls	r0, r0, #4
 80076da:	e734      	b.n	8007546 <HAL_UART_Init+0xaa>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076dc:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076de:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076e0:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 80076e4:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 80076e8:	431a      	orrs	r2, r3
 80076ea:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076ec:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80076ee:	f023 030f 	bic.w	r3, r3, #15
 80076f2:	4303      	orrs	r3, r0
 80076f4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80076f6:	2020      	movs	r0, #32
 80076f8:	e775      	b.n	80075e6 <HAL_UART_Init+0x14a>
 80076fa:	bf00      	nop
 80076fc:	cfff69f3 	.word	0xcfff69f3
 8007700:	46002400 	.word	0x46002400
 8007704:	40013800 	.word	0x40013800
 8007708:	40004400 	.word	0x40004400
 800770c:	08008174 	.word	0x08008174
 8007710:	000ffcff 	.word	0x000ffcff
 8007714:	40005000 	.word	0x40005000

08007718 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007718:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800771c:	2a01      	cmp	r2, #1
 800771e:	d017      	beq.n	8007750 <HAL_UARTEx_DisableFifoMode+0x38>
 8007720:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8007722:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007724:	2100      	movs	r1, #0
{
 8007726:	b430      	push	{r4, r5}

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8007728:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800772a:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800772c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007730:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007732:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007734:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8007738:	f024 0401 	bic.w	r4, r4, #1
 800773c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800773e:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007740:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007742:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84

  return HAL_OK;
 8007746:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007748:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800774c:	bc30      	pop	{r4, r5}
 800774e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007750:	2002      	movs	r0, #2
}
 8007752:	4770      	bx	lr

08007754 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007754:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007758:	2a01      	cmp	r2, #1
 800775a:	d037      	beq.n	80077cc <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800775c:	4603      	mov	r3, r0
 800775e:	2024      	movs	r0, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007760:	681a      	ldr	r2, [r3, #0]
{
 8007762:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007764:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007768:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800776a:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800776c:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 800776e:	f020 0001 	bic.w	r0, r0, #1
 8007772:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007774:	6890      	ldr	r0, [r2, #8]
 8007776:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800777a:	4301      	orrs	r1, r0
 800777c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800777e:	b315      	cbz	r5, 80077c6 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007780:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007782:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007784:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007788:	4911      	ldr	r1, [pc, #68]	@ (80077d0 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800778a:	4d12      	ldr	r5, [pc, #72]	@ (80077d4 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800778c:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007790:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007794:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007798:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800779c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077a0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077a4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a8:	fbb1 f1f5 	udiv	r1, r1, r5
 80077ac:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80077b0:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80077b2:	2520      	movs	r5, #32
 80077b4:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80077ba:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80077be:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80077c0:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80077c4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80077c6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80077c8:	4608      	mov	r0, r1
 80077ca:	e7ef      	b.n	80077ac <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80077cc:	2002      	movs	r0, #2
}
 80077ce:	4770      	bx	lr
 80077d0:	08008194 	.word	0x08008194
 80077d4:	0800818c 	.word	0x0800818c

080077d8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80077d8:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80077dc:	2a01      	cmp	r2, #1
 80077de:	d037      	beq.n	8007850 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80077e0:	4603      	mov	r3, r0
 80077e2:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e4:	681a      	ldr	r2, [r3, #0]
{
 80077e6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80077e8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ec:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80077ee:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077f0:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 80077f2:	f020 0001 	bic.w	r0, r0, #1
 80077f6:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077f8:	6890      	ldr	r0, [r2, #8]
 80077fa:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 80077fe:	4301      	orrs	r1, r0
 8007800:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007802:	b315      	cbz	r5, 800784a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007804:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007806:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007808:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800780c:	4911      	ldr	r1, [pc, #68]	@ (8007854 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800780e:	4d12      	ldr	r5, [pc, #72]	@ (8007858 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007810:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007814:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007818:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800781c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007820:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007824:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007826:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007828:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800782c:	fbb1 f1f5 	udiv	r1, r1, r5
 8007830:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007834:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8007836:	2520      	movs	r5, #32
 8007838:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800783c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800783e:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8007842:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007844:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007848:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800784a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800784c:	4608      	mov	r0, r1
 800784e:	e7ef      	b.n	8007830 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007850:	2002      	movs	r0, #2
}
 8007852:	4770      	bx	lr
 8007854:	08008194 	.word	0x08008194
 8007858:	0800818c 	.word	0x0800818c

0800785c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007860:	680d      	ldr	r5, [r1, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007862:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8007866:	2a00      	cmp	r2, #0
 8007868:	f000 808b 	beq.w	8007982 <LL_GPIO_Init+0x126>
  return __builtin_clz(value);
 800786c:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007870:	fa35 f302 	lsrs.w	r3, r5, r2
 8007874:	f000 8085 	beq.w	8007982 <LL_GPIO_Init+0x126>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007878:	f04f 0c01 	mov.w	ip, #1
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800787c:	f04f 0e03 	mov.w	lr, #3
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007880:	43ee      	mvns	r6, r5
 8007882:	e037      	b.n	80078f4 <LL_GPIO_Init+0x98>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007884:	f8d1 8010 	ldr.w	r8, [r1, #16]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8007888:	f8d0 900c 	ldr.w	r9, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788c:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8007890:	b137      	cbz	r7, 80078a0 <LL_GPIO_Init+0x44>
  return __builtin_clz(value);
 8007892:	fab7 f787 	clz	r7, r7
 8007896:	007f      	lsls	r7, r7, #1
 8007898:	fa0e f707 	lsl.w	r7, lr, r7
 800789c:	ea29 0907 	bic.w	r9, r9, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a0:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 80078a4:	2f00      	cmp	r7, #0
 80078a6:	d06f      	beq.n	8007988 <LL_GPIO_Init+0x12c>
  return __builtin_clz(value);
 80078a8:	fab7 f787 	clz	r7, r7
 80078ac:	007f      	lsls	r7, r7, #1
 80078ae:	fa08 f807 	lsl.w	r8, r8, r7
 80078b2:	ea48 0709 	orr.w	r7, r8, r9

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80078b6:	2c02      	cmp	r4, #2
 80078b8:	60c7      	str	r7, [r0, #12]
 80078ba:	d046      	beq.n	800794a <LL_GPIO_Init+0xee>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078bc:	fa93 f8a3 	rbit	r8, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 80078c0:	6807      	ldr	r7, [r0, #0]
  if (value == 0U)
 80078c2:	f1b8 0f00 	cmp.w	r8, #0
 80078c6:	d007      	beq.n	80078d8 <LL_GPIO_Init+0x7c>
  return __builtin_clz(value);
 80078c8:	fab8 f888 	clz	r8, r8
 80078cc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80078d0:	fa0e f808 	lsl.w	r8, lr, r8
 80078d4:	ea27 0708 	bic.w	r7, r7, r8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d8:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d055      	beq.n	800798c <LL_GPIO_Init+0x130>
  return __builtin_clz(value);
 80078e0:	fab3 f383 	clz	r3, r3
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	409c      	lsls	r4, r3
 80078e8:	433c      	orrs	r4, r7
 80078ea:	6004      	str	r4, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 80078ec:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80078ee:	fa35 f302 	lsrs.w	r3, r5, r2
 80078f2:	d046      	beq.n	8007982 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80078f4:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0U)
 80078f8:	402b      	ands	r3, r5
 80078fa:	d0f7      	beq.n	80078ec <LL_GPIO_Init+0x90>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80078fc:	684c      	ldr	r4, [r1, #4]
 80078fe:	1e67      	subs	r7, r4, #1
 8007900:	2f01      	cmp	r7, #1
 8007902:	d8bf      	bhi.n	8007884 <LL_GPIO_Init+0x28>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007904:	fa93 f7a3 	rbit	r7, r3
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007908:	f8d1 8008 	ldr.w	r8, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800790c:	f8d0 9008 	ldr.w	r9, [r0, #8]
  if (value == 0U)
 8007910:	b137      	cbz	r7, 8007920 <LL_GPIO_Init+0xc4>
  return __builtin_clz(value);
 8007912:	fab7 f787 	clz	r7, r7
 8007916:	007f      	lsls	r7, r7, #1
 8007918:	fa0e f707 	lsl.w	r7, lr, r7
 800791c:	ea29 0907 	bic.w	r9, r9, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007920:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8007924:	2f00      	cmp	r7, #0
 8007926:	d051      	beq.n	80079cc <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 8007928:	fab7 f787 	clz	r7, r7
 800792c:	007f      	lsls	r7, r7, #1
 800792e:	fa08 f807 	lsl.w	r8, r8, r7
 8007932:	ea48 0709 	orr.w	r7, r8, r9
 8007936:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007938:	68cf      	ldr	r7, [r1, #12]
 800793a:	fb07 f805 	mul.w	r8, r7, r5
 800793e:	6847      	ldr	r7, [r0, #4]
 8007940:	4037      	ands	r7, r6
 8007942:	ea47 0708 	orr.w	r7, r7, r8
 8007946:	6047      	str	r7, [r0, #4]
}
 8007948:	e79c      	b.n	8007884 <LL_GPIO_Init+0x28>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800794a:	f8d1 8014 	ldr.w	r8, [r1, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794e:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8007952:	b1ef      	cbz	r7, 8007990 <LL_GPIO_Init+0x134>
  return __builtin_clz(value);
 8007954:	fab7 f987 	clz	r9, r7
        if (POSITION_VAL(currentpin) < 8U)
 8007958:	f1b9 0f07 	cmp.w	r9, #7
 800795c:	dc18      	bgt.n	8007990 <LL_GPIO_Init+0x134>
 800795e:	464f      	mov	r7, r9
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 8007960:	f04f 0a0f 	mov.w	sl, #15
 8007964:	00bf      	lsls	r7, r7, #2
 8007966:	fa08 f707 	lsl.w	r7, r8, r7
 800796a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800796e:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8007972:	fa0a f909 	lsl.w	r9, sl, r9
 8007976:	ea28 0809 	bic.w	r8, r8, r9
 800797a:	ea47 0708 	orr.w	r7, r7, r8
 800797e:	6207      	str	r7, [r0, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8007980:	e79c      	b.n	80078bc <LL_GPIO_Init+0x60>
  }
  return (SUCCESS);
}
 8007982:	2000      	movs	r0, #0
 8007984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007988:	2740      	movs	r7, #64	@ 0x40
 800798a:	e790      	b.n	80078ae <LL_GPIO_Init+0x52>
 800798c:	2340      	movs	r3, #64	@ 0x40
 800798e:	e7aa      	b.n	80078e6 <LL_GPIO_Init+0x8a>
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8007990:	0a1f      	lsrs	r7, r3, #8
 8007992:	f8d0 9024 	ldr.w	r9, [r0, #36]	@ 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007996:	fa97 faa7 	rbit	sl, r7
  if (value == 0U)
 800799a:	f1ba 0f00 	cmp.w	sl, #0
 800799e:	d009      	beq.n	80079b4 <LL_GPIO_Init+0x158>
  return __builtin_clz(value);
 80079a0:	faba fa8a 	clz	sl, sl
 80079a4:	f04f 0b0f 	mov.w	fp, #15
 80079a8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80079ac:	fa0b fb0a 	lsl.w	fp, fp, sl
 80079b0:	ea29 090b 	bic.w	r9, r9, fp
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b4:	fa97 f7a7 	rbit	r7, r7
  if (value == 0U)
 80079b8:	b157      	cbz	r7, 80079d0 <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 80079ba:	fab7 f787 	clz	r7, r7
 80079be:	00bf      	lsls	r7, r7, #2
 80079c0:	fa08 f807 	lsl.w	r8, r8, r7
 80079c4:	ea48 0709 	orr.w	r7, r8, r9
 80079c8:	6247      	str	r7, [r0, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 80079ca:	e777      	b.n	80078bc <LL_GPIO_Init+0x60>
 80079cc:	2740      	movs	r7, #64	@ 0x40
 80079ce:	e7ae      	b.n	800792e <LL_GPIO_Init+0xd2>
 80079d0:	2780      	movs	r7, #128	@ 0x80
 80079d2:	e7f5      	b.n	80079c0 <LL_GPIO_Init+0x164>

080079d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079d4:	b084      	sub	sp, #16
 80079d6:	b082      	sub	sp, #8
 80079d8:	f10d 0c0c 	add.w	ip, sp, #12
 80079dc:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 80079e0:	2100      	movs	r1, #0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079e2:	68c3      	ldr	r3, [r0, #12]
{
 80079e4:	4602      	mov	r2, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ea:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 80079ec:	9101      	str	r1, [sp, #4]
 80079ee:	e002      	b.n	80079f6 <USB_CoreInit+0x22>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079f0:	6913      	ldr	r3, [r2, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	db18      	blt.n	8007a28 <USB_CoreInit+0x54>
    count++;
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	3301      	adds	r3, #1
 80079fa:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80079fc:	9b01      	ldr	r3, [sp, #4]
 80079fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a02:	d9f5      	bls.n	80079f0 <USB_CoreInit+0x1c>
      return HAL_TIMEOUT;
 8007a04:	2003      	movs	r0, #3
  if (cfg.battery_charging_enable == 0U)
 8007a06:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8007a0a:	b933      	cbnz	r3, 8007a1a <USB_CoreInit+0x46>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a0c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a12:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007a14:	b002      	add	sp, #8
 8007a16:	b004      	add	sp, #16
 8007a18:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a1a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a20:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007a22:	b002      	add	sp, #8
 8007a24:	b004      	add	sp, #16
 8007a26:	4770      	bx	lr

  /* Core Soft Reset */
  count = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a2c:	6913      	ldr	r3, [r2, #16]
 8007a2e:	f043 0301 	orr.w	r3, r3, #1
 8007a32:	6113      	str	r3, [r2, #16]
 8007a34:	e003      	b.n	8007a3e <USB_CoreInit+0x6a>

    if (count > HAL_USB_TIMEOUT)
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a36:	6910      	ldr	r0, [r2, #16]
 8007a38:	f010 0001 	ands.w	r0, r0, #1
 8007a3c:	d0e3      	beq.n	8007a06 <USB_CoreInit+0x32>
    count++;
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	3301      	adds	r3, #1
 8007a42:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007a44:	9b01      	ldr	r3, [sp, #4]
 8007a46:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a4a:	d9f4      	bls.n	8007a36 <USB_CoreInit+0x62>
 8007a4c:	e7da      	b.n	8007a04 <USB_CoreInit+0x30>
 8007a4e:	bf00      	nop

08007a50 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8007a50:	2a02      	cmp	r2, #2
{
 8007a52:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 8007a54:	d00a      	beq.n	8007a6c <USB_SetTurnaroundTime+0x1c>
 8007a56:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a5a:	68da      	ldr	r2, [r3, #12]
}
 8007a5c:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a5e:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 8007a62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	60da      	str	r2, [r3, #12]
}
 8007a6a:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a6c:	4a26      	ldr	r2, [pc, #152]	@ (8007b08 <USB_SetTurnaroundTime+0xb8>)
 8007a6e:	4827      	ldr	r0, [pc, #156]	@ (8007b0c <USB_SetTurnaroundTime+0xbc>)
 8007a70:	440a      	add	r2, r1
 8007a72:	4282      	cmp	r2, r0
 8007a74:	d932      	bls.n	8007adc <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a76:	4a26      	ldr	r2, [pc, #152]	@ (8007b10 <USB_SetTurnaroundTime+0xc0>)
 8007a78:	4826      	ldr	r0, [pc, #152]	@ (8007b14 <USB_SetTurnaroundTime+0xc4>)
 8007a7a:	440a      	add	r2, r1
 8007a7c:	4282      	cmp	r2, r0
 8007a7e:	d930      	bls.n	8007ae2 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a80:	4825      	ldr	r0, [pc, #148]	@ (8007b18 <USB_SetTurnaroundTime+0xc8>)
 8007a82:	f5a1 0274 	sub.w	r2, r1, #15990784	@ 0xf40000
 8007a86:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 8007a8a:	4282      	cmp	r2, r0
 8007a8c:	d92c      	bls.n	8007ae8 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a8e:	4823      	ldr	r0, [pc, #140]	@ (8007b1c <USB_SetTurnaroundTime+0xcc>)
 8007a90:	f1a1 7283 	sub.w	r2, r1, #17170432	@ 0x1060000
 8007a94:	f5a2 42e7 	sub.w	r2, r2, #29568	@ 0x7380
 8007a98:	4282      	cmp	r2, r0
 8007a9a:	d328      	bcc.n	8007aee <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a9c:	4a20      	ldr	r2, [pc, #128]	@ (8007b20 <USB_SetTurnaroundTime+0xd0>)
 8007a9e:	4821      	ldr	r0, [pc, #132]	@ (8007b24 <USB_SetTurnaroundTime+0xd4>)
 8007aa0:	440a      	add	r2, r1
 8007aa2:	4282      	cmp	r2, r0
 8007aa4:	d926      	bls.n	8007af4 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007aa6:	4a20      	ldr	r2, [pc, #128]	@ (8007b28 <USB_SetTurnaroundTime+0xd8>)
 8007aa8:	4820      	ldr	r0, [pc, #128]	@ (8007b2c <USB_SetTurnaroundTime+0xdc>)
 8007aaa:	440a      	add	r2, r1
 8007aac:	4282      	cmp	r2, r0
 8007aae:	d324      	bcc.n	8007afa <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8007b30 <USB_SetTurnaroundTime+0xe0>)
 8007ab2:	4820      	ldr	r0, [pc, #128]	@ (8007b34 <USB_SetTurnaroundTime+0xe4>)
 8007ab4:	440a      	add	r2, r1
 8007ab6:	4282      	cmp	r2, r0
 8007ab8:	d3cd      	bcc.n	8007a56 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007aba:	481f      	ldr	r0, [pc, #124]	@ (8007b38 <USB_SetTurnaroundTime+0xe8>)
 8007abc:	f1a1 72b7 	sub.w	r2, r1, #23986176	@ 0x16e0000
 8007ac0:	f5a2 5258 	sub.w	r2, r2, #13824	@ 0x3600
 8007ac4:	4282      	cmp	r2, r0
 8007ac6:	d31b      	bcc.n	8007b00 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8007b3c <USB_SetTurnaroundTime+0xec>)
 8007aca:	481d      	ldr	r0, [pc, #116]	@ (8007b40 <USB_SetTurnaroundTime+0xf0>)
 8007acc:	440a      	add	r2, r1
 8007ace:	4282      	cmp	r2, r0
 8007ad0:	bf2c      	ite	cs
 8007ad2:	f44f 51c0 	movcs.w	r1, #6144	@ 0x1800
 8007ad6:	f44f 51e0 	movcc.w	r1, #7168	@ 0x1c00
 8007ada:	e7be      	b.n	8007a5a <USB_SetTurnaroundTime+0xa>
 8007adc:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8007ae0:	e7bb      	b.n	8007a5a <USB_SetTurnaroundTime+0xa>
 8007ae2:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8007ae6:	e7b8      	b.n	8007a5a <USB_SetTurnaroundTime+0xa>
 8007ae8:	f44f 5150 	mov.w	r1, #13312	@ 0x3400
 8007aec:	e7b5      	b.n	8007a5a <USB_SetTurnaroundTime+0xa>
 8007aee:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8007af2:	e7b2      	b.n	8007a5a <USB_SetTurnaroundTime+0xa>
 8007af4:	f44f 5130 	mov.w	r1, #11264	@ 0x2c00
 8007af8:	e7af      	b.n	8007a5a <USB_SetTurnaroundTime+0xa>
 8007afa:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8007afe:	e7ac      	b.n	8007a5a <USB_SetTurnaroundTime+0xa>
 8007b00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007b04:	e7a9      	b.n	8007a5a <USB_SetTurnaroundTime+0xa>
 8007b06:	bf00      	nop
 8007b08:	ff275340 	.word	0xff275340
 8007b0c:	000c34ff 	.word	0x000c34ff
 8007b10:	ff1b1e40 	.word	0xff1b1e40
 8007b14:	000f423f 	.word	0x000f423f
 8007b18:	00124f7f 	.word	0x00124f7f
 8007b1c:	0013d620 	.word	0x0013d620
 8007b20:	fee5b660 	.word	0xfee5b660
 8007b24:	0016e35f 	.word	0x0016e35f
 8007b28:	feced300 	.word	0xfeced300
 8007b2c:	001b7740 	.word	0x001b7740
 8007b30:	feb35bc0 	.word	0xfeb35bc0
 8007b34:	002191c0 	.word	0x002191c0
 8007b38:	00387520 	.word	0x00387520
 8007b3c:	fe5954e0 	.word	0xfe5954e0
 8007b40:	00419ce0 	.word	0x00419ce0

08007b44 <USB_DisableGlobalInt>:
{
 8007b44:	4603      	mov	r3, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b46:	689a      	ldr	r2, [r3, #8]
}
 8007b48:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	609a      	str	r2, [r3, #8]
}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop

08007b54 <USB_SetCurrentMode>:
{
 8007b54:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b56:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007b58:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b5a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 8007b5e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b60:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007b62:	d017      	beq.n	8007b94 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8007b64:	b9a1      	cbnz	r1, 8007b90 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b66:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8007b68:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b6e:	60c3      	str	r3, [r0, #12]
 8007b70:	e001      	b.n	8007b76 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b72:	2cc8      	cmp	r4, #200	@ 0xc8
 8007b74:	d00c      	beq.n	8007b90 <USB_SetCurrentMode+0x3c>
      HAL_Delay(10U);
 8007b76:	200a      	movs	r0, #10
 8007b78:	f7fa fda4 	bl	80026c4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8007b7c:	696b      	ldr	r3, [r5, #20]
      ms += 10U;
 8007b7e:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b80:	07db      	lsls	r3, r3, #31
 8007b82:	d4f6      	bmi.n	8007b72 <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b84:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8007b88:	fab0 f080 	clz	r0, r0
 8007b8c:	0940      	lsrs	r0, r0, #5
}
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007b90:	2001      	movs	r0, #1
}
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b94:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8007b96:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b9c:	60c3      	str	r3, [r0, #12]
 8007b9e:	e001      	b.n	8007ba4 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ba0:	2cc8      	cmp	r4, #200	@ 0xc8
 8007ba2:	d0f5      	beq.n	8007b90 <USB_SetCurrentMode+0x3c>
      HAL_Delay(10U);
 8007ba4:	200a      	movs	r0, #10
 8007ba6:	f7fa fd8d 	bl	80026c4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8007baa:	696b      	ldr	r3, [r5, #20]
      ms += 10U;
 8007bac:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007bae:	07da      	lsls	r2, r3, #31
 8007bb0:	d5f6      	bpl.n	8007ba0 <USB_SetCurrentMode+0x4c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007bb2:	f1a4 00c8 	sub.w	r0, r4, #200	@ 0xc8
 8007bb6:	fab0 f080 	clz	r0, r0
 8007bba:	0940      	lsrs	r0, r0, #5
 8007bbc:	e7e7      	b.n	8007b8e <USB_SetCurrentMode+0x3a>
 8007bbe:	bf00      	nop

08007bc0 <USB_DevInit>:
{
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	ac09      	add	r4, sp, #36	@ 0x24
 8007bca:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f89d 402e 	ldrb.w	r4, [sp, #46]	@ 0x2e
 8007bd4:	f8c0 2104 	str.w	r2, [r0, #260]	@ 0x104
{
 8007bd8:	4603      	mov	r3, r0
    USBx->DIEPTXF[i] = 0U;
 8007bda:	f8c0 2108 	str.w	r2, [r0, #264]	@ 0x108
 8007bde:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
 8007be2:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007be6:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
    USBx->DIEPTXF[i] = 0U;
 8007bea:	f8c0 2110 	str.w	r2, [r0, #272]	@ 0x110
 8007bee:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
 8007bf2:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
 8007bf6:	f8c0 211c 	str.w	r2, [r0, #284]	@ 0x11c
 8007bfa:	f8c0 2120 	str.w	r2, [r0, #288]	@ 0x120
 8007bfe:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
 8007c02:	f8c0 2128 	str.w	r2, [r0, #296]	@ 0x128
 8007c06:	f8c0 212c 	str.w	r2, [r0, #300]	@ 0x12c
 8007c0a:	f8c0 2130 	str.w	r2, [r0, #304]	@ 0x130
 8007c0e:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
 8007c12:	f8c0 2138 	str.w	r2, [r0, #312]	@ 0x138
 8007c16:	f8c0 213c 	str.w	r2, [r0, #316]	@ 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 8007c1a:	2c00      	cmp	r4, #0
 8007c1c:	f040 80b3 	bne.w	8007d86 <USB_DevInit+0x1c6>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c20:	f8de 2004 	ldr.w	r2, [lr, #4]
 8007c24:	f042 0202 	orr.w	r2, r2, #2
 8007c28:	f8ce 2004 	str.w	r2, [lr, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c2c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8007c2e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8007c32:	6382      	str	r2, [r0, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c34:	6802      	ldr	r2, [r0, #0]
 8007c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c3a:	6002      	str	r2, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c3c:	6802      	ldr	r2, [r0, #0]
 8007c3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007c42:	6002      	str	r2, [r0, #0]
  USBx_PCGCCTL = 0U;
 8007c44:	2100      	movs	r1, #0
 8007c46:	f8c3 1e00 	str.w	r1, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCFG |= speed;
 8007c4a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8007c4e:	f042 0203 	orr.w	r2, r2, #3
 8007c52:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  __IO uint32_t count = 0U;
 8007c56:	9100      	str	r1, [sp, #0]
 8007c58:	e003      	b.n	8007c62 <USB_DevInit+0xa2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	2a00      	cmp	r2, #0
 8007c5e:	f2c0 80a8 	blt.w	8007db2 <USB_DevInit+0x1f2>
    count++;
 8007c62:	9a00      	ldr	r2, [sp, #0]
 8007c64:	3201      	adds	r2, #1
 8007c66:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8007c68:	9a00      	ldr	r2, [sp, #0]
 8007c6a:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8007c6e:	d9f4      	bls.n	8007c5a <USB_DevInit+0x9a>
 8007c70:	2001      	movs	r0, #1
  __IO uint32_t count = 0U;
 8007c72:	2200      	movs	r2, #0
 8007c74:	9201      	str	r2, [sp, #4]
 8007c76:	e003      	b.n	8007c80 <USB_DevInit+0xc0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c78:	691a      	ldr	r2, [r3, #16]
 8007c7a:	2a00      	cmp	r2, #0
 8007c7c:	f2c0 8088 	blt.w	8007d90 <USB_DevInit+0x1d0>
    count++;
 8007c80:	9a01      	ldr	r2, [sp, #4]
 8007c82:	3201      	adds	r2, #1
 8007c84:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007c86:	9a01      	ldr	r2, [sp, #4]
 8007c88:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8007c8c:	d9f4      	bls.n	8007c78 <USB_DevInit+0xb8>
    ret = HAL_ERROR;
 8007c8e:	2001      	movs	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8007c90:	2100      	movs	r1, #0
 8007c92:	f8ce 1010 	str.w	r1, [lr, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c96:	f8ce 1014 	str.w	r1, [lr, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c9a:	f8ce 101c 	str.w	r1, [lr, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c9e:	b325      	cbz	r5, 8007cea <USB_DevInit+0x12a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ca0:	f8d3 6900 	ldr.w	r6, [r3, #2304]	@ 0x900
 8007ca4:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	db18      	blt.n	8007cde <USB_DevInit+0x11e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007cac:	2600      	movs	r6, #0
 8007cae:	468c      	mov	ip, r1
 8007cb0:	6016      	str	r6, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cb2:	2700      	movs	r7, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007cb4:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cb8:	f10c 0101 	add.w	r1, ip, #1
 8007cbc:	428d      	cmp	r5, r1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cbe:	6117      	str	r7, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007cc0:	6096      	str	r6, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cc2:	f102 0220 	add.w	r2, r2, #32
 8007cc6:	d03a      	beq.n	8007d3e <USB_DevInit+0x17e>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cc8:	f8d2 c000 	ldr.w	ip, [r2]
 8007ccc:	f1bc 0f00 	cmp.w	ip, #0
 8007cd0:	daec      	bge.n	8007cac <USB_DevInit+0xec>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cd2:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
 8007cd6:	468c      	mov	ip, r1
 8007cd8:	f8c2 8000 	str.w	r8, [r2]
 8007cdc:	e7ec      	b.n	8007cb8 <USB_DevInit+0xf8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cde:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
 8007ce2:	468c      	mov	ip, r1
 8007ce4:	f8c3 6900 	str.w	r6, [r3, #2304]	@ 0x900
 8007ce8:	e7e3      	b.n	8007cb2 <USB_DevInit+0xf2>
  USBx->GINTMSK = 0U;
 8007cea:	2500      	movs	r5, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cec:	f06f 4180 	mvn.w	r1, #1073741824	@ 0x40000000
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cf0:	f8de 2010 	ldr.w	r2, [lr, #16]
 8007cf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cf8:	f8ce 2010 	str.w	r2, [lr, #16]
  if (cfg.dma_enable == 0U)
 8007cfc:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
  USBx->GINTMSK = 0U;
 8007d00:	619d      	str	r5, [r3, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d02:	6159      	str	r1, [r3, #20]
  if (cfg.dma_enable == 0U)
 8007d04:	b91a      	cbnz	r2, 8007d0e <USB_DevInit+0x14e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d06:	699a      	ldr	r2, [r3, #24]
 8007d08:	f042 0210 	orr.w	r2, r2, #16
 8007d0c:	619a      	str	r2, [r3, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d0e:	6999      	ldr	r1, [r3, #24]
 8007d10:	4a31      	ldr	r2, [pc, #196]	@ (8007dd8 <USB_DevInit+0x218>)
 8007d12:	430a      	orrs	r2, r1
  if (cfg.Sof_enable != 0U)
 8007d14:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d18:	619a      	str	r2, [r3, #24]
  if (cfg.Sof_enable != 0U)
 8007d1a:	b119      	cbz	r1, 8007d24 <USB_DevInit+0x164>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	f042 0208 	orr.w	r2, r2, #8
 8007d22:	619a      	str	r2, [r3, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8007d24:	2c01      	cmp	r4, #1
 8007d26:	d105      	bne.n	8007d34 <USB_DevInit+0x174>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007d2e:	f042 0204 	orr.w	r2, r2, #4
 8007d32:	619a      	str	r2, [r3, #24]
}
 8007d34:	b002      	add	sp, #8
 8007d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3a:	b004      	add	sp, #16
 8007d3c:	4770      	bx	lr
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d3e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8007d42:	f503 6230 	add.w	r2, r3, #2816	@ 0xb00
 8007d46:	2900      	cmp	r1, #0
 8007d48:	db17      	blt.n	8007d7a <USB_DevInit+0x1ba>
 8007d4a:	2500      	movs	r5, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d4c:	2600      	movs	r6, #0
 8007d4e:	4629      	mov	r1, r5
 8007d50:	6016      	str	r6, [r2, #0]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d52:	2700      	movs	r7, #0
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d54:	f64f 367f 	movw	r6, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d58:	458c      	cmp	ip, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d5a:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d5c:	f101 0501 	add.w	r5, r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d60:	6096      	str	r6, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d62:	f102 0220 	add.w	r2, r2, #32
 8007d66:	d0c0      	beq.n	8007cea <USB_DevInit+0x12a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d68:	6811      	ldr	r1, [r2, #0]
 8007d6a:	2900      	cmp	r1, #0
 8007d6c:	daee      	bge.n	8007d4c <USB_DevInit+0x18c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d6e:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
 8007d72:	4629      	mov	r1, r5
 8007d74:	f8c2 8000 	str.w	r8, [r2]
 8007d78:	e7ee      	b.n	8007d58 <USB_DevInit+0x198>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d7a:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 8007d7e:	2100      	movs	r1, #0
 8007d80:	f8c3 5b00 	str.w	r5, [r3, #2816]	@ 0xb00
 8007d84:	e7e5      	b.n	8007d52 <USB_DevInit+0x192>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d86:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8007d88:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8007d8c:	6382      	str	r2, [r0, #56]	@ 0x38
 8007d8e:	e759      	b.n	8007c44 <USB_DevInit+0x84>
  count = 0U;
 8007d90:	2200      	movs	r2, #0
 8007d92:	9201      	str	r2, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d94:	2210      	movs	r2, #16
 8007d96:	611a      	str	r2, [r3, #16]
 8007d98:	e003      	b.n	8007da2 <USB_DevInit+0x1e2>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	06d2      	lsls	r2, r2, #27
 8007d9e:	f57f af77 	bpl.w	8007c90 <USB_DevInit+0xd0>
    count++;
 8007da2:	9a01      	ldr	r2, [sp, #4]
 8007da4:	3201      	adds	r2, #1
 8007da6:	9201      	str	r2, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007da8:	9a01      	ldr	r2, [sp, #4]
 8007daa:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8007dae:	d9f4      	bls.n	8007d9a <USB_DevInit+0x1da>
 8007db0:	e76d      	b.n	8007c8e <USB_DevInit+0xce>
  count = 0U;
 8007db2:	2100      	movs	r1, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007db4:	f44f 6284 	mov.w	r2, #1056	@ 0x420
  count = 0U;
 8007db8:	9100      	str	r1, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dba:	611a      	str	r2, [r3, #16]
 8007dbc:	e004      	b.n	8007dc8 <USB_DevInit+0x208>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007dbe:	6918      	ldr	r0, [r3, #16]
 8007dc0:	f010 0020 	ands.w	r0, r0, #32
 8007dc4:	f43f af55 	beq.w	8007c72 <USB_DevInit+0xb2>
    count++;
 8007dc8:	9a00      	ldr	r2, [sp, #0]
 8007dca:	3201      	adds	r2, #1
 8007dcc:	9200      	str	r2, [sp, #0]
    if (count > HAL_USB_TIMEOUT)
 8007dce:	9a00      	ldr	r2, [sp, #0]
 8007dd0:	f1b2 6f70 	cmp.w	r2, #251658240	@ 0xf000000
 8007dd4:	d9f3      	bls.n	8007dbe <USB_DevInit+0x1fe>
 8007dd6:	e74b      	b.n	8007c70 <USB_DevInit+0xb0>
 8007dd8:	803c3800 	.word	0x803c3800

08007ddc <USB_FlushTxFifo>:
  __IO uint32_t count = 0U;
 8007ddc:	2300      	movs	r3, #0
{
 8007dde:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	e002      	b.n	8007dea <USB_FlushTxFifo+0xe>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007de4:	6903      	ldr	r3, [r0, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	db09      	blt.n	8007dfe <USB_FlushTxFifo+0x22>
    count++;
 8007dea:	9b01      	ldr	r3, [sp, #4]
 8007dec:	3301      	adds	r3, #1
 8007dee:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007df0:	9b01      	ldr	r3, [sp, #4]
 8007df2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007df6:	d9f5      	bls.n	8007de4 <USB_FlushTxFifo+0x8>
      return HAL_TIMEOUT;
 8007df8:	2003      	movs	r0, #3
}
 8007dfa:	b002      	add	sp, #8
 8007dfc:	4770      	bx	lr
  count = 0U;
 8007dfe:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e00:	0189      	lsls	r1, r1, #6
 8007e02:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8007e06:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e08:	6101      	str	r1, [r0, #16]
 8007e0a:	e003      	b.n	8007e14 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e0c:	6903      	ldr	r3, [r0, #16]
 8007e0e:	f013 0320 	ands.w	r3, r3, #32
 8007e12:	d007      	beq.n	8007e24 <USB_FlushTxFifo+0x48>
    count++;
 8007e14:	9b01      	ldr	r3, [sp, #4]
 8007e16:	3301      	adds	r3, #1
 8007e18:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007e1a:	9b01      	ldr	r3, [sp, #4]
 8007e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e20:	d9f4      	bls.n	8007e0c <USB_FlushTxFifo+0x30>
 8007e22:	e7e9      	b.n	8007df8 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 8007e24:	4618      	mov	r0, r3
}
 8007e26:	b002      	add	sp, #8
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop

08007e2c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e2c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e30:	f013 0006 	ands.w	r0, r3, #6
 8007e34:	d004      	beq.n	8007e40 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8007e36:	f013 0f02 	tst.w	r3, #2
 8007e3a:	bf14      	ite	ne
 8007e3c:	2002      	movne	r0, #2
 8007e3e:	200f      	moveq	r0, #15
}
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop

08007e44 <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 8007e44:	2300      	movs	r3, #0
{
 8007e46:	b410      	push	{r4}
  if (ep->is_in == 1U)
 8007e48:	784a      	ldrb	r2, [r1, #1]
{
 8007e4a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8007e4c:	9301      	str	r3, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e4e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007e50:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e52:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8007e56:	d023      	beq.n	8007ea0 <USB_EPStopXfer+0x5c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e58:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 8007e5c:	58c1      	ldr	r1, [r0, r3]
 8007e5e:	18c2      	adds	r2, r0, r3
 8007e60:	2900      	cmp	r1, #0
 8007e62:	db04      	blt.n	8007e6e <USB_EPStopXfer+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;
 8007e64:	2000      	movs	r0, #0
}
 8007e66:	b003      	add	sp, #12
 8007e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e6c:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e6e:	58c4      	ldr	r4, [r0, r3]
        if (count > 10000U)
 8007e70:	f242 7110 	movw	r1, #10000	@ 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e74:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8007e78:	50c4      	str	r4, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e7a:	58c4      	ldr	r4, [r0, r3]
 8007e7c:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8007e80:	50c4      	str	r4, [r0, r3]
 8007e82:	e002      	b.n	8007e8a <USB_EPStopXfer+0x46>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e84:	6813      	ldr	r3, [r2, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	daec      	bge.n	8007e64 <USB_EPStopXfer+0x20>
        count++;
 8007e8a:	9b01      	ldr	r3, [sp, #4]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8007e90:	9b01      	ldr	r3, [sp, #4]
 8007e92:	428b      	cmp	r3, r1
 8007e94:	d9f6      	bls.n	8007e84 <USB_EPStopXfer+0x40>
          ret = HAL_ERROR;
 8007e96:	2001      	movs	r0, #1
}
 8007e98:	b003      	add	sp, #12
 8007e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e9e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ea0:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8007ea4:	58c1      	ldr	r1, [r0, r3]
 8007ea6:	18c2      	adds	r2, r0, r3
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	dadb      	bge.n	8007e64 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007eac:	58c4      	ldr	r4, [r0, r3]
        if (count > 10000U)
 8007eae:	f242 7110 	movw	r1, #10000	@ 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007eb2:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8007eb6:	50c4      	str	r4, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007eb8:	58c4      	ldr	r4, [r0, r3]
 8007eba:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8007ebe:	50c4      	str	r4, [r0, r3]
 8007ec0:	e002      	b.n	8007ec8 <USB_EPStopXfer+0x84>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dacd      	bge.n	8007e64 <USB_EPStopXfer+0x20>
        count++;
 8007ec8:	9b01      	ldr	r3, [sp, #4]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	d9f6      	bls.n	8007ec2 <USB_EPStopXfer+0x7e>
 8007ed4:	e7df      	b.n	8007e96 <USB_EPStopXfer+0x52>
 8007ed6:	bf00      	nop

08007ed8 <USB_WritePacket>:
{
 8007ed8:	b410      	push	{r4}
 8007eda:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8007ede:	b964      	cbnz	r4, 8007efa <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ee0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	d009      	beq.n	8007efa <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ee6:	3201      	adds	r2, #1
 8007ee8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8007eec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007ef0:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8007ef4:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ef6:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8007ef8:	d1fa      	bne.n	8007ef0 <USB_WritePacket+0x18>
}
 8007efa:	2000      	movs	r0, #0
 8007efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop

08007f04 <USB_ReadPacket>:
{
 8007f04:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8007f06:	ea5f 0e92 	movs.w	lr, r2, lsr #2
{
 8007f0a:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8007f0c:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8007f10:	d01c      	beq.n	8007f4c <USB_ReadPacket+0x48>
  uint8_t *pDest = dest;
 8007f12:	468c      	mov	ip, r1
  for (i = 0U; i < count32b; i++)
 8007f14:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f16:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f1a:	6822      	ldr	r2, [r4, #0]
  for (i = 0U; i < count32b; i++)
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	459e      	cmp	lr, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f20:	f84c 2b04 	str.w	r2, [ip], #4
  for (i = 0U; i < count32b; i++)
 8007f24:	d1f9      	bne.n	8007f1a <USB_ReadPacket+0x16>
 8007f26:	eb01 008e 	add.w	r0, r1, lr, lsl #2
  if (remaining_bytes != 0U)
 8007f2a:	b176      	cbz	r6, 8007f4a <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f2c:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
 8007f30:	682b      	ldr	r3, [r5, #0]
    } while (remaining_bytes != 0U);
 8007f32:	2e01      	cmp	r6, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f34:	7003      	strb	r3, [r0, #0]
    } while (remaining_bytes != 0U);
 8007f36:	d007      	beq.n	8007f48 <USB_ReadPacket+0x44>
 8007f38:	2e02      	cmp	r6, #2
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f3a:	ea4f 2213 	mov.w	r2, r3, lsr #8
 8007f3e:	bf18      	it	ne
 8007f40:	0c1b      	lsrne	r3, r3, #16
 8007f42:	7042      	strb	r2, [r0, #1]
 8007f44:	bf18      	it	ne
 8007f46:	7083      	strbne	r3, [r0, #2]
    } while (remaining_bytes != 0U);
 8007f48:	4430      	add	r0, r6
}
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	e7ec      	b.n	8007f2a <USB_ReadPacket+0x26>

08007f50 <USB_DevDisconnect>:
{
 8007f50:	4603      	mov	r3, r0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f52:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f56:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f5a:	f022 0203 	bic.w	r2, r2, #3
 8007f5e:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f62:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
}
 8007f66:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f68:	f043 0302 	orr.w	r3, r3, #2
 8007f6c:	604b      	str	r3, [r1, #4]
}
 8007f6e:	4770      	bx	lr

08007f70 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007f70:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007f72:	6980      	ldr	r0, [r0, #24]
}
 8007f74:	4010      	ands	r0, r2
 8007f76:	4770      	bx	lr

08007f78 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007f78:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f7c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	@ 0x81c
 8007f80:	4018      	ands	r0, r3
}
 8007f82:	0c00      	lsrs	r0, r0, #16
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop

08007f88 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007f88:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f8c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	@ 0x81c
 8007f90:	4018      	ands	r0, r3
}
 8007f92:	b280      	uxth	r0, r0
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop

08007f98 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f98:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f9c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007fa0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007fa4:	6940      	ldr	r0, [r0, #20]
}
 8007fa6:	4010      	ands	r0, r2
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop

08007fac <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8007fac:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007fb0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007fb4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007fb8:	f001 010f 	and.w	r1, r1, #15
 8007fbc:	40cb      	lsrs	r3, r1
 8007fbe:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007fc0:	f8d0 0908 	ldr.w	r0, [r0, #2312]	@ 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	4313      	orrs	r3, r2
}
 8007fc8:	4018      	ands	r0, r3
 8007fca:	4770      	bx	lr

08007fcc <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007fcc:	6940      	ldr	r0, [r0, #20]
}
 8007fce:	f000 0001 	and.w	r0, r0, #1
 8007fd2:	4770      	bx	lr

08007fd4 <USB_ActivateSetup>:
{
 8007fd4:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fd6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fda:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fde:	f36f 020a 	bfc	r2, #0, #11
 8007fe2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fe6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
}
 8007fea:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff0:	604b      	str	r3, [r1, #4]
}
 8007ff2:	4770      	bx	lr

08007ff4 <USB_EP0_OutStart>:
{
 8007ff4:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ff6:	4c12      	ldr	r4, [pc, #72]	@ (8008040 <USB_EP0_OutStart+0x4c>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ff8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ffa:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ffe:	42a5      	cmp	r5, r4
 8008000:	d903      	bls.n	800800a <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008002:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 8008006:	2c00      	cmp	r4, #0
 8008008:	db16      	blt.n	8008038 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800800a:	2400      	movs	r4, #0
 800800c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800800e:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8008010:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008012:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008016:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008018:	691c      	ldr	r4, [r3, #16]
 800801a:	f044 0418 	orr.w	r4, r4, #24
 800801e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008020:	691c      	ldr	r4, [r3, #16]
 8008022:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8008026:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8008028:	d106      	bne.n	8008038 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800802a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800802c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008030:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008034:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8008038:	2000      	movs	r0, #0
 800803a:	bc30      	pop	{r4, r5}
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	4f54300a 	.word	0x4f54300a

08008044 <_init>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	bf00      	nop
 8008048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804a:	bc08      	pop	{r3}
 800804c:	469e      	mov	lr, r3
 800804e:	4770      	bx	lr

08008050 <_fini>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr
