
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005548  08005548  00006548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005648  08005648  00006648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005650  08005650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005654  08005654  00006654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000004c  20000000  08005658  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000220  20000050  080056a4  00007050  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000270  080056a4  00007270  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
 10 .comment      00000026  00000000  00000000  00007082  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018d9a  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002f2e  00000000  00000000  0001fe42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000e7a5  00000000  00000000  00022d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00031518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000185f  00000000  00000000  000322c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000307d8  00000000  00000000  00033b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195c3  00000000  00000000  000642f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00131549  00000000  00000000  0007d8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00002650  00000000  00000000  001aee04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000105  00000000  00000000  001b1454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <deregister_tm_clones>:
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <deregister_tm_clones+0x10>)
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <deregister_tm_clones+0x14>)
 800023c:	4283      	cmp	r3, r0
 800023e:	d002      	beq.n	8000246 <deregister_tm_clones+0xe>
 8000240:	4b03      	ldr	r3, [pc, #12]	@ (8000250 <deregister_tm_clones+0x18>)
 8000242:	b103      	cbz	r3, 8000246 <deregister_tm_clones+0xe>
 8000244:	4718      	bx	r3
 8000246:	4770      	bx	lr
 8000248:	2000004c 	.word	0x2000004c
 800024c:	2000004c 	.word	0x2000004c
 8000250:	00000000 	.word	0x00000000

08000254 <register_tm_clones>:
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <register_tm_clones+0x1c>)
 8000256:	4907      	ldr	r1, [pc, #28]	@ (8000274 <register_tm_clones+0x20>)
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	1089      	asrs	r1, r1, #2
 800025c:	bf48      	it	mi
 800025e:	3101      	addmi	r1, #1
 8000260:	1049      	asrs	r1, r1, #1
 8000262:	d003      	beq.n	800026c <register_tm_clones+0x18>
 8000264:	4b04      	ldr	r3, [pc, #16]	@ (8000278 <register_tm_clones+0x24>)
 8000266:	b10b      	cbz	r3, 800026c <register_tm_clones+0x18>
 8000268:	4801      	ldr	r0, [pc, #4]	@ (8000270 <register_tm_clones+0x1c>)
 800026a:	4718      	bx	r3
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	2000004c 	.word	0x2000004c
 8000274:	2000004c 	.word	0x2000004c
 8000278:	00000000 	.word	0x00000000

0800027c <__do_global_dtors_aux>:
 800027c:	b510      	push	{r4, lr}
 800027e:	4c06      	ldr	r4, [pc, #24]	@ (8000298 <__do_global_dtors_aux+0x1c>)
 8000280:	7823      	ldrb	r3, [r4, #0]
 8000282:	b943      	cbnz	r3, 8000296 <__do_global_dtors_aux+0x1a>
 8000284:	f7ff ffd8 	bl	8000238 <deregister_tm_clones>
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <__do_global_dtors_aux+0x20>)
 800028a:	b113      	cbz	r3, 8000292 <__do_global_dtors_aux+0x16>
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <__do_global_dtors_aux+0x24>)
 800028e:	f3af 8000 	nop.w
 8000292:	2301      	movs	r3, #1
 8000294:	7023      	strb	r3, [r4, #0]
 8000296:	bd10      	pop	{r4, pc}
 8000298:	20000050 	.word	0x20000050
 800029c:	00000000 	.word	0x00000000
 80002a0:	08005530 	.word	0x08005530

080002a4 <frame_dummy>:
 80002a4:	b508      	push	{r3, lr}
 80002a6:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <frame_dummy+0x14>)
 80002a8:	b11b      	cbz	r3, 80002b2 <frame_dummy+0xe>
 80002aa:	4904      	ldr	r1, [pc, #16]	@ (80002bc <frame_dummy+0x18>)
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <frame_dummy+0x1c>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002b6:	e7cd      	b.n	8000254 <register_tm_clones>
 80002b8:	00000000 	.word	0x00000000
 80002bc:	20000054 	.word	0x20000054
 80002c0:	08005530 	.word	0x08005530

080002c4 <__libc_init_array>:
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <__libc_init_array+0x40>)
 80002c6:	b570      	push	{r4, r5, r6, lr}
 80002c8:	4d0f      	ldr	r5, [pc, #60]	@ (8000308 <__libc_init_array+0x44>)
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	eba3 0605 	sub.w	r6, r3, r5
 80002d0:	d007      	beq.n	80002e2 <__libc_init_array+0x1e>
 80002d2:	10b6      	asrs	r6, r6, #2
 80002d4:	2400      	movs	r4, #0
 80002d6:	3401      	adds	r4, #1
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d8f9      	bhi.n	80002d6 <__libc_init_array+0x12>
 80002e2:	4d0a      	ldr	r5, [pc, #40]	@ (800030c <__libc_init_array+0x48>)
 80002e4:	f005 f924 	bl	8005530 <_init>
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <__libc_init_array+0x4c>)
 80002ea:	1b5e      	subs	r6, r3, r5
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80002f2:	d006      	beq.n	8000302 <__libc_init_array+0x3e>
 80002f4:	2400      	movs	r4, #0
 80002f6:	3401      	adds	r4, #1
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d8f9      	bhi.n	80002f6 <__libc_init_array+0x32>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	08005650 	.word	0x08005650
 8000308:	08005650 	.word	0x08005650
 800030c:	08005650 	.word	0x08005650
 8000310:	08005654 	.word	0x08005654

08000314 <memset>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	0786      	lsls	r6, r0, #30
 8000318:	d047      	beq.n	80003aa <memset+0x96>
 800031a:	1e54      	subs	r4, r2, #1
 800031c:	2a00      	cmp	r2, #0
 800031e:	d03e      	beq.n	800039e <memset+0x8a>
 8000320:	b2ca      	uxtb	r2, r1
 8000322:	4603      	mov	r3, r0
 8000324:	e001      	b.n	800032a <memset+0x16>
 8000326:	3c01      	subs	r4, #1
 8000328:	d339      	bcc.n	800039e <memset+0x8a>
 800032a:	f803 2b01 	strb.w	r2, [r3], #1
 800032e:	079d      	lsls	r5, r3, #30
 8000330:	d1f9      	bne.n	8000326 <memset+0x12>
 8000332:	2c03      	cmp	r4, #3
 8000334:	d92c      	bls.n	8000390 <memset+0x7c>
 8000336:	b2cd      	uxtb	r5, r1
 8000338:	2c0f      	cmp	r4, #15
 800033a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800033e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8000342:	d935      	bls.n	80003b0 <memset+0x9c>
 8000344:	f1a4 0c10 	sub.w	ip, r4, #16
 8000348:	f103 0e10 	add.w	lr, r3, #16
 800034c:	461a      	mov	r2, r3
 800034e:	f02c 060f 	bic.w	r6, ip, #15
 8000352:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8000356:	44b6      	add	lr, r6
 8000358:	e9c2 5500 	strd	r5, r5, [r2]
 800035c:	e9c2 5502 	strd	r5, r5, [r2, #8]
 8000360:	3210      	adds	r2, #16
 8000362:	4572      	cmp	r2, lr
 8000364:	d1f8      	bne.n	8000358 <memset+0x44>
 8000366:	f10c 0201 	add.w	r2, ip, #1
 800036a:	f014 0f0c 	tst.w	r4, #12
 800036e:	f004 0c0f 	and.w	ip, r4, #15
 8000372:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000376:	d013      	beq.n	80003a0 <memset+0x8c>
 8000378:	f1ac 0304 	sub.w	r3, ip, #4
 800037c:	f023 0303 	bic.w	r3, r3, #3
 8000380:	3304      	adds	r3, #4
 8000382:	4413      	add	r3, r2
 8000384:	f842 5b04 	str.w	r5, [r2], #4
 8000388:	4293      	cmp	r3, r2
 800038a:	d1fb      	bne.n	8000384 <memset+0x70>
 800038c:	f00c 0403 	and.w	r4, ip, #3
 8000390:	b12c      	cbz	r4, 800039e <memset+0x8a>
 8000392:	b2c9      	uxtb	r1, r1
 8000394:	441c      	add	r4, r3
 8000396:	f803 1b01 	strb.w	r1, [r3], #1
 800039a:	42a3      	cmp	r3, r4
 800039c:	d1fb      	bne.n	8000396 <memset+0x82>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	4664      	mov	r4, ip
 80003a2:	4613      	mov	r3, r2
 80003a4:	2c00      	cmp	r4, #0
 80003a6:	d1f4      	bne.n	8000392 <memset+0x7e>
 80003a8:	e7f9      	b.n	800039e <memset+0x8a>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4614      	mov	r4, r2
 80003ae:	e7c0      	b.n	8000332 <memset+0x1e>
 80003b0:	461a      	mov	r2, r3
 80003b2:	46a4      	mov	ip, r4
 80003b4:	e7e0      	b.n	8000378 <memset+0x64>
 80003b6:	bf00      	nop

080003b8 <__aeabi_uldivmod>:
 80003b8:	b953      	cbnz	r3, 80003d0 <__aeabi_uldivmod+0x18>
 80003ba:	b94a      	cbnz	r2, 80003d0 <__aeabi_uldivmod+0x18>
 80003bc:	2900      	cmp	r1, #0
 80003be:	bf08      	it	eq
 80003c0:	2800      	cmpeq	r0, #0
 80003c2:	bf1c      	itt	ne
 80003c4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003cc:	f000 b98c 	b.w	80006e8 <__aeabi_idiv0>
 80003d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d8:	f000 f806 	bl	80003e8 <__udivmoddi4>
 80003dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003e4:	b004      	add	sp, #16
 80003e6:	4770      	bx	lr

080003e8 <__udivmoddi4>:
 80003e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ec:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80003ee:	460e      	mov	r6, r1
 80003f0:	4604      	mov	r4, r0
 80003f2:	460f      	mov	r7, r1
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d147      	bne.n	8000488 <__udivmoddi4+0xa0>
 80003f8:	428a      	cmp	r2, r1
 80003fa:	4694      	mov	ip, r2
 80003fc:	fab2 f382 	clz	r3, r2
 8000400:	d95a      	bls.n	80004b8 <__udivmoddi4+0xd0>
 8000402:	b143      	cbz	r3, 8000416 <__udivmoddi4+0x2e>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0220 	rsb	r2, r3, #32
 800040c:	409f      	lsls	r7, r3
 800040e:	409c      	lsls	r4, r3
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	4317      	orrs	r7, r2
 8000416:	ea4f 461c 	mov.w	r6, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	0c22      	lsrs	r2, r4, #16
 8000420:	fbb7 f1f6 	udiv	r1, r7, r6
 8000424:	fb06 7711 	mls	r7, r6, r1, r7
 8000428:	fb01 f00e 	mul.w	r0, r1, lr
 800042c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000430:	4290      	cmp	r0, r2
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x5e>
 8000434:	eb1c 0202 	adds.w	r2, ip, r2
 8000438:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x5c>
 800043e:	4290      	cmp	r0, r2
 8000440:	f200 813c 	bhi.w	80006bc <__udivmoddi4+0x2d4>
 8000444:	4639      	mov	r1, r7
 8000446:	1a12      	subs	r2, r2, r0
 8000448:	b2a4      	uxth	r4, r4
 800044a:	fbb2 f0f6 	udiv	r0, r2, r6
 800044e:	fb06 2210 	mls	r2, r6, r0, r2
 8000452:	fb00 fe0e 	mul.w	lr, r0, lr
 8000456:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800045a:	45a6      	cmp	lr, r4
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x88>
 800045e:	eb1c 0404 	adds.w	r4, ip, r4
 8000462:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x86>
 8000468:	45a6      	cmp	lr, r4
 800046a:	f200 812a 	bhi.w	80006c2 <__udivmoddi4+0x2da>
 800046e:	4610      	mov	r0, r2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	eba4 040e 	sub.w	r4, r4, lr
 8000478:	2100      	movs	r1, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0x9c>
 800047c:	40dc      	lsrs	r4, r3
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000488:	428b      	cmp	r3, r1
 800048a:	d905      	bls.n	8000498 <__udivmoddi4+0xb0>
 800048c:	b10d      	cbz	r5, 8000492 <__udivmoddi4+0xaa>
 800048e:	e9c5 0100 	strd	r0, r1, [r5]
 8000492:	2100      	movs	r1, #0
 8000494:	4608      	mov	r0, r1
 8000496:	e7f5      	b.n	8000484 <__udivmoddi4+0x9c>
 8000498:	fab3 f183 	clz	r1, r3
 800049c:	2900      	cmp	r1, #0
 800049e:	d14f      	bne.n	8000540 <__udivmoddi4+0x158>
 80004a0:	42b3      	cmp	r3, r6
 80004a2:	f0c0 8102 	bcc.w	80006aa <__udivmoddi4+0x2c2>
 80004a6:	4282      	cmp	r2, r0
 80004a8:	f240 80ff 	bls.w	80006aa <__udivmoddi4+0x2c2>
 80004ac:	4608      	mov	r0, r1
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e8      	beq.n	8000484 <__udivmoddi4+0x9c>
 80004b2:	e9c5 4700 	strd	r4, r7, [r5]
 80004b6:	e7e5      	b.n	8000484 <__udivmoddi4+0x9c>
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	f040 80af 	bne.w	800061c <__udivmoddi4+0x234>
 80004be:	1a8a      	subs	r2, r1, r2
 80004c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 f6fe 	udiv	r6, r2, lr
 80004ce:	fb0e 2016 	mls	r0, lr, r6, r2
 80004d2:	0c22      	lsrs	r2, r4, #16
 80004d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004d8:	fb07 f006 	mul.w	r0, r7, r6
 80004dc:	4290      	cmp	r0, r2
 80004de:	d90f      	bls.n	8000500 <__udivmoddi4+0x118>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 80004e8:	bf2c      	ite	cs
 80004ea:	f04f 0901 	movcs.w	r9, #1
 80004ee:	f04f 0900 	movcc.w	r9, #0
 80004f2:	4290      	cmp	r0, r2
 80004f4:	d903      	bls.n	80004fe <__udivmoddi4+0x116>
 80004f6:	f1b9 0f00 	cmp.w	r9, #0
 80004fa:	f000 80dc 	beq.w	80006b6 <__udivmoddi4+0x2ce>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a12      	subs	r2, r2, r0
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb2 f0fe 	udiv	r0, r2, lr
 8000508:	fb0e 2210 	mls	r2, lr, r0, r2
 800050c:	fb00 f707 	mul.w	r7, r0, r7
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	42a7      	cmp	r7, r4
 8000516:	d90f      	bls.n	8000538 <__udivmoddi4+0x150>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0e01 	movcs.w	lr, #1
 8000526:	f04f 0e00 	movcc.w	lr, #0
 800052a:	42a7      	cmp	r7, r4
 800052c:	d903      	bls.n	8000536 <__udivmoddi4+0x14e>
 800052e:	f1be 0f00 	cmp.w	lr, #0
 8000532:	f000 80c9 	beq.w	80006c8 <__udivmoddi4+0x2e0>
 8000536:	4610      	mov	r0, r2
 8000538:	1be4      	subs	r4, r4, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x92>
 8000540:	f1c1 0420 	rsb	r4, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa06 fc01 	lsl.w	ip, r6, r1
 800054a:	fa00 fe01 	lsl.w	lr, r0, r1
 800054e:	fa22 f704 	lsr.w	r7, r2, r4
 8000552:	40e6      	lsrs	r6, r4
 8000554:	408a      	lsls	r2, r1
 8000556:	431f      	orrs	r7, r3
 8000558:	fa20 f304 	lsr.w	r3, r0, r4
 800055c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000560:	ea43 030c 	orr.w	r3, r3, ip
 8000564:	fa1f fc87 	uxth.w	ip, r7
 8000568:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800056c:	fbb6 f0f8 	udiv	r0, r6, r8
 8000570:	fb08 6610 	mls	r6, r8, r0, r6
 8000574:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8000578:	fb00 f90c 	mul.w	r9, r0, ip
 800057c:	45b1      	cmp	r9, r6
 800057e:	d90e      	bls.n	800059e <__udivmoddi4+0x1b6>
 8000580:	19be      	adds	r6, r7, r6
 8000582:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000586:	bf2c      	ite	cs
 8000588:	f04f 0b01 	movcs.w	fp, #1
 800058c:	f04f 0b00 	movcc.w	fp, #0
 8000590:	45b1      	cmp	r9, r6
 8000592:	d903      	bls.n	800059c <__udivmoddi4+0x1b4>
 8000594:	f1bb 0f00 	cmp.w	fp, #0
 8000598:	f000 80a2 	beq.w	80006e0 <__udivmoddi4+0x2f8>
 800059c:	4650      	mov	r0, sl
 800059e:	eba6 0609 	sub.w	r6, r6, r9
 80005a2:	fa1f f983 	uxth.w	r9, r3
 80005a6:	fbb6 f3f8 	udiv	r3, r6, r8
 80005aa:	fb08 6613 	mls	r6, r8, r3, r6
 80005ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80005b2:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80005b6:	45b4      	cmp	ip, r6
 80005b8:	d90e      	bls.n	80005d8 <__udivmoddi4+0x1f0>
 80005ba:	19be      	adds	r6, r7, r6
 80005bc:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 80005c0:	bf2c      	ite	cs
 80005c2:	f04f 0901 	movcs.w	r9, #1
 80005c6:	f04f 0900 	movcc.w	r9, #0
 80005ca:	45b4      	cmp	ip, r6
 80005cc:	d903      	bls.n	80005d6 <__udivmoddi4+0x1ee>
 80005ce:	f1b9 0f00 	cmp.w	r9, #0
 80005d2:	f000 8082 	beq.w	80006da <__udivmoddi4+0x2f2>
 80005d6:	4643      	mov	r3, r8
 80005d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005dc:	eba6 060c 	sub.w	r6, r6, ip
 80005e0:	fba0 8c02 	umull	r8, ip, r0, r2
 80005e4:	4566      	cmp	r6, ip
 80005e6:	4643      	mov	r3, r8
 80005e8:	46e1      	mov	r9, ip
 80005ea:	d302      	bcc.n	80005f2 <__udivmoddi4+0x20a>
 80005ec:	d107      	bne.n	80005fe <__udivmoddi4+0x216>
 80005ee:	45c6      	cmp	lr, r8
 80005f0:	d205      	bcs.n	80005fe <__udivmoddi4+0x216>
 80005f2:	ebb8 0302 	subs.w	r3, r8, r2
 80005f6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005fa:	3801      	subs	r0, #1
 80005fc:	46e1      	mov	r9, ip
 80005fe:	b15d      	cbz	r5, 8000618 <__udivmoddi4+0x230>
 8000600:	ebbe 0203 	subs.w	r2, lr, r3
 8000604:	eb66 0609 	sbc.w	r6, r6, r9
 8000608:	fa06 f404 	lsl.w	r4, r6, r4
 800060c:	fa22 f301 	lsr.w	r3, r2, r1
 8000610:	40ce      	lsrs	r6, r1
 8000612:	431c      	orrs	r4, r3
 8000614:	e9c5 4600 	strd	r4, r6, [r5]
 8000618:	2100      	movs	r1, #0
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x9c>
 800061c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000620:	f1c3 0220 	rsb	r2, r3, #32
 8000624:	4099      	lsls	r1, r3
 8000626:	409c      	lsls	r4, r3
 8000628:	40d6      	lsrs	r6, r2
 800062a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800062e:	fa20 f202 	lsr.w	r2, r0, r2
 8000632:	fa1f f78c 	uxth.w	r7, ip
 8000636:	fbb6 f0fe 	udiv	r0, r6, lr
 800063a:	430a      	orrs	r2, r1
 800063c:	fb0e 6610 	mls	r6, lr, r0, r6
 8000640:	0c11      	lsrs	r1, r2, #16
 8000642:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8000646:	fb00 f607 	mul.w	r6, r0, r7
 800064a:	428e      	cmp	r6, r1
 800064c:	d90e      	bls.n	800066c <__udivmoddi4+0x284>
 800064e:	eb1c 0101 	adds.w	r1, ip, r1
 8000652:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000656:	bf2c      	ite	cs
 8000658:	f04f 0901 	movcs.w	r9, #1
 800065c:	f04f 0900 	movcc.w	r9, #0
 8000660:	428e      	cmp	r6, r1
 8000662:	d902      	bls.n	800066a <__udivmoddi4+0x282>
 8000664:	f1b9 0f00 	cmp.w	r9, #0
 8000668:	d034      	beq.n	80006d4 <__udivmoddi4+0x2ec>
 800066a:	4640      	mov	r0, r8
 800066c:	1b89      	subs	r1, r1, r6
 800066e:	b292      	uxth	r2, r2
 8000670:	fbb1 f6fe 	udiv	r6, r1, lr
 8000674:	fb0e 1116 	mls	r1, lr, r6, r1
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	fb06 f107 	mul.w	r1, r6, r7
 8000680:	4291      	cmp	r1, r2
 8000682:	d90e      	bls.n	80006a2 <__udivmoddi4+0x2ba>
 8000684:	eb1c 0202 	adds.w	r2, ip, r2
 8000688:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 800068c:	bf2c      	ite	cs
 800068e:	f04f 0901 	movcs.w	r9, #1
 8000692:	f04f 0900 	movcc.w	r9, #0
 8000696:	4291      	cmp	r1, r2
 8000698:	d902      	bls.n	80006a0 <__udivmoddi4+0x2b8>
 800069a:	f1b9 0f00 	cmp.w	r9, #0
 800069e:	d016      	beq.n	80006ce <__udivmoddi4+0x2e6>
 80006a0:	4646      	mov	r6, r8
 80006a2:	1a52      	subs	r2, r2, r1
 80006a4:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 80006a8:	e70f      	b.n	80004ca <__udivmoddi4+0xe2>
 80006aa:	1a84      	subs	r4, r0, r2
 80006ac:	eb66 0203 	sbc.w	r2, r6, r3
 80006b0:	2001      	movs	r0, #1
 80006b2:	4617      	mov	r7, r2
 80006b4:	e6fb      	b.n	80004ae <__udivmoddi4+0xc6>
 80006b6:	3e02      	subs	r6, #2
 80006b8:	4462      	add	r2, ip
 80006ba:	e721      	b.n	8000500 <__udivmoddi4+0x118>
 80006bc:	3902      	subs	r1, #2
 80006be:	4462      	add	r2, ip
 80006c0:	e6c1      	b.n	8000446 <__udivmoddi4+0x5e>
 80006c2:	4464      	add	r4, ip
 80006c4:	3802      	subs	r0, #2
 80006c6:	e6d3      	b.n	8000470 <__udivmoddi4+0x88>
 80006c8:	4464      	add	r4, ip
 80006ca:	3802      	subs	r0, #2
 80006cc:	e734      	b.n	8000538 <__udivmoddi4+0x150>
 80006ce:	3e02      	subs	r6, #2
 80006d0:	4462      	add	r2, ip
 80006d2:	e7e6      	b.n	80006a2 <__udivmoddi4+0x2ba>
 80006d4:	3802      	subs	r0, #2
 80006d6:	4461      	add	r1, ip
 80006d8:	e7c8      	b.n	800066c <__udivmoddi4+0x284>
 80006da:	3b02      	subs	r3, #2
 80006dc:	443e      	add	r6, r7
 80006de:	e77b      	b.n	80005d8 <__udivmoddi4+0x1f0>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443e      	add	r6, r7
 80006e4:	e75b      	b.n	800059e <__udivmoddi4+0x1b6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	0000      	movs	r0, r0
	...

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b530      	push	{r4, r5, lr}
 80006f2:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f4:	2260      	movs	r2, #96	@ 0x60
 80006f6:	2100      	movs	r1, #0
 80006f8:	a806      	add	r0, sp, #24
 80006fa:	f7ff fe0b 	bl	8000314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fe:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000700:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	e9cd 3300 	strd	r3, r3, [sp]
 8000708:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800070c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000710:	f001 fb10 	bl	8001d34 <HAL_PWREx_ControlVoltageScaling>
 8000714:	b108      	cbz	r0, 800071a <SystemClock_Config+0x2a>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000716:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000718:	e7fe      	b.n	8000718 <SystemClock_Config+0x28>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071a:	4603      	mov	r3, r0
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800071c:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071e:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000722:	f44f 7180 	mov.w	r1, #256	@ 0x100
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000726:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8000780 <SystemClock_Config+0x90>
  RCC_OscInitStruct.PLL.PLLM = 1;
 800072a:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = 1;
 800072c:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072e:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000730:	230a      	movs	r3, #10
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000734:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000736:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073a:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073e:	e9cd 2219 	strd	r2, r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000742:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	9109      	str	r1, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f001 fd98 	bl	800227c <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	b108      	cbz	r0, 8000754 <SystemClock_Config+0x64>
 8000750:	b672      	cpsid	i
	while (1) {
 8000752:	e7fe      	b.n	8000752 <SystemClock_Config+0x62>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	251f      	movs	r5, #31
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2403      	movs	r4, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000758:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000760:	4668      	mov	r0, sp
 8000762:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	e9cd 5400 	strd	r5, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076c:	f001 fc20 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8000770:	b108      	cbz	r0, 8000776 <SystemClock_Config+0x86>
 8000772:	b672      	cpsid	i
	while (1) {
 8000774:	e7fe      	b.n	8000774 <SystemClock_Config+0x84>
}
 8000776:	b01f      	add	sp, #124	@ 0x7c
 8000778:	bd30      	pop	{r4, r5, pc}
 800077a:	bf00      	nop
 800077c:	f3af 8000 	nop.w
 8000780:	0000000c 	.word	0x0000000c
 8000784:	00000000 	.word	0x00000000

08000788 <main>:
{
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	b084      	sub	sp, #16
  HAL_Init();
 800078c:	f000 fa32 	bl	8000bf4 <HAL_Init>
  SystemClock_Config();
 8000790:	f7ff ffae 	bl	80006f0 <SystemClock_Config>
    HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	4b3e      	ldr	r3, [pc, #248]	@ (8000890 <main+0x108>)
    HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 8000798:	2052      	movs	r0, #82	@ 0x52
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800079e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80007a2:	f8c3 108c 	str.w	r1, [r3, #140]	@ 0x8c
 80007a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80007aa:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80007ae:	9101      	str	r1, [sp, #4]
 80007b0:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
    HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 80007b6:	4611      	mov	r1, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	f044 0401 	orr.w	r4, r4, #1
 80007bc:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
 80007c0:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 80007c4:	f004 0401 	and.w	r4, r4, #1
 80007c8:	9402      	str	r4, [sp, #8]
 80007ca:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80007cc:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 80007d0:	f044 0401 	orr.w	r4, r4, #1
 80007d4:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
 80007d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
  huart1.Instance = USART1;
 80007dc:	4c2d      	ldr	r4, [pc, #180]	@ (8000894 <main+0x10c>)
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	9303      	str	r3, [sp, #12]
 80007e4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 0, 0);
 80007e6:	f000 fa67 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel10_IRQn);
 80007ea:	2052      	movs	r0, #82	@ 0x52
 80007ec:	f000 faa0 	bl	8000d30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2053      	movs	r0, #83	@ 0x53
 80007f4:	4611      	mov	r1, r2
 80007f6:	f000 fa5f 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 80007fa:	2053      	movs	r0, #83	@ 0x53
 80007fc:	f000 fa98 	bl	8000d30 <HAL_NVIC_EnableIRQ>
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000800:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8000802:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000806:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8000808:	4823      	ldr	r0, [pc, #140]	@ (8000898 <main+0x110>)
  huart1.Init.BaudRate = 115200;
 800080a:	e9c4 1301 	strd	r1, r3, [r4, #4]
  huart1.Instance = USART1;
 800080e:	6020      	str	r0, [r4, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000810:	4620      	mov	r0, r4
  huart1.Init.Parity = UART_PARITY_NONE;
 8000812:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800081e:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000822:	f004 fca5 	bl	8005170 <HAL_UART_Init>
 8000826:	b108      	cbz	r0, 800082c <main+0xa4>
 8000828:	b672      	cpsid	i
	while (1) {
 800082a:	e7fe      	b.n	800082a <main+0xa2>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082c:	4601      	mov	r1, r0
 800082e:	4620      	mov	r0, r4
 8000830:	f004 fdfa 	bl	8005428 <HAL_UARTEx_SetTxFifoThreshold>
 8000834:	b108      	cbz	r0, 800083a <main+0xb2>
 8000836:	b672      	cpsid	i
	while (1) {
 8000838:	e7fe      	b.n	8000838 <main+0xb0>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083a:	4601      	mov	r1, r0
 800083c:	4620      	mov	r0, r4
 800083e:	f004 fe35 	bl	80054ac <HAL_UARTEx_SetRxFifoThreshold>
 8000842:	b108      	cbz	r0, 8000848 <main+0xc0>
 8000844:	b672      	cpsid	i
	while (1) {
 8000846:	e7fe      	b.n	8000846 <main+0xbe>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000848:	4620      	mov	r0, r4
 800084a:	f004 fdcf 	bl	80053ec <HAL_UARTEx_DisableFifoMode>
 800084e:	b108      	cbz	r0, 8000854 <main+0xcc>
 8000850:	b672      	cpsid	i
	while (1) {
 8000852:	e7fe      	b.n	8000852 <main+0xca>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000854:	f001 fa64 	bl	8001d20 <HAL_ICACHE_Enable>
 8000858:	b108      	cbz	r0, 800085e <main+0xd6>
 800085a:	b672      	cpsid	i
	while (1) {
 800085c:	e7fe      	b.n	800085c <main+0xd4>
	HAL_UART_Receive_DMA(&huart1, rxBuf, SIZE);
 800085e:	2240      	movs	r2, #64	@ 0x40
 8000860:	4620      	mov	r0, r4
 8000862:	490e      	ldr	r1, [pc, #56]	@ (800089c <main+0x114>)
 8000864:	f004 f98e 	bl	8004b84 <HAL_UART_Receive_DMA>
	uint8_t counter = 0x30;
 8000868:	2530      	movs	r5, #48	@ 0x30
 800086a:	4e0d      	ldr	r6, [pc, #52]	@ (80008a0 <main+0x118>)
		txBuf[7] = counter++;
 800086c:	1c6b      	adds	r3, r5, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b3a      	cmp	r3, #58	@ 0x3a
		HAL_UART_Transmit_DMA(&huart1, txBuf, SIZE);
 8000872:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000876:	4631      	mov	r1, r6
 8000878:	4620      	mov	r0, r4
		txBuf[7] = counter++;
 800087a:	71f5      	strb	r5, [r6, #7]
 800087c:	bf14      	ite	ne
 800087e:	461d      	movne	r5, r3
 8000880:	2530      	moveq	r5, #48	@ 0x30
		HAL_UART_Transmit_DMA(&huart1, txBuf, SIZE);
 8000882:	f004 f91f 	bl	8004ac4 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000);
 8000886:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800088a:	f000 f9f1 	bl	8000c70 <HAL_Delay>
		txBuf[7] = counter++;
 800088e:	e7ed      	b.n	800086c <main+0xe4>
 8000890:	46020c00 	.word	0x46020c00
 8000894:	200001d8 	.word	0x200001d8
 8000898:	40013800 	.word	0x40013800
 800089c:	2000006c 	.word	0x2000006c
 80008a0:	20000000 	.word	0x20000000

080008a4 <Error_Handler>:
 80008a4:	b672      	cpsid	i
	while (1) {
 80008a6:	e7fe      	b.n	80008a6 <Error_Handler+0x2>

080008a8 <HAL_MspInit>:

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80008a8:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <HAL_MspInit+0x20>)
{
 80008ac:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80008b2:	4302      	orrs	r2, r0
 80008b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80008b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008bc:	4003      	ands	r3, r0
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80008c4:	f000 b9e6 	b.w	8000c94 <HAL_NVIC_SetPriorityGrouping>
 80008c8:	46020c00 	.word	0x46020c00

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	2100      	movs	r1, #0
{
 80008d0:	4604      	mov	r4, r0
 80008d2:	b0d4      	sub	sp, #336	@ 0x150
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	22c0      	movs	r2, #192	@ 0xc0
 80008d6:	a824      	add	r0, sp, #144	@ 0x90
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80008dc:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80008e0:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e2:	f7ff fd17 	bl	8000314 <memset>
  if(huart->Instance==USART1)
 80008e6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a54 <HAL_UART_MspInit+0x188>)
 80008e8:	6822      	ldr	r2, [r4, #0]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d001      	beq.n	80008f2 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008ee:	b054      	add	sp, #336	@ 0x150
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008f2:	2201      	movs	r2, #1
 80008f4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f6:	a824      	add	r0, sp, #144	@ 0x90
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008f8:	e9cd 2324 	strd	r2, r3, [sp, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fc:	f002 fd0a 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8000900:	2800      	cmp	r0, #0
 8000902:	f040 808e 	bne.w	8000a22 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000906:	4b54      	ldr	r3, [pc, #336]	@ (8000a58 <HAL_UART_MspInit+0x18c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000908:	2107      	movs	r1, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 800090a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000910:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000914:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000918:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	484f      	ldr	r0, [pc, #316]	@ (8000a5c <HAL_UART_MspInit+0x190>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800091e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000922:	9201      	str	r2, [sp, #4]
 8000924:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    handle_GPDMA1_Channel11.Instance = GPDMA1_Channel11;
 800092a:	4d4d      	ldr	r5, [pc, #308]	@ (8000a60 <HAL_UART_MspInit+0x194>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	f042 0201 	orr.w	r2, r2, #1
 8000930:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8000934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000938:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	9302      	str	r3, [sp, #8]
 8000942:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000946:	9107      	str	r1, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f001 f85b 	bl	8001a0c <HAL_GPIO_Init>
    handle_GPDMA1_Channel11.Init.SrcBurstLength = 1;
 8000956:	2301      	movs	r3, #1
    handle_GPDMA1_Channel11.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8000958:	2219      	movs	r2, #25
    handle_GPDMA1_Channel11.Init.SrcBurstLength = 1;
 800095a:	e9c5 6308 	strd	r6, r3, [r5, #32]
    handle_GPDMA1_Channel11.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800095e:	e9c5 360a 	strd	r3, r6, [r5, #40]	@ 0x28
    handle_GPDMA1_Channel11.Instance = GPDMA1_Channel11;
 8000962:	4b40      	ldr	r3, [pc, #256]	@ (8000a64 <HAL_UART_MspInit+0x198>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel11) != HAL_OK)
 8000964:	4628      	mov	r0, r5
    handle_GPDMA1_Channel11.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000966:	e9c5 6602 	strd	r6, r6, [r5, #8]
    handle_GPDMA1_Channel11.Init.DestInc = DMA_DINC_FIXED;
 800096a:	e9c5 6604 	strd	r6, r6, [r5, #16]
    handle_GPDMA1_Channel11.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800096e:	e9c5 6606 	strd	r6, r6, [r5, #24]
    handle_GPDMA1_Channel11.Init.Mode = DMA_NORMAL;
 8000972:	e9c5 660c 	strd	r6, r6, [r5, #48]	@ 0x30
    handle_GPDMA1_Channel11.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8000976:	606a      	str	r2, [r5, #4]
    handle_GPDMA1_Channel11.Instance = GPDMA1_Channel11;
 8000978:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel11) != HAL_OK)
 800097a:	f000 fa4f 	bl	8000e1c <HAL_DMA_Init>
 800097e:	2800      	cmp	r0, #0
 8000980:	d164      	bne.n	8000a4c <HAL_UART_MspInit+0x180>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel11, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000982:	2110      	movs	r1, #16
 8000984:	4836      	ldr	r0, [pc, #216]	@ (8000a60 <HAL_UART_MspInit+0x194>)
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel11);
 8000986:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8000988:	65ec      	str	r4, [r5, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel11, DMA_CHANNEL_NPRIV) != HAL_OK)
 800098a:	f000 fc89 	bl	80012a0 <HAL_DMA_ConfigChannelAttributes>
 800098e:	2800      	cmp	r0, #0
 8000990:	d159      	bne.n	8000a46 <HAL_UART_MspInit+0x17a>
    NodeConfig.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8000992:	2021      	movs	r0, #33	@ 0x21
 8000994:	2118      	movs	r1, #24
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000996:	2300      	movs	r3, #0
    NodeConfig.Init.SrcBurstLength = 1;
 8000998:	2201      	movs	r2, #1
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT1;
 800099a:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
    NodeConfig.Init.Request = GPDMA1_REQUEST_USART1_RX;
 800099e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel10) != HAL_OK)
 80009a2:	4931      	ldr	r1, [pc, #196]	@ (8000a68 <HAL_UART_MspInit+0x19c>)
 80009a4:	a808      	add	r0, sp, #32
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a6:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80009aa:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80009ae:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    NodeConfig.Init.DestBurstLength = 1;
 80009b2:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
    NodeConfig.Init.Mode = DMA_NORMAL;
 80009b6:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
 80009ba:	9316      	str	r3, [sp, #88]	@ 0x58
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80009bc:	9319      	str	r3, [sp, #100]	@ 0x64
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80009be:	9317      	str	r3, [sp, #92]	@ 0x5c
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT1;
 80009c0:	9513      	str	r5, [sp, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel10) != HAL_OK)
 80009c2:	f000 fe45 	bl	8001650 <HAL_DMAEx_List_BuildNode>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d13a      	bne.n	8000a40 <HAL_UART_MspInit+0x174>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel10, NULL, &Node_GPDMA1_Channel10) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4a26      	ldr	r2, [pc, #152]	@ (8000a68 <HAL_UART_MspInit+0x19c>)
 80009ce:	4827      	ldr	r0, [pc, #156]	@ (8000a6c <HAL_UART_MspInit+0x1a0>)
 80009d0:	f000 fedc 	bl	800178c <HAL_DMAEx_List_InsertNode>
 80009d4:	bb88      	cbnz	r0, 8000a3a <HAL_UART_MspInit+0x16e>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel10) != HAL_OK)
 80009d6:	4825      	ldr	r0, [pc, #148]	@ (8000a6c <HAL_UART_MspInit+0x1a0>)
 80009d8:	f000 ff72 	bl	80018c0 <HAL_DMAEx_List_SetCircularMode>
 80009dc:	bb50      	cbnz	r0, 8000a34 <HAL_UART_MspInit+0x168>
    handle_GPDMA1_Channel10.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80009de:	2300      	movs	r3, #0
    handle_GPDMA1_Channel10.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80009e0:	2281      	movs	r2, #129	@ 0x81
    handle_GPDMA1_Channel10.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 80009e2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
    handle_GPDMA1_Channel10.Instance = GPDMA1_Channel10;
 80009e6:	4d22      	ldr	r5, [pc, #136]	@ (8000a70 <HAL_UART_MspInit+0x1a4>)
    handle_GPDMA1_Channel10.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80009e8:	e9c5 330e 	strd	r3, r3, [r5, #56]	@ 0x38
    handle_GPDMA1_Channel10.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80009ec:	e9c5 3211 	strd	r3, r2, [r5, #68]	@ 0x44
    handle_GPDMA1_Channel10.Instance = GPDMA1_Channel10;
 80009f0:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <HAL_UART_MspInit+0x1a8>)
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel10) != HAL_OK)
 80009f2:	4628      	mov	r0, r5
    handle_GPDMA1_Channel10.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 80009f4:	6429      	str	r1, [r5, #64]	@ 0x40
    handle_GPDMA1_Channel10.Instance = GPDMA1_Channel10;
 80009f6:	602b      	str	r3, [r5, #0]
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel10) != HAL_OK)
 80009f8:	f000 fcd8 	bl	80013ac <HAL_DMAEx_List_Init>
 80009fc:	b9b8      	cbnz	r0, 8000a2e <HAL_UART_MspInit+0x162>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel10, &List_GPDMA1_Channel10) != HAL_OK)
 80009fe:	491b      	ldr	r1, [pc, #108]	@ (8000a6c <HAL_UART_MspInit+0x1a0>)
 8000a00:	481b      	ldr	r0, [pc, #108]	@ (8000a70 <HAL_UART_MspInit+0x1a4>)
 8000a02:	f000 ffad 	bl	8001960 <HAL_DMAEx_List_LinkQ>
 8000a06:	b978      	cbnz	r0, 8000a28 <HAL_UART_MspInit+0x15c>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel10, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4819      	ldr	r0, [pc, #100]	@ (8000a70 <HAL_UART_MspInit+0x1a4>)
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel10);
 8000a0c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000a10:	65ec      	str	r4, [r5, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel10, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a12:	f000 fc45 	bl	80012a0 <HAL_DMA_ConfigChannelAttributes>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	f43f af69 	beq.w	80008ee <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000a1c:	f7ff ff42 	bl	80008a4 <Error_Handler>
}
 8000a20:	e765      	b.n	80008ee <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000a22:	f7ff ff3f 	bl	80008a4 <Error_Handler>
 8000a26:	e76e      	b.n	8000906 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8000a28:	f7ff ff3c 	bl	80008a4 <Error_Handler>
 8000a2c:	e7ec      	b.n	8000a08 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8000a2e:	f7ff ff39 	bl	80008a4 <Error_Handler>
 8000a32:	e7e4      	b.n	80009fe <HAL_UART_MspInit+0x132>
      Error_Handler();
 8000a34:	f7ff ff36 	bl	80008a4 <Error_Handler>
 8000a38:	e7d1      	b.n	80009de <HAL_UART_MspInit+0x112>
      Error_Handler();
 8000a3a:	f7ff ff33 	bl	80008a4 <Error_Handler>
 8000a3e:	e7ca      	b.n	80009d6 <HAL_UART_MspInit+0x10a>
      Error_Handler();
 8000a40:	f7ff ff30 	bl	80008a4 <Error_Handler>
 8000a44:	e7c1      	b.n	80009ca <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000a46:	f7ff ff2d 	bl	80008a4 <Error_Handler>
 8000a4a:	e7a2      	b.n	8000992 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000a4c:	f7ff ff2a 	bl	80008a4 <Error_Handler>
 8000a50:	e797      	b.n	8000982 <HAL_UART_MspInit+0xb6>
 8000a52:	bf00      	nop
 8000a54:	40013800 	.word	0x40013800
 8000a58:	46020c00 	.word	0x46020c00
 8000a5c:	42020000 	.word	0x42020000
 8000a60:	20000160 	.word	0x20000160
 8000a64:	400205d0 	.word	0x400205d0
 8000a68:	2000013c 	.word	0x2000013c
 8000a6c:	20000124 	.word	0x20000124
 8000a70:	200000ac 	.word	0x200000ac
 8000a74:	40020550 	.word	0x40020550

08000a78 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler>
 8000a7a:	bf00      	nop

08000a7c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <HardFault_Handler>
 8000a7e:	bf00      	nop

08000a80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler>
 8000a82:	bf00      	nop

08000a84 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <BusFault_Handler>
 8000a86:	bf00      	nop

08000a88 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler>
 8000a8a:	bf00      	nop

08000a8c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 b8d8 	b.w	8000c4c <HAL_IncTick>

08000a9c <GPDMA1_Channel10_IRQHandler>:
void GPDMA1_Channel10_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 8000a9c:	4801      	ldr	r0, [pc, #4]	@ (8000aa4 <GPDMA1_Channel10_IRQHandler+0x8>)
 8000a9e:	f000 bb3f 	b.w	8001120 <HAL_DMA_IRQHandler>
 8000aa2:	bf00      	nop
 8000aa4:	200000ac 	.word	0x200000ac

08000aa8 <GPDMA1_Channel11_IRQHandler>:
void GPDMA1_Channel11_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 8000aa8:	4801      	ldr	r0, [pc, #4]	@ (8000ab0 <GPDMA1_Channel11_IRQHandler+0x8>)
 8000aaa:	f000 bb39 	b.w	8001120 <HAL_DMA_IRQHandler>
 8000aae:	bf00      	nop
 8000ab0:	20000160 	.word	0x20000160

08000ab4 <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ab4:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_MSISON;
 8000ab6:	2101      	movs	r1, #1
{
 8000ab8:	b410      	push	{r4}

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aba:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000abe:	480e      	ldr	r0, [pc, #56]	@ (8000af8 <SystemInit+0x44>)
 8000ac0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  RCC->CR = RCC_CR_MSISON;
 8000acc:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <SystemInit+0x48>)
 8000ace:	6019      	str	r1, [r3, #0]
  RCC->CFGR1 = 0U;
 8000ad0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ad2:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000ad4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000ad6:	6819      	ldr	r1, [r3, #0]
 8000ad8:	f021 51a8 	bic.w	r1, r1, #352321536	@ 0x15000000
 8000adc:	f421 2110 	bic.w	r1, r1, #589824	@ 0x90000
 8000ae0:	6019      	str	r1, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8000ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ae4:	6819      	ldr	r1, [r3, #0]
 8000ae6:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000aea:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0U;
 8000aec:	651a      	str	r2, [r3, #80]	@ 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aee:	6084      	str	r4, [r0, #8]
  #endif
}
 8000af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00
 8000afc:	46020c00 	.word	0x46020c00

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b38 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b04:	f7ff ffd6 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b0a:	e003      	b.n	8000b14 <LoopCopyDataInit>

08000b0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b12:	3104      	adds	r1, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b14:	480a      	ldr	r0, [pc, #40]	@ (8000b40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b1c:	d3f6      	bcc.n	8000b0c <CopyDataInit>
	ldr	r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b20:	e002      	b.n	8000b28 <LoopFillZerobss>

08000b22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b24:	f842 3b04 	str.w	r3, [r2], #4

08000b28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <LoopForever+0x16>)
	cmp	r2, r3
 8000b2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b2c:	d3f9      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f7ff fbc9 	bl	80002c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fe29 	bl	8000788 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b38:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000b3c:	08005658 	.word	0x08005658
	ldr	r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b44:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 8000b48:	20000050 	.word	0x20000050
	ldr	r3, = _ebss
 8000b4c:	20000270 	.word	0x20000270

08000b50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_IRQHandler>
	...

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000b56:	4e24      	ldr	r6, [pc, #144]	@ (8000be8 <HAL_InitTick+0x94>)
 8000b58:	7832      	ldrb	r2, [r6, #0]
 8000b5a:	b1ea      	cbz	r2, 8000b98 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000b5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b60:	691c      	ldr	r4, [r3, #16]
 8000b62:	4605      	mov	r5, r0
 8000b64:	f014 0404 	ands.w	r4, r4, #4
 8000b68:	d018      	beq.n	8000b9c <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000b6a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b6e:	fbb1 f2f2 	udiv	r2, r1, r2
 8000b72:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <HAL_InitTick+0x98>)
 8000b74:	681c      	ldr	r4, [r3, #0]
 8000b76:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f000 f8e6 	bl	8000d4c <HAL_SYSTICK_Config>
 8000b80:	4604      	mov	r4, r0
 8000b82:	b948      	cbnz	r0, 8000b98 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	4602      	mov	r2, r0
 8000b86:	4629      	mov	r1, r5
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b8c:	f000 f894 	bl	8000cb8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000b90:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <HAL_InitTick+0x9c>)
 8000b92:	4620      	mov	r0, r4
 8000b94:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000b96:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000b98:	2001      	movs	r0, #1
}
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000b9c:	f000 f924 	bl	8000de8 <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 8000ba0:	2801      	cmp	r0, #1
 8000ba2:	d00d      	beq.n	8000bc0 <HAL_InitTick+0x6c>
 8000ba4:	2802      	cmp	r0, #2
 8000ba6:	d015      	beq.n	8000bd4 <HAL_InitTick+0x80>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d1e6      	bne.n	8000b7a <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000bac:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000bb0:	7831      	ldrb	r1, [r6, #0]
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <HAL_InitTick+0x98>)
 8000bb4:	fbb2 f2f1 	udiv	r2, r2, r1
 8000bb8:	681c      	ldr	r4, [r3, #0]
 8000bba:	fbb4 f4f2 	udiv	r4, r4, r2
        break;
 8000bbe:	e7dc      	b.n	8000b7a <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000bc0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bc4:	7831      	ldrb	r1, [r6, #0]
 8000bc6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000bca:	fbb2 f2f1 	udiv	r2, r2, r1
 8000bce:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8000bd2:	e7d2      	b.n	8000b7a <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000bd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bd8:	7831      	ldrb	r1, [r6, #0]
 8000bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bde:	fbb2 f2f1 	udiv	r2, r2, r1
 8000be2:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
 8000be6:	e7c8      	b.n	8000b7a <HAL_InitTick+0x26>
 8000be8:	20000044 	.word	0x20000044
 8000bec:	20000040 	.word	0x20000040
 8000bf0:	20000048 	.word	0x20000048

08000bf4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4a11      	ldr	r2, [pc, #68]	@ (8000c3c <HAL_Init+0x48>)
{
 8000bf6:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c00:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c02:	f000 f847 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c06:	f001 f945 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c40 <HAL_Init+0x4c>)
 8000c0e:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <HAL_Init+0x50>)
 8000c10:	6a12      	ldr	r2, [r2, #32]
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <HAL_Init+0x54>)
 8000c14:	f002 020f 	and.w	r2, r2, #15
 8000c18:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c1a:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c1c:	40d3      	lsrs	r3, r2
 8000c1e:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c20:	f000 f8a4 	bl	8000d6c <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff ff95 	bl	8000b54 <HAL_InitTick>
 8000c2a:	b110      	cbz	r0, 8000c32 <HAL_Init+0x3e>
    return HAL_ERROR;
 8000c2c:	2401      	movs	r4, #1
}
 8000c2e:	4620      	mov	r0, r4
 8000c30:	bd10      	pop	{r4, pc}
 8000c32:	4604      	mov	r4, r0
  HAL_MspInit();
 8000c34:	f7ff fe38 	bl	80008a8 <HAL_MspInit>
}
 8000c38:	4620      	mov	r0, r4
 8000c3a:	bd10      	pop	{r4, pc}
 8000c3c:	40022000 	.word	0x40022000
 8000c40:	46020c00 	.word	0x46020c00
 8000c44:	08005590 	.word	0x08005590
 8000c48:	20000040 	.word	0x20000040

08000c4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c4c:	4a03      	ldr	r2, [pc, #12]	@ (8000c5c <HAL_IncTick+0x10>)
 8000c4e:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <HAL_IncTick+0x14>)
 8000c50:	6811      	ldr	r1, [r2, #0]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	440b      	add	r3, r1
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000026c 	.word	0x2000026c
 8000c60:	20000044 	.word	0x20000044

08000c64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c64:	4b01      	ldr	r3, [pc, #4]	@ (8000c6c <HAL_GetTick+0x8>)
 8000c66:	6818      	ldr	r0, [r3, #0]
}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000026c 	.word	0x2000026c

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b538      	push	{r3, r4, r5, lr}
 8000c72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fff6 	bl	8000c64 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c78:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000c7a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000c7c:	d002      	beq.n	8000c84 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <HAL_Delay+0x20>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c84:	f7ff ffee 	bl	8000c64 <HAL_GetTick>
 8000c88:	1b40      	subs	r0, r0, r5
 8000c8a:	42a0      	cmp	r0, r4
 8000c8c:	d3fa      	bcc.n	8000c84 <HAL_Delay+0x14>
  {
  }
}
 8000c8e:	bd38      	pop	{r3, r4, r5, pc}
 8000c90:	20000044 	.word	0x20000044

08000c94 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c94:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4906      	ldr	r1, [pc, #24]	@ (8000cb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000cb0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cba:	b500      	push	{lr}
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc2:	f1c3 0e07 	rsb	lr, r3, #7
 8000cc6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cce:	bf28      	it	cs
 8000cd0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd4:	f1bc 0f06 	cmp.w	ip, #6
 8000cd8:	d91c      	bls.n	8000d14 <HAL_NVIC_SetPriority+0x5c>
 8000cda:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ce2:	fa03 f30c 	lsl.w	r3, r3, ip
 8000ce6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cee:	fa03 f30e 	lsl.w	r3, r3, lr
 8000cf2:	ea21 0303 	bic.w	r3, r1, r3
 8000cf6:	fa03 f30c 	lsl.w	r3, r3, ip
 8000cfa:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000d02:	db0a      	blt.n	8000d1a <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000d08:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000d0c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d10:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d14:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	4694      	mov	ip, r2
 8000d18:	e7e7      	b.n	8000cea <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <HAL_NVIC_SetPriority+0x74>)
 8000d1c:	f000 000f 	and.w	r0, r0, #15
 8000d20:	4402      	add	r2, r0
 8000d22:	7613      	strb	r3, [r2, #24]
 8000d24:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d28:	e000ed00 	.word	0xe000ed00
 8000d2c:	e000ecfc 	.word	0xe000ecfc

08000d30 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d30:	2800      	cmp	r0, #0
 8000d32:	db07      	blt.n	8000d44 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d34:	2301      	movs	r3, #1
 8000d36:	f000 011f 	and.w	r1, r0, #31
 8000d3a:	4a03      	ldr	r2, [pc, #12]	@ (8000d48 <HAL_NVIC_EnableIRQ+0x18>)
 8000d3c:	0940      	lsrs	r0, r0, #5
 8000d3e:	408b      	lsls	r3, r1
 8000d40:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	1e43      	subs	r3, r0, #1
 8000d4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d52:	d209      	bcs.n	8000d68 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000d54:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000d58:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000d5a:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 8000d5c:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000d5e:	6913      	ldr	r3, [r2, #16]
 8000d60:	f043 0303 	orr.w	r3, r3, #3
 8000d64:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 8000d66:	4770      	bx	lr
    return (1UL);
 8000d68:	2001      	movs	r0, #1
}
 8000d6a:	4770      	bx	lr

08000d6c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000d6c:	2804      	cmp	r0, #4
 8000d6e:	d813      	bhi.n	8000d98 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 8000d70:	e8df f000 	tbb	[pc, r0]
 8000d74:	12031a2a 	.word	0x12031a2a
 8000d78:	13          	.byte	0x13
 8000d79:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000d7a:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8000d7e:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000d80:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000d82:	f023 0304 	bic.w	r3, r3, #4
 8000d86:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000d88:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8000d8c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8000d98:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000d9a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000d9e:	6913      	ldr	r3, [r2, #16]
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6113      	str	r3, [r2, #16]
      break;
 8000da6:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000da8:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8000dac:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000dae:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000db0:	f023 0304 	bic.w	r3, r3, #4
 8000db4:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000db6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8000dba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000dbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000dc6:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000dc8:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8000dcc:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000dd0:	f023 0304 	bic.w	r3, r3, #4
 8000dd4:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000dd6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8000dda:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000de2:	4770      	bx	lr
 8000de4:	46020c00 	.word	0x46020c00

08000de8 <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000de8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	075b      	lsls	r3, r3, #29
 8000df0:	d410      	bmi.n	8000e14 <HAL_SYSTICK_GetCLKSourceConfig+0x2c>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_SYSTICK_GetCLKSourceConfig+0x30>)
 8000df4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000df8:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000

    switch (systick_rcc_source)
 8000dfc:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8000e00:	d006      	beq.n	8000e10 <HAL_SYSTICK_GetCLKSourceConfig+0x28>
 8000e02:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 8000e06:	fab0 f080 	clz	r0, r0
 8000e0a:	0940      	lsrs	r0, r0, #5
 8000e0c:	0040      	lsls	r0, r0, #1
 8000e0e:	4770      	bx	lr
 8000e10:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 8000e12:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000e14:	2004      	movs	r0, #4
 8000e16:	4770      	bx	lr
 8000e18:	46020c00 	.word	0x46020c00

08000e1c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	4604      	mov	r4, r0
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ff20 	bl	8000c64 <HAL_GetTick>

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	f000 812a 	beq.w	800107e <HAL_DMA_Init+0x262>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e2a:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 8000e2c:	2100      	movs	r1, #0
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8000e2e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000e30:	f884 104c 	strb.w	r1, [r4, #76]	@ 0x4c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e34:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	4605      	mov	r5, r0
 8000e3c:	f042 0206 	orr.w	r2, r2, #6
 8000e40:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8000e42:	e006      	b.n	8000e52 <HAL_DMA_Init+0x36>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8000e44:	f7ff ff0e 	bl	8000c64 <HAL_GetTick>
 8000e48:	1b43      	subs	r3, r0, r5
 8000e4a:	2b05      	cmp	r3, #5
 8000e4c:	f200 8112 	bhi.w	8001074 <HAL_DMA_Init+0x258>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	695a      	ldr	r2, [r3, #20]
 8000e54:	07d2      	lsls	r2, r2, #31
 8000e56:	d4f5      	bmi.n	8000e44 <HAL_DMA_Init+0x28>

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8000e58:	695a      	ldr	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8000e5a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8000e5c:	f422 0243 	bic.w	r2, r2, #12779520	@ 0xc30000
 8000e60:	e9d4 1507 	ldrd	r1, r5, [r4, #28]
 8000e64:	432a      	orrs	r2, r5
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8000e66:	6925      	ldr	r5, [r4, #16]
 8000e68:	4301      	orrs	r1, r0
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8000e6a:	615a      	str	r2, [r3, #20]
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8000e6c:	69a2      	ldr	r2, [r4, #24]
 8000e6e:	4329      	orrs	r1, r5

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8000e70:	68a0      	ldr	r0, [r4, #8]
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8000e72:	4311      	orrs	r1, r2
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8000e74:	6b22      	ldr	r2, [r4, #48]	@ 0x30

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e76:	68e5      	ldr	r5, [r4, #12]
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8000e78:	4310      	orrs	r0, r2
 8000e7a:	6862      	ldr	r2, [r4, #4]
 8000e7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000e80:	4310      	orrs	r0, r2
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8000e82:	4a83      	ldr	r2, [pc, #524]	@ (8001090 <HAL_DMA_Init+0x274>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	f000 80a5 	beq.w	8000fd4 <HAL_DMA_Init+0x1b8>
 8000e8a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	f000 80a0 	beq.w	8000fd4 <HAL_DMA_Init+0x1b8>
 8000e94:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000e98:	3280      	adds	r2, #128	@ 0x80
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	f000 809a 	beq.w	8000fd4 <HAL_DMA_Init+0x1b8>
 8000ea0:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	f000 8095 	beq.w	8000fd4 <HAL_DMA_Init+0x1b8>
 8000eaa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000eae:	3280      	adds	r2, #128	@ 0x80
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	f000 808f 	beq.w	8000fd4 <HAL_DMA_Init+0x1b8>
 8000eb6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	f000 808a 	beq.w	8000fd4 <HAL_DMA_Init+0x1b8>
 8000ec0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000ec4:	3280      	adds	r2, #128	@ 0x80
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f000 8084 	beq.w	8000fd4 <HAL_DMA_Init+0x1b8>
 8000ecc:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d07f      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000ed4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000ed8:	3280      	adds	r2, #128	@ 0x80
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d07a      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000ede:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d076      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000ee6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000eea:	3280      	adds	r2, #128	@ 0x80
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d071      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000ef0:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d06d      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000ef8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000efc:	3280      	adds	r2, #128	@ 0x80
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d068      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f02:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d064      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f0a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000f0e:	3280      	adds	r2, #128	@ 0x80
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d05f      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f14:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d05b      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f1c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000f20:	3280      	adds	r2, #128	@ 0x80
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d056      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f26:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d052      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f2e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000f32:	3280      	adds	r2, #128	@ 0x80
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d04d      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f38:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d049      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f40:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000f44:	3280      	adds	r2, #128	@ 0x80
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d044      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f4a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d040      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f52:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000f56:	3280      	adds	r2, #128	@ 0x80
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d03b      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f5c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d037      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f64:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000f68:	3280      	adds	r2, #128	@ 0x80
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d032      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f6e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d02e      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f76:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000f7a:	3280      	adds	r2, #128	@ 0x80
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d029      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f80:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d025      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f88:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000f8c:	3280      	adds	r2, #128	@ 0x80
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d020      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f92:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01c      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000f9a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8000f9e:	3280      	adds	r2, #128	@ 0x80
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d017      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
 8000fa4:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d013      	beq.n	8000fd4 <HAL_DMA_Init+0x1b8>
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8000fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fae:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8000fb2:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8000fb6:	ea42 0201 	orr.w	r2, r2, r1
 8000fba:	641a      	str	r2, [r3, #64]	@ 0x40
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fbc:	d002      	beq.n	8000fc4 <HAL_DMA_Init+0x1a8>
    {
      tmpreg |= DMA_CTR2_DREQ;
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8000fbe:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8000fc2:	d05e      	beq.n	8001082 <HAL_DMA_Init+0x266>
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8000fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000fc6:	4933      	ldr	r1, [pc, #204]	@ (8001094 <HAL_DMA_Init+0x278>)
 8000fc8:	400a      	ands	r2, r1
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8000fca:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8000fcc:	4302      	orrs	r2, r0
 8000fce:	645a      	str	r2, [r3, #68]	@ 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8000fd0:	6499      	str	r1, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8000fd2:	e045      	b.n	8001060 <HAL_DMA_Init+0x244>
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8000fd4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8000fd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8000fd8:	3a01      	subs	r2, #1
 8000fda:	0512      	lsls	r2, r2, #20
 8000fdc:	f002 727c 	and.w	r2, r2, #66060288	@ 0x3f00000
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8000fe0:	430a      	orrs	r2, r1
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8000fe2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8000fe4:	4332      	orrs	r2, r6
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8000fe6:	3901      	subs	r1, #1
 8000fe8:	0109      	lsls	r1, r1, #4
 8000fea:	f401 717c 	and.w	r1, r1, #1008	@ 0x3f0
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ff2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8000ff6:	f001 2180 	and.w	r1, r1, #2147516416	@ 0x80008000
 8000ffa:	ea42 0201 	orr.w	r2, r2, r1
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001000:	d042      	beq.n	8001088 <HAL_DMA_Init+0x26c>
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8001002:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8001006:	d03c      	beq.n	8001082 <HAL_DMA_Init+0x266>
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8001008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800100a:	4922      	ldr	r1, [pc, #136]	@ (8001094 <HAL_DMA_Init+0x278>)
 800100c:	400a      	ands	r2, r1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800100e:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8001010:	4302      	orrs	r2, r0
 8001012:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8001014:	4a20      	ldr	r2, [pc, #128]	@ (8001098 <HAL_DMA_Init+0x27c>)
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8001016:	6499      	str	r1, [r3, #72]	@ 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8001018:	4293      	cmp	r3, r2
 800101a:	d01e      	beq.n	800105a <HAL_DMA_Init+0x23e>
 800101c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001020:	4293      	cmp	r3, r2
 8001022:	d01a      	beq.n	800105a <HAL_DMA_Init+0x23e>
 8001024:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8001028:	3280      	adds	r2, #128	@ 0x80
 800102a:	4293      	cmp	r3, r2
 800102c:	d015      	beq.n	800105a <HAL_DMA_Init+0x23e>
 800102e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001032:	4293      	cmp	r3, r2
 8001034:	d011      	beq.n	800105a <HAL_DMA_Init+0x23e>
 8001036:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800103a:	3280      	adds	r2, #128	@ 0x80
 800103c:	4293      	cmp	r3, r2
 800103e:	d00c      	beq.n	800105a <HAL_DMA_Init+0x23e>
 8001040:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001044:	4293      	cmp	r3, r2
 8001046:	d008      	beq.n	800105a <HAL_DMA_Init+0x23e>
 8001048:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800104c:	3280      	adds	r2, #128	@ 0x80
 800104e:	4293      	cmp	r3, r2
 8001050:	d003      	beq.n	800105a <HAL_DMA_Init+0x23e>
 8001052:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001056:	4293      	cmp	r3, r2
 8001058:	d102      	bne.n	8001060 <HAL_DMA_Init+0x244>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800105a:	2200      	movs	r2, #0
 800105c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800105e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001060:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001062:	2101      	movs	r1, #1
  hdma->Mode = hdma->Init.Mode;
 8001064:	6b65      	ldr	r5, [r4, #52]	@ 0x34
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001066:	67da      	str	r2, [r3, #124]	@ 0x7c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001068:	65a2      	str	r2, [r4, #88]	@ 0x58
  hdma->State = HAL_DMA_STATE_READY;
 800106a:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
  return HAL_OK;
 800106e:	4610      	mov	r0, r2
  hdma->Mode = hdma->Init.Mode;
 8001070:	6525      	str	r5, [r4, #80]	@ 0x50
}
 8001072:	bd70      	pop	{r4, r5, r6, pc}
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001074:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 8001076:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001078:	65a2      	str	r2, [r4, #88]	@ 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 800107a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 800107e:	2001      	movs	r0, #1
}
 8001080:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg |= DMA_CTR2_SWREQ;
 8001082:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8001086:	e7bf      	b.n	8001008 <HAL_DMA_Init+0x1ec>
      tmpreg |= DMA_CTR2_DREQ;
 8001088:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 800108c:	e7bc      	b.n	8001008 <HAL_DMA_Init+0x1ec>
 800108e:	bf00      	nop
 8001090:	40020050 	.word	0x40020050
 8001094:	3cc03180 	.word	0x3cc03180
 8001098:	40020650 	.word	0x40020650

0800109c <HAL_DMA_Start_IT>:
  if (hdma == NULL)
 800109c:	2800      	cmp	r0, #0
 800109e:	d03d      	beq.n	800111c <HAL_DMA_Start_IT+0x80>
{
 80010a0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80010a2:	f890 404c 	ldrb.w	r4, [r0, #76]	@ 0x4c
 80010a6:	2c01      	cmp	r4, #1
 80010a8:	d035      	beq.n	8001116 <HAL_DMA_Start_IT+0x7a>
 80010aa:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80010ac:	f890 4054 	ldrb.w	r4, [r0, #84]	@ 0x54
  __HAL_LOCK(hdma);
 80010b0:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hdma->State == HAL_DMA_STATE_READY)
 80010b4:	42ac      	cmp	r4, r5
 80010b6:	d126      	bne.n	8001106 <HAL_DMA_Start_IT+0x6a>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b8:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80010ba:	f04f 0c02 	mov.w	ip, #2
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80010be:	f44f 47fe 	mov.w	r7, #32512	@ 0x7f00
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80010c2:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80010c4:	f880 c054 	strb.w	ip, [r0, #84]	@ 0x54
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c8:	6585      	str	r5, [r0, #88]	@ 0x58
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80010ca:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
    if (hdma->XferHalfCpltCallback != NULL)
 80010cc:	6e46      	ldr	r6, [r0, #100]	@ 0x64
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80010ce:	f363 050f 	bfi	r5, r3, #0, #16
 80010d2:	64a5      	str	r5, [r4, #72]	@ 0x48
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80010d4:	60e7      	str	r7, [r4, #12]
  hdma->Instance->CSAR = SrcAddress;
 80010d6:	64e1      	str	r1, [r4, #76]	@ 0x4c
  hdma->Instance->CDAR = DstAddress;
 80010d8:	6522      	str	r2, [r4, #80]	@ 0x50
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80010da:	6963      	ldr	r3, [r4, #20]
 80010dc:	f443 43ba 	orr.w	r3, r3, #23808	@ 0x5d00
 80010e0:	6163      	str	r3, [r4, #20]
    if (hdma->XferHalfCpltCallback != NULL)
 80010e2:	b11e      	cbz	r6, 80010ec <HAL_DMA_Start_IT+0x50>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80010e4:	6963      	ldr	r3, [r4, #20]
 80010e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ea:	6163      	str	r3, [r4, #20]
    if (hdma->XferSuspendCallback != NULL)
 80010ec:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80010ee:	b11b      	cbz	r3, 80010f8 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80010f0:	6963      	ldr	r3, [r4, #20]
 80010f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010f6:	6163      	str	r3, [r4, #20]
    __HAL_DMA_ENABLE(hdma);
 80010f8:	6963      	ldr	r3, [r4, #20]
  return HAL_OK;
 80010fa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6163      	str	r3, [r4, #20]
}
 8001102:	bcf0      	pop	{r4, r5, r6, r7}
 8001104:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 8001106:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001108:	2240      	movs	r2, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 800110a:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800110e:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8001110:	bcf0      	pop	{r4, r5, r6, r7}
    return HAL_ERROR;
 8001112:	2001      	movs	r0, #1
}
 8001114:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001116:	2002      	movs	r0, #2
}
 8001118:	bcf0      	pop	{r4, r5, r6, r7}
 800111a:	4770      	bx	lr
    return HAL_ERROR;
 800111c:	2001      	movs	r0, #1
}
 800111e:	4770      	bx	lr

08001120 <HAL_DMA_IRQHandler>:
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001120:	2101      	movs	r1, #1
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001122:	6803      	ldr	r3, [r0, #0]
{
 8001124:	b510      	push	{r4, lr}
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001126:	f3c3 020b 	ubfx	r2, r3, #0, #12
{
 800112a:	4604      	mov	r4, r0
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800112c:	f423 607f 	bic.w	r0, r3, #4080	@ 0xff0
 8001130:	f020 000f 	bic.w	r0, r0, #15
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001134:	3a50      	subs	r2, #80	@ 0x50
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001136:	68c0      	ldr	r0, [r0, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001138:	f3c2 12c4 	ubfx	r2, r2, #7, #5
 800113c:	4091      	lsls	r1, r2
  if (global_active_flag_ns == 0U)
 800113e:	4201      	tst	r1, r0
 8001140:	f000 80a5 	beq.w	800128e <HAL_DMA_IRQHandler+0x16e>
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	0552      	lsls	r2, r2, #21
 8001148:	d509      	bpl.n	800115e <HAL_DMA_IRQHandler+0x3e>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800114a:	695a      	ldr	r2, [r3, #20]
 800114c:	0550      	lsls	r0, r2, #21
 800114e:	d506      	bpl.n	800115e <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001150:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001154:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001156:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001158:	f042 0201 	orr.w	r2, r2, #1
 800115c:	65a2      	str	r2, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	0511      	lsls	r1, r2, #20
 8001162:	d509      	bpl.n	8001178 <HAL_DMA_IRQHandler+0x58>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	0512      	lsls	r2, r2, #20
 8001168:	d506      	bpl.n	8001178 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800116a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800116e:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001170:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001172:	f042 0202 	orr.w	r2, r2, #2
 8001176:	65a2      	str	r2, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	04d0      	lsls	r0, r2, #19
 800117c:	d509      	bpl.n	8001192 <HAL_DMA_IRQHandler+0x72>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	04d1      	lsls	r1, r2, #19
 8001182:	d506      	bpl.n	8001192 <HAL_DMA_IRQHandler+0x72>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001184:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001188:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800118a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800118c:	f042 0204 	orr.w	r2, r2, #4
 8001190:	65a2      	str	r2, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	0452      	lsls	r2, r2, #17
 8001196:	d509      	bpl.n	80011ac <HAL_DMA_IRQHandler+0x8c>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	0450      	lsls	r0, r2, #17
 800119c:	d506      	bpl.n	80011ac <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800119e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011a2:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80011a4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80011a6:	f042 0208 	orr.w	r2, r2, #8
 80011aa:	65a2      	str	r2, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	0591      	lsls	r1, r2, #22
 80011b0:	d50a      	bpl.n	80011c8 <HAL_DMA_IRQHandler+0xa8>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	0592      	lsls	r2, r2, #22
 80011b6:	d507      	bpl.n	80011c8 <HAL_DMA_IRQHandler+0xa8>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80011b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
      if (hdma->XferHalfCpltCallback != NULL)
 80011bc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80011be:	60d9      	str	r1, [r3, #12]
      if (hdma->XferHalfCpltCallback != NULL)
 80011c0:	b112      	cbz	r2, 80011c8 <HAL_DMA_IRQHandler+0xa8>
        hdma->XferHalfCpltCallback(hdma);
 80011c2:	4620      	mov	r0, r4
 80011c4:	4790      	blx	r2
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	0490      	lsls	r0, r2, #18
 80011cc:	d511      	bpl.n	80011f2 <HAL_DMA_IRQHandler+0xd2>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	0491      	lsls	r1, r2, #18
 80011d2:	d50e      	bpl.n	80011f2 <HAL_DMA_IRQHandler+0xd2>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80011d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011d8:	60da      	str	r2, [r3, #12]
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80011da:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 80011de:	2a04      	cmp	r2, #4
 80011e0:	d03d      	beq.n	800125e <HAL_DMA_IRQHandler+0x13e>
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80011e2:	2105      	movs	r1, #5
        if (hdma->XferSuspendCallback != NULL)
 80011e4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80011e6:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
        if (hdma->XferSuspendCallback != NULL)
 80011ea:	b112      	cbz	r2, 80011f2 <HAL_DMA_IRQHandler+0xd2>
          hdma->XferSuspendCallback(hdma);
 80011ec:	4620      	mov	r0, r4
 80011ee:	4790      	blx	r2
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	05d0      	lsls	r0, r2, #23
 80011f6:	d518      	bpl.n	800122a <HAL_DMA_IRQHandler+0x10a>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	05d1      	lsls	r1, r2, #23
 80011fc:	d515      	bpl.n	800122a <HAL_DMA_IRQHandler+0x10a>
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80011fe:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001200:	0612      	lsls	r2, r2, #24
 8001202:	d545      	bpl.n	8001290 <HAL_DMA_IRQHandler+0x170>
        if (hdma->Instance->CLLR == 0U)
 8001204:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001206:	b932      	cbnz	r2, 8001216 <HAL_DMA_IRQHandler+0xf6>
          if (hdma->Instance->CBR1 == 0U)
 8001208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800120a:	b922      	cbnz	r2, 8001216 <HAL_DMA_IRQHandler+0xf6>
            hdma->State = HAL_DMA_STATE_READY;
 800120c:	2201      	movs	r2, #1
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800120e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
            hdma->State = HAL_DMA_STATE_READY;
 8001210:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001214:	730a      	strb	r2, [r1, #12]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001216:	f44f 7040 	mov.w	r0, #768	@ 0x300
      __HAL_UNLOCK(hdma);
 800121a:	2100      	movs	r1, #0
      if (hdma->XferCpltCallback != NULL)
 800121c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800121e:	60d8      	str	r0, [r3, #12]
      __HAL_UNLOCK(hdma);
 8001220:	f884 104c 	strb.w	r1, [r4, #76]	@ 0x4c
      if (hdma->XferCpltCallback != NULL)
 8001224:	b10a      	cbz	r2, 800122a <HAL_DMA_IRQHandler+0x10a>
        hdma->XferCpltCallback(hdma);
 8001226:	4620      	mov	r0, r4
 8001228:	4790      	blx	r2
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800122a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800122c:	2b00      	cmp	r3, #0
 800122e:	d02e      	beq.n	800128e <HAL_DMA_IRQHandler+0x16e>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001230:	6822      	ldr	r2, [r4, #0]
    hdma->State = HAL_DMA_STATE_READY;
 8001232:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001234:	6953      	ldr	r3, [r2, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001236:	6d20      	ldr	r0, [r4, #80]	@ 0x50
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(hdma);
 800123e:	2200      	movs	r2, #0
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001240:	0603      	lsls	r3, r0, #24
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001242:	bf48      	it	mi
 8001244:	6f63      	ldrmi	r3, [r4, #116]	@ 0x74
    hdma->State = HAL_DMA_STATE_READY;
 8001246:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800124a:	bf48      	it	mi
 800124c:	7319      	strbmi	r1, [r3, #12]
    if (hdma->XferErrorCallback != NULL)
 800124e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
    __HAL_UNLOCK(hdma);
 8001250:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    if (hdma->XferErrorCallback != NULL)
 8001254:	b1db      	cbz	r3, 800128e <HAL_DMA_IRQHandler+0x16e>
      hdma->XferErrorCallback(hdma);
 8001256:	4620      	mov	r0, r4
}
 8001258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hdma->XferErrorCallback(hdma);
 800125c:	4718      	bx	r3
        hdma->State = HAL_DMA_STATE_READY;
 800125e:	2101      	movs	r1, #1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001260:	695a      	ldr	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001262:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001264:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001268:	615a      	str	r2, [r3, #20]
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	f042 0202 	orr.w	r2, r2, #2
 8001270:	615a      	str	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001272:	0602      	lsls	r2, r0, #24
        hdma->State = HAL_DMA_STATE_READY;
 8001274:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001278:	d503      	bpl.n	8001282 <HAL_DMA_IRQHandler+0x162>
          hdma->Instance->CBR1 = 0U;
 800127a:	2200      	movs	r2, #0
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800127c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800127e:	7301      	strb	r1, [r0, #12]
          hdma->Instance->CBR1 = 0U;
 8001280:	649a      	str	r2, [r3, #72]	@ 0x48
        __HAL_UNLOCK(hdma);
 8001282:	2200      	movs	r2, #0
        if (hdma->XferAbortCallback != NULL)
 8001284:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        __HAL_UNLOCK(hdma);
 8001286:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
        if (hdma->XferAbortCallback != NULL)
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1e3      	bne.n	8001256 <HAL_DMA_IRQHandler+0x136>
}
 800128e:	bd10      	pop	{r4, pc}
        if (hdma->Instance->CBR1 == 0U)
 8001290:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001292:	2a00      	cmp	r2, #0
 8001294:	d1bf      	bne.n	8001216 <HAL_DMA_IRQHandler+0xf6>
          hdma->State = HAL_DMA_STATE_READY;
 8001296:	2201      	movs	r2, #1
 8001298:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800129c:	e7bb      	b.n	8001216 <HAL_DMA_IRQHandler+0xf6>
 800129e:	bf00      	nop

080012a0 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80012a0:	b1c0      	cbz	r0, 80012d4 <HAL_DMA_ConfigChannelAttributes+0x34>
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80012a2:	06cb      	lsls	r3, r1, #27
 80012a4:	d514      	bpl.n	80012d0 <HAL_DMA_ConfigChannelAttributes+0x30>
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80012a6:	f04f 0c01 	mov.w	ip, #1
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80012aa:	6803      	ldr	r3, [r0, #0]
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80012ac:	f001 0111 	and.w	r1, r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80012b0:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80012b4:	3a50      	subs	r2, #80	@ 0x50
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80012b6:	f36f 030b 	bfc	r3, #0, #12
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80012ba:	2911      	cmp	r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80012bc:	f3c2 12c4 	ubfx	r2, r2, #7, #5
      p_dma_instance->PRIVCFGR |= channel_idx;
 80012c0:	6859      	ldr	r1, [r3, #4]
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80012c2:	fa0c f202 	lsl.w	r2, ip, r2
      p_dma_instance->PRIVCFGR |= channel_idx;
 80012c6:	bf0c      	ite	eq
 80012c8:	430a      	orreq	r2, r1
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80012ca:	ea21 0202 	bicne.w	r2, r1, r2
 80012ce:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 80012d0:	2000      	movs	r0, #0
 80012d2:	4770      	bx	lr
    return HAL_ERROR;
 80012d4:	2001      	movs	r0, #1
}
 80012d6:	4770      	bx	lr

080012d8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80012d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  }
  /* Find selected node node in queue */
  else
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80012dc:	6887      	ldr	r7, [r0, #8]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80012de:	f8d2 9000 	ldr.w	r9, [r2]
  if (pNode ==  NULL)
 80012e2:	2900      	cmp	r1, #0
 80012e4:	d03c      	beq.n	8001360 <DMA_List_FindNode+0x88>
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80012e6:	f64f 78fc 	movw	r8, #65532	@ 0xfffc
 80012ea:	ea01 0108 	and.w	r1, r1, r8
 80012ee:	2f00      	cmp	r7, #0
 80012f0:	d051      	beq.n	8001396 <DMA_List_FindNode+0xbe>
 80012f2:	2900      	cmp	r1, #0
 80012f4:	d052      	beq.n	800139c <DMA_List_FindNode+0xc4>
    {
      /* Get head node address */
      if (node_idx == 0U)
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80012f6:	f04f 0c00 	mov.w	ip, #0
 80012fa:	6804      	ldr	r4, [r0, #0]
 80012fc:	46e2      	mov	sl, ip
 80012fe:	ea04 0308 	and.w	r3, r4, r8
      else
      {
        previousnode_address = currentnode_address;
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8001302:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8001306:	f36f 040f 	bfc	r4, #0, #16
 800130a:	e006      	b.n	800131a <DMA_List_FindNode+0x42>
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800130c:	428b      	cmp	r3, r1
 800130e:	d023      	beq.n	8001358 <DMA_List_FindNode+0x80>
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8001310:	f85e 5004 	ldr.w	r5, [lr, r4]
        previousnode_address = currentnode_address;
 8001314:	469a      	mov	sl, r3
        currentnode_address =
 8001316:	ea05 0308 	and.w	r3, r5, r8
      }

      /* Increment node index */
      node_idx++;
 800131a:	f10c 0c01 	add.w	ip, ip, #1
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800131e:	45bc      	cmp	ip, r7
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8001320:	eb06 0e03 	add.w	lr, r6, r3
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8001324:	d1f2      	bne.n	800130c <DMA_List_FindNode+0x34>
  }

  /* Check stored address */
  if (pNode != NULL)
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8001326:	4299      	cmp	r1, r3
 8001328:	d002      	beq.n	8001330 <DMA_List_FindNode+0x58>
    {
      return 1U;
 800132a:	2001      	movs	r0, #1
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
  }

  return 0U;
}
 800132c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001330:	6804      	ldr	r4, [r0, #0]
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8001332:	f36f 040f 	bfc	r4, #0, #16
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8001336:	4323      	orrs	r3, r4
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8001338:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800133c:	ea44 000a 	orr.w	r0, r4, sl
  NodeInfo->currentnode_pos = node_idx;
 8001340:	6097      	str	r7, [r2, #8]
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8001342:	6050      	str	r0, [r2, #4]
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8001344:	60d3      	str	r3, [r2, #12]
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8001346:	b121      	cbz	r1, 8001352 <DMA_List_FindNode+0x7a>
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8001348:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800134c:	4019      	ands	r1, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800134e:	4321      	orrs	r1, r4
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8001350:	6111      	str	r1, [r2, #16]
  return 0U;
 8001352:	2000      	movs	r0, #0
}
 8001354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8001358:	4299      	cmp	r1, r3
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800135a:	4667      	mov	r7, ip
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800135c:	d1e5      	bne.n	800132a <DMA_List_FindNode+0x52>
 800135e:	e7e7      	b.n	8001330 <DMA_List_FindNode+0x58>
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8001360:	6804      	ldr	r4, [r0, #0]
    while (node_idx < pQList->NodeNumber)
 8001362:	b307      	cbz	r7, 80013a6 <DMA_List_FindNode+0xce>
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8001364:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
    while (node_idx < pQList->NodeNumber)
 8001368:	2f01      	cmp	r7, #1
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800136a:	ea04 0300 	and.w	r3, r4, r0
    while (node_idx < pQList->NodeNumber)
 800136e:	d010      	beq.n	8001392 <DMA_List_FindNode+0xba>
      node_idx++;
 8001370:	2101      	movs	r1, #1
 8001372:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001376:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800137a:	ea4f 0689 	mov.w	r6, r9, lsl #2
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800137e:	18f5      	adds	r5, r6, r3
 8001380:	f855 500c 	ldr.w	r5, [r5, ip]
      node_idx++;
 8001384:	3101      	adds	r1, #1
    while (node_idx < pQList->NodeNumber)
 8001386:	42b9      	cmp	r1, r7
 8001388:	469a      	mov	sl, r3
        currentnode_address =
 800138a:	ea05 0300 	and.w	r3, r5, r0
    while (node_idx < pQList->NodeNumber)
 800138e:	d1f6      	bne.n	800137e <DMA_List_FindNode+0xa6>
 8001390:	e7cf      	b.n	8001332 <DMA_List_FindNode+0x5a>
 8001392:	468a      	mov	sl, r1
  if (pNode != NULL)
 8001394:	e7cd      	b.n	8001332 <DMA_List_FindNode+0x5a>
  uint32_t previousnode_address  = 0U;
 8001396:	46ba      	mov	sl, r7
  uint32_t currentnode_address  = 0U;
 8001398:	463b      	mov	r3, r7
 800139a:	e7c4      	b.n	8001326 <DMA_List_FindNode+0x4e>
  uint32_t previousnode_address  = 0U;
 800139c:	468a      	mov	sl, r1
  uint32_t currentnode_address  = 0U;
 800139e:	460b      	mov	r3, r1
  uint32_t node_idx = 0U;
 80013a0:	460f      	mov	r7, r1
 80013a2:	6804      	ldr	r4, [r0, #0]
 80013a4:	e7c5      	b.n	8001332 <DMA_List_FindNode+0x5a>
  uint32_t previousnode_address  = 0U;
 80013a6:	46ba      	mov	sl, r7
  uint32_t currentnode_address  = 0U;
 80013a8:	463b      	mov	r3, r7
 80013aa:	e7c2      	b.n	8001332 <DMA_List_FindNode+0x5a>

080013ac <HAL_DMAEx_List_Init>:
{
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fc58 	bl	8000c64 <HAL_GetTick>
  if (hdma == NULL)
 80013b4:	2c00      	cmp	r4, #0
 80013b6:	f000 80bb 	beq.w	8001530 <HAL_DMAEx_List_Init+0x184>
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ba:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 80013bc:	2100      	movs	r1, #0
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80013be:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80013c0:	f884 104c 	strb.w	r1, [r4, #76]	@ 0x4c
  hdma->State = HAL_DMA_STATE_BUSY;
 80013c4:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
  __HAL_DMA_DISABLE(hdma);
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	4605      	mov	r5, r0
 80013cc:	f042 0206 	orr.w	r2, r2, #6
 80013d0:	615a      	str	r2, [r3, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80013d2:	e006      	b.n	80013e2 <HAL_DMAEx_List_Init+0x36>
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80013d4:	f7ff fc46 	bl	8000c64 <HAL_GetTick>
 80013d8:	1b43      	subs	r3, r0, r5
 80013da:	2b05      	cmp	r3, #5
 80013dc:	f200 80a3 	bhi.w	8001526 <HAL_DMAEx_List_Init+0x17a>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	07d2      	lsls	r2, r2, #31
 80013e6:	d4f5      	bmi.n	80013d4 <HAL_DMAEx_List_Init+0x28>
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80013e8:	4a67      	ldr	r2, [pc, #412]	@ (8001588 <HAL_DMAEx_List_Init+0x1dc>)
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80013ea:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80013ee:	4293      	cmp	r3, r2
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80013f0:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80013f2:	ea40 0001 	orr.w	r0, r0, r1
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80013f6:	f000 809d 	beq.w	8001534 <HAL_DMAEx_List_Init+0x188>
 80013fa:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80013fe:	4293      	cmp	r3, r2
 8001400:	f000 8098 	beq.w	8001534 <HAL_DMAEx_List_Init+0x188>
 8001404:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8001408:	3280      	adds	r2, #128	@ 0x80
 800140a:	4293      	cmp	r3, r2
 800140c:	f000 8092 	beq.w	8001534 <HAL_DMAEx_List_Init+0x188>
 8001410:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001414:	4293      	cmp	r3, r2
 8001416:	f000 808d 	beq.w	8001534 <HAL_DMAEx_List_Init+0x188>
 800141a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800141e:	3280      	adds	r2, #128	@ 0x80
 8001420:	4293      	cmp	r3, r2
 8001422:	f000 8087 	beq.w	8001534 <HAL_DMAEx_List_Init+0x188>
 8001426:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800142a:	4293      	cmp	r3, r2
 800142c:	f000 8082 	beq.w	8001534 <HAL_DMAEx_List_Init+0x188>
 8001430:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8001434:	3280      	adds	r2, #128	@ 0x80
 8001436:	4293      	cmp	r3, r2
 8001438:	d07c      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 800143a:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 800143e:	4293      	cmp	r3, r2
 8001440:	d078      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 8001442:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8001446:	3280      	adds	r2, #128	@ 0x80
 8001448:	4293      	cmp	r3, r2
 800144a:	d073      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 800144c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001450:	4293      	cmp	r3, r2
 8001452:	d06f      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 8001454:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 8001458:	3280      	adds	r2, #128	@ 0x80
 800145a:	4293      	cmp	r3, r2
 800145c:	d06a      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 800145e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001462:	4293      	cmp	r3, r2
 8001464:	d066      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 8001466:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800146a:	3280      	adds	r2, #128	@ 0x80
 800146c:	4293      	cmp	r3, r2
 800146e:	d061      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 8001470:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001474:	4293      	cmp	r3, r2
 8001476:	d05d      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 8001478:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800147c:	3280      	adds	r2, #128	@ 0x80
 800147e:	4293      	cmp	r3, r2
 8001480:	d058      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 8001482:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001486:	4293      	cmp	r3, r2
 8001488:	d054      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 800148a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800148e:	3280      	adds	r2, #128	@ 0x80
 8001490:	4293      	cmp	r3, r2
 8001492:	d04f      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 8001494:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001498:	4293      	cmp	r3, r2
 800149a:	d04b      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 800149c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80014a0:	3280      	adds	r2, #128	@ 0x80
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d046      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 80014a6:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d042      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 80014ae:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80014b2:	3280      	adds	r2, #128	@ 0x80
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d03d      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 80014b8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80014bc:	4293      	cmp	r3, r2
 80014be:	d039      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 80014c0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80014c4:	3280      	adds	r2, #128	@ 0x80
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d034      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 80014ca:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d030      	beq.n	8001534 <HAL_DMAEx_List_Init+0x188>
 80014d2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80014d6:	3280      	adds	r2, #128	@ 0x80
 80014d8:	4293      	cmp	r3, r2
 80014da:	d042      	beq.n	8001562 <HAL_DMAEx_List_Init+0x1b6>
 80014dc:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d03e      	beq.n	8001562 <HAL_DMAEx_List_Init+0x1b6>
 80014e4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80014e8:	3280      	adds	r2, #128	@ 0x80
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d039      	beq.n	8001562 <HAL_DMAEx_List_Init+0x1b6>
 80014ee:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d035      	beq.n	8001562 <HAL_DMAEx_List_Init+0x1b6>
 80014f6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 80014fa:	3280      	adds	r2, #128	@ 0x80
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d030      	beq.n	8001562 <HAL_DMAEx_List_Init+0x1b6>
 8001500:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001504:	4293      	cmp	r3, r2
 8001506:	d02c      	beq.n	8001562 <HAL_DMAEx_List_Init+0x1b6>
 8001508:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
 800150c:	3280      	adds	r2, #128	@ 0x80
 800150e:	4293      	cmp	r3, r2
 8001510:	d027      	beq.n	8001562 <HAL_DMAEx_List_Init+0x1b6>
 8001512:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
 8001516:	4293      	cmp	r3, r2
 8001518:	d023      	beq.n	8001562 <HAL_DMAEx_List_Init+0x1b6>
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800151a:	695a      	ldr	r2, [r3, #20]
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800151c:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800151e:	f422 0243 	bic.w	r2, r2, #12779520	@ 0xc30000
 8001522:	4302      	orrs	r2, r0
 8001524:	e00d      	b.n	8001542 <HAL_DMAEx_List_Init+0x196>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001526:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 8001528:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800152a:	65a2      	str	r2, [r4, #88]	@ 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 800152c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001530:	2001      	movs	r0, #1
}
 8001532:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8001534:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001536:	695a      	ldr	r2, [r3, #20]
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8001538:	6c26      	ldr	r6, [r4, #64]	@ 0x40
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800153a:	f422 0243 	bic.w	r2, r2, #12779520	@ 0xc30000
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800153e:	4330      	orrs	r0, r6
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001540:	4302      	orrs	r2, r0
 8001542:	615a      	str	r2, [r3, #20]
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8001544:	6419      	str	r1, [r3, #64]	@ 0x40
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8001546:	645d      	str	r5, [r3, #68]	@ 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8001548:	6499      	str	r1, [r3, #72]	@ 0x48
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800154a:	64d9      	str	r1, [r3, #76]	@ 0x4c
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800154c:	6519      	str	r1, [r3, #80]	@ 0x50
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800154e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001550:	2101      	movs	r1, #1
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8001552:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001554:	67da      	str	r2, [r3, #124]	@ 0x7c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001556:	65a2      	str	r2, [r4, #88]	@ 0x58
  hdma->State = HAL_DMA_STATE_READY;
 8001558:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
  return HAL_OK;
 800155c:	4610      	mov	r0, r2
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800155e:	6525      	str	r5, [r4, #80]	@ 0x50
}
 8001560:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001562:	695a      	ldr	r2, [r3, #20]
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8001564:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001566:	f422 0c43 	bic.w	ip, r2, #12779520	@ 0xc30000
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800156a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800156c:	4302      	orrs	r2, r0
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800156e:	ea42 020c 	orr.w	r2, r2, ip
 8001572:	615a      	str	r2, [r3, #20]
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8001574:	2200      	movs	r2, #0
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8001576:	6419      	str	r1, [r3, #64]	@ 0x40
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8001578:	645d      	str	r5, [r3, #68]	@ 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800157a:	6499      	str	r1, [r3, #72]	@ 0x48
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800157c:	64d9      	str	r1, [r3, #76]	@ 0x4c
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800157e:	6519      	str	r1, [r3, #80]	@ 0x50
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8001580:	655a      	str	r2, [r3, #84]	@ 0x54
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8001582:	659a      	str	r2, [r3, #88]	@ 0x58
 8001584:	e7e3      	b.n	800154e <HAL_DMAEx_List_Init+0x1a2>
 8001586:	bf00      	nop
 8001588:	40020050 	.word	0x40020050

0800158c <HAL_DMAEx_List_Start_IT>:
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800158c:	2800      	cmp	r0, #0
 800158e:	d056      	beq.n	800163e <HAL_DMAEx_List_Start_IT+0xb2>
 8001590:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 8001592:	2900      	cmp	r1, #0
 8001594:	d053      	beq.n	800163e <HAL_DMAEx_List_Start_IT+0xb2>
{
 8001596:	b410      	push	{r4}
  dma_state = hdma->State;
 8001598:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800159c:	6802      	ldr	r2, [r0, #0]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800159e:	2b01      	cmp	r3, #1
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80015a0:	6954      	ldr	r4, [r2, #20]
  dma_state = hdma->State;
 80015a2:	fa5f fc83 	uxtb.w	ip, r3
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80015a6:	d004      	beq.n	80015b2 <HAL_DMAEx_List_Start_IT+0x26>
 80015a8:	f1bc 0f02 	cmp.w	ip, #2
 80015ac:	d10e      	bne.n	80015cc <HAL_DMAEx_List_Start_IT+0x40>
 80015ae:	03e3      	lsls	r3, r4, #15
 80015b0:	d50c      	bpl.n	80015cc <HAL_DMAEx_List_Start_IT+0x40>
    if (hdma->State == HAL_DMA_STATE_READY)
 80015b2:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	b2dc      	uxtb	r4, r3
 80015ba:	d010      	beq.n	80015de <HAL_DMAEx_List_Start_IT+0x52>
  return HAL_OK;
 80015bc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80015be:	6953      	ldr	r3, [r2, #20]
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6153      	str	r3, [r2, #20]
}
 80015c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015ca:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 80015cc:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80015ce:	2240      	movs	r2, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 80015d0:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80015d4:	6582      	str	r2, [r0, #88]	@ 0x58
}
 80015d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return HAL_ERROR;
 80015da:	2001      	movs	r0, #1
}
 80015dc:	4770      	bx	lr
      __HAL_LOCK(hdma);
 80015de:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d02d      	beq.n	8001642 <HAL_DMAEx_List_Start_IT+0xb6>
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80015e6:	2300      	movs	r3, #0
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80015e8:	f04f 0c02 	mov.w	ip, #2
      __HAL_LOCK(hdma);
 80015ec:	f880 404c 	strb.w	r4, [r0, #76]	@ 0x4c
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80015f0:	f880 c054 	strb.w	ip, [r0, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80015f4:	f881 c00c 	strb.w	ip, [r1, #12]
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80015f8:	6583      	str	r3, [r0, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80015fa:	610b      	str	r3, [r1, #16]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80015fc:	6953      	ldr	r3, [r2, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 80015fe:	6e44      	ldr	r4, [r0, #100]	@ 0x64
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001600:	f443 43ba 	orr.w	r3, r3, #23808	@ 0x5d00
 8001604:	6153      	str	r3, [r2, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8001606:	b11c      	cbz	r4, 8001610 <HAL_DMAEx_List_Start_IT+0x84>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001608:	6953      	ldr	r3, [r2, #20]
 800160a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160e:	6153      	str	r3, [r2, #20]
      if (hdma->XferSuspendCallback != NULL)
 8001610:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8001612:	b11b      	cbz	r3, 800161c <HAL_DMAEx_List_Start_IT+0x90>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001614:	6953      	ldr	r3, [r2, #20]
 8001616:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800161a:	6153      	str	r3, [r2, #20]
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800161c:	680b      	ldr	r3, [r1, #0]
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800161e:	4c0a      	ldr	r4, [pc, #40]	@ (8001648 <HAL_DMAEx_List_Start_IT+0xbc>)
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001620:	6a18      	ldr	r0, [r3, #32]
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8001622:	490a      	ldr	r1, [pc, #40]	@ (800164c <HAL_DMAEx_List_Start_IT+0xc0>)
 8001624:	f010 0f02 	tst.w	r0, #2
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001628:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800162c:	bf18      	it	ne
 800162e:	4621      	movne	r1, r4
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8001630:	0c1c      	lsrs	r4, r3, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001632:	4003      	ands	r3, r0
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8001634:	0424      	lsls	r4, r4, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001636:	430b      	orrs	r3, r1
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8001638:	6014      	str	r4, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800163a:	67d3      	str	r3, [r2, #124]	@ 0x7c
 800163c:	e7be      	b.n	80015bc <HAL_DMAEx_List_Start_IT+0x30>
    return HAL_ERROR;
 800163e:	2001      	movs	r0, #1
}
 8001640:	4770      	bx	lr
      __HAL_LOCK(hdma);
 8001642:	2002      	movs	r0, #2
 8001644:	e7bf      	b.n	80015c6 <HAL_DMAEx_List_Start_IT+0x3a>
 8001646:	bf00      	nop
 8001648:	fe010000 	.word	0xfe010000
 800164c:	f8010000 	.word	0xf8010000

08001650 <HAL_DMAEx_List_BuildNode>:
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8001650:	2800      	cmp	r0, #0
 8001652:	d057      	beq.n	8001704 <HAL_DMAEx_List_BuildNode+0xb4>
 8001654:	2900      	cmp	r1, #0
 8001656:	d055      	beq.n	8001704 <HAL_DMAEx_List_BuildNode+0xb4>
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8001658:	f240 227f 	movw	r2, #639	@ 0x27f
{
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800165e:	6943      	ldr	r3, [r0, #20]
 8001660:	69c4      	ldr	r4, [r0, #28]
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8001662:	6845      	ldr	r5, [r0, #4]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8001664:	4323      	orrs	r3, r4
                                                   pNodeConfig->Init.DestDataWidth               |
 8001666:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8001668:	402a      	ands	r2, r5
                                                   pNodeConfig->Init.DestDataWidth               |
 800166a:	4323      	orrs	r3, r4
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800166c:	6904      	ldr	r4, [r0, #16]
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800166e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8001670:	4323      	orrs	r3, r4
                                                   pNodeConfig->Init.SrcInc                      |
 8001672:	6984      	ldr	r4, [r0, #24]
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8001674:	432a      	orrs	r2, r5
                                                   pNodeConfig->Init.SrcInc                      |
 8001676:	4323      	orrs	r3, r4
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8001678:	6804      	ldr	r4, [r0, #0]
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800167a:	68c5      	ldr	r5, [r0, #12]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800167c:	06a6      	lsls	r6, r4, #26
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800167e:	600b      	str	r3, [r1, #0]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8001680:	d53b      	bpl.n	80016fa <HAL_DMAEx_List_BuildNode+0xaa>
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8001682:	6a86      	ldr	r6, [r0, #40]	@ 0x28
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8001684:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8001686:	f106 3cff 	add.w	ip, r6, #4294967295	@ 0xffffffff
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800168a:	6a46      	ldr	r6, [r0, #36]	@ 0x24
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800168c:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8001690:	f106 3eff 	add.w	lr, r6, #4294967295	@ 0xffffffff
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8001694:	6b86      	ldr	r6, [r0, #56]	@ 0x38
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8001696:	f00c 7c7c 	and.w	ip, ip, #66060288	@ 0x3f00000
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800169a:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800169e:	433e      	orrs	r6, r7
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80016a0:	f40e 7e7c 	and.w	lr, lr, #1008	@ 0x3f0
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80016a4:	ea4c 0c06 	orr.w	ip, ip, r6
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80016a8:	ea4c 0c0e 	orr.w	ip, ip, lr
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80016ac:	ea4c 0303 	orr.w	r3, ip, r3
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b0:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80016b4:	600b      	str	r3, [r1, #0]
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b6:	d061      	beq.n	800177c <HAL_DMAEx_List_BuildNode+0x12c>
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80016b8:	604a      	str	r2, [r1, #4]
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80016ba:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80016be:	bf04      	itt	eq
 80016c0:	f442 7200 	orreq.w	r2, r2, #512	@ 0x200
 80016c4:	604a      	streq	r2, [r1, #4]
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80016c6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80016c8:	b14b      	cbz	r3, 80016de <HAL_DMAEx_List_BuildNode+0x8e>
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80016ca:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80016cc:	4313      	orrs	r3, r2
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80016ce:	684a      	ldr	r2, [r1, #4]
 80016d0:	4313      	orrs	r3, r2
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80016d2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80016d4:	0412      	lsls	r2, r2, #16
 80016d6:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80016de:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80016e2:	07a3      	lsls	r3, r4, #30
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80016e4:	608a      	str	r2, [r1, #8]
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80016e6:	e9d0 c718 	ldrd	ip, r7, [r0, #96]	@ 0x60
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80016ea:	d40d      	bmi.n	8001708 <HAL_DMAEx_List_BuildNode+0xb8>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80016ec:	f444 64a0 	orr.w	r4, r4, #1280	@ 0x500
  return HAL_OK;
 80016f0:	2000      	movs	r0, #0
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80016f2:	e9c1 c703 	strd	ip, r7, [r1, #12]
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80016f6:	620c      	str	r4, [r1, #32]
}
 80016f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016fa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80016fe:	604a      	str	r2, [r1, #4]
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001700:	d1db      	bne.n	80016ba <HAL_DMAEx_List_BuildNode+0x6a>
 8001702:	e7e0      	b.n	80016c6 <HAL_DMAEx_List_BuildNode+0x76>
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
}
 8001706:	4770      	bx	lr
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8001708:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800170a:	6d46      	ldr	r6, [r0, #84]	@ 0x54
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800170c:	1e5d      	subs	r5, r3, #1
 800170e:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <HAL_DMAEx_List_BuildNode+0x134>)
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8001710:	f444 64e0 	orr.w	r4, r4, #1792	@ 0x700
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8001714:	ea03 4305 	and.w	r3, r3, r5, lsl #16
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8001718:	6d05      	ldr	r5, [r0, #80]	@ 0x50
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800171a:	4313      	orrs	r3, r2
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800171c:	2d00      	cmp	r5, #0
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800171e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8001720:	bfb8      	it	lt
 8001722:	f043 5380 	orrlt.w	r3, r3, #268435456	@ 0x10000000
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8001726:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8001728:	2e00      	cmp	r6, #0
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 800172a:	bfb8      	it	lt
 800172c:	f043 5300 	orrlt.w	r3, r3, #536870912	@ 0x20000000
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8001730:	2a00      	cmp	r2, #0
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8001732:	bfb8      	it	lt
 8001734:	f043 4380 	orrlt.w	r3, r3, #1073741824	@ 0x40000000
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8001738:	2800      	cmp	r0, #0
 800173a:	608b      	str	r3, [r1, #8]
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800173c:	bfbc      	itt	lt
 800173e:	f043 4300 	orrlt.w	r3, r3, #2147483648	@ 0x80000000
 8001742:	608b      	strlt	r3, [r1, #8]
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8001744:	2d00      	cmp	r5, #0
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8001746:	bfb8      	it	lt
 8001748:	426d      	neglt	r5, r5
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800174a:	2e00      	cmp	r6, #0
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800174c:	bfb8      	it	lt
 800174e:	4276      	neglt	r6, r6
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8001750:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <HAL_DMAEx_List_BuildNode+0x138>)
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8001752:	2a00      	cmp	r2, #0
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8001754:	bfb8      	it	lt
 8001756:	4252      	neglt	r2, r2
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8001758:	2800      	cmp	r0, #0
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800175a:	bfb8      	it	lt
 800175c:	4240      	neglt	r0, r0
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800175e:	ea03 4306 	and.w	r3, r3, r6, lsl #16
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8001762:	f3c5 050c 	ubfx	r5, r5, #0, #13
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8001766:	b292      	uxth	r2, r2
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8001768:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800176c:	431d      	orrs	r5, r3
  return HAL_OK;
 800176e:	2000      	movs	r0, #0
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8001770:	e9c1 c703 	strd	ip, r7, [r1, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8001774:	614d      	str	r5, [r1, #20]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001776:	618a      	str	r2, [r1, #24]
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8001778:	620c      	str	r4, [r1, #32]
}
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 800177c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001780:	604a      	str	r2, [r1, #4]
 8001782:	e7a0      	b.n	80016c6 <HAL_DMAEx_List_BuildNode+0x76>
 8001784:	07ff0000 	.word	0x07ff0000
 8001788:	1fff0000 	.word	0x1fff0000

0800178c <HAL_DMAEx_List_InsertNode>:
  if ((pQList == NULL) || (pNewNode == NULL))
 800178c:	2800      	cmp	r0, #0
 800178e:	f000 8090 	beq.w	80018b2 <HAL_DMAEx_List_InsertNode+0x126>
{
 8001792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001796:	4615      	mov	r5, r2
 8001798:	b086      	sub	sp, #24
  if ((pQList == NULL) || (pNewNode == NULL))
 800179a:	2a00      	cmp	r2, #0
 800179c:	d047      	beq.n	800182e <HAL_DMAEx_List_InsertNode+0xa2>
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800179e:	6943      	ldr	r3, [r0, #20]
 80017a0:	4604      	mov	r4, r0
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d041      	beq.n	800182a <HAL_DMAEx_List_InsertNode+0x9e>
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80017a6:	6803      	ldr	r3, [r0, #0]
  if ((uint32_t)pNode1 != 0U)
 80017a8:	460e      	mov	r6, r1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d043      	beq.n	8001836 <HAL_DMAEx_List_InsertNode+0xaa>
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80017ae:	430a      	orrs	r2, r1
 80017b0:	ea22 0203 	bic.w	r2, r2, r3
 80017b4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80017b8:	d248      	bcs.n	800184c <HAL_DMAEx_List_InsertNode+0xc0>
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80017ba:	f893 2020 	ldrb.w	r2, [r3, #32]
  if (pNode2 != NULL)
 80017be:	2900      	cmp	r1, #0
 80017c0:	d042      	beq.n	8001848 <HAL_DMAEx_List_InsertNode+0xbc>
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80017c2:	f891 1020 	ldrb.w	r1, [r1, #32]
 80017c6:	428a      	cmp	r2, r1
 80017c8:	d12f      	bne.n	800182a <HAL_DMAEx_List_InsertNode+0x9e>
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80017ca:	6a2a      	ldr	r2, [r5, #32]
 80017cc:	b2d0      	uxtb	r0, r2
 80017ce:	4288      	cmp	r0, r1
 80017d0:	d12b      	bne.n	800182a <HAL_DMAEx_List_InsertNode+0x9e>
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80017d2:	f002 0202 	and.w	r2, r2, #2
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80017d6:	2a00      	cmp	r2, #0
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80017d8:	f04f 0100 	mov.w	r1, #0
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80017dc:	f04f 0202 	mov.w	r2, #2
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80017e0:	4835      	ldr	r0, [pc, #212]	@ (80018b8 <HAL_DMAEx_List_InsertNode+0x12c>)
 80017e2:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 80018bc <HAL_DMAEx_List_InsertNode+0x130>
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80017e6:	7322      	strb	r2, [r4, #12]
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80017e8:	bf0e      	itee	eq
 80017ea:	2705      	moveq	r7, #5
 80017ec:	2707      	movne	r7, #7
 80017ee:	4680      	movne	r8, r0
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80017f0:	6121      	str	r1, [r4, #16]
  if (pQList->Head == NULL)
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d040      	beq.n	8001878 <HAL_DMAEx_List_InsertNode+0xec>
    if (pPrevNode == NULL)
 80017f6:	b366      	cbz	r6, 8001852 <HAL_DMAEx_List_InsertNode+0xc6>
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80017f8:	4631      	mov	r1, r6
 80017fa:	4620      	mov	r0, r4
 80017fc:	aa01      	add	r2, sp, #4
      node_info.cllr_offset = cllr_offset;
 80017fe:	9701      	str	r7, [sp, #4]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8001800:	f7ff fd6a 	bl	80012d8 <DMA_List_FindNode>
 8001804:	2800      	cmp	r0, #0
 8001806:	d151      	bne.n	80018ac <HAL_DMAEx_List_InsertNode+0x120>
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8001808:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
        if (node_info.currentnode_pos == pQList->NodeNumber)
 800180c:	68a2      	ldr	r2, [r4, #8]
 800180e:	9903      	ldr	r1, [sp, #12]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8001810:	ea05 0300 	and.w	r3, r5, r0
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8001814:	4291      	cmp	r1, r2
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8001816:	ea43 0308 	orr.w	r3, r3, r8
        if (node_info.currentnode_pos == pQList->NodeNumber)
 800181a:	d037      	beq.n	800188c <HAL_DMAEx_List_InsertNode+0x100>
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800181c:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
 8001820:	f845 1027 	str.w	r1, [r5, r7, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8001824:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
 8001828:	e01c      	b.n	8001864 <HAL_DMAEx_List_InsertNode+0xd8>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800182a:	2304      	movs	r3, #4
 800182c:	6123      	str	r3, [r4, #16]
    return HAL_ERROR;
 800182e:	2001      	movs	r0, #1
}
 8001830:	b006      	add	sp, #24
 8001832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((uint32_t)pNode2 != 0U)
 8001836:	b399      	cbz	r1, 80018a0 <HAL_DMAEx_List_InsertNode+0x114>
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8001838:	ea22 0201 	bic.w	r2, r2, r1
 800183c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8001840:	d204      	bcs.n	800184c <HAL_DMAEx_List_InsertNode+0xc0>
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8001842:	f891 1020 	ldrb.w	r1, [r1, #32]
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8001846:	e7c0      	b.n	80017ca <HAL_DMAEx_List_InsertNode+0x3e>
 8001848:	4611      	mov	r1, r2
 800184a:	e7be      	b.n	80017ca <HAL_DMAEx_List_InsertNode+0x3e>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800184c:	2305      	movs	r3, #5
 800184e:	6123      	str	r3, [r4, #16]
    return HAL_ERROR;
 8001850:	e7ed      	b.n	800182e <HAL_DMAEx_List_InsertNode+0xa2>
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8001852:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8001856:	4013      	ands	r3, r2
 8001858:	ea43 0308 	orr.w	r3, r3, r8
    pQList->NodeNumber++;
 800185c:	68a2      	ldr	r2, [r4, #8]
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800185e:	f845 3027 	str.w	r3, [r5, r7, lsl #2]
      pQList->Head                         = pNewNode;
 8001862:	6025      	str	r5, [r4, #0]
    pQList->NodeNumber++;
 8001864:	3201      	adds	r2, #1
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8001866:	2300      	movs	r3, #0
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8001868:	2101      	movs	r1, #1
  return HAL_OK;
 800186a:	4618      	mov	r0, r3
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800186c:	6123      	str	r3, [r4, #16]
      pQList->NodeNumber                    = 2U;
 800186e:	60a2      	str	r2, [r4, #8]
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8001870:	7321      	strb	r1, [r4, #12]
}
 8001872:	b006      	add	sp, #24
 8001874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pPrevNode == NULL)
 8001878:	b1ae      	cbz	r6, 80018a6 <HAL_DMAEx_List_InsertNode+0x11a>
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800187a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800187e:	402b      	ands	r3, r5
 8001880:	ea43 0308 	orr.w	r3, r3, r8
      pQList->Head                          = pPrevNode;
 8001884:	6026      	str	r6, [r4, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8001886:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
      pQList->NodeNumber                    = 2U;
 800188a:	e7ec      	b.n	8001866 <HAL_DMAEx_List_InsertNode+0xda>
          if (pQList->FirstCircularNode != NULL)
 800188c:	6861      	ldr	r1, [r4, #4]
 800188e:	b121      	cbz	r1, 800189a <HAL_DMAEx_List_InsertNode+0x10e>
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8001890:	4001      	ands	r1, r0
 8001892:	ea41 0108 	orr.w	r1, r1, r8
 8001896:	f845 1027 	str.w	r1, [r5, r7, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800189a:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
 800189e:	e7e1      	b.n	8001864 <HAL_DMAEx_List_InsertNode+0xd8>
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80018a0:	2302      	movs	r3, #2
 80018a2:	7303      	strb	r3, [r0, #12]
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80018a4:	6101      	str	r1, [r0, #16]
      pQList->Head       = pNewNode;
 80018a6:	2201      	movs	r2, #1
 80018a8:	6025      	str	r5, [r4, #0]
      pQList->NodeNumber = 1U;
 80018aa:	e7dc      	b.n	8001866 <HAL_DMAEx_List_InsertNode+0xda>
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80018ac:	2306      	movs	r3, #6
 80018ae:	6123      	str	r3, [r4, #16]
        return HAL_ERROR;
 80018b0:	e7bd      	b.n	800182e <HAL_DMAEx_List_InsertNode+0xa2>
    return HAL_ERROR;
 80018b2:	2001      	movs	r0, #1
}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	fe010000 	.word	0xfe010000
 80018bc:	f8010000 	.word	0xf8010000

080018c0 <HAL_DMAEx_List_SetCircularMode>:
  if (pQList == NULL)
 80018c0:	b140      	cbz	r0, 80018d4 <HAL_DMAEx_List_SetCircularMode+0x14>
  if (pQList->Head == NULL)
 80018c2:	6801      	ldr	r1, [r0, #0]
 80018c4:	2900      	cmp	r1, #0
 80018c6:	d03b      	beq.n	8001940 <HAL_DMAEx_List_SetCircularMode+0x80>
  if (pQList->FirstCircularNode != NULL)
 80018c8:	6843      	ldr	r3, [r0, #4]
 80018ca:	b12b      	cbz	r3, 80018d8 <HAL_DMAEx_List_SetCircularMode+0x18>
    if (pQList->FirstCircularNode == pQList->Head)
 80018cc:	4299      	cmp	r1, r3
 80018ce:	d03b      	beq.n	8001948 <HAL_DMAEx_List_SetCircularMode+0x88>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80018d0:	2304      	movs	r3, #4
 80018d2:	6103      	str	r3, [r0, #16]
    return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
 80018d6:	4770      	bx	lr
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80018d8:	6942      	ldr	r2, [r0, #20]
 80018da:	2a01      	cmp	r2, #1
 80018dc:	d0f8      	beq.n	80018d0 <HAL_DMAEx_List_SetCircularMode+0x10>
{
 80018de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80018e2:	2702      	movs	r7, #2
 80018e4:	7307      	strb	r7, [r0, #12]
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80018e6:	6103      	str	r3, [r0, #16]
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80018e8:	6a0b      	ldr	r3, [r1, #32]
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80018ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001958 <HAL_DMAEx_List_SetCircularMode+0x98>)
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80018ec:	403b      	ands	r3, r7
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80018ee:	4d1b      	ldr	r5, [pc, #108]	@ (800195c <HAL_DMAEx_List_SetCircularMode+0x9c>)
    while (node_idx < pQList->NodeNumber)
 80018f0:	6884      	ldr	r4, [r0, #8]
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80018f2:	2b00      	cmp	r3, #0
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80018f4:	ea4f 4611 	mov.w	r6, r1, lsr #16
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80018f8:	bf0b      	itete	eq
 80018fa:	4690      	moveq	r8, r2
 80018fc:	46a8      	movne	r8, r5
 80018fe:	2705      	moveq	r7, #5
 8001900:	2707      	movne	r7, #7
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8001902:	0436      	lsls	r6, r6, #16
    while (node_idx < pQList->NodeNumber)
 8001904:	b314      	cbz	r4, 800194c <HAL_DMAEx_List_SetCircularMode+0x8c>
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8001906:	f64f 7cfc 	movw	ip, #65532	@ 0xfffc
    while (node_idx < pQList->NodeNumber)
 800190a:	2c01      	cmp	r4, #1
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800190c:	ea01 0e0c 	and.w	lr, r1, ip
 8001910:	4673      	mov	r3, lr
    while (node_idx < pQList->NodeNumber)
 8001912:	d008      	beq.n	8001926 <HAL_DMAEx_List_SetCircularMode+0x66>
      node_idx++;
 8001914:	2201      	movs	r2, #1
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8001916:	eb06 0587 	add.w	r5, r6, r7, lsl #2
 800191a:	58eb      	ldr	r3, [r5, r3]
      node_idx++;
 800191c:	3201      	adds	r2, #1
    while (node_idx < pQList->NodeNumber)
 800191e:	4294      	cmp	r4, r2
        currentnode_address =
 8001920:	ea03 030c 	and.w	r3, r3, ip
    while (node_idx < pQList->NodeNumber)
 8001924:	d1f9      	bne.n	800191a <HAL_DMAEx_List_SetCircularMode+0x5a>
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8001926:	431e      	orrs	r6, r3
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8001928:	ea4e 0308 	orr.w	r3, lr, r8
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800192c:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8001930:	2200      	movs	r2, #0
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8001932:	2301      	movs	r3, #1
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8001934:	6102      	str	r2, [r0, #16]
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8001936:	7303      	strb	r3, [r0, #12]
  pQList->FirstCircularNode = pQList->Head;
 8001938:	6041      	str	r1, [r0, #4]
      return HAL_OK;
 800193a:	2000      	movs	r0, #0
}
 800193c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8001940:	2302      	movs	r3, #2
 8001942:	6103      	str	r3, [r0, #16]
    return HAL_ERROR;
 8001944:	2001      	movs	r0, #1
 8001946:	4770      	bx	lr
      return HAL_OK;
 8001948:	2000      	movs	r0, #0
}
 800194a:	4770      	bx	lr
 800194c:	f64f 7efc 	movw	lr, #65532	@ 0xfffc
 8001950:	ea01 0e0e 	and.w	lr, r1, lr
 8001954:	e7e8      	b.n	8001928 <HAL_DMAEx_List_SetCircularMode+0x68>
 8001956:	bf00      	nop
 8001958:	f8010000 	.word	0xf8010000
 800195c:	fe010000 	.word	0xfe010000

08001960 <HAL_DMAEx_List_LinkQ>:
  if ((hdma == NULL) || (pQList == NULL))
 8001960:	4603      	mov	r3, r0
 8001962:	2800      	cmp	r0, #0
 8001964:	d03c      	beq.n	80019e0 <HAL_DMAEx_List_LinkQ+0x80>
 8001966:	2900      	cmp	r1, #0
 8001968:	d03a      	beq.n	80019e0 <HAL_DMAEx_List_LinkQ+0x80>
  state = hdma->State;
 800196a:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800196e:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
  state = hdma->State;
 8001972:	b2d2      	uxtb	r2, r2
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8001974:	2802      	cmp	r0, #2
 8001976:	d02e      	beq.n	80019d6 <HAL_DMAEx_List_LinkQ+0x76>
 8001978:	2a05      	cmp	r2, #5
 800197a:	d02c      	beq.n	80019d6 <HAL_DMAEx_List_LinkQ+0x76>
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800197c:	7b0a      	ldrb	r2, [r1, #12]
 800197e:	2a02      	cmp	r2, #2
 8001980:	d03e      	beq.n	8001a00 <HAL_DMAEx_List_LinkQ+0xa0>
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4820      	ldr	r0, [pc, #128]	@ (8001a08 <HAL_DMAEx_List_LinkQ+0xa8>)
 8001986:	4282      	cmp	r2, r0
 8001988:	d02c      	beq.n	80019e4 <HAL_DMAEx_List_LinkQ+0x84>
 800198a:	f100 5080 	add.w	r0, r0, #268435456	@ 0x10000000
 800198e:	4282      	cmp	r2, r0
 8001990:	d028      	beq.n	80019e4 <HAL_DMAEx_List_LinkQ+0x84>
 8001992:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
 8001996:	3080      	adds	r0, #128	@ 0x80
 8001998:	4282      	cmp	r2, r0
 800199a:	d023      	beq.n	80019e4 <HAL_DMAEx_List_LinkQ+0x84>
 800199c:	f100 5080 	add.w	r0, r0, #268435456	@ 0x10000000
 80019a0:	4282      	cmp	r2, r0
 80019a2:	d01f      	beq.n	80019e4 <HAL_DMAEx_List_LinkQ+0x84>
 80019a4:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
 80019a8:	3080      	adds	r0, #128	@ 0x80
 80019aa:	4282      	cmp	r2, r0
 80019ac:	d01a      	beq.n	80019e4 <HAL_DMAEx_List_LinkQ+0x84>
 80019ae:	f100 5080 	add.w	r0, r0, #268435456	@ 0x10000000
 80019b2:	4282      	cmp	r2, r0
 80019b4:	d016      	beq.n	80019e4 <HAL_DMAEx_List_LinkQ+0x84>
 80019b6:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
 80019ba:	3080      	adds	r0, #128	@ 0x80
 80019bc:	4282      	cmp	r2, r0
 80019be:	d011      	beq.n	80019e4 <HAL_DMAEx_List_LinkQ+0x84>
 80019c0:	f100 5080 	add.w	r0, r0, #268435456	@ 0x10000000
 80019c4:	4282      	cmp	r2, r0
 80019c6:	d00d      	beq.n	80019e4 <HAL_DMAEx_List_LinkQ+0x84>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80019c8:	680a      	ldr	r2, [r1, #0]
 80019ca:	6a12      	ldr	r2, [r2, #32]
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80019cc:	0792      	lsls	r2, r2, #30
 80019ce:	d509      	bpl.n	80019e4 <HAL_DMAEx_List_LinkQ+0x84>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80019d0:	2303      	movs	r3, #3
 80019d2:	610b      	str	r3, [r1, #16]
    return HAL_ERROR;
 80019d4:	e004      	b.n	80019e0 <HAL_DMAEx_List_LinkQ+0x80>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80019d6:	2140      	movs	r1, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 80019d8:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80019da:	6599      	str	r1, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80019dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
 80019e2:	4770      	bx	lr
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80019e4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
    if (pQList->FirstCircularNode == NULL)
 80019e6:	684a      	ldr	r2, [r1, #4]
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80019e8:	2881      	cmp	r0, #129	@ 0x81
 80019ea:	d004      	beq.n	80019f6 <HAL_DMAEx_List_LinkQ+0x96>
    if (pQList->FirstCircularNode != NULL)
 80019ec:	b12a      	cbz	r2, 80019fa <HAL_DMAEx_List_LinkQ+0x9a>
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80019ee:	2304      	movs	r3, #4
    return HAL_ERROR;
 80019f0:	2001      	movs	r0, #1
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80019f2:	610b      	str	r3, [r1, #16]
      return HAL_ERROR;
 80019f4:	4770      	bx	lr
    if (pQList->FirstCircularNode == NULL)
 80019f6:	2a00      	cmp	r2, #0
 80019f8:	d0f9      	beq.n	80019ee <HAL_DMAEx_List_LinkQ+0x8e>
  return HAL_OK;
 80019fa:	2000      	movs	r0, #0
  hdma->LinkedListQueue = pQList;
 80019fc:	6759      	str	r1, [r3, #116]	@ 0x74
}
 80019fe:	4770      	bx	lr
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8001a00:	2301      	movs	r3, #1
 8001a02:	610b      	str	r3, [r1, #16]
    return HAL_ERROR;
 8001a04:	e7ec      	b.n	80019e0 <HAL_DMAEx_List_LinkQ+0x80>
 8001a06:	bf00      	nop
 8001a08:	40020650 	.word	0x40020650

08001a0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Save GPIO port address */
  p_gpio = GPIOx;

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a10:	f8d1 b000 	ldr.w	fp, [r1]
{
 8001a14:	b085      	sub	sp, #20
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a16:	f1bb 0f00 	cmp.w	fp, #0
 8001a1a:	f000 80b4 	beq.w	8001b86 <HAL_GPIO_Init+0x17a>
 8001a1e:	4bbb      	ldr	r3, [pc, #748]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001a20:	468a      	mov	sl, r1
 8001a22:	4298      	cmp	r0, r3
 8001a24:	f000 80be 	beq.w	8001ba4 <HAL_GPIO_Init+0x198>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001a28:	4bb9      	ldr	r3, [pc, #740]	@ (8001d10 <HAL_GPIO_Init+0x304>)
  uint32_t position = 0U;
 8001a2a:	2200      	movs	r2, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001a2c:	ea03 2390 	and.w	r3, r3, r0, lsr #10
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a30:	f04f 0801 	mov.w	r8, #1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001a34:	9303      	str	r3, [sp, #12]
 8001a36:	e029      	b.n	8001a8c <HAL_GPIO_Init+0x80>
        tmp = p_gpio->MODER;
 8001a38:	6806      	ldr	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3a:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a3e:	ea05 0c06 	and.w	ip, r5, r6
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a42:	f003 0603 	and.w	r6, r3, #3
 8001a46:	fa06 f607 	lsl.w	r6, r6, r7
 8001a4a:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->MODER = tmp;
 8001a4e:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a50:	d901      	bls.n	8001a56 <HAL_GPIO_Init+0x4a>
 8001a52:	2b11      	cmp	r3, #17
 8001a54:	d153      	bne.n	8001afe <HAL_GPIO_Init+0xf2>
        tmp = p_gpio->OSPEEDR;
 8001a56:	6886      	ldr	r6, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001a58:	091b      	lsrs	r3, r3, #4
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a5a:	ea06 0c05 	and.w	ip, r6, r5
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a5e:	f8da 600c 	ldr.w	r6, [sl, #12]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001a62:	4093      	lsls	r3, r2
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a64:	40be      	lsls	r6, r7
 8001a66:	ea46 060c 	orr.w	r6, r6, ip
        p_gpio->OSPEEDR = tmp;
 8001a6a:	6086      	str	r6, [r0, #8]
        tmp = p_gpio->OTYPER;
 8001a6c:	6846      	ldr	r6, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001a6e:	ea26 0101 	bic.w	r1, r6, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001a72:	430b      	orrs	r3, r1
        p_gpio->OTYPER = tmp;
 8001a74:	6043      	str	r3, [r0, #4]
        tmp = p_gpio->PUPDR;
 8001a76:	68c1      	ldr	r1, [r0, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001a78:	f8da 3008 	ldr.w	r3, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001a7c:	4029      	ands	r1, r5
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001a7e:	40bb      	lsls	r3, r7
 8001a80:	430b      	orrs	r3, r1
        p_gpio->PUPDR = tmp;
 8001a82:	60c3      	str	r3, [r0, #12]
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
      }
    }
    position++;
 8001a84:	3201      	adds	r2, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a86:	fa3b f302 	lsrs.w	r3, fp, r2
 8001a8a:	d07c      	beq.n	8001b86 <HAL_GPIO_Init+0x17a>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a8c:	fa08 f102 	lsl.w	r1, r8, r2
    if (iocurrent != 0U)
 8001a90:	ea1b 0e01 	ands.w	lr, fp, r1
 8001a94:	d0f6      	beq.n	8001a84 <HAL_GPIO_Init+0x78>
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a96:	2403      	movs	r4, #3
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001a98:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001a9c:	0057      	lsls	r7, r2, #1
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9e:	f023 0610 	bic.w	r6, r3, #16
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001aa2:	fa04 f507 	lsl.w	r5, r4, r7
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa6:	2e02      	cmp	r6, #2
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001aa8:	ea6f 0505 	mvn.w	r5, r5
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aac:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab0:	d1c2      	bne.n	8001a38 <HAL_GPIO_Init+0x2c>
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ab2:	fa06 f407 	lsl.w	r4, r6, r7
        tmp = GPIOx->AFR[position >> 3U];
 8001ab6:	08d6      	lsrs	r6, r2, #3
 8001ab8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001abc:	9402      	str	r4, [sp, #8]
 8001abe:	4634      	mov	r4, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ac0:	f8da 6010 	ldr.w	r6, [sl, #16]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ac4:	f002 0c07 	and.w	ip, r2, #7
 8001ac8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001acc:	f006 060f 	and.w	r6, r6, #15
 8001ad0:	fa06 f60c 	lsl.w	r6, r6, ip
 8001ad4:	9601      	str	r6, [sp, #4]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ad6:	260f      	movs	r6, #15
 8001ad8:	fa06 fc0c 	lsl.w	ip, r6, ip
        tmp = GPIOx->AFR[position >> 3U];
 8001adc:	6a26      	ldr	r6, [r4, #32]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ade:	f1b9 0f01 	cmp.w	r9, #1
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ae2:	ea26 0c0c 	bic.w	ip, r6, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ae6:	9e01      	ldr	r6, [sp, #4]
 8001ae8:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8001aec:	6226      	str	r6, [r4, #32]
        tmp = p_gpio->MODER;
 8001aee:	6806      	ldr	r6, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001af0:	9c02      	ldr	r4, [sp, #8]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001af2:	ea06 0605 	and.w	r6, r6, r5
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001af6:	ea46 0604 	orr.w	r6, r6, r4
        p_gpio->MODER = tmp;
 8001afa:	6006      	str	r6, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001afc:	d0ab      	beq.n	8001a56 <HAL_GPIO_Init+0x4a>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001afe:	2b12      	cmp	r3, #18
 8001b00:	d0a9      	beq.n	8001a56 <HAL_GPIO_Init+0x4a>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d0be      	beq.n	8001a84 <HAL_GPIO_Init+0x78>
        tmp = p_gpio->PUPDR;
 8001b06:	68c1      	ldr	r1, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001b08:	400d      	ands	r5, r1
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001b0a:	f8da 1008 	ldr.w	r1, [sl, #8]
 8001b0e:	40b9      	lsls	r1, r7
 8001b10:	4329      	orrs	r1, r5
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b12:	00dd      	lsls	r5, r3, #3
        p_gpio->PUPDR = tmp;
 8001b14:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b16:	d5b5      	bpl.n	8001a84 <HAL_GPIO_Init+0x78>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b18:	240f      	movs	r4, #15
 8001b1a:	f022 0503 	bic.w	r5, r2, #3
 8001b1e:	f105 458c 	add.w	r5, r5, #1174405120	@ 0x46000000
 8001b22:	f002 0103 	and.w	r1, r2, #3
 8001b26:	f505 3508 	add.w	r5, r5, #139264	@ 0x22000
 8001b2a:	00c9      	lsls	r1, r1, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8001b2c:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b2e:	fa04 f701 	lsl.w	r7, r4, r1
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b32:	9c03      	ldr	r4, [sp, #12]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b34:	ea26 0607 	bic.w	r6, r6, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b38:	fa04 f101 	lsl.w	r1, r4, r1
 8001b3c:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b3e:	6629      	str	r1, [r5, #96]	@ 0x60
        tmp = EXTI->RTSR1;
 8001b40:	4974      	ldr	r1, [pc, #464]	@ (8001d14 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b42:	02dc      	lsls	r4, r3, #11
        tmp &= ~((uint32_t)iocurrent);
 8001b44:	ea6f 050e 	mvn.w	r5, lr
        tmp = EXTI->RTSR1;
 8001b48:	6809      	ldr	r1, [r1, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4a:	d428      	bmi.n	8001b9e <HAL_GPIO_Init+0x192>
        tmp &= ~((uint32_t)iocurrent);
 8001b4c:	4029      	ands	r1, r5
        EXTI->RTSR1 = tmp;
 8001b4e:	4c71      	ldr	r4, [pc, #452]	@ (8001d14 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b50:	029f      	lsls	r7, r3, #10
        EXTI->RTSR1 = tmp;
 8001b52:	6021      	str	r1, [r4, #0]
        tmp = EXTI->FTSR1;
 8001b54:	6861      	ldr	r1, [r4, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b56:	d41f      	bmi.n	8001b98 <HAL_GPIO_Init+0x18c>
        tmp &= ~((uint32_t)iocurrent);
 8001b58:	4029      	ands	r1, r5
        EXTI->FTSR1 = tmp;
 8001b5a:	4c6e      	ldr	r4, [pc, #440]	@ (8001d14 <HAL_GPIO_Init+0x308>)
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b5c:	039e      	lsls	r6, r3, #14
        EXTI->FTSR1 = tmp;
 8001b5e:	6061      	str	r1, [r4, #4]
        tmp = EXTI->EMR1;
 8001b60:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b64:	d415      	bmi.n	8001b92 <HAL_GPIO_Init+0x186>
        tmp &= ~((uint32_t)iocurrent);
 8001b66:	4029      	ands	r1, r5
        EXTI->EMR1 = tmp;
 8001b68:	4c6a      	ldr	r4, [pc, #424]	@ (8001d14 <HAL_GPIO_Init+0x308>)
 8001b6a:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8001b6e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b72:	03dc      	lsls	r4, r3, #15
 8001b74:	d40a      	bmi.n	8001b8c <HAL_GPIO_Init+0x180>
        tmp &= ~((uint32_t)iocurrent);
 8001b76:	4029      	ands	r1, r5
        EXTI->IMR1 = tmp;
 8001b78:	4b66      	ldr	r3, [pc, #408]	@ (8001d14 <HAL_GPIO_Init+0x308>)
    position++;
 8001b7a:	3201      	adds	r2, #1
        EXTI->IMR1 = tmp;
 8001b7c:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b80:	fa3b f302 	lsrs.w	r3, fp, r2
 8001b84:	d182      	bne.n	8001a8c <HAL_GPIO_Init+0x80>
  }
}
 8001b86:	b005      	add	sp, #20
 8001b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          tmp |= iocurrent;
 8001b8c:	ea41 010e 	orr.w	r1, r1, lr
 8001b90:	e7f2      	b.n	8001b78 <HAL_GPIO_Init+0x16c>
          tmp |= iocurrent;
 8001b92:	ea41 010e 	orr.w	r1, r1, lr
 8001b96:	e7e7      	b.n	8001b68 <HAL_GPIO_Init+0x15c>
          tmp |= iocurrent;
 8001b98:	ea41 010e 	orr.w	r1, r1, lr
 8001b9c:	e7dd      	b.n	8001b5a <HAL_GPIO_Init+0x14e>
          tmp |= iocurrent;
 8001b9e:	ea4e 0101 	orr.w	r1, lr, r1
 8001ba2:	e7d4      	b.n	8001b4e <HAL_GPIO_Init+0x142>
  uint32_t position = 0U;
 8001ba4:	2300      	movs	r3, #0
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ba6:	2701      	movs	r7, #1
        tmp = EXTI->RTSR1;
 8001ba8:	4e5a      	ldr	r6, [pc, #360]	@ (8001d14 <HAL_GPIO_Init+0x308>)
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001baa:	fa07 f103 	lsl.w	r1, r7, r3
    if (iocurrent != 0U)
 8001bae:	ea11 050b 	ands.w	r5, r1, fp
 8001bb2:	d059      	beq.n	8001c68 <HAL_GPIO_Init+0x25c>
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001bb4:	f04f 090f 	mov.w	r9, #15
        tmp = GPIOx->MODER;
 8001bb8:	6804      	ldr	r4, [r0, #0]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001bba:	f8da 2004 	ldr.w	r2, [sl, #4]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001bbe:	ea24 0401 	bic.w	r4, r4, r1
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001bc2:	4955      	ldr	r1, [pc, #340]	@ (8001d18 <HAL_GPIO_Init+0x30c>)
 8001bc4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001bc8:	f002 0101 	and.w	r1, r2, #1
 8001bcc:	4099      	lsls	r1, r3
 8001bce:	4321      	orrs	r1, r4
        GPIOx->MODER = tmp;
 8001bd0:	6001      	str	r1, [r0, #0]
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001bd2:	4952      	ldr	r1, [pc, #328]	@ (8001d1c <HAL_GPIO_Init+0x310>)
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001bd4:	ea4f 0edc 	mov.w	lr, ip, lsr #3
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001bd8:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001bdc:	f00c 0407 	and.w	r4, ip, #7
 8001be0:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001be4:	f8de 8020 	ldr.w	r8, [lr, #32]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001be8:	00a4      	lsls	r4, r4, #2
 8001bea:	fa09 f904 	lsl.w	r9, r9, r4
 8001bee:	ea28 0809 	bic.w	r8, r8, r9
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001bf2:	f04f 090b 	mov.w	r9, #11
 8001bf6:	fa09 f404 	lsl.w	r4, r9, r4
 8001bfa:	ea44 0408 	orr.w	r4, r4, r8
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001bfe:	f04f 0803 	mov.w	r8, #3
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001c02:	f8ce 4020 	str.w	r4, [lr, #32]
        tmp = p_gpio->MODER;
 8001c06:	680c      	ldr	r4, [r1, #0]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c08:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8001c0c:	fa08 f80e 	lsl.w	r8, r8, lr
 8001c10:	ea24 0908 	bic.w	r9, r4, r8
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c14:	2402      	movs	r4, #2
 8001c16:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c1a:	ea44 0409 	orr.w	r4, r4, r9
        p_gpio->MODER = tmp;
 8001c1e:	600c      	str	r4, [r1, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c20:	1e54      	subs	r4, r2, #1
 8001c22:	2c01      	cmp	r4, #1
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c24:	ea6f 0808 	mvn.w	r8, r8
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c28:	d901      	bls.n	8001c2e <HAL_GPIO_Init+0x222>
 8001c2a:	2a11      	cmp	r2, #17
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x26a>
        tmp = p_gpio->OSPEEDR;
 8001c2e:	688c      	ldr	r4, [r1, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001c30:	0912      	lsrs	r2, r2, #4
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001c32:	fa07 f50c 	lsl.w	r5, r7, ip
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001c36:	fa02 f20c 	lsl.w	r2, r2, ip
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c3a:	ea08 0c04 	and.w	ip, r8, r4
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c3e:	f8da 400c 	ldr.w	r4, [sl, #12]
 8001c42:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c46:	ea44 040c 	orr.w	r4, r4, ip
        p_gpio->OSPEEDR = tmp;
 8001c4a:	608c      	str	r4, [r1, #8]
        tmp = p_gpio->OTYPER;
 8001c4c:	684c      	ldr	r4, [r1, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001c4e:	ea24 0405 	bic.w	r4, r4, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001c52:	4322      	orrs	r2, r4
        p_gpio->OTYPER = tmp;
 8001c54:	604a      	str	r2, [r1, #4]
        tmp = p_gpio->PUPDR;
 8001c56:	68cc      	ldr	r4, [r1, #12]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c58:	f8da 2008 	ldr.w	r2, [sl, #8]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c5c:	ea08 0404 	and.w	r4, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c60:	fa02 f20e 	lsl.w	r2, r2, lr
 8001c64:	4322      	orrs	r2, r4
        p_gpio->PUPDR = tmp;
 8001c66:	60ca      	str	r2, [r1, #12]
    position++;
 8001c68:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c6a:	fa3b f203 	lsrs.w	r2, fp, r3
 8001c6e:	d19c      	bne.n	8001baa <HAL_GPIO_Init+0x19e>
}
 8001c70:	b005      	add	sp, #20
 8001c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c76:	2a12      	cmp	r2, #18
 8001c78:	d0d9      	beq.n	8001c2e <HAL_GPIO_Init+0x222>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001c7a:	2a03      	cmp	r2, #3
 8001c7c:	d0f4      	beq.n	8001c68 <HAL_GPIO_Init+0x25c>
        tmp = p_gpio->PUPDR;
 8001c7e:	68cc      	ldr	r4, [r1, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c80:	ea08 0804 	and.w	r8, r8, r4
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c84:	f8da 4008 	ldr.w	r4, [sl, #8]
 8001c88:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c8c:	ea44 0408 	orr.w	r4, r4, r8
        p_gpio->PUPDR = tmp;
 8001c90:	60cc      	str	r4, [r1, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c92:	00d1      	lsls	r1, r2, #3
 8001c94:	d5e8      	bpl.n	8001c68 <HAL_GPIO_Init+0x25c>
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001c96:	f04f 080f 	mov.w	r8, #15
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001c9a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8001c9e:	f023 0103 	bic.w	r1, r3, #3
 8001ca2:	f101 418c 	add.w	r1, r1, #1174405120	@ 0x46000000
 8001ca6:	f501 3108 	add.w	r1, r1, #139264	@ 0x22000
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001caa:	f003 0c03 	and.w	ip, r3, #3
        tmp = EXTI->EXTICR[position >> 2U];
 8001cae:	f8d1 e060 	ldr.w	lr, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001cb2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8001cb6:	fa08 f80c 	lsl.w	r8, r8, ip
 8001cba:	ea2e 0e08 	bic.w	lr, lr, r8
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001cbe:	fa04 f40c 	lsl.w	r4, r4, ip
 8001cc2:	ea44 040e 	orr.w	r4, r4, lr
        EXTI->EXTICR[position >> 2U] = tmp;
 8001cc6:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp &= ~((uint32_t)iocurrent);
 8001cc8:	43ec      	mvns	r4, r5
        tmp = EXTI->RTSR1;
 8001cca:	6831      	ldr	r1, [r6, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ccc:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
        tmp &= ~((uint32_t)iocurrent);
 8001cd0:	bf0c      	ite	eq
 8001cd2:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8001cd4:	4329      	orrne	r1, r5
        EXTI->RTSR1 = tmp;
 8001cd6:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 8001cd8:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cda:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8001cde:	bf0c      	ite	eq
 8001ce0:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8001ce2:	4329      	orrne	r1, r5
        EXTI->FTSR1 = tmp;
 8001ce4:	6071      	str	r1, [r6, #4]
        tmp = EXTI->EMR1;
 8001ce6:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cea:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8001cee:	bf0c      	ite	eq
 8001cf0:	4021      	andeq	r1, r4
          tmp |= iocurrent;
 8001cf2:	4329      	orrne	r1, r5
        EXTI->EMR1 = tmp;
 8001cf4:	f8c6 1084 	str.w	r1, [r6, #132]	@ 0x84
        tmp = EXTI->IMR1;
 8001cf8:	f8d6 1080 	ldr.w	r1, [r6, #128]	@ 0x80
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cfc:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 8001cfe:	bf54      	ite	pl
 8001d00:	4021      	andpl	r1, r4
          tmp |= iocurrent;
 8001d02:	4329      	orrmi	r1, r5
        EXTI->IMR1 = tmp;
 8001d04:	f8c6 1080 	str.w	r1, [r6, #128]	@ 0x80
 8001d08:	e7ae      	b.n	8001c68 <HAL_GPIO_Init+0x25c>
 8001d0a:	bf00      	nop
 8001d0c:	46020000 	.word	0x46020000
 8001d10:	002f7f7f 	.word	0x002f7f7f
 8001d14:	46022000 	.word	0x46022000
 8001d18:	080055a4 	.word	0x080055a4
 8001d1c:	080055a0 	.word	0x080055a0

08001d20 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001d20:	4a03      	ldr	r2, [pc, #12]	@ (8001d30 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8001d22:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001d24:	6813      	ldr	r3, [r2, #0]
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40030400 	.word	0x40030400

08001d34 <HAL_PWREx_ControlVoltageScaling>:

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001d34:	4a21      	ldr	r2, [pc, #132]	@ (8001dbc <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001d36:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001d3c:	4283      	cmp	r3, r0
 8001d3e:	d034      	beq.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x76>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001d40:	f04f 0c32 	mov.w	ip, #50	@ 0x32
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001d44:	68d3      	ldr	r3, [r2, #12]
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001d46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001d4a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001d4e:	ea43 0300 	orr.w	r3, r3, r0
 8001d52:	bf88      	it	hi
 8001d54:	f443 2380 	orrhi.w	r3, r3, #262144	@ 0x40000
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001d58:	60d3      	str	r3, [r2, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001d5c:	4a19      	ldr	r2, [pc, #100]	@ (8001dc4 <HAL_PWREx_ControlVoltageScaling+0x90>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001d60:	4816      	ldr	r0, [pc, #88]	@ (8001dbc <HAL_PWREx_ControlVoltageScaling+0x88>)
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001d62:	fba2 1303 	umull	r1, r3, r2, r3
 8001d66:	099b      	lsrs	r3, r3, #6
 8001d68:	fb0c f303 	mul.w	r3, ip, r3
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001d70:	68c1      	ldr	r1, [r0, #12]
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001d72:	099b      	lsrs	r3, r3, #6
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001d74:	040a      	lsls	r2, r1, #16
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001d76:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001d7a:	d407      	bmi.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x58>
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	e000      	b.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x4e>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001d80:	b18a      	cbz	r2, 8001da6 <HAL_PWREx_ControlVoltageScaling+0x72>
 8001d82:	68c1      	ldr	r1, [r0, #12]
  {
    timeout--;
 8001d84:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001d86:	0409      	lsls	r1, r1, #16
 8001d88:	d5fa      	bpl.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }

  /* Check time out */
  if (timeout != 0U)
 8001d8a:	b162      	cbz	r2, 8001da6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001d8c:	490b      	ldr	r1, [pc, #44]	@ (8001dbc <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001d8e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8001d90:	0410      	lsls	r0, r2, #16
 8001d92:	d406      	bmi.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d94:	e000      	b.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0x64>
 8001d96:	b133      	cbz	r3, 8001da6 <HAL_PWREx_ControlVoltageScaling+0x72>
 8001d98:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
    {
      timeout--;
 8001d9a:	3b01      	subs	r3, #1
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001d9c:	0412      	lsls	r2, r2, #16
 8001d9e:	d5fa      	bpl.n	8001d96 <HAL_PWREx_ControlVoltageScaling+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001da0:	b10b      	cbz	r3, 8001da6 <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 8001da2:	2000      	movs	r0, #0
 8001da4:	4770      	bx	lr
  {
    return HAL_TIMEOUT;
 8001da6:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8001da8:	4770      	bx	lr
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dae:	d9f8      	bls.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x6e>
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001db0:	68d3      	ldr	r3, [r2, #12]
    return HAL_OK;
 8001db2:	2000      	movs	r0, #0
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db8:	60d3      	str	r3, [r2, #12]
 8001dba:	4770      	bx	lr
 8001dbc:	46020800 	.word	0x46020800
 8001dc0:	20000040 	.word	0x20000040
 8001dc4:	10624dd3 	.word	0x10624dd3

08001dc8 <HAL_PWREx_GetVoltageRange>:
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001dc8:	4b02      	ldr	r3, [pc, #8]	@ (8001dd4 <HAL_PWREx_GetVoltageRange+0xc>)
 8001dca:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
}
 8001dcc:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	46020800 	.word	0x46020800

08001dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dd8:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dda:	4d2c      	ldr	r5, [pc, #176]	@ (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
{
 8001ddc:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dde:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
{
 8001de2:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001de4:	075b      	lsls	r3, r3, #29
 8001de6:	d52b      	bpl.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8001dec:	f420 3380 	bic.w	r3, r0, #65536	@ 0x10000
 8001df0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001df4:	d007      	beq.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x2e>
      latency = FLASH_LATENCY_0; /* 0WS */
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8001df6:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8001dfa:	d217      	bcs.n	8001e2c <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8001dfc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8001e00:	d133      	bne.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8001e02:	2203      	movs	r2, #3
 8001e04:	e004      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x38>
    if (msirange < RCC_MSIRANGE_1)
 8001e06:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8001e0a:	bf2c      	ite	cs
 8001e0c:	2200      	movcs	r2, #0
 8001e0e:	2201      	movcc	r2, #1
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e10:	491f      	ldr	r1, [pc, #124]	@ (8001e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e12:	680b      	ldr	r3, [r1, #0]
 8001e14:	f023 030f 	bic.w	r3, r3, #15
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001e1c:	6808      	ldr	r0, [r1, #0]
 8001e1e:	f000 000f 	and.w	r0, r0, #15
 8001e22:	1a80      	subs	r0, r0, r2
 8001e24:	bf18      	it	ne
 8001e26:	2001      	movne	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001e28:	b003      	add	sp, #12
 8001e2a:	bd30      	pop	{r4, r5, pc}
      if (msirange > RCC_MSIRANGE_2)
 8001e2c:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8001e30:	d91e      	bls.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x98>
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8001e32:	bb10      	cbnz	r0, 8001e7a <RCC_SetFlashLatencyFromMSIRange+0xa2>
          if (msirange > RCC_MSIRANGE_3)
 8001e34:	f1b4 5f40 	cmp.w	r4, #805306368	@ 0x30000000
 8001e38:	bf8c      	ite	hi
 8001e3a:	2200      	movhi	r2, #0
 8001e3c:	2201      	movls	r2, #1
 8001e3e:	e7e7      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x38>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e40:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8001e4c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001e58:	f7ff ffb6 	bl	8001dc8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e5c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8001e68:	e7c0      	b.n	8001dec <RCC_SetFlashLatencyFromMSIRange+0x14>
        return HAL_ERROR;
 8001e6a:	2001      	movs	r0, #1
}
 8001e6c:	b003      	add	sp, #12
 8001e6e:	bd30      	pop	{r4, r5, pc}
        if (msirange == RCC_MSIRANGE_1)
 8001e70:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 8001e74:	d003      	beq.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0xa6>
          latency = FLASH_LATENCY_1; /* 1WS */
 8001e76:	2201      	movs	r2, #1
 8001e78:	e7ca      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x38>
      latency = FLASH_LATENCY_0; /* 0WS */
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	e7c8      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x38>
            latency = FLASH_LATENCY_2; /* 2WS */
 8001e7e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8001e82:	bf0c      	ite	eq
 8001e84:	2201      	moveq	r2, #1
 8001e86:	2202      	movne	r2, #2
 8001e88:	e7c2      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x38>
 8001e8a:	bf00      	nop
 8001e8c:	46020c00 	.word	0x46020c00
 8001e90:	40022000 	.word	0x40022000

08001e94 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e94:	4a41      	ldr	r2, [pc, #260]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e98:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e9a:	f013 030c 	ands.w	r3, r3, #12
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x24>
 8001ea0:	2b0c      	cmp	r3, #12
 8001ea2:	d05f      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0xd0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea4:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 8001ea6:	483e      	ldr	r0, [pc, #248]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x10c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea8:	f002 020c 	and.w	r2, r2, #12
 8001eac:	2a04      	cmp	r2, #4
 8001eae:	d072      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x102>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	bf18      	it	ne
 8001eb4:	2000      	movne	r0, #0
 8001eb6:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8001eb8:	4a38      	ldr	r2, [pc, #224]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	6891      	ldr	r1, [r2, #8]
 8001ebc:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001ebe:	bf54      	ite	pl
 8001ec0:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001ec4:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8001ec6:	4937      	ldr	r1, [pc, #220]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x110>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001ec8:	bf54      	ite	pl
 8001eca:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001ece:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8001ed0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d05f      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x104>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001ed8:	4930      	ldr	r1, [pc, #192]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
{
 8001eda:	b510      	push	{r4, lr}
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001edc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001ede:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001ee0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001ee2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	ee07 3a10 	vmov	s14, r3
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001eec:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001eee:	f3c4 1e00 	ubfx	lr, r4, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001ef2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8001ef6:	fb0e f303 	mul.w	r3, lr, r3
 8001efa:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001efe:	f002 0c03 	and.w	ip, r2, #3
    switch (pllsource)
 8001f02:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 8001f0a:	d002      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x7e>
 8001f0c:	f1bc 0f03 	cmp.w	ip, #3
 8001f10:	d12f      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f12:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f20:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8001fa8 <HAL_RCC_GetSysClockFreq+0x114>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f24:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001f28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f2c:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 8001fac <HAL_RCC_GetSysClockFreq+0x118>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f30:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f34:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f38:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f3e:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f44:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001f48:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001f4c:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f5a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8001f5e:	ee17 0a90 	vmov	r0, s15
}
 8001f62:	bd10      	pop	{r4, pc}
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f64:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f68:	2901      	cmp	r1, #1
 8001f6a:	d0a5      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U;
 8001f6c:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6e:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	e7b2      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f72:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8001f74:	ee05 0a90 	vmov	s11, r0
 8001f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f7c:	ee06 3a10 	vmov	s12, r3
 8001f80:	eeb8 5a65 	vcvt.f32.u32	s10, s11
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f88:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001f8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f90:	eddf 5a05 	vldr	s11, [pc, #20]	@ 8001fa8 <HAL_RCC_GetSysClockFreq+0x114>
 8001f94:	e7cc      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x9c>
 8001f96:	4770      	bx	lr
}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	46020c00 	.word	0x46020c00
 8001fa0:	00f42400 	.word	0x00f42400
 8001fa4:	08005548 	.word	0x08005548
 8001fa8:	39000000 	.word	0x39000000
 8001fac:	4b742400 	.word	0x4b742400

08001fb0 <HAL_RCC_ClockConfig>:
  if (pRCC_ClkInitStruct == NULL)
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	f000 810e 	beq.w	80021d2 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb6:	4a9f      	ldr	r2, [pc, #636]	@ (8002234 <HAL_RCC_ClockConfig+0x284>)
{
 8001fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	6813      	ldr	r3, [r2, #0]
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	460d      	mov	r5, r1
{
 8001fc8:	b082      	sub	sp, #8
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fca:	d20d      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	f023 030f 	bic.w	r3, r3, #15
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	d003      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
}
 8001fe2:	b002      	add	sp, #8
 8001fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	06df      	lsls	r7, r3, #27
 8001fec:	d50b      	bpl.n	8002006 <HAL_RCC_ClockConfig+0x56>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001fee:	4992      	ldr	r1, [pc, #584]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 8001ff0:	6960      	ldr	r0, [r4, #20]
 8001ff2:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8001ff4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8001ff8:	4290      	cmp	r0, r2
 8001ffa:	d904      	bls.n	8002006 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001ffc:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8001ffe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002002:	4302      	orrs	r2, r0
 8002004:	624a      	str	r2, [r1, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	071e      	lsls	r6, r3, #28
 8002008:	d50d      	bpl.n	8002026 <HAL_RCC_ClockConfig+0x76>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800200a:	498b      	ldr	r1, [pc, #556]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 800200c:	6920      	ldr	r0, [r4, #16]
 800200e:	6a0a      	ldr	r2, [r1, #32]
 8002010:	0912      	lsrs	r2, r2, #4
 8002012:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002016:	4290      	cmp	r0, r2
 8002018:	d905      	bls.n	8002026 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800201a:	6a0a      	ldr	r2, [r1, #32]
 800201c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002020:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8002024:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002026:	0758      	lsls	r0, r3, #29
 8002028:	d50b      	bpl.n	8002042 <HAL_RCC_ClockConfig+0x92>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800202a:	4983      	ldr	r1, [pc, #524]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 800202c:	68e0      	ldr	r0, [r4, #12]
 800202e:	6a0a      	ldr	r2, [r1, #32]
 8002030:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002034:	4290      	cmp	r0, r2
 8002036:	d904      	bls.n	8002042 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002038:	6a0a      	ldr	r2, [r1, #32]
 800203a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800203e:	4302      	orrs	r2, r0
 8002040:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002042:	0799      	lsls	r1, r3, #30
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002044:	f003 0201 	and.w	r2, r3, #1
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	d530      	bpl.n	80020ac <HAL_RCC_ClockConfig+0xfc>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800204a:	4e7b      	ldr	r6, [pc, #492]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 800204c:	68a0      	ldr	r0, [r4, #8]
 800204e:	6a31      	ldr	r1, [r6, #32]
 8002050:	f001 010f 	and.w	r1, r1, #15
 8002054:	4288      	cmp	r0, r1
 8002056:	d904      	bls.n	8002062 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002058:	6a31      	ldr	r1, [r6, #32]
 800205a:	f021 010f 	bic.w	r1, r1, #15
 800205e:	4301      	orrs	r1, r0
 8002060:	6231      	str	r1, [r6, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002062:	2a00      	cmp	r2, #0
 8002064:	f000 8081 	beq.w	800216a <HAL_RCC_ClockConfig+0x1ba>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	2b03      	cmp	r3, #3
 800206c:	f000 80b3 	beq.w	80021d6 <HAL_RCC_ClockConfig+0x226>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002070:	4a71      	ldr	r2, [pc, #452]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	2b02      	cmp	r3, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002074:	6812      	ldr	r2, [r2, #0]
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	f000 8084 	beq.w	8002182 <HAL_RCC_ClockConfig+0x1d2>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 80be 	bne.w	80021fc <HAL_RCC_ClockConfig+0x24c>
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002080:	0757      	lsls	r7, r2, #29
 8002082:	d5ad      	bpl.n	8001fe0 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002084:	4e6c      	ldr	r6, [pc, #432]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002086:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800208a:	69f2      	ldr	r2, [r6, #28]
 800208c:	f022 0203 	bic.w	r2, r2, #3
 8002090:	4313      	orrs	r3, r2
 8002092:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8002094:	f7fe fde6 	bl	8000c64 <HAL_GetTick>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002098:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800209a:	4607      	mov	r7, r0
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209c:	2b03      	cmp	r3, #3
 800209e:	d05b      	beq.n	8002158 <HAL_RCC_ClockConfig+0x1a8>
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d077      	beq.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 808a 	bne.w	80021be <HAL_RCC_ClockConfig+0x20e>
 80020aa:	e07e      	b.n	80021aa <HAL_RCC_ClockConfig+0x1fa>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d1db      	bne.n	8002068 <HAL_RCC_ClockConfig+0xb8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4960      	ldr	r1, [pc, #384]	@ (8002234 <HAL_RCC_ClockConfig+0x284>)
 80020b2:	680a      	ldr	r2, [r1, #0]
 80020b4:	f002 020f 	and.w	r2, r2, #15
 80020b8:	42aa      	cmp	r2, r5
 80020ba:	d909      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x120>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020bc:	680a      	ldr	r2, [r1, #0]
 80020be:	f022 020f 	bic.w	r2, r2, #15
 80020c2:	432a      	orrs	r2, r5
 80020c4:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	680a      	ldr	r2, [r1, #0]
 80020c8:	f002 020f 	and.w	r2, r2, #15
 80020cc:	42aa      	cmp	r2, r5
 80020ce:	d187      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x30>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	0759      	lsls	r1, r3, #29
 80020d2:	d50b      	bpl.n	80020ec <HAL_RCC_ClockConfig+0x13c>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80020d4:	4958      	ldr	r1, [pc, #352]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 80020d6:	68e0      	ldr	r0, [r4, #12]
 80020d8:	6a0a      	ldr	r2, [r1, #32]
 80020da:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80020de:	4290      	cmp	r0, r2
 80020e0:	d204      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x13c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80020e2:	6a0a      	ldr	r2, [r1, #32]
 80020e4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80020e8:	4302      	orrs	r2, r0
 80020ea:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	071a      	lsls	r2, r3, #28
 80020ee:	d50d      	bpl.n	800210c <HAL_RCC_ClockConfig+0x15c>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80020f0:	4951      	ldr	r1, [pc, #324]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 80020f2:	6920      	ldr	r0, [r4, #16]
 80020f4:	6a0a      	ldr	r2, [r1, #32]
 80020f6:	0912      	lsrs	r2, r2, #4
 80020f8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80020fc:	4290      	cmp	r0, r2
 80020fe:	d205      	bcs.n	800210c <HAL_RCC_ClockConfig+0x15c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002100:	6a0a      	ldr	r2, [r1, #32]
 8002102:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002106:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800210a:	620a      	str	r2, [r1, #32]
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800210c:	06db      	lsls	r3, r3, #27
 800210e:	d50b      	bpl.n	8002128 <HAL_RCC_ClockConfig+0x178>
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002110:	4a49      	ldr	r2, [pc, #292]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 8002112:	6961      	ldr	r1, [r4, #20]
 8002114:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800211a:	4299      	cmp	r1, r3
 800211c:	d204      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800211e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002124:	430b      	orrs	r3, r1
 8002126:	6253      	str	r3, [r2, #36]	@ 0x24
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002128:	f7ff feb4 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 800212c:	4603      	mov	r3, r0
 800212e:	4a42      	ldr	r2, [pc, #264]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 8002130:	4942      	ldr	r1, [pc, #264]	@ (800223c <HAL_RCC_ClockConfig+0x28c>)
 8002132:	6a12      	ldr	r2, [r2, #32]
  status = HAL_InitTick(uwTickPrio);
 8002134:	4842      	ldr	r0, [pc, #264]	@ (8002240 <HAL_RCC_ClockConfig+0x290>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002136:	f002 020f 	and.w	r2, r2, #15
 800213a:	5c89      	ldrb	r1, [r1, r2]
  status = HAL_InitTick(uwTickPrio);
 800213c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800213e:	4a41      	ldr	r2, [pc, #260]	@ (8002244 <HAL_RCC_ClockConfig+0x294>)
 8002140:	40cb      	lsrs	r3, r1
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	b002      	add	sp, #8
 8002146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800214a:	f7fe bd03 	b.w	8000b54 <HAL_InitTick>
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7fe fd89 	bl	8000c64 <HAL_GetTick>
 8002152:	1bc3      	subs	r3, r0, r7
 8002154:	4543      	cmp	r3, r8
 8002156:	d838      	bhi.n	80021ca <HAL_RCC_ClockConfig+0x21a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002158:	69f3      	ldr	r3, [r6, #28]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d1f5      	bne.n	800214e <HAL_RCC_ClockConfig+0x19e>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	0798      	lsls	r0, r3, #30
 8002166:	d5a3      	bpl.n	80020b0 <HAL_RCC_ClockConfig+0x100>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002168:	68a0      	ldr	r0, [r4, #8]
 800216a:	4933      	ldr	r1, [pc, #204]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 800216c:	6a0a      	ldr	r2, [r1, #32]
 800216e:	f002 020f 	and.w	r2, r2, #15
 8002172:	4282      	cmp	r2, r0
 8002174:	d99c      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x100>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002176:	6a0a      	ldr	r2, [r1, #32]
 8002178:	f022 020f 	bic.w	r2, r2, #15
 800217c:	4302      	orrs	r2, r0
 800217e:	620a      	str	r2, [r1, #32]
 8002180:	e796      	b.n	80020b0 <HAL_RCC_ClockConfig+0x100>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	0392      	lsls	r2, r2, #14
 8002184:	f53f af7e 	bmi.w	8002084 <HAL_RCC_ClockConfig+0xd4>
 8002188:	e72a      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x30>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7fe fd6b 	bl	8000c64 <HAL_GetTick>
 800218e:	1bc0      	subs	r0, r0, r7
 8002190:	4540      	cmp	r0, r8
 8002192:	d81a      	bhi.n	80021ca <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002194:	69f3      	ldr	r3, [r6, #28]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d1f5      	bne.n	800218a <HAL_RCC_ClockConfig+0x1da>
 800219e:	e7e0      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe fd60 	bl	8000c64 <HAL_GetTick>
 80021a4:	1bc0      	subs	r0, r0, r7
 80021a6:	4540      	cmp	r0, r8
 80021a8:	d80f      	bhi.n	80021ca <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021aa:	69f3      	ldr	r3, [r6, #28]
 80021ac:	f013 0f0c 	tst.w	r3, #12
 80021b0:	d1f6      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x1f0>
 80021b2:	e7d6      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7fe fd56 	bl	8000c64 <HAL_GetTick>
 80021b8:	1bc0      	subs	r0, r0, r7
 80021ba:	4540      	cmp	r0, r8
 80021bc:	d805      	bhi.n	80021ca <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021be:	69f3      	ldr	r3, [r6, #28]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d1f5      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x204>
 80021c8:	e7cb      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b2>
            return HAL_TIMEOUT;
 80021ca:	2003      	movs	r0, #3
}
 80021cc:	b002      	add	sp, #8
 80021ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80021d2:	2001      	movs	r0, #1
}
 80021d4:	4770      	bx	lr
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 80021d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80021dc:	0752      	lsls	r2, r2, #29
 80021de:	d511      	bpl.n	8002204 <HAL_RCC_ClockConfig+0x254>
      tickstart = HAL_GetTick();
 80021e0:	f7fe fd40 	bl	8000c64 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80021e4:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 80021e6:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	035b      	lsls	r3, r3, #13
 80021ec:	d441      	bmi.n	8002272 <HAL_RCC_ClockConfig+0x2c2>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0199      	lsls	r1, r3, #6
 80021f4:	f57f aef4 	bpl.w	8001fe0 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80021f8:	6863      	ldr	r3, [r4, #4]
 80021fa:	e743      	b.n	8002084 <HAL_RCC_ClockConfig+0xd4>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fc:	0556      	lsls	r6, r2, #21
 80021fe:	f57f aeef 	bpl.w	8001fe0 <HAL_RCC_ClockConfig+0x30>
 8002202:	e73f      	b.n	8002084 <HAL_RCC_ClockConfig+0xd4>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002208:	f042 0204 	orr.w	r2, r2, #4
 800220c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	9b01      	ldr	r3, [sp, #4]
      tickstart = HAL_GetTick();
 800221c:	f7fe fd22 	bl	8000c64 <HAL_GetTick>
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002220:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_RCC_ClockConfig+0x298>)
      tickstart = HAL_GetTick();
 8002222:	4606      	mov	r6, r0
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	035f      	lsls	r7, r3, #13
 8002228:	d51b      	bpl.n	8002262 <HAL_RCC_ClockConfig+0x2b2>
        pwrclkchanged = SET;
 800222a:	f04f 0801 	mov.w	r8, #1
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800222e:	4f06      	ldr	r7, [pc, #24]	@ (8002248 <HAL_RCC_ClockConfig+0x298>)
 8002230:	e011      	b.n	8002256 <HAL_RCC_ClockConfig+0x2a6>
 8002232:	bf00      	nop
 8002234:	40022000 	.word	0x40022000
 8002238:	46020c00 	.word	0x46020c00
 800223c:	08005590 	.word	0x08005590
 8002240:	20000048 	.word	0x20000048
 8002244:	20000040 	.word	0x20000040
 8002248:	46020800 	.word	0x46020800
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800224c:	f7fe fd0a 	bl	8000c64 <HAL_GetTick>
 8002250:	1b80      	subs	r0, r0, r6
 8002252:	2802      	cmp	r0, #2
 8002254:	d8b9      	bhi.n	80021ca <HAL_RCC_ClockConfig+0x21a>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	0458      	lsls	r0, r3, #17
 800225a:	d5f7      	bpl.n	800224c <HAL_RCC_ClockConfig+0x29c>
      if (pwrclkchanged == SET)
 800225c:	f1b8 0f00 	cmp.w	r8, #0
 8002260:	d0c5      	beq.n	80021ee <HAL_RCC_ClockConfig+0x23e>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4a05      	ldr	r2, [pc, #20]	@ (8002278 <HAL_RCC_ClockConfig+0x2c8>)
 8002264:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002270:	e7bd      	b.n	80021ee <HAL_RCC_ClockConfig+0x23e>
    FlagStatus  pwrclkchanged = RESET;
 8002272:	f04f 0800 	mov.w	r8, #0
 8002276:	e7da      	b.n	800222e <HAL_RCC_ClockConfig+0x27e>
 8002278:	46020c00 	.word	0x46020c00

0800227c <HAL_RCC_OscConfig>:
  if (pRCC_OscInitStruct == NULL)
 800227c:	2800      	cmp	r0, #0
 800227e:	f000 82a4 	beq.w	80027ca <HAL_RCC_OscConfig+0x54e>
{
 8002282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002286:	4aae      	ldr	r2, [pc, #696]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002288:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	69d5      	ldr	r5, [r2, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800228c:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800228e:	06da      	lsls	r2, r3, #27
 8002290:	4604      	mov	r4, r0
{
 8002292:	b084      	sub	sp, #16
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002294:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002298:	f006 0603 	and.w	r6, r6, #3
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800229c:	d531      	bpl.n	8002302 <HAL_RCC_OscConfig+0x86>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800229e:	2d00      	cmp	r5, #0
 80022a0:	f000 81b2 	beq.w	8002608 <HAL_RCC_OscConfig+0x38c>
 80022a4:	2d0c      	cmp	r5, #12
 80022a6:	f000 81ac 	beq.w	8002602 <HAL_RCC_OscConfig+0x386>
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022aa:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 80022ac:	4fa4      	ldr	r7, [pc, #656]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 822b 	beq.w	800270a <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_MSI_ENABLE();
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80022bc:	f7fe fcd2 	bl	8000c64 <HAL_GetTick>
 80022c0:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80022c2:	e006      	b.n	80022d2 <HAL_RCC_OscConfig+0x56>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c4:	f7fe fcce 	bl	8000c64 <HAL_GetTick>
 80022c8:	eba0 0008 	sub.w	r0, r0, r8
 80022cc:	2802      	cmp	r0, #2
 80022ce:	f200 820e 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	075a      	lsls	r2, r3, #29
 80022d6:	d5f5      	bpl.n	80022c4 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80022e4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022ec:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 80022f0:	6a21      	ldr	r1, [r4, #32]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f0c0 8367 	bcc.w	80029c6 <HAL_RCC_OscConfig+0x74a>
 80022f8:	f023 031f 	bic.w	r3, r3, #31
 80022fc:	430b      	orrs	r3, r1
 80022fe:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	07df      	lsls	r7, r3, #31
 8002304:	d531      	bpl.n	800236a <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002306:	2d08      	cmp	r5, #8
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002308:	6862      	ldr	r2, [r4, #4]
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800230a:	f000 81bd 	beq.w	8002688 <HAL_RCC_OscConfig+0x40c>
 800230e:	2d0c      	cmp	r5, #12
 8002310:	f000 81b7 	beq.w	8002682 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002314:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002318:	f000 825b 	beq.w	80027d2 <HAL_RCC_OscConfig+0x556>
 800231c:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8002320:	f000 833c 	beq.w	800299c <HAL_RCC_OscConfig+0x720>
 8002324:	f5b2 1fa8 	cmp.w	r2, #1376256	@ 0x150000
 8002328:	f000 82fb 	beq.w	8002922 <HAL_RCC_OscConfig+0x6a6>
 800232c:	4f84      	ldr	r7, [pc, #528]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002344:	603b      	str	r3, [r7, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002346:	2a00      	cmp	r2, #0
 8002348:	f040 8248 	bne.w	80027dc <HAL_RCC_OscConfig+0x560>
        tickstart = HAL_GetTick();
 800234c:	f7fe fc8a 	bl	8000c64 <HAL_GetTick>
 8002350:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002352:	e006      	b.n	8002362 <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7fe fc86 	bl	8000c64 <HAL_GetTick>
 8002358:	eba0 0008 	sub.w	r0, r0, r8
 800235c:	2864      	cmp	r0, #100	@ 0x64
 800235e:	f200 81c6 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	0399      	lsls	r1, r3, #14
 8002366:	d4f5      	bmi.n	8002354 <HAL_RCC_OscConfig+0xd8>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	079a      	lsls	r2, r3, #30
 800236c:	d50f      	bpl.n	800238e <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800236e:	2d04      	cmp	r5, #4
 8002370:	f040 81c4 	bne.w	80026fc <HAL_RCC_OscConfig+0x480>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002374:	68e3      	ldr	r3, [r4, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 817f 	beq.w	800267a <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800237c:	4a70      	ldr	r2, [pc, #448]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 800237e:	6921      	ldr	r1, [r4, #16]
 8002380:	6913      	ldr	r3, [r2, #16]
 8002382:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002386:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800238a:	6113      	str	r3, [r2, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	0718      	lsls	r0, r3, #28
 8002390:	d54d      	bpl.n	800242e <HAL_RCC_OscConfig+0x1b2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002392:	4b6b      	ldr	r3, [pc, #428]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 8002394:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002398:	0751      	lsls	r1, r2, #29
 800239a:	f100 81b4 	bmi.w	8002706 <HAL_RCC_OscConfig+0x48a>
      pwrclkchanged = SET;
 800239e:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80023a4:	f042 0204 	orr.w	r2, r2, #4
 80023a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80023ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80023b8:	4e62      	ldr	r6, [pc, #392]	@ (8002544 <HAL_RCC_OscConfig+0x2c8>)
 80023ba:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80023bc:	07da      	lsls	r2, r3, #31
 80023be:	f140 8186 	bpl.w	80026ce <HAL_RCC_OscConfig+0x452>
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c2:	6963      	ldr	r3, [r4, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 825d 	beq.w	8002884 <HAL_RCC_OscConfig+0x608>
      uint32_t bdcr_temp = RCC->BDCR;
 80023ca:	4e5d      	ldr	r6, [pc, #372]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80023cc:	69a2      	ldr	r2, [r4, #24]
      uint32_t bdcr_temp = RCC->BDCR;
 80023ce:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80023d2:	f003 5180 	and.w	r1, r3, #268435456	@ 0x10000000
 80023d6:	428a      	cmp	r2, r1
 80023d8:	d010      	beq.n	80023fc <HAL_RCC_OscConfig+0x180>
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80023da:	f003 6140 	and.w	r1, r3, #201326592	@ 0xc000000
 80023de:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 80023e2:	f000 814a 	beq.w	800267a <HAL_RCC_OscConfig+0x3fe>
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80023e6:	0158      	lsls	r0, r3, #5
 80023e8:	f100 82b1 	bmi.w	800294e <HAL_RCC_OscConfig+0x6d2>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80023ec:	4954      	ldr	r1, [pc, #336]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 80023ee:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 80023f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      __HAL_RCC_LSI_ENABLE();
 80023fc:	4e50      	ldr	r6, [pc, #320]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 80023fe:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002402:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002406:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800240a:	f7fe fc2b 	bl	8000c64 <HAL_GetTick>
 800240e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002410:	e005      	b.n	800241e <HAL_RCC_OscConfig+0x1a2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002412:	f7fe fc27 	bl	8000c64 <HAL_GetTick>
 8002416:	1bc0      	subs	r0, r0, r7
 8002418:	2805      	cmp	r0, #5
 800241a:	f200 8168 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800241e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002422:	011a      	lsls	r2, r3, #4
 8002424:	d5f5      	bpl.n	8002412 <HAL_RCC_OscConfig+0x196>
    if (pwrclkchanged == SET)
 8002426:	2d00      	cmp	r5, #0
 8002428:	f040 8289 	bne.w	800293e <HAL_RCC_OscConfig+0x6c2>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	075d      	lsls	r5, r3, #29
 8002430:	d55e      	bpl.n	80024f0 <HAL_RCC_OscConfig+0x274>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002432:	4b43      	ldr	r3, [pc, #268]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 8002434:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002438:	0750      	lsls	r0, r2, #29
 800243a:	f100 81c8 	bmi.w	80027ce <HAL_RCC_OscConfig+0x552>
      pwrclkchanged = SET;
 800243e:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002440:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002444:	f042 0204 	orr.w	r2, r2, #4
 8002448:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800244c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	9b02      	ldr	r3, [sp, #8]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002458:	4e3a      	ldr	r6, [pc, #232]	@ (8002544 <HAL_RCC_OscConfig+0x2c8>)
 800245a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800245c:	07d9      	lsls	r1, r3, #31
 800245e:	f140 828c 	bpl.w	800297a <HAL_RCC_OscConfig+0x6fe>
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002462:	68a3      	ldr	r3, [r4, #8]
 8002464:	07da      	lsls	r2, r3, #31
 8002466:	f140 81d3 	bpl.w	8002810 <HAL_RCC_OscConfig+0x594>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800246a:	075e      	lsls	r6, r3, #29
 800246c:	f140 8251 	bpl.w	8002912 <HAL_RCC_OscConfig+0x696>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002470:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 8002472:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002476:	f042 0204 	orr.w	r2, r2, #4
 800247a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800247e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 800248a:	f7fe fbeb 	bl	8000c64 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002492:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002494:	4f2a      	ldr	r7, [pc, #168]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 8002496:	e005      	b.n	80024a4 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f7fe fbe4 	bl	8000c64 <HAL_GetTick>
 800249c:	1b80      	subs	r0, r0, r6
 800249e:	4540      	cmp	r0, r8
 80024a0:	f200 8125 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80024a8:	0798      	lsls	r0, r3, #30
 80024aa:	d5f5      	bpl.n	8002498 <HAL_RCC_OscConfig+0x21c>
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80024ac:	68a3      	ldr	r3, [r4, #8]
 80024ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80024b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80024b6:	f000 82c7 	beq.w	8002a48 <HAL_RCC_OscConfig+0x7cc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80024ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80024c6:	4f1e      	ldr	r7, [pc, #120]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 80024c8:	e005      	b.n	80024d6 <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fbcb 	bl	8000c64 <HAL_GetTick>
 80024ce:	1b80      	subs	r0, r0, r6
 80024d0:	4540      	cmp	r0, r8
 80024d2:	f200 810c 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80024d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80024da:	0519      	lsls	r1, r3, #20
 80024dc:	d5f5      	bpl.n	80024ca <HAL_RCC_OscConfig+0x24e>
    if (pwrclkchanged == SET)
 80024de:	b135      	cbz	r5, 80024ee <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e0:	4a17      	ldr	r2, [pc, #92]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
 80024e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80024e6:	f023 0304 	bic.w	r3, r3, #4
 80024ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	069a      	lsls	r2, r3, #26
 80024f2:	d516      	bpl.n	8002522 <HAL_RCC_OscConfig+0x2a6>
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      __HAL_RCC_HSI48_ENABLE();
 80024f6:	4d12      	ldr	r5, [pc, #72]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 81dc 	beq.w	80028b6 <HAL_RCC_OscConfig+0x63a>
      __HAL_RCC_HSI48_ENABLE();
 80024fe:	682b      	ldr	r3, [r5, #0]
 8002500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002504:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002506:	f7fe fbad 	bl	8000c64 <HAL_GetTick>
 800250a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800250c:	e005      	b.n	800251a <HAL_RCC_OscConfig+0x29e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250e:	f7fe fba9 	bl	8000c64 <HAL_GetTick>
 8002512:	1b80      	subs	r0, r0, r6
 8002514:	2802      	cmp	r0, #2
 8002516:	f200 80ea 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800251a:	682b      	ldr	r3, [r5, #0]
 800251c:	049b      	lsls	r3, r3, #18
 800251e:	d5f6      	bpl.n	800250e <HAL_RCC_OscConfig+0x292>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	061d      	lsls	r5, r3, #24
 8002524:	d51a      	bpl.n	800255c <HAL_RCC_OscConfig+0x2e0>
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002526:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      __HAL_RCC_SHSI_ENABLE();
 8002528:	4d05      	ldr	r5, [pc, #20]	@ (8002540 <HAL_RCC_OscConfig+0x2c4>)
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 81df 	beq.w	80028ee <HAL_RCC_OscConfig+0x672>
      __HAL_RCC_SHSI_ENABLE();
 8002530:	682b      	ldr	r3, [r5, #0]
 8002532:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002536:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002538:	f7fe fb94 	bl	8000c64 <HAL_GetTick>
 800253c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800253e:	e009      	b.n	8002554 <HAL_RCC_OscConfig+0x2d8>
 8002540:	46020c00 	.word	0x46020c00
 8002544:	46020800 	.word	0x46020800
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002548:	f7fe fb8c 	bl	8000c64 <HAL_GetTick>
 800254c:	1b80      	subs	r0, r0, r6
 800254e:	2802      	cmp	r0, #2
 8002550:	f200 80cd 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	0418      	lsls	r0, r3, #16
 8002558:	d5f6      	bpl.n	8002548 <HAL_RCC_OscConfig+0x2cc>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	065a      	lsls	r2, r3, #25
 800255e:	d52b      	bpl.n	80025b8 <HAL_RCC_OscConfig+0x33c>
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8257 	beq.w	8002a16 <HAL_RCC_OscConfig+0x79a>
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002568:	4ba5      	ldr	r3, [pc, #660]	@ (8002800 <HAL_RCC_OscConfig+0x584>)
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002576:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800257e:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8002582:	f1b2 4f40 	cmp.w	r2, #3221225472	@ 0xc0000000
 8002586:	f0c0 8235 	bcc.w	80029f4 <HAL_RCC_OscConfig+0x778>
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	f022 021f 	bic.w	r2, r2, #31
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
      __HAL_RCC_MSIK_ENABLE();
 8002594:	4d9a      	ldr	r5, [pc, #616]	@ (8002800 <HAL_RCC_OscConfig+0x584>)
 8002596:	682b      	ldr	r3, [r5, #0]
 8002598:	f043 0310 	orr.w	r3, r3, #16
 800259c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800259e:	f7fe fb61 	bl	8000c64 <HAL_GetTick>
 80025a2:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80025a4:	e005      	b.n	80025b2 <HAL_RCC_OscConfig+0x336>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80025a6:	f7fe fb5d 	bl	8000c64 <HAL_GetTick>
 80025aa:	1b80      	subs	r0, r0, r6
 80025ac:	2802      	cmp	r0, #2
 80025ae:	f200 809e 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80025b2:	682b      	ldr	r3, [r5, #0]
 80025b4:	069b      	lsls	r3, r3, #26
 80025b6:	d5f6      	bpl.n	80025a6 <HAL_RCC_OscConfig+0x32a>
  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025ba:	b303      	cbz	r3, 80025fe <HAL_RCC_OscConfig+0x382>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025bc:	4d90      	ldr	r5, [pc, #576]	@ (8002800 <HAL_RCC_OscConfig+0x584>)
 80025be:	69ea      	ldr	r2, [r5, #28]
 80025c0:	f002 020c 	and.w	r2, r2, #12
 80025c4:	2a0c      	cmp	r2, #12
 80025c6:	f000 8255 	beq.w	8002a74 <HAL_RCC_OscConfig+0x7f8>
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ca:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025d2:	602b      	str	r3, [r5, #0]
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d4:	f000 82a6 	beq.w	8002b24 <HAL_RCC_OscConfig+0x8a8>
        tickstart = HAL_GetTick();
 80025d8:	f7fe fb44 	bl	8000c64 <HAL_GetTick>
 80025dc:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025de:	e005      	b.n	80025ec <HAL_RCC_OscConfig+0x370>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fb40 	bl	8000c64 <HAL_GetTick>
 80025e4:	1b00      	subs	r0, r0, r4
 80025e6:	2802      	cmp	r0, #2
 80025e8:	f200 8081 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025ec:	682b      	ldr	r3, [r5, #0]
 80025ee:	0199      	lsls	r1, r3, #6
 80025f0:	d4f6      	bmi.n	80025e0 <HAL_RCC_OscConfig+0x364>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80025f2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80025f4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80025f8:	f023 0303 	bic.w	r3, r3, #3
 80025fc:	62ab      	str	r3, [r5, #40]	@ 0x28
  return HAL_OK;
 80025fe:	2000      	movs	r0, #0
 8002600:	e03c      	b.n	800267c <HAL_RCC_OscConfig+0x400>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002602:	2e01      	cmp	r6, #1
 8002604:	f47f ae51 	bne.w	80022aa <HAL_RCC_OscConfig+0x2e>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002608:	69e3      	ldr	r3, [r4, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d035      	beq.n	800267a <HAL_RCC_OscConfig+0x3fe>
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800260e:	4b7c      	ldr	r3, [pc, #496]	@ (8002800 <HAL_RCC_OscConfig+0x584>)
 8002610:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	0217      	lsls	r7, r2, #8
 8002616:	bf56      	itet	pl
 8002618:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
 800261c:	689b      	ldrmi	r3, [r3, #8]
 800261e:	041b      	lslpl	r3, r3, #16
 8002620:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002624:	4298      	cmp	r0, r3
 8002626:	f240 8083 	bls.w	8002730 <HAL_RCC_OscConfig+0x4b4>
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800262a:	2d00      	cmp	r5, #0
 800262c:	f000 81c4 	beq.w	80029b8 <HAL_RCC_OscConfig+0x73c>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002630:	4b73      	ldr	r3, [pc, #460]	@ (8002800 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002632:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002644:	ea42 0200 	orr.w	r2, r2, r0
 8002648:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800264a:	6a21      	ldr	r1, [r4, #32]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	f080 8149 	bcs.w	80028e4 <HAL_RCC_OscConfig+0x668>
 8002652:	2800      	cmp	r0, #0
 8002654:	f2c0 81f2 	blt.w	8002a3c <HAL_RCC_OscConfig+0x7c0>
 8002658:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800265c:	bf2b      	itete	cs
 800265e:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8002662:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8002666:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 800266a:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	e081      	b.n	8002776 <HAL_RCC_OscConfig+0x4fa>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002672:	f7ff fbb1 	bl	8001dd8 <RCC_SetFlashLatencyFromMSIRange>
 8002676:	2800      	cmp	r0, #0
 8002678:	d07d      	beq.n	8002776 <HAL_RCC_OscConfig+0x4fa>
    return HAL_ERROR;
 800267a:	2001      	movs	r0, #1
}
 800267c:	b004      	add	sp, #16
 800267e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002682:	2e03      	cmp	r6, #3
 8002684:	f47f ae46 	bne.w	8002314 <HAL_RCC_OscConfig+0x98>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002688:	2a00      	cmp	r2, #0
 800268a:	d0f6      	beq.n	800267a <HAL_RCC_OscConfig+0x3fe>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268c:	079d      	lsls	r5, r3, #30
 800268e:	f57f ae7e 	bpl.w	800238e <HAL_RCC_OscConfig+0x112>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002692:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002694:	4d5a      	ldr	r5, [pc, #360]	@ (8002800 <HAL_RCC_OscConfig+0x584>)
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8085 	beq.w	80027a6 <HAL_RCC_OscConfig+0x52a>
        __HAL_RCC_HSI_ENABLE();
 800269c:	682b      	ldr	r3, [r5, #0]
 800269e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026a4:	f7fe fade 	bl	8000c64 <HAL_GetTick>
 80026a8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026aa:	e004      	b.n	80026b6 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7fe fada 	bl	8000c64 <HAL_GetTick>
 80026b0:	1b80      	subs	r0, r0, r6
 80026b2:	2802      	cmp	r0, #2
 80026b4:	d81b      	bhi.n	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b6:	682b      	ldr	r3, [r5, #0]
 80026b8:	055b      	lsls	r3, r3, #21
 80026ba:	d5f7      	bpl.n	80026ac <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80026bc:	692b      	ldr	r3, [r5, #16]
 80026be:	6922      	ldr	r2, [r4, #16]
 80026c0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80026c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80026c8:	612b      	str	r3, [r5, #16]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	e65f      	b.n	800238e <HAL_RCC_OscConfig+0x112>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80026ce:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 80026d6:	f7fe fac5 	bl	8000c64 <HAL_GetTick>
 80026da:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026dc:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80026de:	07db      	lsls	r3, r3, #31
 80026e0:	f53f ae6f 	bmi.w	80023c2 <HAL_RCC_OscConfig+0x146>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e4:	f7fe fabe 	bl	8000c64 <HAL_GetTick>
 80026e8:	1bc0      	subs	r0, r0, r7
 80026ea:	2802      	cmp	r0, #2
 80026ec:	d9f6      	bls.n	80026dc <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80026ee:	2003      	movs	r0, #3
}
 80026f0:	b004      	add	sp, #16
 80026f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	079a      	lsls	r2, r3, #30
 80026f8:	f57f ae49 	bpl.w	800238e <HAL_RCC_OscConfig+0x112>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80026fc:	2d0c      	cmp	r5, #12
 80026fe:	d1c8      	bne.n	8002692 <HAL_RCC_OscConfig+0x416>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002700:	2e02      	cmp	r6, #2
 8002702:	d1c6      	bne.n	8002692 <HAL_RCC_OscConfig+0x416>
 8002704:	e636      	b.n	8002374 <HAL_RCC_OscConfig+0xf8>
    FlagStatus  pwrclkchanged = RESET;
 8002706:	2500      	movs	r5, #0
 8002708:	e656      	b.n	80023b8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_DISABLE();
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002712:	f7fe faa7 	bl	8000c64 <HAL_GetTick>
 8002716:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002718:	e005      	b.n	8002726 <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800271a:	f7fe faa3 	bl	8000c64 <HAL_GetTick>
 800271e:	eba0 0008 	sub.w	r0, r0, r8
 8002722:	2802      	cmp	r0, #2
 8002724:	d8e3      	bhi.n	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	075b      	lsls	r3, r3, #29
 800272a:	d4f6      	bmi.n	800271a <HAL_RCC_OscConfig+0x49e>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	e5e8      	b.n	8002302 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002730:	4b33      	ldr	r3, [pc, #204]	@ (8002800 <HAL_RCC_OscConfig+0x584>)
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002732:	f1b0 4f40 	cmp.w	r0, #3221225472	@ 0xc0000000
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002744:	ea42 0200 	orr.w	r2, r2, r0
 8002748:	609a      	str	r2, [r3, #8]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800274a:	6a21      	ldr	r1, [r4, #32]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	f080 80c4 	bcs.w	80028da <HAL_RCC_OscConfig+0x65e>
 8002752:	2800      	cmp	r0, #0
 8002754:	f2c0 8148 	blt.w	80029e8 <HAL_RCC_OscConfig+0x76c>
 8002758:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800275c:	bf2b      	itete	cs
 800275e:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8002762:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8002766:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 800276a:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 800276e:	60da      	str	r2, [r3, #12]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002770:	2d00      	cmp	r5, #0
 8002772:	f43f af7e 	beq.w	8002672 <HAL_RCC_OscConfig+0x3f6>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002776:	f7ff fb8d 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 800277a:	4603      	mov	r3, r0
 800277c:	4a20      	ldr	r2, [pc, #128]	@ (8002800 <HAL_RCC_OscConfig+0x584>)
 800277e:	4921      	ldr	r1, [pc, #132]	@ (8002804 <HAL_RCC_OscConfig+0x588>)
 8002780:	6a12      	ldr	r2, [r2, #32]
 8002782:	f002 020f 	and.w	r2, r2, #15
 8002786:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 8002788:	4a1f      	ldr	r2, [pc, #124]	@ (8002808 <HAL_RCC_OscConfig+0x58c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800278a:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 800278c:	6810      	ldr	r0, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800278e:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <HAL_RCC_OscConfig+0x590>)
 8002790:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002792:	f7fe f9df 	bl	8000b54 <HAL_InitTick>
        if (status != HAL_OK)
 8002796:	2800      	cmp	r0, #0
 8002798:	f47f af70 	bne.w	800267c <HAL_RCC_OscConfig+0x400>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	07d9      	lsls	r1, r3, #31
 80027a0:	d5a9      	bpl.n	80026f6 <HAL_RCC_OscConfig+0x47a>
 80027a2:	6862      	ldr	r2, [r4, #4]
 80027a4:	e5b3      	b.n	800230e <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_DISABLE();
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027ae:	f7fe fa59 	bl	8000c64 <HAL_GetTick>
 80027b2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b4:	e004      	b.n	80027c0 <HAL_RCC_OscConfig+0x544>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe fa55 	bl	8000c64 <HAL_GetTick>
 80027ba:	1b80      	subs	r0, r0, r6
 80027bc:	2802      	cmp	r0, #2
 80027be:	d896      	bhi.n	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c0:	682b      	ldr	r3, [r5, #0]
 80027c2:	055f      	lsls	r7, r3, #21
 80027c4:	d4f7      	bmi.n	80027b6 <HAL_RCC_OscConfig+0x53a>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	e5e1      	b.n	800238e <HAL_RCC_OscConfig+0x112>
    return HAL_ERROR;
 80027ca:	2001      	movs	r0, #1
}
 80027cc:	4770      	bx	lr
    FlagStatus pwrclkchanged = RESET;
 80027ce:	2500      	movs	r5, #0
 80027d0:	e642      	b.n	8002458 <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80027d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002800 <HAL_RCC_OscConfig+0x584>)
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80027dc:	f7fe fa42 	bl	8000c64 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e0:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8002800 <HAL_RCC_OscConfig+0x584>
        tickstart = HAL_GetTick();
 80027e4:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e6:	e005      	b.n	80027f4 <HAL_RCC_OscConfig+0x578>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fa3c 	bl	8000c64 <HAL_GetTick>
 80027ec:	1bc0      	subs	r0, r0, r7
 80027ee:	2864      	cmp	r0, #100	@ 0x64
 80027f0:	f63f af7d 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f4:	f8d8 3000 	ldr.w	r3, [r8]
 80027f8:	0398      	lsls	r0, r3, #14
 80027fa:	d5f5      	bpl.n	80027e8 <HAL_RCC_OscConfig+0x56c>
 80027fc:	e5b4      	b.n	8002368 <HAL_RCC_OscConfig+0xec>
 80027fe:	bf00      	nop
 8002800:	46020c00 	.word	0x46020c00
 8002804:	08005590 	.word	0x08005590
 8002808:	20000048 	.word	0x20000048
 800280c:	20000040 	.word	0x20000040
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002810:	4e97      	ldr	r6, [pc, #604]	@ (8002a70 <HAL_RCC_OscConfig+0x7f4>)
 8002812:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800281e:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 8002822:	f022 0204 	bic.w	r2, r2, #4
 8002826:	f8c6 20f0 	str.w	r2, [r6, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800282a:	2b00      	cmp	r3, #0
 800282c:	f47f ae2d 	bne.w	800248a <HAL_RCC_OscConfig+0x20e>
      tickstart = HAL_GetTick();
 8002830:	f7fe fa18 	bl	8000c64 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002838:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800283a:	e005      	b.n	8002848 <HAL_RCC_OscConfig+0x5cc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe fa12 	bl	8000c64 <HAL_GetTick>
 8002840:	1bc0      	subs	r0, r0, r7
 8002842:	4540      	cmp	r0, r8
 8002844:	f63f af53 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002848:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800284c:	079b      	lsls	r3, r3, #30
 800284e:	d4f5      	bmi.n	800283c <HAL_RCC_OscConfig+0x5c0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002850:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002854:	0618      	lsls	r0, r3, #24
 8002856:	f57f ae42 	bpl.w	80024de <HAL_RCC_OscConfig+0x262>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800285a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f241 3888 	movw	r8, #5000	@ 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002866:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800286a:	4e81      	ldr	r6, [pc, #516]	@ (8002a70 <HAL_RCC_OscConfig+0x7f4>)
 800286c:	e005      	b.n	800287a <HAL_RCC_OscConfig+0x5fe>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe f9f9 	bl	8000c64 <HAL_GetTick>
 8002872:	1bc0      	subs	r0, r0, r7
 8002874:	4540      	cmp	r0, r8
 8002876:	f63f af3a 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800287a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800287e:	0519      	lsls	r1, r3, #20
 8002880:	d4f5      	bmi.n	800286e <HAL_RCC_OscConfig+0x5f2>
 8002882:	e62c      	b.n	80024de <HAL_RCC_OscConfig+0x262>
      __HAL_RCC_LSI_DISABLE();
 8002884:	4e7a      	ldr	r6, [pc, #488]	@ (8002a70 <HAL_RCC_OscConfig+0x7f4>)
 8002886:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800288a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800288e:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8002892:	f7fe f9e7 	bl	8000c64 <HAL_GetTick>
 8002896:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002898:	e005      	b.n	80028a6 <HAL_RCC_OscConfig+0x62a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289a:	f7fe f9e3 	bl	8000c64 <HAL_GetTick>
 800289e:	1bc0      	subs	r0, r0, r7
 80028a0:	2805      	cmp	r0, #5
 80028a2:	f63f af24 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028a6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	d4f5      	bmi.n	800289a <HAL_RCC_OscConfig+0x61e>
    if (pwrclkchanged == SET)
 80028ae:	2d00      	cmp	r5, #0
 80028b0:	f43f adbc 	beq.w	800242c <HAL_RCC_OscConfig+0x1b0>
 80028b4:	e043      	b.n	800293e <HAL_RCC_OscConfig+0x6c2>
      __HAL_RCC_HSI48_DISABLE();
 80028b6:	682b      	ldr	r3, [r5, #0]
 80028b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028bc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80028be:	f7fe f9d1 	bl	8000c64 <HAL_GetTick>
 80028c2:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80028c4:	e005      	b.n	80028d2 <HAL_RCC_OscConfig+0x656>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c6:	f7fe f9cd 	bl	8000c64 <HAL_GetTick>
 80028ca:	1b80      	subs	r0, r0, r6
 80028cc:	2802      	cmp	r0, #2
 80028ce:	f63f af0e 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80028d2:	682b      	ldr	r3, [r5, #0]
 80028d4:	049f      	lsls	r7, r3, #18
 80028d6:	d4f6      	bmi.n	80028c6 <HAL_RCC_OscConfig+0x64a>
 80028d8:	e622      	b.n	8002520 <HAL_RCC_OscConfig+0x2a4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80028da:	f022 021f 	bic.w	r2, r2, #31
 80028de:	430a      	orrs	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	e745      	b.n	8002770 <HAL_RCC_OscConfig+0x4f4>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80028e4:	f022 021f 	bic.w	r2, r2, #31
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e743      	b.n	8002776 <HAL_RCC_OscConfig+0x4fa>
      __HAL_RCC_SHSI_DISABLE();
 80028ee:	682b      	ldr	r3, [r5, #0]
 80028f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028f4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80028f6:	f7fe f9b5 	bl	8000c64 <HAL_GetTick>
 80028fa:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80028fc:	e005      	b.n	800290a <HAL_RCC_OscConfig+0x68e>
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80028fe:	f7fe f9b1 	bl	8000c64 <HAL_GetTick>
 8002902:	1b80      	subs	r0, r0, r6
 8002904:	2802      	cmp	r0, #2
 8002906:	f63f aef2 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800290a:	682b      	ldr	r3, [r5, #0]
 800290c:	0419      	lsls	r1, r3, #16
 800290e:	d4f6      	bmi.n	80028fe <HAL_RCC_OscConfig+0x682>
 8002910:	e623      	b.n	800255a <HAL_RCC_OscConfig+0x2de>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002912:	4a57      	ldr	r2, [pc, #348]	@ (8002a70 <HAL_RCC_OscConfig+0x7f4>)
 8002914:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002920:	e5b3      	b.n	800248a <HAL_RCC_OscConfig+0x20e>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002922:	4b53      	ldr	r3, [pc, #332]	@ (8002a70 <HAL_RCC_OscConfig+0x7f4>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800293a:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	e74e      	b.n	80027dc <HAL_RCC_OscConfig+0x560>
      __HAL_RCC_PWR_CLK_DISABLE();
 800293e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a70 <HAL_RCC_OscConfig+0x7f4>)
 8002940:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800294c:	e56e      	b.n	800242c <HAL_RCC_OscConfig+0x1b0>
          __HAL_RCC_LSI_DISABLE();
 800294e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002952:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002956:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
          tickstart = HAL_GetTick();
 800295a:	f7fe f983 	bl	8000c64 <HAL_GetTick>
 800295e:	4607      	mov	r7, r0
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002960:	e005      	b.n	800296e <HAL_RCC_OscConfig+0x6f2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002962:	f7fe f97f 	bl	8000c64 <HAL_GetTick>
 8002966:	1bc0      	subs	r0, r0, r7
 8002968:	2805      	cmp	r0, #5
 800296a:	f63f aec0 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800296e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 8002972:	0119      	lsls	r1, r3, #4
 8002974:	d4f5      	bmi.n	8002962 <HAL_RCC_OscConfig+0x6e6>
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002976:	69a2      	ldr	r2, [r4, #24]
 8002978:	e538      	b.n	80023ec <HAL_RCC_OscConfig+0x170>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800297a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 8002982:	f7fe f96f 	bl	8000c64 <HAL_GetTick>
 8002986:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002988:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800298a:	07db      	lsls	r3, r3, #31
 800298c:	f53f ad69 	bmi.w	8002462 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002990:	f7fe f968 	bl	8000c64 <HAL_GetTick>
 8002994:	1bc0      	subs	r0, r0, r7
 8002996:	2802      	cmp	r0, #2
 8002998:	d9f6      	bls.n	8002988 <HAL_RCC_OscConfig+0x70c>
 800299a:	e6a8      	b.n	80026ee <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800299c:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <HAL_RCC_OscConfig+0x7f4>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029b4:	601a      	str	r2, [r3, #0]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b6:	e711      	b.n	80027dc <HAL_RCC_OscConfig+0x560>
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029b8:	f7ff fa0e 	bl	8001dd8 <RCC_SetFlashLatencyFromMSIRange>
 80029bc:	2800      	cmp	r0, #0
 80029be:	f47f ae5c 	bne.w	800267a <HAL_RCC_OscConfig+0x3fe>
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80029c2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80029c4:	e634      	b.n	8002630 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80029c6:	2a00      	cmp	r2, #0
 80029c8:	f2c0 80a4 	blt.w	8002b14 <HAL_RCC_OscConfig+0x898>
 80029cc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80029d0:	bf2b      	itete	cs
 80029d2:	f423 43f8 	biccs.w	r3, r3, #31744	@ 0x7c00
 80029d6:	f423 2378 	biccc.w	r3, r3, #1015808	@ 0xf8000
 80029da:	ea43 2381 	orrcs.w	r3, r3, r1, lsl #10
 80029de:	ea43 33c1 	orrcc.w	r3, r3, r1, lsl #15
 80029e2:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	e48c      	b.n	8002302 <HAL_RCC_OscConfig+0x86>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80029e8:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 80029ec:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	e6bd      	b.n	8002770 <HAL_RCC_OscConfig+0x4f4>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	f2c0 811e 	blt.w	8002c36 <HAL_RCC_OscConfig+0x9ba>
 80029fa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	bf2b      	itete	cs
 8002a02:	f422 42f8 	biccs.w	r2, r2, #31744	@ 0x7c00
 8002a06:	f422 2278 	biccc.w	r2, r2, #1015808	@ 0xf8000
 8002a0a:	ea42 2281 	orrcs.w	r2, r2, r1, lsl #10
 8002a0e:	ea42 32c1 	orrcc.w	r2, r2, r1, lsl #15
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	e5be      	b.n	8002594 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_MSIK_DISABLE();
 8002a16:	4d16      	ldr	r5, [pc, #88]	@ (8002a70 <HAL_RCC_OscConfig+0x7f4>)
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	f023 0310 	bic.w	r3, r3, #16
 8002a1e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002a20:	f7fe f920 	bl	8000c64 <HAL_GetTick>
 8002a24:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002a26:	e005      	b.n	8002a34 <HAL_RCC_OscConfig+0x7b8>
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002a28:	f7fe f91c 	bl	8000c64 <HAL_GetTick>
 8002a2c:	1b80      	subs	r0, r0, r6
 8002a2e:	2802      	cmp	r0, #2
 8002a30:	f63f ae5d 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	069f      	lsls	r7, r3, #26
 8002a38:	d4f6      	bmi.n	8002a28 <HAL_RCC_OscConfig+0x7ac>
 8002a3a:	e5bd      	b.n	80025b8 <HAL_RCC_OscConfig+0x33c>
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a3c:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8002a40:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	e696      	b.n	8002776 <HAL_RCC_OscConfig+0x4fa>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a50:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a54:	4f06      	ldr	r7, [pc, #24]	@ (8002a70 <HAL_RCC_OscConfig+0x7f4>)
 8002a56:	e005      	b.n	8002a64 <HAL_RCC_OscConfig+0x7e8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe f904 	bl	8000c64 <HAL_GetTick>
 8002a5c:	1b80      	subs	r0, r0, r6
 8002a5e:	4540      	cmp	r0, r8
 8002a60:	f63f ae45 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002a68:	051a      	lsls	r2, r3, #20
 8002a6a:	d4f5      	bmi.n	8002a58 <HAL_RCC_OscConfig+0x7dc>
 8002a6c:	e537      	b.n	80024de <HAL_RCC_OscConfig+0x262>
 8002a6e:	bf00      	nop
 8002a70:	46020c00 	.word	0x46020c00
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a74:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002a76:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a78:	6b68      	ldr	r0, [r5, #52]	@ 0x34
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	f43f adfe 	beq.w	800267a <HAL_RCC_OscConfig+0x3fe>
 8002a7e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002a80:	f002 0103 	and.w	r1, r2, #3
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a84:	4299      	cmp	r1, r3
 8002a86:	f47f adf8 	bne.w	800267a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002a8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002a8c:	f3c2 2103 	ubfx	r1, r2, #8, #4
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002a90:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	4299      	cmp	r1, r3
 8002a94:	f47f adf1 	bne.w	800267a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002a98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002a9a:	f402 4270 	and.w	r2, r2, #61440	@ 0xf000
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	f47f adeb 	bne.w	800267a <HAL_RCC_OscConfig+0x3fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aa4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002aa6:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002aaa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f47f ade4 	bne.w	800267a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ab2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002ab4:	f3c0 2246 	ubfx	r2, r0, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ab8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	f47f addd 	bne.w	800267a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ac0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002ac2:	f3c0 4206 	ubfx	r2, r0, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ac6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	f47f add6 	bne.w	800267a <HAL_RCC_OscConfig+0x3fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ace:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002ad0:	f3c0 6006 	ubfx	r0, r0, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ad4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ad6:	4298      	cmp	r0, r3
 8002ad8:	f47f adcf 	bne.w	800267a <HAL_RCC_OscConfig+0x3fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002adc:	4b59      	ldr	r3, [pc, #356]	@ (8002c44 <HAL_RCC_OscConfig+0x9c8>)
 8002ade:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ae2:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002ae6:	428a      	cmp	r2, r1
 8002ae8:	f43f ad89 	beq.w	80025fe <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aee:	f022 0210 	bic.w	r2, r2, #16
 8002af2:	629a      	str	r2, [r3, #40]	@ 0x28
        tickstart = HAL_GetTick();
 8002af4:	f7fe f8b6 	bl	8000c64 <HAL_GetTick>
 8002af8:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002afa:	f7fe f8b3 	bl	8000c64 <HAL_GetTick>
 8002afe:	42a8      	cmp	r0, r5
 8002b00:	d0fb      	beq.n	8002afa <HAL_RCC_OscConfig+0x87e>
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002b02:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002b04:	4b4f      	ldr	r3, [pc, #316]	@ (8002c44 <HAL_RCC_OscConfig+0x9c8>)
 8002b06:	00d2      	lsls	r2, r2, #3
 8002b08:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b0c:	f042 0210 	orr.w	r2, r2, #16
 8002b10:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b12:	e574      	b.n	80025fe <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002b14:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8002b18:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8002b1c:	60fb      	str	r3, [r7, #12]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	f7ff bbef 	b.w	8002302 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002b24:	f7fe f89e 	bl	8000c64 <HAL_GetTick>
 8002b28:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b2a:	e005      	b.n	8002b38 <HAL_RCC_OscConfig+0x8bc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe f89a 	bl	8000c64 <HAL_GetTick>
 8002b30:	1b80      	subs	r0, r0, r6
 8002b32:	2802      	cmp	r0, #2
 8002b34:	f63f addb 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	d1f5      	bne.n	8002b2c <HAL_RCC_OscConfig+0x8b0>
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b40:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8002b44:	0756      	lsls	r6, r2, #29
 8002b46:	d40c      	bmi.n	8002b62 <HAL_RCC_OscConfig+0x8e6>
          pwrclkchanged = SET;
 8002b48:	2301      	movs	r3, #1
          __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8002b4e:	f042 0204 	orr.w	r2, r2, #4
 8002b52:	f8c5 2094 	str.w	r2, [r5, #148]	@ 0x94
 8002b56:	f8d5 2094 	ldr.w	r2, [r5, #148]	@ 0x94
 8002b5a:	f002 0204 	and.w	r2, r2, #4
 8002b5e:	9203      	str	r2, [sp, #12]
 8002b60:	9a03      	ldr	r2, [sp, #12]
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002b62:	4d39      	ldr	r5, [pc, #228]	@ (8002c48 <HAL_RCC_OscConfig+0x9cc>)
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002b64:	4937      	ldr	r1, [pc, #220]	@ (8002c44 <HAL_RCC_OscConfig+0x9c8>)
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002b66:	68ee      	ldr	r6, [r5, #12]
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002b68:	68ea      	ldr	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002b6a:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8002c4c <HAL_RCC_OscConfig+0x9d0>
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002b6e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b72:	60ea      	str	r2, [r5, #12]
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002b74:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8002b76:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 8002b78:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002b7a:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 8002b7e:	f020 0003 	bic.w	r0, r0, #3
 8002b82:	433a      	orrs	r2, r7
 8002b84:	4302      	orrs	r2, r0
 8002b86:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002b88:	3801      	subs	r0, #1
 8002b8a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002b8e:	628a      	str	r2, [r1, #40]	@ 0x28
 8002b90:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002b92:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002b94:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 8002b98:	1e47      	subs	r7, r0, #1
 8002b9a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba2:	027f      	lsls	r7, r7, #9
 8002ba4:	3801      	subs	r0, #1
 8002ba6:	ea0e 0c0c 	and.w	ip, lr, ip
 8002baa:	b2bf      	uxth	r7, r7
 8002bac:	0400      	lsls	r0, r0, #16
 8002bae:	ea42 020c 	orr.w	r2, r2, ip
 8002bb2:	f400 00fe 	and.w	r0, r0, #8323072	@ 0x7f0000
 8002bb6:	433a      	orrs	r2, r7
 8002bb8:	4302      	orrs	r2, r0
 8002bba:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002bbc:	3801      	subs	r0, #1
 8002bbe:	0600      	lsls	r0, r0, #24
 8002bc0:	f000 40fe 	and.w	r0, r0, #2130706432	@ 0x7f000000
 8002bc4:	4302      	orrs	r2, r0
 8002bc6:	634a      	str	r2, [r1, #52]	@ 0x34
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002bc8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002bca:	f022 0210 	bic.w	r2, r2, #16
 8002bce:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002bd0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002bd2:	00d2      	lsls	r2, r2, #3
 8002bd4:	638a      	str	r2, [r1, #56]	@ 0x38
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002bd6:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002bd8:	f042 0210 	orr.w	r2, r2, #16
 8002bdc:	628a      	str	r2, [r1, #40]	@ 0x28
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002bde:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002be2:	f022 020c 	bic.w	r2, r2, #12
 8002be6:	4302      	orrs	r2, r0
        if (pwrboosten == SET)
 8002be8:	0374      	lsls	r4, r6, #13
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002bea:	628a      	str	r2, [r1, #40]	@ 0x28
        if (pwrboosten == SET)
 8002bec:	d41e      	bmi.n	8002c2c <HAL_RCC_OscConfig+0x9b0>
        if (pwrclkchanged == SET)
 8002bee:	b133      	cbz	r3, 8002bfe <HAL_RCC_OscConfig+0x982>
          __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4a14      	ldr	r2, [pc, #80]	@ (8002c44 <HAL_RCC_OscConfig+0x9c8>)
 8002bf2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002bf6:	f023 0304 	bic.w	r3, r3, #4
 8002bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        __HAL_RCC_PLL_ENABLE();
 8002bfe:	4c11      	ldr	r4, [pc, #68]	@ (8002c44 <HAL_RCC_OscConfig+0x9c8>)
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c08:	f7fe f82c 	bl	8000c64 <HAL_GetTick>
 8002c0c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002c0e:	e005      	b.n	8002c1c <HAL_RCC_OscConfig+0x9a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe f828 	bl	8000c64 <HAL_GetTick>
 8002c14:	1b40      	subs	r0, r0, r5
 8002c16:	2802      	cmp	r0, #2
 8002c18:	f63f ad69 	bhi.w	80026ee <HAL_RCC_OscConfig+0x472>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	0198      	lsls	r0, r3, #6
 8002c20:	d5f6      	bpl.n	8002c10 <HAL_RCC_OscConfig+0x994>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c2a:	e4e8      	b.n	80025fe <HAL_RCC_OscConfig+0x382>
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002c2c:	68ea      	ldr	r2, [r5, #12]
 8002c2e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002c32:	60ea      	str	r2, [r5, #12]
 8002c34:	e7db      	b.n	8002bee <HAL_RCC_OscConfig+0x972>
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8002c3c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	e4a7      	b.n	8002594 <HAL_RCC_OscConfig+0x318>
 8002c44:	46020c00 	.word	0x46020c00
 8002c48:	46020800 	.word	0x46020800
 8002c4c:	80800000 	.word	0x80800000

08002c50 <HAL_RCC_GetHCLKFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c50:	4a47      	ldr	r2, [pc, #284]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x120>)
{
 8002c52:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c54:	69d3      	ldr	r3, [r2, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c56:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c58:	f013 030c 	ands.w	r3, r3, #12
 8002c5c:	d016      	beq.n	8002c8c <HAL_RCC_GetHCLKFreq+0x3c>
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d06a      	beq.n	8002d38 <HAL_RCC_GetHCLKFreq+0xe8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c62:	69d2      	ldr	r2, [r2, #28]
    sysclockfreq = HSI_VALUE;
 8002c64:	4843      	ldr	r0, [pc, #268]	@ (8002d74 <HAL_RCC_GetHCLKFreq+0x124>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c66:	f002 020c 	and.w	r2, r2, #12
 8002c6a:	2a04      	cmp	r2, #4
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_GetHCLKFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	bf18      	it	ne
 8002c72:	2000      	movne	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c74:	4b3e      	ldr	r3, [pc, #248]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x120>)
 8002c76:	4940      	ldr	r1, [pc, #256]	@ (8002d78 <HAL_RCC_GetHCLKFreq+0x128>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4a40      	ldr	r2, [pc, #256]	@ (8002d7c <HAL_RCC_GetHCLKFreq+0x12c>)
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
}
 8002c82:	f85d 4b04 	ldr.w	r4, [sp], #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c86:	40d8      	lsrs	r0, r3
 8002c88:	6010      	str	r0, [r2, #0]
}
 8002c8a:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002c8c:	4a38      	ldr	r2, [pc, #224]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x120>)
 8002c8e:	6891      	ldr	r1, [r2, #8]
 8002c90:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002c92:	bf54      	ite	pl
 8002c94:	f8d2 20f4 	ldrpl.w	r2, [r2, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002c98:	6892      	ldrmi	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8002c9a:	4939      	ldr	r1, [pc, #228]	@ (8002d80 <HAL_RCC_GetHCLKFreq+0x130>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002c9c:	bf54      	ite	pl
 8002c9e:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002ca2:	0f12      	lsrmi	r2, r2, #28
    msirange = MSIRangeTable[msirange];
 8002ca4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0e3      	beq.n	8002c74 <HAL_RCC_GetHCLKFreq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002cac:	4930      	ldr	r1, [pc, #192]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x120>)
 8002cae:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002cb0:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002cb2:	f004 0c03 	and.w	ip, r4, #3
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002cb6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cb8:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002cba:	f3c3 1300 	ubfx	r3, r3, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cbe:	f3c4 04cc 	ubfx	r4, r4, #3, #13
 8002cc2:	fb04 f303 	mul.w	r3, r4, r3
 8002cc6:	ee07 3a90 	vmov	s15, r3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002cca:	f3c2 2203 	ubfx	r2, r2, #8, #4
    switch (pllsource)
 8002cce:	f1bc 0f02 	cmp.w	ip, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002cd6:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8002cda:	d002      	beq.n	8002ce2 <HAL_RCC_GetHCLKFreq+0x92>
 8002cdc:	f1bc 0f03 	cmp.w	ip, #3
 8002ce0:	d131      	bne.n	8002d46 <HAL_RCC_GetHCLKFreq+0xf6>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ce2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8002ce4:	ee07 2a10 	vmov	s14, r2
 8002ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cec:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002cf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cf4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002cf8:	eddf 5a22 	vldr	s11, [pc, #136]	@ 8002d84 <HAL_RCC_GetHCLKFreq+0x134>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d00:	ed9f 5a21 	vldr	s10, [pc, #132]	@ 8002d88 <HAL_RCC_GetHCLKFreq+0x138>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d04:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d08:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d0c:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002d10:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x120>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d12:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d18:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002d1c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002d20:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d2e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002d32:	ee17 0a90 	vmov	r0, s15
 8002d36:	e79d      	b.n	8002c74 <HAL_RCC_GetHCLKFreq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d38:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d3c:	2901      	cmp	r1, #1
 8002d3e:	d0a5      	beq.n	8002c8c <HAL_RCC_GetHCLKFreq+0x3c>
  uint32_t msirange = 0U;
 8002d40:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d42:	69d3      	ldr	r3, [r2, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d44:	e7b2      	b.n	8002cac <HAL_RCC_GetHCLKFreq+0x5c>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d46:	ee07 0a10 	vmov	s14, r0
 8002d4a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8002d4c:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8002d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d54:	ee06 3a10 	vmov	s12, r3
 8002d58:	ee07 2a10 	vmov	s14, r2
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d60:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d68:	eddf 5a06 	vldr	s11, [pc, #24]	@ 8002d84 <HAL_RCC_GetHCLKFreq+0x134>
 8002d6c:	e7ca      	b.n	8002d04 <HAL_RCC_GetHCLKFreq+0xb4>
 8002d6e:	bf00      	nop
 8002d70:	46020c00 	.word	0x46020c00
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	08005590 	.word	0x08005590
 8002d7c:	20000040 	.word	0x20000040
 8002d80:	08005548 	.word	0x08005548
 8002d84:	39000000 	.word	0x39000000
 8002d88:	4b742400 	.word	0x4b742400

08002d8c <HAL_RCC_GetPCLK1Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8c:	4949      	ldr	r1, [pc, #292]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x128>)
{
 8002d8e:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d90:	69ca      	ldr	r2, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d92:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d94:	f012 020c 	ands.w	r2, r2, #12
 8002d98:	d01c      	beq.n	8002dd4 <HAL_RCC_GetPCLK1Freq+0x48>
 8002d9a:	2a0c      	cmp	r2, #12
 8002d9c:	d06e      	beq.n	8002e7c <HAL_RCC_GetPCLK1Freq+0xf0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d9e:	69cb      	ldr	r3, [r1, #28]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b04      	cmp	r3, #4
    sysclockfreq = HSI_VALUE;
 8002da6:	4b44      	ldr	r3, [pc, #272]	@ (8002eb8 <HAL_RCC_GetPCLK1Freq+0x12c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_GetPCLK1Freq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002daa:	2a08      	cmp	r2, #8
 8002dac:	bf18      	it	ne
 8002dae:	2300      	movne	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002db0:	4940      	ldr	r1, [pc, #256]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x128>)
 8002db2:	4c42      	ldr	r4, [pc, #264]	@ (8002ebc <HAL_RCC_GetPCLK1Freq+0x130>)
 8002db4:	6a0a      	ldr	r2, [r1, #32]
 8002db6:	4842      	ldr	r0, [pc, #264]	@ (8002ec0 <HAL_RCC_GetPCLK1Freq+0x134>)
 8002db8:	f002 020f 	and.w	r2, r2, #15
 8002dbc:	5ca2      	ldrb	r2, [r4, r2]
}
 8002dbe:	bc30      	pop	{r4, r5}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002dc0:	40d3      	lsrs	r3, r2
 8002dc2:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002dc4:	6a0a      	ldr	r2, [r1, #32]
 8002dc6:	493f      	ldr	r1, [pc, #252]	@ (8002ec4 <HAL_RCC_GetPCLK1Freq+0x138>)
 8002dc8:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002dcc:	5c88      	ldrb	r0, [r1, r2]
}
 8002dce:	fa23 f000 	lsr.w	r0, r3, r0
 8002dd2:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002dd4:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x128>)
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002dda:	bf54      	ite	pl
 8002ddc:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002de0:	689b      	ldrmi	r3, [r3, #8]
    msirange = MSIRangeTable[msirange];
 8002de2:	4939      	ldr	r1, [pc, #228]	@ (8002ec8 <HAL_RCC_GetPCLK1Freq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002de4:	bf54      	ite	pl
 8002de6:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002dea:	0f1b      	lsrmi	r3, r3, #28
    msirange = MSIRangeTable[msirange];
 8002dec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002df0:	2a00      	cmp	r2, #0
 8002df2:	d0dd      	beq.n	8002db0 <HAL_RCC_GetPCLK1Freq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002df4:	482f      	ldr	r0, [pc, #188]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x128>)
 8002df6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002df8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002dfa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002dfc:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002dfe:	f3c2 1200 	ubfx	r2, r2, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002e02:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8002e06:	fb0c f202 	mul.w	r2, ip, r2
 8002e0a:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002e0e:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002e12:	f3c1 2103 	ubfx	r1, r1, #8, #4
    switch (pllsource)
 8002e16:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002e1c:	f101 0101 	add.w	r1, r1, #1
    switch (pllsource)
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_GetPCLK1Freq+0x9a>
 8002e22:	2c03      	cmp	r4, #3
 8002e24:	d131      	bne.n	8002e8a <HAL_RCC_GetPCLK1Freq+0xfe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e26:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002e28:	ee07 1a10 	vmov	s14, r1
 8002e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e30:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e38:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e3c:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8002ecc <HAL_RCC_GetPCLK1Freq+0x140>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e44:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 8002ed0 <HAL_RCC_GetPCLK1Freq+0x144>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e48:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e4c:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e50:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002e54:	4b17      	ldr	r3, [pc, #92]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x128>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002e56:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e5c:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002e60:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002e64:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e72:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002e76:	ee17 3a90 	vmov	r3, s15
 8002e7a:	e799      	b.n	8002db0 <HAL_RCC_GetPCLK1Freq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e7c:	f000 0003 	and.w	r0, r0, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e80:	2801      	cmp	r0, #1
 8002e82:	d0a7      	beq.n	8002dd4 <HAL_RCC_GetPCLK1Freq+0x48>
  uint32_t msirange = 0U;
 8002e84:	2300      	movs	r3, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e86:	69ca      	ldr	r2, [r1, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e88:	e7b4      	b.n	8002df4 <HAL_RCC_GetPCLK1Freq+0x68>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e8a:	ee07 3a10 	vmov	s14, r3
 8002e8e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8002e90:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8002e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e98:	ee06 2a10 	vmov	s12, r2
 8002e9c:	ee07 1a10 	vmov	s14, r1
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ea0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ea4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002eac:	eddf 5a07 	vldr	s11, [pc, #28]	@ 8002ecc <HAL_RCC_GetPCLK1Freq+0x140>
 8002eb0:	e7ca      	b.n	8002e48 <HAL_RCC_GetPCLK1Freq+0xbc>
 8002eb2:	bf00      	nop
 8002eb4:	46020c00 	.word	0x46020c00
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	08005590 	.word	0x08005590
 8002ec0:	20000040 	.word	0x20000040
 8002ec4:	08005588 	.word	0x08005588
 8002ec8:	08005548 	.word	0x08005548
 8002ecc:	39000000 	.word	0x39000000
 8002ed0:	4b742400 	.word	0x4b742400

08002ed4 <HAL_RCC_GetPCLK2Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed4:	4949      	ldr	r1, [pc, #292]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x128>)
{
 8002ed6:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed8:	69ca      	ldr	r2, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eda:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002edc:	f012 020c 	ands.w	r2, r2, #12
 8002ee0:	d01c      	beq.n	8002f1c <HAL_RCC_GetPCLK2Freq+0x48>
 8002ee2:	2a0c      	cmp	r2, #12
 8002ee4:	d06e      	beq.n	8002fc4 <HAL_RCC_GetPCLK2Freq+0xf0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ee6:	69cb      	ldr	r3, [r1, #28]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b04      	cmp	r3, #4
    sysclockfreq = HSI_VALUE;
 8002eee:	4b44      	ldr	r3, [pc, #272]	@ (8003000 <HAL_RCC_GetPCLK2Freq+0x12c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_GetPCLK2Freq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef2:	2a08      	cmp	r2, #8
 8002ef4:	bf18      	it	ne
 8002ef6:	2300      	movne	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ef8:	4940      	ldr	r1, [pc, #256]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x128>)
 8002efa:	4c42      	ldr	r4, [pc, #264]	@ (8003004 <HAL_RCC_GetPCLK2Freq+0x130>)
 8002efc:	6a0a      	ldr	r2, [r1, #32]
 8002efe:	4842      	ldr	r0, [pc, #264]	@ (8003008 <HAL_RCC_GetPCLK2Freq+0x134>)
 8002f00:	f002 020f 	and.w	r2, r2, #15
 8002f04:	5ca2      	ldrb	r2, [r4, r2]
}
 8002f06:	bc30      	pop	{r4, r5}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f08:	40d3      	lsrs	r3, r2
 8002f0a:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002f0c:	6a0a      	ldr	r2, [r1, #32]
 8002f0e:	493f      	ldr	r1, [pc, #252]	@ (800300c <HAL_RCC_GetPCLK2Freq+0x138>)
 8002f10:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8002f14:	5c88      	ldrb	r0, [r1, r2]
}
 8002f16:	fa23 f000 	lsr.w	r0, r3, r0
 8002f1a:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002f1c:	4b37      	ldr	r3, [pc, #220]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x128>)
 8002f1e:	6899      	ldr	r1, [r3, #8]
 8002f20:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002f22:	bf54      	ite	pl
 8002f24:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002f28:	689b      	ldrmi	r3, [r3, #8]
    msirange = MSIRangeTable[msirange];
 8002f2a:	4939      	ldr	r1, [pc, #228]	@ (8003010 <HAL_RCC_GetPCLK2Freq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002f2c:	bf54      	ite	pl
 8002f2e:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002f32:	0f1b      	lsrmi	r3, r3, #28
    msirange = MSIRangeTable[msirange];
 8002f34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d0dd      	beq.n	8002ef8 <HAL_RCC_GetPCLK2Freq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002f3c:	482f      	ldr	r0, [pc, #188]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x128>)
 8002f3e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002f40:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002f42:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f44:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002f46:	f3c2 1200 	ubfx	r2, r2, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f4a:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8002f4e:	fb0c f202 	mul.w	r2, ip, r2
 8002f52:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002f56:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002f5a:	f3c1 2103 	ubfx	r1, r1, #8, #4
    switch (pllsource)
 8002f5e:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002f64:	f101 0101 	add.w	r1, r1, #1
    switch (pllsource)
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_GetPCLK2Freq+0x9a>
 8002f6a:	2c03      	cmp	r4, #3
 8002f6c:	d131      	bne.n	8002fd2 <HAL_RCC_GetPCLK2Freq+0xfe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f6e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002f70:	ee07 1a10 	vmov	s14, r1
 8002f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f78:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002f7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f80:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002f84:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8003014 <HAL_RCC_GetPCLK2Freq+0x140>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f8c:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 8003018 <HAL_RCC_GetPCLK2Freq+0x144>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002f90:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f94:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002f98:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002f9c:	4b17      	ldr	r3, [pc, #92]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x128>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002f9e:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fa4:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002fa8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002fac:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fba:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002fbe:	ee17 3a90 	vmov	r3, s15
 8002fc2:	e799      	b.n	8002ef8 <HAL_RCC_GetPCLK2Freq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc4:	f000 0003 	and.w	r0, r0, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fc8:	2801      	cmp	r0, #1
 8002fca:	d0a7      	beq.n	8002f1c <HAL_RCC_GetPCLK2Freq+0x48>
  uint32_t msirange = 0U;
 8002fcc:	2300      	movs	r3, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fce:	69ca      	ldr	r2, [r1, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd0:	e7b4      	b.n	8002f3c <HAL_RCC_GetPCLK2Freq+0x68>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fd2:	ee07 3a10 	vmov	s14, r3
 8002fd6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8002fd8:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8002fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe0:	ee06 2a10 	vmov	s12, r2
 8002fe4:	ee07 1a10 	vmov	s14, r1
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002fe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ff4:	eddf 5a07 	vldr	s11, [pc, #28]	@ 8003014 <HAL_RCC_GetPCLK2Freq+0x140>
 8002ff8:	e7ca      	b.n	8002f90 <HAL_RCC_GetPCLK2Freq+0xbc>
 8002ffa:	bf00      	nop
 8002ffc:	46020c00 	.word	0x46020c00
 8003000:	00f42400 	.word	0x00f42400
 8003004:	08005590 	.word	0x08005590
 8003008:	20000040 	.word	0x20000040
 800300c:	08005588 	.word	0x08005588
 8003010:	08005548 	.word	0x08005548
 8003014:	39000000 	.word	0x39000000
 8003018:	4b742400 	.word	0x4b742400

0800301c <HAL_RCC_GetPCLK3Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301c:	4949      	ldr	r1, [pc, #292]	@ (8003144 <HAL_RCC_GetPCLK3Freq+0x128>)
{
 800301e:	b430      	push	{r4, r5}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003020:	69ca      	ldr	r2, [r1, #28]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003022:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003024:	f012 020c 	ands.w	r2, r2, #12
 8003028:	d01c      	beq.n	8003064 <HAL_RCC_GetPCLK3Freq+0x48>
 800302a:	2a0c      	cmp	r2, #12
 800302c:	d06e      	beq.n	800310c <HAL_RCC_GetPCLK3Freq+0xf0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302e:	69cb      	ldr	r3, [r1, #28]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b04      	cmp	r3, #4
    sysclockfreq = HSI_VALUE;
 8003036:	4b44      	ldr	r3, [pc, #272]	@ (8003148 <HAL_RCC_GetPCLK3Freq+0x12c>)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003038:	d002      	beq.n	8003040 <HAL_RCC_GetPCLK3Freq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800303a:	2a08      	cmp	r2, #8
 800303c:	bf18      	it	ne
 800303e:	2300      	movne	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003040:	4940      	ldr	r1, [pc, #256]	@ (8003144 <HAL_RCC_GetPCLK3Freq+0x128>)
 8003042:	4c42      	ldr	r4, [pc, #264]	@ (800314c <HAL_RCC_GetPCLK3Freq+0x130>)
 8003044:	6a0a      	ldr	r2, [r1, #32]
 8003046:	4842      	ldr	r0, [pc, #264]	@ (8003150 <HAL_RCC_GetPCLK3Freq+0x134>)
 8003048:	f002 020f 	and.w	r2, r2, #15
 800304c:	5ca2      	ldrb	r2, [r4, r2]
}
 800304e:	bc30      	pop	{r4, r5}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003050:	40d3      	lsrs	r3, r2
 8003052:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003054:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8003056:	493f      	ldr	r1, [pc, #252]	@ (8003154 <HAL_RCC_GetPCLK3Freq+0x138>)
 8003058:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800305c:	5c88      	ldrb	r0, [r1, r2]
}
 800305e:	fa23 f000 	lsr.w	r0, r3, r0
 8003062:	4770      	bx	lr
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003064:	4b37      	ldr	r3, [pc, #220]	@ (8003144 <HAL_RCC_GetPCLK3Freq+0x128>)
 8003066:	6899      	ldr	r1, [r3, #8]
 8003068:	0209      	lsls	r1, r1, #8
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800306a:	bf54      	ite	pl
 800306c:	f8d3 30f4 	ldrpl.w	r3, [r3, #244]	@ 0xf4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003070:	689b      	ldrmi	r3, [r3, #8]
    msirange = MSIRangeTable[msirange];
 8003072:	4939      	ldr	r1, [pc, #228]	@ (8003158 <HAL_RCC_GetPCLK3Freq+0x13c>)
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003074:	bf54      	ite	pl
 8003076:	f3c3 3303 	ubfxpl	r3, r3, #12, #4
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800307a:	0f1b      	lsrmi	r3, r3, #28
    msirange = MSIRangeTable[msirange];
 800307c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003080:	2a00      	cmp	r2, #0
 8003082:	d0dd      	beq.n	8003040 <HAL_RCC_GetPCLK3Freq+0x24>
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003084:	482f      	ldr	r0, [pc, #188]	@ (8003144 <HAL_RCC_GetPCLK3Freq+0x128>)
 8003086:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003088:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800308a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800308c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800308e:	f3c2 1200 	ubfx	r2, r2, #4, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003092:	f3c5 0ccc 	ubfx	ip, r5, #3, #13
 8003096:	fb0c f202 	mul.w	r2, ip, r2
 800309a:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800309e:	f004 0403 	and.w	r4, r4, #3
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80030a2:	f3c1 2103 	ubfx	r1, r1, #8, #4
    switch (pllsource)
 80030a6:	2c02      	cmp	r4, #2
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80030a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80030ac:	f101 0101 	add.w	r1, r1, #1
    switch (pllsource)
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_GetPCLK3Freq+0x9a>
 80030b2:	2c03      	cmp	r4, #3
 80030b4:	d131      	bne.n	800311a <HAL_RCC_GetPCLK3Freq+0xfe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80030b8:	ee07 1a10 	vmov	s14, r1
 80030bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c0:	ee06 3a10 	vmov	s12, r3
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030c8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030cc:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800315c <HAL_RCC_GetPCLK3Freq+0x140>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80030d4:	ed9f 5a22 	vldr	s10, [pc, #136]	@ 8003160 <HAL_RCC_GetPCLK3Freq+0x144>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030d8:	ee36 6a26 	vadd.f32	s12, s12, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030dc:	eec5 6a07 	vdiv.f32	s13, s10, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030e0:	eeb0 7a46 	vmov.f32	s14, s12
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80030e4:	4b17      	ldr	r3, [pc, #92]	@ (8003144 <HAL_RCC_GetPCLK3Freq+0x128>)
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030e6:	eea7 7aa5 	vfma.f32	s14, s15, s11
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80030ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030ec:	ee26 7a87 	vmul.f32	s14, s13, s14
    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80030f0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80030f4:	3301      	adds	r3, #1
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003102:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003106:	ee17 3a90 	vmov	r3, s15
 800310a:	e799      	b.n	8003040 <HAL_RCC_GetPCLK3Freq+0x24>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310c:	f000 0003 	and.w	r0, r0, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003110:	2801      	cmp	r0, #1
 8003112:	d0a7      	beq.n	8003064 <HAL_RCC_GetPCLK3Freq+0x48>
  uint32_t msirange = 0U;
 8003114:	2300      	movs	r3, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003116:	69ca      	ldr	r2, [r1, #28]
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003118:	e7b4      	b.n	8003084 <HAL_RCC_GetPCLK3Freq+0x68>
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800311a:	ee07 3a10 	vmov	s14, r3
 800311e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8003120:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 8003124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003128:	ee06 2a10 	vmov	s12, r2
 800312c:	ee07 1a10 	vmov	s14, r1
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003130:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003134:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003138:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800313c:	eddf 5a07 	vldr	s11, [pc, #28]	@ 800315c <HAL_RCC_GetPCLK3Freq+0x140>
 8003140:	e7ca      	b.n	80030d8 <HAL_RCC_GetPCLK3Freq+0xbc>
 8003142:	bf00      	nop
 8003144:	46020c00 	.word	0x46020c00
 8003148:	00f42400 	.word	0x00f42400
 800314c:	08005590 	.word	0x08005590
 8003150:	20000040 	.word	0x20000040
 8003154:	08005588 	.word	0x08005588
 8003158:	08005548 	.word	0x08005548
 800315c:	39000000 	.word	0x39000000
 8003160:	4b742400 	.word	0x4b742400

08003164 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8003164:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8003166:	4c33      	ldr	r4, [pc, #204]	@ (8003234 <RCCEx_PLL3_Config+0xd0>)
{
 8003168:	4606      	mov	r6, r0
  __HAL_RCC_PLL3_DISABLE();
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003170:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003172:	f7fd fd77 	bl	8000c64 <HAL_GetTick>
 8003176:	4605      	mov	r5, r0

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003178:	e004      	b.n	8003184 <RCCEx_PLL3_Config+0x20>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800317a:	f7fd fd73 	bl	8000c64 <HAL_GetTick>
 800317e:	1b40      	subs	r0, r0, r5
 8003180:	2802      	cmp	r0, #2
 8003182:	d854      	bhi.n	800322e <RCCEx_PLL3_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	d4f7      	bmi.n	800317a <RCCEx_PLL3_Config+0x16>
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800318a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800318c:	e9d6 1200 	ldrd	r1, r2, [r6]
 8003190:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003194:	f023 0303 	bic.w	r3, r3, #3
 8003198:	3a01      	subs	r2, #1
 800319a:	430b      	orrs	r3, r1
 800319c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80031a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80031a2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80031a4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80031a8:	4d23      	ldr	r5, [pc, #140]	@ (8003238 <RCCEx_PLL3_Config+0xd4>)
 80031aa:	1e51      	subs	r1, r2, #1
 80031ac:	6932      	ldr	r2, [r6, #16]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4005      	ands	r5, r0
 80031b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b6:	0249      	lsls	r1, r1, #9
 80031b8:	3a01      	subs	r2, #1
 80031ba:	b289      	uxth	r1, r1
 80031bc:	432b      	orrs	r3, r5
 80031be:	0412      	lsls	r2, r2, #16
 80031c0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80031c4:	430b      	orrs	r3, r1
 80031c6:	4313      	orrs	r3, r2
 80031c8:	6972      	ldr	r2, [r6, #20]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80031ca:	4d1a      	ldr	r5, [pc, #104]	@ (8003234 <RCCEx_PLL3_Config+0xd0>)
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80031cc:	3a01      	subs	r2, #1
 80031ce:	0612      	lsls	r2, r2, #24
 80031d0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80031d4:	4313      	orrs	r3, r2
 80031d6:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80031d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80031da:	69b2      	ldr	r2, [r6, #24]
 80031dc:	f023 030c 	bic.w	r3, r3, #12
 80031e0:	4313      	orrs	r3, r2
 80031e2:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80031e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80031e6:	6a32      	ldr	r2, [r6, #32]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_DISABLE();
 80031ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80031ee:	f023 0310 	bic.w	r3, r3, #16
 80031f2:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80031f4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80031f6:	69f2      	ldr	r2, [r6, #28]
 80031f8:	f36f 03cf 	bfc	r3, #3, #13
 80031fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003200:	64a3      	str	r3, [r4, #72]	@ 0x48
  __HAL_RCC_PLL3FRACN_ENABLE();
 8003202:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003204:	f043 0310 	orr.w	r3, r3, #16
 8003208:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_RCC_PLL3_ENABLE();
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003210:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003212:	f7fd fd27 	bl	8000c64 <HAL_GetTick>
 8003216:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003218:	e004      	b.n	8003224 <RCCEx_PLL3_Config+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800321a:	f7fd fd23 	bl	8000c64 <HAL_GetTick>
 800321e:	1b00      	subs	r0, r0, r4
 8003220:	2802      	cmp	r0, #2
 8003222:	d804      	bhi.n	800322e <RCCEx_PLL3_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	d5f7      	bpl.n	800321a <RCCEx_PLL3_Config+0xb6>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800322a:	2000      	movs	r0, #0
}
 800322c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800322e:	2003      	movs	r0, #3
}
 8003230:	bd70      	pop	{r4, r5, r6, pc}
 8003232:	bf00      	nop
 8003234:	46020c00 	.word	0x46020c00
 8003238:	80800000 	.word	0x80800000

0800323c <RCCEx_PLL2_Config>:
{
 800323c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PLL2_DISABLE();
 800323e:	4c33      	ldr	r4, [pc, #204]	@ (800330c <RCCEx_PLL2_Config+0xd0>)
{
 8003240:	4606      	mov	r6, r0
  __HAL_RCC_PLL2_DISABLE();
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003248:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800324a:	f7fd fd0b 	bl	8000c64 <HAL_GetTick>
 800324e:	4605      	mov	r5, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003250:	e004      	b.n	800325c <RCCEx_PLL2_Config+0x20>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003252:	f7fd fd07 	bl	8000c64 <HAL_GetTick>
 8003256:	1b40      	subs	r0, r0, r5
 8003258:	2802      	cmp	r0, #2
 800325a:	d854      	bhi.n	8003306 <RCCEx_PLL2_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	011a      	lsls	r2, r3, #4
 8003260:	d4f7      	bmi.n	8003252 <RCCEx_PLL2_Config+0x16>
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003262:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003264:	e9d6 1200 	ldrd	r1, r2, [r6]
 8003268:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800326c:	f023 0303 	bic.w	r3, r3, #3
 8003270:	3a01      	subs	r2, #1
 8003272:	430b      	orrs	r3, r1
 8003274:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003278:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800327a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800327c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003280:	4d23      	ldr	r5, [pc, #140]	@ (8003310 <RCCEx_PLL2_Config+0xd4>)
 8003282:	1e51      	subs	r1, r2, #1
 8003284:	6932      	ldr	r2, [r6, #16]
 8003286:	3b01      	subs	r3, #1
 8003288:	4005      	ands	r5, r0
 800328a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328e:	0249      	lsls	r1, r1, #9
 8003290:	3a01      	subs	r2, #1
 8003292:	b289      	uxth	r1, r1
 8003294:	432b      	orrs	r3, r5
 8003296:	0412      	lsls	r2, r2, #16
 8003298:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800329c:	430b      	orrs	r3, r1
 800329e:	4313      	orrs	r3, r2
 80032a0:	6972      	ldr	r2, [r6, #20]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80032a2:	4d1a      	ldr	r5, [pc, #104]	@ (800330c <RCCEx_PLL2_Config+0xd0>)
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80032a4:	3a01      	subs	r2, #1
 80032a6:	0612      	lsls	r2, r2, #24
 80032a8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80032ac:	4313      	orrs	r3, r2
 80032ae:	63e3      	str	r3, [r4, #60]	@ 0x3c
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80032b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80032b2:	69b2      	ldr	r2, [r6, #24]
 80032b4:	f023 030c 	bic.w	r3, r3, #12
 80032b8:	4313      	orrs	r3, r2
 80032ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80032bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80032be:	6a32      	ldr	r2, [r6, #32]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_DISABLE();
 80032c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80032c6:	f023 0310 	bic.w	r3, r3, #16
 80032ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80032cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032ce:	69f2      	ldr	r2, [r6, #28]
 80032d0:	f36f 03cf 	bfc	r3, #3, #13
 80032d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80032d8:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_RCC_PLL2FRACN_ENABLE();
 80032da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80032dc:	f043 0310 	orr.w	r3, r3, #16
 80032e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032e8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80032ea:	f7fd fcbb 	bl	8000c64 <HAL_GetTick>
 80032ee:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80032f0:	e004      	b.n	80032fc <RCCEx_PLL2_Config+0xc0>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80032f2:	f7fd fcb7 	bl	8000c64 <HAL_GetTick>
 80032f6:	1b00      	subs	r0, r0, r4
 80032f8:	2802      	cmp	r0, #2
 80032fa:	d804      	bhi.n	8003306 <RCCEx_PLL2_Config+0xca>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	d5f7      	bpl.n	80032f2 <RCCEx_PLL2_Config+0xb6>
  return HAL_OK;
 8003302:	2000      	movs	r0, #0
}
 8003304:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8003306:	2003      	movs	r0, #3
}
 8003308:	bd70      	pop	{r4, r5, r6, pc}
 800330a:	bf00      	nop
 800330c:	46020c00 	.word	0x46020c00
 8003310:	80800000 	.word	0x80800000

08003314 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003318:	6803      	ldr	r3, [r0, #0]
{
 800331a:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331c:	07d8      	lsls	r0, r3, #31
{
 800331e:	b082      	sub	sp, #8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003320:	d508      	bpl.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003322:	499d      	ldr	r1, [pc, #628]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003324:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003326:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 800332a:	f022 0203 	bic.w	r2, r2, #3
 800332e:	4302      	orrs	r2, r0
 8003330:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003334:	0799      	lsls	r1, r3, #30
 8003336:	d508      	bpl.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003338:	4997      	ldr	r1, [pc, #604]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800333a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800333c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003340:	f022 020c 	bic.w	r2, r2, #12
 8003344:	4302      	orrs	r2, r0
 8003346:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800334a:	075a      	lsls	r2, r3, #29
 800334c:	d508      	bpl.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800334e:	4992      	ldr	r1, [pc, #584]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003352:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003356:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800335a:	4302      	orrs	r2, r0
 800335c:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003360:	071f      	lsls	r7, r3, #28
 8003362:	d508      	bpl.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003364:	498c      	ldr	r1, [pc, #560]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003366:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003368:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 800336c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8003370:	4302      	orrs	r2, r0
 8003372:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003376:	06de      	lsls	r6, r3, #27
 8003378:	d508      	bpl.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x78>
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800337a:	4987      	ldr	r1, [pc, #540]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800337c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800337e:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003382:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003386:	4302      	orrs	r2, r0
 8003388:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800338c:	069d      	lsls	r5, r3, #26
 800338e:	d508      	bpl.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003390:	4981      	ldr	r1, [pc, #516]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003392:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003394:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003398:	f022 0207 	bic.w	r2, r2, #7
 800339c:	4302      	orrs	r2, r0
 800339e:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033a2:	0658      	lsls	r0, r3, #25
 80033a4:	d508      	bpl.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80033a6:	497c      	ldr	r1, [pc, #496]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80033a8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80033aa:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80033ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80033b2:	4302      	orrs	r2, r0
 80033b4:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033b8:	0619      	lsls	r1, r3, #24
 80033ba:	d508      	bpl.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80033bc:	4976      	ldr	r1, [pc, #472]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80033be:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80033c0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80033c4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80033c8:	4302      	orrs	r2, r0
 80033ca:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ce:	05da      	lsls	r2, r3, #23
 80033d0:	d508      	bpl.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80033d2:	4971      	ldr	r1, [pc, #452]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80033d4:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80033d6:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80033da:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80033de:	4302      	orrs	r2, r0
 80033e0:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033e4:	025f      	lsls	r7, r3, #9
 80033e6:	d508      	bpl.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80033e8:	496b      	ldr	r1, [pc, #428]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80033ea:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80033ec:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80033f0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80033f4:	4302      	orrs	r2, r0
 80033f6:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033fa:	059e      	lsls	r6, r3, #22
 80033fc:	d508      	bpl.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80033fe:	4966      	ldr	r1, [pc, #408]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003400:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003402:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003406:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800340a:	4302      	orrs	r2, r0
 800340c:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003410:	055d      	lsls	r5, r3, #21
 8003412:	d508      	bpl.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003414:	4960      	ldr	r1, [pc, #384]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003416:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003418:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 800341c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003420:	4302      	orrs	r2, r0
 8003422:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003426:	0518      	lsls	r0, r3, #20
 8003428:	d509      	bpl.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800342a:	495b      	ldr	r1, [pc, #364]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800342c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003430:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003434:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003438:	4302      	orrs	r2, r0
 800343a:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800343e:	0499      	lsls	r1, r3, #18
 8003440:	f403 5600 	and.w	r6, r3, #8192	@ 0x2000
 8003444:	d51e      	bpl.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8003446:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800344a:	2a40      	cmp	r2, #64	@ 0x40
 800344c:	f000 8235 	beq.w	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003450:	f200 8254 	bhi.w	80038fc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8003454:	2a00      	cmp	r2, #0
 8003456:	f000 8248 	beq.w	80038ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800345a:	2a20      	cmp	r2, #32
 800345c:	f040 8254 	bne.w	8003908 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003460:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003464:	f7ff fe7e 	bl	8003164 <RCCEx_PLL3_Config>
 8003468:	4606      	mov	r6, r0
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800346a:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 800346c:	b956      	cbnz	r6, 8003484 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800346e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003472:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003474:	4848      	ldr	r0, [pc, #288]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003476:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 800347a:	f021 01e0 	bic.w	r1, r1, #224	@ 0xe0
 800347e:	430a      	orrs	r2, r1
 8003480:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003484:	045a      	lsls	r2, r3, #17
 8003486:	d539      	bpl.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8003488:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800348c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8003490:	f000 8219 	beq.w	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8003494:	d829      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8003496:	2a00      	cmp	r2, #0
 8003498:	f000 8220 	beq.w	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800349c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80034a0:	d12b      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034a2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80034a6:	f7ff fe5d 	bl	8003164 <RCCEx_PLL3_Config>
 80034aa:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80034ac:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80034ae:	2d00      	cmp	r5, #0
 80034b0:	f040 8212 	bne.w	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80034b4:	4938      	ldr	r1, [pc, #224]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80034b6:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80034ba:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80034be:	041f      	lsls	r7, r3, #16
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80034c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034c4:	ea42 0200 	orr.w	r2, r2, r0
 80034c8:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80034cc:	d419      	bmi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80034ce:	03d8      	lsls	r0, r3, #15
 80034d0:	d52d      	bpl.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x21a>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 80034d2:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 80034d6:	2a04      	cmp	r2, #4
 80034d8:	f200 822c 	bhi.w	8003934 <HAL_RCCEx_PeriphCLKConfig+0x620>
 80034dc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80034e0:	0145014a 	.word	0x0145014a
 80034e4:	014a01e4 	.word	0x014a01e4
 80034e8:	014a      	.short	0x014a
    switch (pPeriphClkInit->Sai2ClockSelection)
 80034ea:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80034ee:	f000 81ef 	beq.w	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034f2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80034f6:	f000 81eb 	beq.w	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034fa:	2601      	movs	r6, #1
 80034fc:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80034fe:	041f      	lsls	r7, r3, #16
 8003500:	d5e5      	bpl.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8003502:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8003506:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800350a:	f000 8191 	beq.w	8003830 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800350e:	f240 81a1 	bls.w	8003854 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8003512:	f422 5180 	bic.w	r1, r2, #4096	@ 0x1000
 8003516:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800351a:	f000 818f 	beq.w	800383c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800351e:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8003522:	f000 818b 	beq.w	800383c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003526:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003528:	03d8      	lsls	r0, r3, #15
    switch (pPeriphClkInit->AdcDacClockSelection)
 800352a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800352c:	d4d1      	bmi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800352e:	0399      	lsls	r1, r3, #14
 8003530:	d51e      	bpl.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003532:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8003536:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800353a:	f000 81a4 	beq.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800353e:	f200 81e5 	bhi.w	800390c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003542:	b142      	cbz	r2, 8003556 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003544:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003548:	f040 81e8 	bne.w	800391c <HAL_RCCEx_PeriphCLKConfig+0x608>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800354c:	4912      	ldr	r1, [pc, #72]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800354e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003550:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003554:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8003556:	2d00      	cmp	r5, #0
 8003558:	f040 8156 	bne.w	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800355c:	490e      	ldr	r1, [pc, #56]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800355e:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8003562:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003566:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 800356a:	4302      	orrs	r2, r0
 800356c:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003570:	035a      	lsls	r2, r3, #13
 8003572:	d560      	bpl.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x322>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003574:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003576:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800357a:	0757      	lsls	r7, r2, #29
 800357c:	f140 8107 	bpl.w	800378e <HAL_RCCEx_PeriphCLKConfig+0x47a>
    FlagStatus       pwrclkchanged = RESET;
 8003580:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003584:	4f05      	ldr	r7, [pc, #20]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	62bb      	str	r3, [r7, #40]	@ 0x28
    tickstart = HAL_GetTick();
 800358e:	f7fd fb69 	bl	8000c64 <HAL_GetTick>
 8003592:	4681      	mov	r9, r0
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003594:	e00b      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003596:	bf00      	nop
 8003598:	46020c00 	.word	0x46020c00
 800359c:	46020800 	.word	0x46020800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a0:	f7fd fb60 	bl	8000c64 <HAL_GetTick>
 80035a4:	eba0 0309 	sub.w	r3, r0, r9
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	f200 811e 	bhi.w	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b0:	07d8      	lsls	r0, r3, #31
 80035b2:	d5f5      	bpl.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    if (ret == HAL_OK)
 80035b4:	2d00      	cmp	r5, #0
 80035b6:	f040 81bb 	bne.w	8003930 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ba:	f8df a33c 	ldr.w	sl, [pc, #828]	@ 80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80035be:	f8d4 20bc 	ldr.w	r2, [r4, #188]	@ 0xbc
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035c2:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80035c6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80035ca:	d027      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d025      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x308>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035d0:	f8da 10f0 	ldr.w	r1, [sl, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 80035d4:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035dc:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035e0:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e8:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035ec:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035f0:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80035f2:	f8ca 30f0 	str.w	r3, [sl, #240]	@ 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035f6:	d511      	bpl.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x308>
        tickstart = HAL_GetTick();
 80035f8:	f7fd fb34 	bl	8000c64 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003600:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003602:	e005      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fd fb2e 	bl	8000c64 <HAL_GetTick>
 8003608:	1bc0      	subs	r0, r0, r7
 800360a:	4548      	cmp	r0, r9
 800360c:	f200 80ed 	bhi.w	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4d6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003610:	f8da 30f0 	ldr.w	r3, [sl, #240]	@ 0xf0
 8003614:	079b      	lsls	r3, r3, #30
 8003616:	d5f5      	bpl.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003618:	f8d4 20bc 	ldr.w	r2, [r4, #188]	@ 0xbc
 800361c:	49b6      	ldr	r1, [pc, #728]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800361e:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8003622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800362c:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 800362e:	f1b8 0f00 	cmp.w	r8, #0
 8003632:	f040 80e1 	bne.w	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003636:	02df      	lsls	r7, r3, #11
 8003638:	d51f      	bpl.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x366>
    switch (pPeriphClkInit->IclkClockSelection)
 800363a:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800363e:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 8003642:	f000 8116 	beq.w	8003872 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003646:	f200 816c 	bhi.w	8003922 <HAL_RCCEx_PeriphCLKConfig+0x60e>
 800364a:	b14a      	cbz	r2, 8003660 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800364c:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8003650:	f040 816b 	bne.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003654:	f104 0008 	add.w	r0, r4, #8
 8003658:	f7ff fdf0 	bl	800323c <RCCEx_PLL2_Config>
 800365c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800365e:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8003660:	2d00      	cmp	r5, #0
 8003662:	f040 80d3 	bne.w	800380c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003666:	49a4      	ldr	r1, [pc, #656]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003668:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800366c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8003670:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003674:	4302      	orrs	r2, r0
 8003676:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800367a:	0318      	lsls	r0, r3, #12
 800367c:	d50b      	bpl.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch (pPeriphClkInit->RngClockSelection)
 800367e:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8003682:	f432 5180 	bics.w	r1, r2, #4096	@ 0x1000
 8003686:	f000 80a3 	beq.w	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800368a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800368e:	f000 809f 	beq.w	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003692:	2601      	movs	r6, #1
 8003694:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003696:	0299      	lsls	r1, r3, #10
 8003698:	d50d      	bpl.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800369a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 800369e:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 80036a2:	f000 80b9 	beq.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80036a6:	4994      	ldr	r1, [pc, #592]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036a8:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 80036ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036b0:	4302      	orrs	r2, r0
 80036b2:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80036b6:	021a      	lsls	r2, r3, #8
 80036b8:	d509      	bpl.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80036ba:	498f      	ldr	r1, [pc, #572]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036bc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80036c0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80036c4:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80036c8:	4302      	orrs	r2, r0
 80036ca:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80036ce:	01df      	lsls	r7, r3, #7
 80036d0:	d509      	bpl.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80036d2:	4989      	ldr	r1, [pc, #548]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036d4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 80036d8:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80036dc:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80036e0:	4302      	orrs	r2, r0
 80036e2:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80036e6:	0198      	lsls	r0, r3, #6
 80036e8:	d509      	bpl.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80036ea:	4983      	ldr	r1, [pc, #524]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036ec:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 80036f0:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 80036f4:	f022 0218 	bic.w	r2, r2, #24
 80036f8:	4302      	orrs	r2, r0
 80036fa:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036fe:	0159      	lsls	r1, r3, #5
 8003700:	d515      	bpl.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003702:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 8003706:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800370a:	f000 808b 	beq.w	8003824 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800370e:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8003712:	f000 80a7 	beq.w	8003864 <HAL_RCCEx_PeriphCLKConfig+0x550>
    if (ret == HAL_OK)
 8003716:	2d00      	cmp	r5, #0
 8003718:	d165      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800371a:	4977      	ldr	r1, [pc, #476]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800371c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8003720:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 8003724:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003728:	4302      	orrs	r2, r0
 800372a:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800372e:	011a      	lsls	r2, r3, #4
 8003730:	d50b      	bpl.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x436>
    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003732:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8003736:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800373a:	f000 80ad 	beq.w	8003898 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800373e:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8003742:	d033      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003744:	2a00      	cmp	r2, #0
 8003746:	d037      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003748:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	d509      	bpl.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800374e:	4a6a      	ldr	r2, [pc, #424]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003750:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8003754:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8003758:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800375c:	430b      	orrs	r3, r1
 800375e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 8003762:	4630      	mov	r0, r6
 8003764:	b002      	add	sp, #8
 8003766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800376a:	4963      	ldr	r1, [pc, #396]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800376c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800376e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003772:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 8003774:	2d00      	cmp	r5, #0
 8003776:	d14d      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x500>
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003778:	495f      	ldr	r1, [pc, #380]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800377a:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800377e:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 8003782:	f022 0207 	bic.w	r2, r2, #7
 8003786:	4302      	orrs	r2, r0
 8003788:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
 800378c:	e6cf      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
      pwrclkchanged = SET;
 8003792:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	f042 0204 	orr.w	r2, r2, #4
 800379a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037aa:	e6eb      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x270>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037ac:	f104 0008 	add.w	r0, r4, #8
 80037b0:	f7ff fd44 	bl	800323c <RCCEx_PLL2_Config>
 80037b4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80037b6:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80037b8:	bb55      	cbnz	r5, 8003810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80037ba:	494f      	ldr	r1, [pc, #316]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037bc:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80037c0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 80037c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037c8:	4302      	orrs	r2, r0
 80037ca:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
 80037ce:	e7bc      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x436>
    if (ret == HAL_OK)
 80037d0:	2d00      	cmp	r5, #0
 80037d2:	d156      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80037d4:	4848      	ldr	r0, [pc, #288]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037d6:	f8d0 10e4 	ldr.w	r1, [r0, #228]	@ 0xe4
 80037da:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80037de:	430a      	orrs	r2, r1
 80037e0:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
 80037e4:	e757      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x382>
      status = ret;
 80037e6:	462e      	mov	r6, r5
 80037e8:	e7a1      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x41a>
        ret = HAL_TIMEOUT;
 80037ea:	2603      	movs	r6, #3
 80037ec:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80037ee:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80037f0:	f1b8 0f00 	cmp.w	r8, #0
 80037f4:	f43f af1f 	beq.w	8003636 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	493f      	ldr	r1, [pc, #252]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037fa:	f8d1 2094 	ldr.w	r2, [r1, #148]	@ 0x94
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	f8c1 2094 	str.w	r2, [r1, #148]	@ 0x94
 8003806:	e716      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x322>
      status = ret;
 8003808:	462e      	mov	r6, r5
 800380a:	e6b1      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      status = ret;
 800380c:	462e      	mov	r6, r5
 800380e:	e734      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x366>
      status = ret;
 8003810:	462e      	mov	r6, r5
 8003812:	e79a      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x436>
      status = ret;
 8003814:	462e      	mov	r6, r5
 8003816:	e68a      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x21a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003818:	4937      	ldr	r1, [pc, #220]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800381a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800381c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003820:	628a      	str	r2, [r1, #40]	@ 0x28
 8003822:	e740      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003824:	4934      	ldr	r1, [pc, #208]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003826:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003828:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800382c:	628a      	str	r2, [r1, #40]	@ 0x28
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800382e:	e772      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x402>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003830:	f104 0008 	add.w	r0, r4, #8
 8003834:	f7ff fd02 	bl	800323c <RCCEx_PLL2_Config>
 8003838:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800383a:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 800383c:	b985      	cbnz	r5, 8003860 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800383e:	492e      	ldr	r1, [pc, #184]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003840:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8003844:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8003848:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800384c:	4302      	orrs	r2, r0
 800384e:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
 8003852:	e63c      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8003854:	f432 5280 	bics.w	r2, r2, #4096	@ 0x1000
 8003858:	f47f ae65 	bne.w	8003526 <HAL_RCCEx_PeriphCLKConfig+0x212>
    if (ret == HAL_OK)
 800385c:	2d00      	cmp	r5, #0
 800385e:	d0ee      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      status = ret;
 8003860:	462e      	mov	r6, r5
 8003862:	e634      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003864:	f104 0008 	add.w	r0, r4, #8
 8003868:	f7ff fce8 	bl	800323c <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800386c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800386e:	4605      	mov	r5, r0
 8003870:	e751      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x402>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003872:	4921      	ldr	r1, [pc, #132]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003874:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003876:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800387a:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 800387c:	2d00      	cmp	r5, #0
 800387e:	d1c5      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003880:	e6f1      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x352>
      status = ret;
 8003882:	462e      	mov	r6, r5
 8003884:	e707      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x382>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003886:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800388a:	f7ff fc6b 	bl	8003164 <RCCEx_PLL3_Config>
 800388e:	4605      	mov	r5, r0
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003890:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8003892:	2d00      	cmp	r5, #0
 8003894:	d1b8      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003896:	e661      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x248>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003898:	4917      	ldr	r1, [pc, #92]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800389a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800389c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80038a0:	628a      	str	r2, [r1, #40]	@ 0x28
    if (ret == HAL_OK)
 80038a2:	2d00      	cmp	r5, #0
 80038a4:	d1b4      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80038a6:	e788      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038a8:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80038ac:	f7ff fc5a 	bl	8003164 <RCCEx_PLL3_Config>
 80038b0:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80038b2:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	d1ad      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80038b8:	e75e      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038ba:	480f      	ldr	r0, [pc, #60]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80038be:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80038c2:	6281      	str	r1, [r0, #40]	@ 0x28
    if (ret == HAL_OK)
 80038c4:	e5d5      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038c6:	490c      	ldr	r1, [pc, #48]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038c8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80038ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80038ce:	628a      	str	r2, [r1, #40]	@ 0x28
    switch (pPeriphClkInit->Sai1ClockSelection)
 80038d0:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 80038d2:	2d00      	cmp	r5, #0
 80038d4:	f43f adee 	beq.w	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      status = ret;
 80038d8:	462e      	mov	r6, r5
 80038da:	e610      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038dc:	f104 0008 	add.w	r0, r4, #8
 80038e0:	f7ff fcac 	bl	800323c <RCCEx_PLL2_Config>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80038e4:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038e6:	4605      	mov	r5, r0
        break;
 80038e8:	e5e1      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038ea:	f104 0008 	add.w	r0, r4, #8
 80038ee:	f7ff fca5 	bl	800323c <RCCEx_PLL2_Config>
 80038f2:	4606      	mov	r6, r0
        break;
 80038f4:	e5b9      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x156>
 80038f6:	bf00      	nop
 80038f8:	46020c00 	.word	0x46020c00
    switch (pPeriphClkInit->Sai1ClockSelection)
 80038fc:	2a60      	cmp	r2, #96	@ 0x60
 80038fe:	f43f adb8 	beq.w	8003472 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003902:	2a80      	cmp	r2, #128	@ 0x80
 8003904:	f43f adb5 	beq.w	8003472 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003908:	2601      	movs	r6, #1
 800390a:	e5bb      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (pPeriphClkInit->Adf1ClockSelection)
 800390c:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8003910:	f43f ae21 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003914:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8003918:	f43f ae1d 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800391c:	2601      	movs	r6, #1
 800391e:	4635      	mov	r5, r6
 8003920:	e626      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (pPeriphClkInit->IclkClockSelection)
 8003922:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8003926:	f43f ae9b 	beq.w	8003660 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800392a:	2601      	movs	r6, #1
 800392c:	4635      	mov	r5, r6
 800392e:	e6a4      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x366>
      status = ret;
 8003930:	462e      	mov	r6, r5
 8003932:	e75c      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003934:	2601      	movs	r6, #1
 8003936:	4635      	mov	r5, r6
 8003938:	e5f9      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800393a:	bf00      	nop

0800393c <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800393c:	4953      	ldr	r1, [pc, #332]	@ (8003a8c <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
{
 800393e:	b510      	push	{r4, lr}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003940:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003942:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003944:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003946:	f002 0c03 	and.w	ip, r2, #3
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800394a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800394c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003950:	f3c2 1e00 	ubfx	lr, r2, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003954:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
  switch (pll1source)
 8003956:	f1bc 0f02 	cmp.w	ip, #2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800395a:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 800395e:	fb0e f202 	mul.w	r2, lr, r2
 8003962:	ee07 2a90 	vmov	s15, r2
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003966:	f103 0301 	add.w	r3, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800396a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pll1source)
 800396e:	d02c      	beq.n	80039ca <HAL_RCCEx_GetPLL1ClockFreq+0x8e>
 8003970:	f1bc 0f03 	cmp.w	ip, #3
 8003974:	d029      	beq.n	80039ca <HAL_RCCEx_GetPLL1ClockFreq+0x8e>
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003976:	f3c4 0408 	ubfx	r4, r4, #0, #9
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800397a:	ee07 4a90 	vmov	s15, r4
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800397e:	688a      	ldr	r2, [r1, #8]
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003980:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003984:	0212      	lsls	r2, r2, #8
 8003986:	bf4c      	ite	mi
 8003988:	688a      	ldrmi	r2, [r1, #8]
 800398a:	f8d1 20f4 	ldrpl.w	r2, [r1, #244]	@ 0xf4
 800398e:	4940      	ldr	r1, [pc, #256]	@ (8003a90 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
 8003990:	bf4c      	ite	mi
 8003992:	0f12      	lsrmi	r2, r2, #28
 8003994:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80039a4:	edd3 5a00 	vldr	s11, [r3]
 80039a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ac:	ee76 6a86 	vadd.f32	s13, s13, s12
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80039b0:	eef8 5a65 	vcvt.f32.u32	s11, s11
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039b4:	ed9f 5a37 	vldr	s10, [pc, #220]	@ 8003a94 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80039b8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039bc:	eef0 7a66 	vmov.f32	s15, s13
 80039c0:	eee7 7a05 	vfma.f32	s15, s14, s10
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80039c4:	ee26 7a27 	vmul.f32	s14, s12, s15
      break;
 80039c8:	e01a      	b.n	8003a00 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039ca:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80039cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d4:	ee06 2a10 	vmov	s12, r2
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80039e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e4:	ee36 6a26 	vadd.f32	s12, s12, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039e8:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 8003a98 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ec:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8003a94 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039f0:	eec5 6a27 	vdiv.f32	s13, s10, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80039f4:	eef0 7a46 	vmov.f32	s15, s12
 80039f8:	eee7 7a25 	vfma.f32	s15, s14, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039fc:	ee26 7aa7 	vmul.f32	s14, s13, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003a00:	4a22      	ldr	r2, [pc, #136]	@ (8003a8c <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 8003a02:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8003a04:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8003a08:	d010      	beq.n	8003a2c <HAL_RCCEx_GetPLL1ClockFreq+0xf0>
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a0a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003a0c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a10:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003a14:	ee06 3a90 	vmov	s13, r3
 8003a18:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003a1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a28:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003a2c:	4a17      	ldr	r2, [pc, #92]	@ (8003a8c <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 8003a2e:	6003      	str	r3, [r0, #0]
 8003a30:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8003a32:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8003a36:	d010      	beq.n	8003a5a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a38:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003a3a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a3e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003a42:	ee06 3a90 	vmov	s13, r3
 8003a46:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003a4a:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a56:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a8c <HAL_RCCEx_GetPLL1ClockFreq+0x150>)
 8003a5c:	6043      	str	r3, [r0, #4]
 8003a5e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8003a60:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
 8003a64:	d010      	beq.n	8003a88 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a66:	6b53      	ldr	r3, [r2, #52]	@ 0x34
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003a68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a6c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003a70:	ee06 3a90 	vmov	s13, r3
 8003a74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003a78:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a84:	ee17 3a90 	vmov	r3, s15
 8003a88:	6083      	str	r3, [r0, #8]
}
 8003a8a:	bd10      	pop	{r4, pc}
 8003a8c:	46020c00 	.word	0x46020c00
 8003a90:	08005548 	.word	0x08005548
 8003a94:	39000000 	.word	0x39000000
 8003a98:	4b742400 	.word	0x4b742400

08003a9c <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003a9c:	4953      	ldr	r1, [pc, #332]	@ (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
{
 8003a9e:	b510      	push	{r4, lr}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003aa0:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003aa2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003aa4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003aa6:	f002 0c03 	and.w	ip, r2, #3
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003aaa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003aac:	f3c3 2303 	ubfx	r3, r3, #8, #4
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003ab0:	f3c2 1e00 	ubfx	lr, r2, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003ab4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
  switch (pll2source)
 8003ab6:	f1bc 0f02 	cmp.w	ip, #2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003aba:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8003abe:	fb0e f202 	mul.w	r2, lr, r2
 8003ac2:	ee07 2a90 	vmov	s15, r2
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003ac6:	f103 0301 	add.w	r3, r3, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pll2source)
 8003ace:	d02c      	beq.n	8003b2a <HAL_RCCEx_GetPLL2ClockFreq+0x8e>
 8003ad0:	f1bc 0f03 	cmp.w	ip, #3
 8003ad4:	d029      	beq.n	8003b2a <HAL_RCCEx_GetPLL2ClockFreq+0x8e>
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003ad6:	f3c4 0408 	ubfx	r4, r4, #0, #9
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ada:	ee07 4a90 	vmov	s15, r4
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003ade:	688a      	ldr	r2, [r1, #8]
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ae0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003ae4:	0212      	lsls	r2, r2, #8
 8003ae6:	bf4c      	ite	mi
 8003ae8:	688a      	ldrmi	r2, [r1, #8]
 8003aea:	f8d1 20f4 	ldrpl.w	r2, [r1, #244]	@ 0xf4
 8003aee:	4940      	ldr	r1, [pc, #256]	@ (8003bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x154>)
 8003af0:	bf4c      	ite	mi
 8003af2:	0f12      	lsrmi	r2, r2, #28
 8003af4:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b00:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003b04:	edd3 5a00 	vldr	s11, [r3]
 8003b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b0c:	ee76 6a86 	vadd.f32	s13, s13, s12
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003b10:	eef8 5a65 	vcvt.f32.u32	s11, s11
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b14:	ed9f 5a37 	vldr	s10, [pc, #220]	@ 8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003b18:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b1c:	eef0 7a66 	vmov.f32	s15, s13
 8003b20:	eee7 7a05 	vfma.f32	s15, s14, s10
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003b24:	ee26 7a27 	vmul.f32	s14, s12, s15
      break;
 8003b28:	e01a      	b.n	8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b2a:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b34:	ee06 2a10 	vmov	s12, r2
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b44:	ee36 6a26 	vadd.f32	s12, s12, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b48:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 8003bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b4c:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b50:	eec5 6a27 	vdiv.f32	s13, s10, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b54:	eef0 7a46 	vmov.f32	s15, s12
 8003b58:	eee7 7a25 	vfma.f32	s15, s14, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003b5c:	ee26 7aa7 	vmul.f32	s14, s13, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003b60:	4a22      	ldr	r2, [pc, #136]	@ (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8003b62:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003b64:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8003b68:	d010      	beq.n	8003b8c <HAL_RCCEx_GetPLL2ClockFreq+0xf0>
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b6a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003b6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b70:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003b74:	ee06 3a90 	vmov	s13, r3
 8003b78:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003b7c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b88:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003b8c:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8003b8e:	6003      	str	r3, [r0, #0]
 8003b90:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003b92:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8003b96:	d010      	beq.n	8003bba <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b98:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003b9a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b9e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003ba2:	ee06 3a90 	vmov	s13, r3
 8003ba6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003baa:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb6:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003bba:	4a0c      	ldr	r2, [pc, #48]	@ (8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
 8003bbc:	6043      	str	r3, [r0, #4]
 8003bbe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003bc0:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
 8003bc4:	d010      	beq.n	8003be8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bc6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003bc8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bcc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003bd0:	ee06 3a90 	vmov	s13, r3
 8003bd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003bd8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be4:	ee17 3a90 	vmov	r3, s15
 8003be8:	6083      	str	r3, [r0, #8]
}
 8003bea:	bd10      	pop	{r4, pc}
 8003bec:	46020c00 	.word	0x46020c00
 8003bf0:	08005548 	.word	0x08005548
 8003bf4:	39000000 	.word	0x39000000
 8003bf8:	4b742400 	.word	0x4b742400

08003bfc <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003bfc:	4953      	ldr	r1, [pc, #332]	@ (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
{
 8003bfe:	b510      	push	{r4, lr}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003c00:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003c02:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003c04:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003c06:	f002 0c03 	and.w	ip, r2, #3
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003c0a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003c0c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003c10:	f3c2 1e00 	ubfx	lr, r2, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003c14:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
  switch (pll3source)
 8003c16:	f1bc 0f02 	cmp.w	ip, #2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003c1a:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8003c1e:	fb0e f202 	mul.w	r2, lr, r2
 8003c22:	ee07 2a90 	vmov	s15, r2
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003c26:	f103 0301 	add.w	r3, r3, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  switch (pll3source)
 8003c2e:	d02c      	beq.n	8003c8a <HAL_RCCEx_GetPLL3ClockFreq+0x8e>
 8003c30:	f1bc 0f03 	cmp.w	ip, #3
 8003c34:	d029      	beq.n	8003c8a <HAL_RCCEx_GetPLL3ClockFreq+0x8e>
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003c36:	f3c4 0408 	ubfx	r4, r4, #0, #9
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c3a:	ee07 4a90 	vmov	s15, r4
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003c3e:	688a      	ldr	r2, [r1, #8]
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003c44:	0212      	lsls	r2, r2, #8
 8003c46:	bf4c      	ite	mi
 8003c48:	688a      	ldrmi	r2, [r1, #8]
 8003c4a:	f8d1 20f4 	ldrpl.w	r2, [r1, #244]	@ 0xf4
 8003c4e:	4940      	ldr	r1, [pc, #256]	@ (8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x154>)
 8003c50:	bf4c      	ite	mi
 8003c52:	0f12      	lsrmi	r2, r2, #28
 8003c54:	f3c2 3203 	ubfxpl	r2, r2, #12, #4
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c60:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003c64:	edd3 5a00 	vldr	s11, [r3]
 8003c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c6c:	ee76 6a86 	vadd.f32	s13, s13, s12
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003c70:	eef8 5a65 	vcvt.f32.u32	s11, s11
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c74:	ed9f 5a37 	vldr	s10, [pc, #220]	@ 8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003c78:	ee85 6aa7 	vdiv.f32	s12, s11, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c7c:	eef0 7a66 	vmov.f32	s15, s13
 8003c80:	eee7 7a05 	vfma.f32	s15, s14, s10
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003c84:	ee26 7a27 	vmul.f32	s14, s12, s15
      break;
 8003c88:	e01a      	b.n	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003c8a:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c94:	ee06 2a10 	vmov	s12, r2
 8003c98:	ee07 3a90 	vmov	s15, r3
 8003c9c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ca4:	ee36 6a26 	vadd.f32	s12, s12, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ca8:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 8003d58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cac:	eddf 5a29 	vldr	s11, [pc, #164]	@ 8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003cb0:	eec5 6a27 	vdiv.f32	s13, s10, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cb4:	eef0 7a46 	vmov.f32	s15, s12
 8003cb8:	eee7 7a25 	vfma.f32	s15, s14, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003cbc:	ee26 7aa7 	vmul.f32	s14, s13, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003cc0:	4a22      	ldr	r2, [pc, #136]	@ (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8003cc2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003cc4:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8003cc8:	d010      	beq.n	8003cec <HAL_RCCEx_GetPLL3ClockFreq+0xf0>
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003cca:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003ccc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003cd0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003cd4:	ee06 3a90 	vmov	s13, r3
 8003cd8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003cdc:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ce0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce8:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003cec:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8003cee:	6003      	str	r3, [r0, #0]
 8003cf0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003cf2:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8003cf6:	d010      	beq.n	8003d1a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003cf8:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003cfa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003cfe:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003d02:	ee06 3a90 	vmov	s13, r3
 8003d06:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003d0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d16:	ee17 3a90 	vmov	r3, s15
  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
 8003d1c:	6043      	str	r3, [r0, #4]
 8003d1e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003d20:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
 8003d24:	d010      	beq.n	8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003d26:	6c53      	ldr	r3, [r2, #68]	@ 0x44
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003d28:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003d2c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003d30:	ee06 3a90 	vmov	s13, r3
 8003d34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003d38:	ee76 6aa7 	vadd.f32	s13, s13, s15
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d44:	ee17 3a90 	vmov	r3, s15
 8003d48:	6083      	str	r3, [r0, #8]
}
 8003d4a:	bd10      	pop	{r4, pc}
 8003d4c:	46020c00 	.word	0x46020c00
 8003d50:	08005548 	.word	0x08005548
 8003d54:	39000000 	.word	0x39000000
 8003d58:	4b742400 	.word	0x4b742400

08003d5c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8003d5c:	b500      	push	{lr}
 8003d5e:	f5a0 4300 	sub.w	r3, r0, #32768	@ 0x8000
 8003d62:	430b      	orrs	r3, r1
 8003d64:	b085      	sub	sp, #20
 8003d66:	f000 83df 	beq.w	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8003d6a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8003d6e:	4298      	cmp	r0, r3
 8003d70:	f171 0300 	sbcs.w	r3, r1, #0
 8003d74:	d21d      	bcs.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8003d76:	f1a0 0380 	sub.w	r3, r0, #128	@ 0x80
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	f000 83fb 	beq.w	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8003d80:	2881      	cmp	r0, #129	@ 0x81
 8003d82:	f171 0300 	sbcs.w	r3, r1, #0
 8003d86:	d248      	bcs.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8003d88:	2821      	cmp	r0, #33	@ 0x21
 8003d8a:	f171 0300 	sbcs.w	r3, r1, #0
 8003d8e:	f080 83a8 	bcs.w	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8003d92:	ea50 0301 	orrs.w	r3, r0, r1
 8003d96:	f000 85d0 	beq.w	800493a <HAL_RCCEx_GetPeriphCLKFreq+0xbde>
 8003d9a:	3801      	subs	r0, #1
 8003d9c:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 8003da0:	2820      	cmp	r0, #32
 8003da2:	f171 0100 	sbcs.w	r1, r1, #0
 8003da6:	f0c0 8104 	bcc.w	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          frequency = 0U;
 8003daa:	2000      	movs	r0, #0
}
 8003dac:	b005      	add	sp, #20
 8003dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8003db2:	f5a0 0380 	sub.w	r3, r0, #4194304	@ 0x400000
 8003db6:	430b      	orrs	r3, r1
 8003db8:	f000 8412 	beq.w	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8003dbc:	4bbd      	ldr	r3, [pc, #756]	@ (80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8003dbe:	4298      	cmp	r0, r3
 8003dc0:	f171 0300 	sbcs.w	r3, r1, #0
 8003dc4:	d254      	bcs.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8003dc6:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	f000 8138 	beq.w	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003dd0:	4bb9      	ldr	r3, [pc, #740]	@ (80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8003dd2:	4298      	cmp	r0, r3
 8003dd4:	f171 0300 	sbcs.w	r3, r1, #0
 8003dd8:	f080 809e 	bcs.w	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003ddc:	f5a0 3300 	sub.w	r3, r0, #131072	@ 0x20000
 8003de0:	430b      	orrs	r3, r1
 8003de2:	f000 825f 	beq.w	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8003de6:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
 8003dea:	430b      	orrs	r3, r1
 8003dec:	f000 81a6 	beq.w	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8003df0:	f5a0 3080 	sub.w	r0, r0, #65536	@ 0x10000
 8003df4:	4308      	orrs	r0, r1
          frequency = 0U;
 8003df6:	bf18      	it	ne
 8003df8:	2000      	movne	r0, #0
 8003dfa:	d1d7      	bne.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8003dfc:	4baf      	ldr	r3, [pc, #700]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003dfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e02:	f003 0307 	and.w	r3, r3, #7
    switch (srcclk)
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	f200 8650 	bhi.w	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
 8003e0c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003e10:	0255025a 	.word	0x0255025a
 8003e14:	0264025f 	.word	0x0264025f
 8003e18:	0267      	.short	0x0267
 8003e1a:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	f000 812d 	beq.w	800407e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003e24:	f640 0301 	movw	r3, #2049	@ 0x801
 8003e28:	4298      	cmp	r0, r3
 8003e2a:	f171 0300 	sbcs.w	r3, r1, #0
 8003e2e:	d24c      	bcs.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8003e30:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8003e34:	430b      	orrs	r3, r1
 8003e36:	f000 83bc 	beq.w	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8003e3a:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	f000 81dc 	beq.w	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 8003e44:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8003e48:	4308      	orrs	r0, r1
          frequency = 0U;
 8003e4a:	bf18      	it	ne
 8003e4c:	2000      	movne	r0, #0
 8003e4e:	d1ad      	bne.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003e50:	4b9a      	ldr	r3, [pc, #616]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
    switch (srcclk)
 8003e5a:	2b80      	cmp	r3, #128	@ 0x80
 8003e5c:	f000 84fa 	beq.w	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8003e60:	f200 8482 	bhi.w	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 8003e64:	bb63      	cbnz	r3, 8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
}
 8003e66:	b005      	add	sp, #20
 8003e68:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK3Freq();
 8003e6c:	f7ff b8d6 	b.w	800301c <HAL_RCC_GetPCLK3Freq>
 8003e70:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
 8003e74:	430b      	orrs	r3, r1
 8003e76:	f000 813e 	beq.w	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003e7a:	4b91      	ldr	r3, [pc, #580]	@ (80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8003e7c:	4298      	cmp	r0, r3
 8003e7e:	f171 0300 	sbcs.w	r3, r1, #0
 8003e82:	d26d      	bcs.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8003e84:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	f000 8317 	beq.w	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8003e8e:	f100 437e 	add.w	r3, r0, #4261412864	@ 0xfe000000
 8003e92:	430b      	orrs	r3, r1
 8003e94:	f000 8174 	beq.w	8004180 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8003e98:	f5a0 0000 	sub.w	r0, r0, #8388608	@ 0x800000
 8003e9c:	4308      	orrs	r0, r1
          frequency = 0U;
 8003e9e:	bf18      	it	ne
 8003ea0:	2000      	movne	r0, #0
 8003ea2:	d183      	bne.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8003ea4:	4b85      	ldr	r3, [pc, #532]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003eaa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (srcclk)
 8003eae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eb2:	f000 84c6 	beq.w	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8003eb6:	f200 8477 	bhi.w	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 83bd 	beq.w	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
}
 8003ec0:	b005      	add	sp, #20
 8003ec2:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetSysClockFreq();
 8003ec6:	f7fd bfe5 	b.w	8001e94 <HAL_RCC_GetSysClockFreq>
 8003eca:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	f000 81cf 	beq.w	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003ed4:	f5a0 4080 	sub.w	r0, r0, #16384	@ 0x4000
 8003ed8:	4308      	orrs	r0, r1
          frequency = 0U;
 8003eda:	bf18      	it	ne
 8003edc:	2000      	movne	r0, #0
 8003ede:	f47f af65 	bne.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003ee2:	4b76      	ldr	r3, [pc, #472]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003ee4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ee8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    switch (srcclk)
 8003eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ef0:	f000 81e3 	beq.w	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 8003ef4:	f240 8393 	bls.w	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8003ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efc:	f000 84e5 	beq.w	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f04:	f040 855c 	bne.w	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f08:	4b6c      	ldr	r3, [pc, #432]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
          frequency = 0U;
 8003f0a:	486e      	ldr	r0, [pc, #440]	@ (80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f0c:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8003f0e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003f12:	bf08      	it	eq
 8003f14:	2000      	moveq	r0, #0
 8003f16:	e749      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8003f18:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	f000 8192 	beq.w	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8003f22:	f5a0 1000 	sub.w	r0, r0, #2097152	@ 0x200000
 8003f26:	4308      	orrs	r0, r1
 8003f28:	bf18      	it	ne
 8003f2a:	2000      	movne	r0, #0
 8003f2c:	f47f af3e 	bne.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003f30:	4b62      	ldr	r3, [pc, #392]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003f32:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8003f36:	0452      	lsls	r2, r2, #17
 8003f38:	f100 83f6 	bmi.w	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f40:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
      switch (srcclk)
 8003f44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f48:	f000 8371 	beq.w	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8003f4c:	f200 848b 	bhi.w	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 84e3 	beq.w	800491c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f56:	a801      	add	r0, sp, #4
 8003f58:	f7ff fda0 	bl	8003a9c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8003f5c:	9802      	ldr	r0, [sp, #8]
        break;
 8003f5e:	e725      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8003f60:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
 8003f64:	430b      	orrs	r3, r1
 8003f66:	f000 80b1 	beq.w	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003f6a:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
 8003f6e:	4308      	orrs	r0, r1
          frequency = 0U;
 8003f70:	bf18      	it	ne
 8003f72:	2000      	movne	r0, #0
 8003f74:	f47f af1a 	bne.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8003f78:	4b50      	ldr	r3, [pc, #320]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003f7a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8003f7e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8003f82:	f400 4000 	and.w	r0, r0, #32768	@ 0x8000
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8003f86:	0792      	lsls	r2, r2, #30
 8003f88:	f140 83a1 	bpl.w	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	f000 848a 	beq.w	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8003f92:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8003f96:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8003f9a:	f43f af07 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003f9e:	4b47      	ldr	r3, [pc, #284]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8003fa4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003fa8:	bf14      	ite	ne
 8003faa:	20fa      	movne	r0, #250	@ 0xfa
 8003fac:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 8003fb0:	e6fc      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8003fb2:	281f      	cmp	r0, #31
 8003fb4:	f63f aef9 	bhi.w	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 8003fb8:	a301      	add	r3, pc, #4	@ (adr r3, 8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003fba:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	0800440b 	.word	0x0800440b
 8003fc4:	080043d1 	.word	0x080043d1
 8003fc8:	08003dab 	.word	0x08003dab
 8003fcc:	08004395 	.word	0x08004395
 8003fd0:	08003dab 	.word	0x08003dab
 8003fd4:	08003dab 	.word	0x08003dab
 8003fd8:	08003dab 	.word	0x08003dab
 8003fdc:	08004343 	.word	0x08004343
 8003fe0:	08003dab 	.word	0x08003dab
 8003fe4:	08003dab 	.word	0x08003dab
 8003fe8:	08003dab 	.word	0x08003dab
 8003fec:	08003dab 	.word	0x08003dab
 8003ff0:	08003dab 	.word	0x08003dab
 8003ff4:	08003dab 	.word	0x08003dab
 8003ff8:	08003dab 	.word	0x08003dab
 8003ffc:	0800447f 	.word	0x0800447f
 8004000:	08003dab 	.word	0x08003dab
 8004004:	08003dab 	.word	0x08003dab
 8004008:	08003dab 	.word	0x08003dab
 800400c:	08003dab 	.word	0x08003dab
 8004010:	08003dab 	.word	0x08003dab
 8004014:	08003dab 	.word	0x08003dab
 8004018:	08003dab 	.word	0x08003dab
 800401c:	08003dab 	.word	0x08003dab
 8004020:	08003dab 	.word	0x08003dab
 8004024:	08003dab 	.word	0x08003dab
 8004028:	08003dab 	.word	0x08003dab
 800402c:	08003dab 	.word	0x08003dab
 8004030:	08003dab 	.word	0x08003dab
 8004034:	08003dab 	.word	0x08003dab
 8004038:	08003dab 	.word	0x08003dab
 800403c:	08004439 	.word	0x08004439
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004040:	4a1e      	ldr	r2, [pc, #120]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004042:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8004046:	6812      	ldr	r2, [r2, #0]
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004048:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800404c:	0491      	lsls	r1, r2, #18
 800404e:	d502      	bpl.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8422 	beq.w	800489a <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8004056:	4a19      	ldr	r2, [pc, #100]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	0492      	lsls	r2, r2, #18
 800405c:	d503      	bpl.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004062:	f000 8496 	beq.w	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8004066:	4a15      	ldr	r2, [pc, #84]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004068:	6810      	ldr	r0, [r2, #0]
 800406a:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 800406e:	f43f ae9d 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8004072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004076:	4813      	ldr	r0, [pc, #76]	@ (80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8004078:	bf18      	it	ne
 800407a:	2000      	movne	r0, #0
 800407c:	e696      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800407e:	490f      	ldr	r1, [pc, #60]	@ (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8004080:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004084:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8004088:	f040 8302 	bne.w	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800408c:	6808      	ldr	r0, [r1, #0]
 800408e:	f010 0020 	ands.w	r0, r0, #32
 8004092:	f43f ae8b 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004096:	688b      	ldr	r3, [r1, #8]
 8004098:	021a      	lsls	r2, r3, #8
 800409a:	bf4c      	ite	mi
 800409c:	688b      	ldrmi	r3, [r1, #8]
 800409e:	f8d1 30f4 	ldrpl.w	r3, [r1, #244]	@ 0xf4
 80040a2:	4a09      	ldr	r2, [pc, #36]	@ (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80040a4:	bf4c      	ite	mi
 80040a6:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80040aa:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80040ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80040b2:	e67b      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80040b4:	00400001 	.word	0x00400001
 80040b8:	00080001 	.word	0x00080001
 80040bc:	46020c00 	.word	0x46020c00
 80040c0:	04000001 	.word	0x04000001
 80040c4:	00f42400 	.word	0x00f42400
 80040c8:	08005548 	.word	0x08005548
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80040cc:	4aac      	ldr	r2, [pc, #688]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80040ce:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80040d2:	6812      	ldr	r2, [r2, #0]
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80040d4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80040d8:	0392      	lsls	r2, r2, #14
 80040da:	d502      	bpl.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 83df 	beq.w	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80040e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040e6:	f000 83e2 	beq.w	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80040ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040ee:	f000 841e 	beq.w	800492e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
          frequency = 0U;
 80040f2:	2000      	movs	r0, #0
 80040f4:	e65a      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80040f6:	4aa2      	ldr	r2, [pc, #648]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80040f8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80040fc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    switch (srcclk)
 8004100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004104:	f000 8293 	beq.w	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004108:	f200 8347 	bhi.w	800479a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800410c:	2b00      	cmp	r3, #0
 800410e:	f43f aed7 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004112:	6810      	ldr	r0, [r2, #0]
 8004114:	f010 0020 	ands.w	r0, r0, #32
 8004118:	f43f ae48 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800411c:	6893      	ldr	r3, [r2, #8]
 800411e:	4a99      	ldr	r2, [pc, #612]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8004120:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8004124:	4b96      	ldr	r3, [pc, #600]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004126:	bf15      	itete	ne
 8004128:	689b      	ldrne	r3, [r3, #8]
 800412a:	f8d3 30f4 	ldreq.w	r3, [r3, #244]	@ 0xf4
 800412e:	f3c3 6303 	ubfxne	r3, r3, #24, #4
 8004132:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
 8004136:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800413a:	e637      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800413c:	4a90      	ldr	r2, [pc, #576]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800413e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004142:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800414a:	0792      	lsls	r2, r2, #30
 800414c:	d503      	bpl.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800414e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004152:	f000 840e 	beq.w	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004156:	4a8a      	ldr	r2, [pc, #552]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004158:	f8d2 10f0 	ldr.w	r1, [r2, #240]	@ 0xf0
 800415c:	0109      	lsls	r1, r1, #4
 800415e:	d503      	bpl.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
 8004160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004164:	f000 83bb 	beq.w	80048de <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004168:	4a85      	ldr	r2, [pc, #532]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800416a:	6810      	ldr	r0, [r2, #0]
 800416c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8004170:	f43f ae1c 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8004174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004178:	4883      	ldr	r0, [pc, #524]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 800417a:	bf18      	it	ne
 800417c:	2000      	movne	r0, #0
 800417e:	e615      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004180:	4b7f      	ldr	r3, [pc, #508]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004186:	f003 0318 	and.w	r3, r3, #24
    switch (srcclk)
 800418a:	2b18      	cmp	r3, #24
 800418c:	f200 8088 	bhi.w	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004190:	a201      	add	r2, pc, #4	@ (adr r2, 8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	08003e67 	.word	0x08003e67
 800419c:	080042a1 	.word	0x080042a1
 80041a0:	080042a1 	.word	0x080042a1
 80041a4:	080042a1 	.word	0x080042a1
 80041a8:	080042a1 	.word	0x080042a1
 80041ac:	080042a1 	.word	0x080042a1
 80041b0:	080042a1 	.word	0x080042a1
 80041b4:	080042a1 	.word	0x080042a1
 80041b8:	08003ec1 	.word	0x08003ec1
 80041bc:	080042a1 	.word	0x080042a1
 80041c0:	080042a1 	.word	0x080042a1
 80041c4:	080042a1 	.word	0x080042a1
 80041c8:	080042a1 	.word	0x080042a1
 80041cc:	080042a1 	.word	0x080042a1
 80041d0:	080042a1 	.word	0x080042a1
 80041d4:	080042a1 	.word	0x080042a1
 80041d8:	08004309 	.word	0x08004309
 80041dc:	080042a1 	.word	0x080042a1
 80041e0:	080042a1 	.word	0x080042a1
 80041e4:	080042a1 	.word	0x080042a1
 80041e8:	080042a1 	.word	0x080042a1
 80041ec:	080042a1 	.word	0x080042a1
 80041f0:	080042a1 	.word	0x080042a1
 80041f4:	080042a1 	.word	0x080042a1
 80041f8:	08004319 	.word	0x08004319
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80041fc:	4a60      	ldr	r2, [pc, #384]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80041fe:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004202:	f413 2340 	ands.w	r3, r3, #786432	@ 0xc0000
 8004206:	f000 8167 	beq.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800420a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 800420e:	0112      	lsls	r2, r2, #4
 8004210:	d503      	bpl.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004212:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004216:	f000 83a1 	beq.w	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xc00>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800421a:	4a59      	ldr	r2, [pc, #356]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	0551      	lsls	r1, r2, #21
 8004220:	d503      	bpl.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8004222:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004226:	f000 8416 	beq.w	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0xcfa>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800422a:	4a55      	ldr	r2, [pc, #340]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800422c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8004230:	f010 0002 	ands.w	r0, r0, #2
 8004234:	f43f adba 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004238:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800423c:	fab3 f383 	clz	r3, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	03d8      	lsls	r0, r3, #15
 8004244:	e5b2      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004246:	4b4e      	ldr	r3, [pc, #312]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800424c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
    switch (srcclk)
 8004250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004254:	f000 81eb 	beq.w	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004258:	f200 82c0 	bhi.w	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800425c:	2b00      	cmp	r3, #0
 800425e:	f47f ae7a 	bne.w	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004262:	4b47      	ldr	r3, [pc, #284]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
          frequency = 0U;
 8004264:	4849      	ldr	r0, [pc, #292]	@ (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004266:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8004268:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800426c:	bf08      	it	eq
 800426e:	2000      	moveq	r0, #0
 8004270:	e59c      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004272:	4b43      	ldr	r3, [pc, #268]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004274:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004278:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
    switch (srcclk)
 800427c:	2b40      	cmp	r3, #64	@ 0x40
 800427e:	d01c      	beq.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 8004280:	f240 81cd 	bls.w	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8004284:	2b60      	cmp	r3, #96	@ 0x60
 8004286:	f000 831c 	beq.w	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	f040 839e 	bne.w	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004290:	4b3b      	ldr	r3, [pc, #236]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
          frequency = 0U;
 8004292:	483f      	ldr	r0, [pc, #252]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004294:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8004296:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800429a:	bf08      	it	eq
 800429c:	2000      	moveq	r0, #0
 800429e:	e585      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80042a0:	2000      	movs	r0, #0
 80042a2:	e583      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80042a4:	4b36      	ldr	r3, [pc, #216]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80042a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042aa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 80042ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042b2:	d00c      	beq.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 80042b4:	f200 8214 	bhi.w	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 80042b8:	b123      	cbz	r3, 80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042ba:	a801      	add	r0, sp, #4
 80042bc:	f7ff fb3e 	bl	800393c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80042c0:	9801      	ldr	r0, [sp, #4]
        break;
 80042c2:	e573      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
}
 80042c4:	b005      	add	sp, #20
 80042c6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetHCLKFreq();
 80042ca:	f7fe bcc1 	b.w	8002c50 <HAL_RCC_GetHCLKFreq>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042ce:	a801      	add	r0, sp, #4
 80042d0:	f7ff fc94 	bl	8003bfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80042d4:	9802      	ldr	r0, [sp, #8]
        break;
 80042d6:	e569      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80042d8:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 80042dc:	e566      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80042de:	4a28      	ldr	r2, [pc, #160]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80042e0:	6810      	ldr	r0, [r2, #0]
 80042e2:	f010 0020 	ands.w	r0, r0, #32
 80042e6:	f43f ad61 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042ea:	6893      	ldr	r3, [r2, #8]
 80042ec:	0218      	lsls	r0, r3, #8
 80042ee:	bf4c      	ite	mi
 80042f0:	6893      	ldrmi	r3, [r2, #8]
 80042f2:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80042f6:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 80042f8:	bf4c      	ite	mi
 80042fa:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80042fe:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004302:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004306:	e551      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004308:	4b1d      	ldr	r3, [pc, #116]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
          frequency = 0U;
 800430a:	4821      	ldr	r0, [pc, #132]	@ (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800430c:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 800430e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004312:	bf08      	it	eq
 8004314:	2000      	moveq	r0, #0
 8004316:	e549      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004318:	4a19      	ldr	r2, [pc, #100]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 800431a:	6810      	ldr	r0, [r2, #0]
 800431c:	f010 0020 	ands.w	r0, r0, #32
 8004320:	f43f ad44 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004324:	6893      	ldr	r3, [r2, #8]
 8004326:	0219      	lsls	r1, r3, #8
 8004328:	bf4c      	ite	mi
 800432a:	6893      	ldrmi	r3, [r2, #8]
 800432c:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8004330:	4a14      	ldr	r2, [pc, #80]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8004332:	bf4c      	ite	mi
 8004334:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004338:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800433c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004340:	e534      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004342:	4a0f      	ldr	r2, [pc, #60]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004344:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004348:	f013 03c0 	ands.w	r3, r3, #192	@ 0xc0
 800434c:	f000 80c4 	beq.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	f43f adb5 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	0552      	lsls	r2, r2, #21
 800435a:	d502      	bpl.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800435c:	2b80      	cmp	r3, #128	@ 0x80
 800435e:	f000 8392 	beq.w	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004362:	4a07      	ldr	r2, [pc, #28]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8004364:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8004368:	f010 0002 	ands.w	r0, r0, #2
 800436c:	f43f ad1e 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004370:	f1a3 03c0 	sub.w	r3, r3, #192	@ 0xc0
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	03d8      	lsls	r0, r3, #15
 800437c:	e516      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800437e:	bf00      	nop
 8004380:	46020c00 	.word	0x46020c00
 8004384:	08005548 	.word	0x08005548
 8004388:	0007a120 	.word	0x0007a120
 800438c:	02dc6c00 	.word	0x02dc6c00
 8004390:	00f42400 	.word	0x00f42400
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004394:	4aab      	ldr	r2, [pc, #684]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004396:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800439a:	f013 0330 	ands.w	r3, r3, #48	@ 0x30
 800439e:	f000 809b 	beq.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	f43f ad8c 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	0551      	lsls	r1, r2, #21
 80043ac:	d502      	bpl.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	f000 8366 	beq.w	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80043b4:	4aa3      	ldr	r2, [pc, #652]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80043b6:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80043ba:	f010 0002 	ands.w	r0, r0, #2
 80043be:	f43f acf5 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80043c2:	f1a3 0330 	sub.w	r3, r3, #48	@ 0x30
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	03d8      	lsls	r0, r3, #15
 80043ce:	e4ed      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80043d0:	4a9c      	ldr	r2, [pc, #624]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80043d2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80043d6:	f013 030c 	ands.w	r3, r3, #12
 80043da:	d07d      	beq.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80043dc:	2b04      	cmp	r3, #4
 80043de:	f43f ad6f 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	0550      	lsls	r0, r2, #21
 80043e6:	d502      	bpl.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	f000 8346 	beq.w	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80043ee:	4a95      	ldr	r2, [pc, #596]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80043f0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80043f4:	f010 0002 	ands.w	r0, r0, #2
 80043f8:	f43f acd8 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80043fc:	f1a3 030c 	sub.w	r3, r3, #12
 8004400:	fab3 f383 	clz	r3, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	03d8      	lsls	r0, r3, #15
 8004408:	e4d0      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800440a:	498e      	ldr	r1, [pc, #568]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800440c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004410:	f012 0203 	ands.w	r2, r2, #3
 8004414:	f000 8111 	beq.w	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004418:	2a01      	cmp	r2, #1
 800441a:	f43f ad51 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800441e:	680b      	ldr	r3, [r1, #0]
 8004420:	0558      	lsls	r0, r3, #21
 8004422:	f140 81f5 	bpl.w	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004426:	2a02      	cmp	r2, #2
 8004428:	f000 8318 	beq.w	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800442c:	f8d1 00f0 	ldr.w	r0, [r1, #240]	@ 0xf0
 8004430:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004434:	03c0      	lsls	r0, r0, #15
 8004436:	e4b9      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004438:	4982      	ldr	r1, [pc, #520]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800443a:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800443e:	f012 0207 	ands.w	r2, r2, #7
 8004442:	f43f ad10 	beq.w	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004446:	2a01      	cmp	r2, #1
 8004448:	f43f ad3a 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800444c:	680b      	ldr	r3, [r1, #0]
 800444e:	0559      	lsls	r1, r3, #21
 8004450:	d502      	bpl.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8004452:	2a02      	cmp	r2, #2
 8004454:	f000 830e 	beq.w	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004458:	4b7a      	ldr	r3, [pc, #488]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800445a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800445e:	079b      	lsls	r3, r3, #30
 8004460:	d502      	bpl.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8004462:	2a03      	cmp	r2, #3
 8004464:	f000 8315 	beq.w	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004468:	4976      	ldr	r1, [pc, #472]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800446a:	6808      	ldr	r0, [r1, #0]
 800446c:	f010 0020 	ands.w	r0, r0, #32
 8004470:	f43f ac9c 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004474:	2a04      	cmp	r2, #4
 8004476:	f000 82dc 	beq.w	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
          frequency = 0U;
 800447a:	2000      	movs	r0, #0
 800447c:	e496      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800447e:	4a71      	ldr	r2, [pc, #452]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004480:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004484:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004488:	d026      	beq.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800448a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800448e:	f43f ad17 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	0550      	lsls	r0, r2, #21
 8004496:	d503      	bpl.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8004498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800449c:	f000 82e4 	beq.w	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80044a0:	4a68      	ldr	r2, [pc, #416]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80044a2:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 80044a6:	f010 0002 	ands.w	r0, r0, #2
 80044aa:	f43f ac7f 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80044ae:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	03d8      	lsls	r0, r3, #15
 80044ba:	e477      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80044bc:	4a61      	ldr	r2, [pc, #388]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80044be:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 80044c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80044c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044ca:	f000 81b2 	beq.w	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 80044ce:	f200 8131 	bhi.w	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f47f acf4 	bne.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
}
 80044d8:	b005      	add	sp, #20
 80044da:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80044de:	f7fe bc55 	b.w	8002d8c <HAL_RCC_GetPCLK1Freq>
 80044e2:	3840      	subs	r0, #64	@ 0x40
 80044e4:	4308      	orrs	r0, r1
          frequency = 0U;
 80044e6:	bf18      	it	ne
 80044e8:	2000      	movne	r0, #0
 80044ea:	f47f ac5f 	bne.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80044ee:	4a55      	ldr	r2, [pc, #340]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80044f0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80044f4:	f413 6340 	ands.w	r3, r3, #3072	@ 0xc00
 80044f8:	d0ee      	beq.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	f43f acdf 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	0552      	lsls	r2, r2, #21
 8004506:	d503      	bpl.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 8004508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800450c:	f000 82be 	beq.w	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004510:	4a4c      	ldr	r2, [pc, #304]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004512:	6810      	ldr	r0, [r2, #0]
 8004514:	f010 0020 	ands.w	r0, r0, #32
 8004518:	f43f ac48 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800451c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004520:	f000 8257 	beq.w	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8004524:	2000      	movs	r0, #0
 8004526:	e441      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004528:	4946      	ldr	r1, [pc, #280]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800452a:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 800452e:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004532:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004536:	f43f acc3 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800453a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800453e:	f000 81c8 	beq.w	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004542:	2a00      	cmp	r2, #0
 8004544:	f43f aebe 	beq.w	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004548:	f5b2 4fa0 	cmp.w	r2, #20480	@ 0x5000
 800454c:	f000 81d1 	beq.w	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb96>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004550:	680b      	ldr	r3, [r1, #0]
 8004552:	039b      	lsls	r3, r3, #14
 8004554:	d503      	bpl.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 8004556:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800455a:	f000 82a4 	beq.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800455e:	4b39      	ldr	r3, [pc, #228]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 8004566:	f43f ac21 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 800456a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800456e:	4836      	ldr	r0, [pc, #216]	@ (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8004570:	bf18      	it	ne
 8004572:	2000      	movne	r0, #0
 8004574:	e41a      	b.n	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004576:	4a33      	ldr	r2, [pc, #204]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004578:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800457c:	f413 5340 	ands.w	r3, r3, #12288	@ 0x3000
 8004580:	d0aa      	beq.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004586:	f43f ac9b 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	0550      	lsls	r0, r2, #21
 800458e:	d503      	bpl.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004594:	f000 8265 	beq.w	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004598:	4a2a      	ldr	r2, [pc, #168]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800459a:	6810      	ldr	r0, [r2, #0]
 800459c:	f010 0020 	ands.w	r0, r0, #32
 80045a0:	f43f ac04 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80045a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045a8:	f000 8223 	beq.w	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = 0U;
 80045ac:	2000      	movs	r0, #0
 80045ae:	f7ff bbfd 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80045b2:	4924      	ldr	r1, [pc, #144]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80045b4:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80045b8:	f412 6240 	ands.w	r2, r2, #3072	@ 0xc00
 80045bc:	d148      	bne.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80045be:	6808      	ldr	r0, [r1, #0]
 80045c0:	f010 0020 	ands.w	r0, r0, #32
 80045c4:	f43f abf2 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80045c8:	688b      	ldr	r3, [r1, #8]
 80045ca:	0218      	lsls	r0, r3, #8
 80045cc:	f140 81b8 	bpl.w	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 80045d0:	688b      	ldr	r3, [r1, #8]
 80045d2:	f3c3 6303 	ubfx	r3, r3, #24, #4
 80045d6:	4a1d      	ldr	r2, [pc, #116]	@ (800464c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
 80045d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80045dc:	f7ff bbe6 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80045e0:	4a18      	ldr	r2, [pc, #96]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 80045e2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80045e6:	f413 4340 	ands.w	r3, r3, #49152	@ 0xc000
 80045ea:	f43f af75 	beq.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80045ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045f2:	f43f ac65 	beq.w	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	0550      	lsls	r0, r2, #21
 80045fa:	d503      	bpl.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004600:	f000 8235 	beq.w	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0xd12>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004604:	4a0f      	ldr	r2, [pc, #60]	@ (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004606:	6810      	ldr	r0, [r2, #0]
 8004608:	f010 0020 	ands.w	r0, r0, #32
 800460c:	f43f abce 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004610:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004614:	f000 81fd 	beq.w	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
          frequency = 0U;
 8004618:	2000      	movs	r0, #0
 800461a:	f7ff bbc7 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 800461e:	2b00      	cmp	r3, #0
 8004620:	d07c      	beq.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x9c0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004622:	a801      	add	r0, sp, #4
 8004624:	f7ff faea 	bl	8003bfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004628:	9801      	ldr	r0, [sp, #4]
        break;
 800462a:	f7ff bbbf 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800462e:	a801      	add	r0, sp, #4
 8004630:	f7ff f984 	bl	800393c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004634:	9802      	ldr	r0, [sp, #8]
        break;
 8004636:	f7ff bbb9 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
}
 800463a:	b005      	add	sp, #20
 800463c:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK2Freq();
 8004640:	f7fe bc48 	b.w	8002ed4 <HAL_RCC_GetPCLK2Freq>
 8004644:	46020c00 	.word	0x46020c00
 8004648:	00f42400 	.word	0x00f42400
 800464c:	08005548 	.word	0x08005548
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004650:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8004654:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004658:	4bbc      	ldr	r3, [pc, #752]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800465a:	d003      	beq.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
 800465c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004660:	f000 81a4 	beq.w	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0xc50>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	0559      	lsls	r1, r3, #21
 8004668:	d503      	bpl.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 800466a:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800466e:	f000 8214 	beq.w	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004672:	4bb6      	ldr	r3, [pc, #728]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8004674:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 8004678:	f010 0002 	ands.w	r0, r0, #2
 800467c:	f43f ab96 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004680:	f5a2 6340 	sub.w	r3, r2, #3072	@ 0xc00
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	03d8      	lsls	r0, r3, #15
 800468c:	f7ff bb8e 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004690:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	d503      	bpl.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8004698:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800469c:	f000 817c 	beq.w	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80046a0:	4baa      	ldr	r3, [pc, #680]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	055b      	lsls	r3, r3, #21
 80046a6:	d503      	bpl.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80046a8:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80046ac:	f000 81f8 	beq.w	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80046b0:	4ba6      	ldr	r3, [pc, #664]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80046b2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	@ 0xf0
 80046b6:	f010 0002 	ands.w	r0, r0, #2
 80046ba:	f43f ab77 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80046be:	f5a2 7340 	sub.w	r3, r2, #768	@ 0x300
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	03d8      	lsls	r0, r3, #15
 80046ca:	f7ff bb6f 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80046ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	f140 80aa 	bpl.w	800482c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>
 80046d8:	2800      	cmp	r0, #0
 80046da:	f43f ab67 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80046de:	e45e      	b.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x242>
    switch (srcclk)
 80046e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046e4:	f000 80e9 	beq.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 80046e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046ec:	f040 816b 	bne.w	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80046f0:	4a96      	ldr	r2, [pc, #600]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80046f2:	6810      	ldr	r0, [r2, #0]
 80046f4:	f010 0020 	ands.w	r0, r0, #32
 80046f8:	f43f ab58 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80046fc:	6893      	ldr	r3, [r2, #8]
 80046fe:	0219      	lsls	r1, r3, #8
 8004700:	bf4c      	ite	mi
 8004702:	6893      	ldrmi	r3, [r2, #8]
 8004704:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8004708:	4a91      	ldr	r2, [pc, #580]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 800470a:	bf4c      	ite	mi
 800470c:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004710:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004714:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004718:	f7ff bb48 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800471c:	a801      	add	r0, sp, #4
 800471e:	f7ff f9bd 	bl	8003a9c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004722:	9801      	ldr	r0, [sp, #4]
        break;
 8004724:	f7ff bb42 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004728:	a801      	add	r0, sp, #4
 800472a:	f7ff f907 	bl	800393c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800472e:	9801      	ldr	r0, [sp, #4]
 8004730:	f7ff bb3c 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 8004734:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004738:	f040 8128 	bne.w	800498c <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800473c:	4a83      	ldr	r2, [pc, #524]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 800473e:	6810      	ldr	r0, [r2, #0]
 8004740:	f010 0020 	ands.w	r0, r0, #32
 8004744:	f43f ab32 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004748:	6893      	ldr	r3, [r2, #8]
 800474a:	0218      	lsls	r0, r3, #8
 800474c:	bf4c      	ite	mi
 800474e:	6893      	ldrmi	r3, [r2, #8]
 8004750:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8004754:	4a7e      	ldr	r2, [pc, #504]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 8004756:	bf4c      	ite	mi
 8004758:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 800475c:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004764:	f7ff bb22 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 8004768:	2bc0      	cmp	r3, #192	@ 0xc0
 800476a:	f040 8109 	bne.w	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800476e:	4a77      	ldr	r2, [pc, #476]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8004770:	6810      	ldr	r0, [r2, #0]
 8004772:	f010 0020 	ands.w	r0, r0, #32
 8004776:	f43f ab19 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800477a:	6893      	ldr	r3, [r2, #8]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	bf4c      	ite	mi
 8004780:	6893      	ldrmi	r3, [r2, #8]
 8004782:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8004786:	4a72      	ldr	r2, [pc, #456]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 8004788:	bf4c      	ite	mi
 800478a:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 800478e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004792:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004796:	f7ff bb09 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 800479a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800479e:	f43f abda 	beq.w	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
          frequency = 0U;
 80047a2:	2000      	movs	r0, #0
 80047a4:	f7ff bb02 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 80047a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047ac:	f040 80e5 	bne.w	800497a <HAL_RCCEx_GetPeriphCLKFreq+0xc1e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80047b0:	4a66      	ldr	r2, [pc, #408]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80047b2:	6810      	ldr	r0, [r2, #0]
 80047b4:	f010 0020 	ands.w	r0, r0, #32
 80047b8:	f43f aaf8 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047bc:	6893      	ldr	r3, [r2, #8]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	bf4c      	ite	mi
 80047c2:	6893      	ldrmi	r3, [r2, #8]
 80047c4:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80047c8:	4a61      	ldr	r2, [pc, #388]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 80047ca:	bf4c      	ite	mi
 80047cc:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80047d0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80047d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047d8:	f7ff bae8 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    switch (srcclk)
 80047dc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80047e0:	f040 80d1 	bne.w	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80047e4:	4a59      	ldr	r2, [pc, #356]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 80047e6:	6810      	ldr	r0, [r2, #0]
 80047e8:	f010 0020 	ands.w	r0, r0, #32
 80047ec:	f43f aade 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047f0:	6893      	ldr	r3, [r2, #8]
 80047f2:	0219      	lsls	r1, r3, #8
 80047f4:	bf4c      	ite	mi
 80047f6:	6893      	ldrmi	r3, [r2, #8]
 80047f8:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80047fc:	4a54      	ldr	r2, [pc, #336]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 80047fe:	bf4c      	ite	mi
 8004800:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004804:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004808:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800480c:	f7ff bace 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004810:	f8d1 00f0 	ldr.w	r0, [r1, #240]	@ 0xf0
 8004814:	f010 0002 	ands.w	r0, r0, #2
 8004818:	f43f aac8 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800481c:	f1a2 0303 	sub.w	r3, r2, #3
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	03d8      	lsls	r0, r3, #15
 8004828:	f7ff bac0 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 800482c:	2000      	movs	r0, #0
 800482e:	f7ff babd 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004832:	6813      	ldr	r3, [r2, #0]
          frequency = 0U;
 8004834:	4847      	ldr	r0, [pc, #284]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
 8004836:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800483a:	bf08      	it	eq
 800483c:	2000      	moveq	r0, #0
 800483e:	f7ff bab5 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004842:	4b42      	ldr	r3, [pc, #264]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
          frequency = 0U;
 8004844:	4843      	ldr	r0, [pc, #268]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004846:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8004848:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800484c:	bf08      	it	eq
 800484e:	2000      	moveq	r0, #0
 8004850:	f7ff baac 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004854:	4b3d      	ldr	r3, [pc, #244]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
          frequency = 0U;
 8004856:	483f      	ldr	r0, [pc, #252]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004858:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 800485a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800485e:	bf08      	it	eq
 8004860:	2000      	moveq	r0, #0
 8004862:	f7ff baa3 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      switch (srcclk)
 8004866:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800486a:	f040 80f1 	bne.w	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0xcf4>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800486e:	4a37      	ldr	r2, [pc, #220]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8004870:	6810      	ldr	r0, [r2, #0]
 8004872:	f010 0020 	ands.w	r0, r0, #32
 8004876:	f43f aa99 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800487a:	6893      	ldr	r3, [r2, #8]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	bf4c      	ite	mi
 8004880:	6893      	ldrmi	r3, [r2, #8]
 8004882:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8004886:	4a32      	ldr	r2, [pc, #200]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 8004888:	bf4c      	ite	mi
 800488a:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 800488e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004892:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004896:	f7ff ba89 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI48_VALUE;
 800489a:	482f      	ldr	r0, [pc, #188]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>)
 800489c:	f7ff ba86 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI_VALUE;
 80048a0:	482c      	ldr	r0, [pc, #176]	@ (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>)
 80048a2:	f7ff ba83 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = LSE_VALUE;
 80048a6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80048aa:	f7ff ba7f 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048ae:	a801      	add	r0, sp, #4
 80048b0:	f7ff f844 	bl	800393c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80048b4:	9802      	ldr	r0, [sp, #8]
 80048b6:	f7ff ba79 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80048ba:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 80048be:	f7ff ba75 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80048c2:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 80048c6:	f7ff ba71 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80048ca:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 80048ce:	f7ff ba6d 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048d2:	a801      	add	r0, sp, #4
 80048d4:	f7ff f8e2 	bl	8003a9c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80048d8:	9803      	ldr	r0, [sp, #12]
 80048da:	f7ff ba67 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80048de:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
        frequency = LSI_VALUE;
 80048e2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80048e6:	bf14      	ite	ne
 80048e8:	20fa      	movne	r0, #250	@ 0xfa
 80048ea:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 80048ee:	f7ff ba5d 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80048f2:	6808      	ldr	r0, [r1, #0]
 80048f4:	f010 0020 	ands.w	r0, r0, #32
 80048f8:	f43f aa58 	beq.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80048fc:	688b      	ldr	r3, [r1, #8]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	bf4c      	ite	mi
 8004902:	688b      	ldrmi	r3, [r1, #8]
 8004904:	f8d1 30f4 	ldrpl.w	r3, [r1, #244]	@ 0xf4
 8004908:	4a11      	ldr	r2, [pc, #68]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>)
 800490a:	bf4c      	ite	mi
 800490c:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004910:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004914:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004918:	f7ff ba48 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
          frequency = 0U;
 800491e:	480e      	ldr	r0, [pc, #56]	@ (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>)
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004920:	681b      	ldr	r3, [r3, #0]
          frequency = 0U;
 8004922:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8004926:	bf08      	it	eq
 8004928:	2000      	moveq	r0, #0
 800492a:	f7ff ba3f 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800492e:	a801      	add	r0, sp, #4
 8004930:	f7ff f8b4 	bl	8003a9c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004934:	9801      	ldr	r0, [sp, #4]
 8004936:	f7ff ba39 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 800493a:	2000      	movs	r0, #0
 800493c:	f7ff ba36 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004940:	4b02      	ldr	r3, [pc, #8]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>)
 8004942:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004946:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800494a:	e644      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 800494c:	46020c00 	.word	0x46020c00
 8004950:	08005548 	.word	0x08005548
 8004954:	00f42400 	.word	0x00f42400
 8004958:	02dc6c00 	.word	0x02dc6c00
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800495c:	4b55      	ldr	r3, [pc, #340]	@ (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd58>)
 800495e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = LSI_VALUE;
 8004962:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004966:	bf14      	ite	ne
 8004968:	20fa      	movne	r0, #250	@ 0xfa
 800496a:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 800496e:	f7ff ba1d 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = LSE_VALUE;
 8004972:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004976:	f7ff ba19 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 800497a:	2000      	movs	r0, #0
 800497c:	f7ff ba16 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004980:	2000      	movs	r0, #0
 8004982:	f7ff ba13 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004986:	2000      	movs	r0, #0
 8004988:	f7ff ba10 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 800498c:	2000      	movs	r0, #0
 800498e:	f7ff ba0d 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = HSI48_VALUE >> 1U ;
 8004992:	4849      	ldr	r0, [pc, #292]	@ (8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8004994:	f7ff ba0a 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004998:	f8d1 30f0 	ldr.w	r3, [r1, #240]	@ 0xf0
        frequency = LSI_VALUE;
 800499c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80049a0:	bf14      	ite	ne
 80049a2:	20fa      	movne	r0, #250	@ 0xfa
 80049a4:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 80049a8:	f7ff ba00 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80049ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
        frequency = LSI_VALUE;
 80049b0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80049b4:	bf14      	ite	ne
 80049b6:	20fa      	movne	r0, #250	@ 0xfa
 80049b8:	f44f 40fa 	moveq.w	r0, #32000	@ 0x7d00
 80049bc:	f7ff b9f6 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 80049c0:	2000      	movs	r0, #0
 80049c2:	f7ff b9f3 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80049c6:	2000      	movs	r0, #0
 80049c8:	f7ff b9f0 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80049cc:	2000      	movs	r0, #0
 80049ce:	f7ff b9ed 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049d2:	6893      	ldr	r3, [r2, #8]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	bf4c      	ite	mi
 80049d8:	6893      	ldrmi	r3, [r2, #8]
 80049da:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80049de:	4a37      	ldr	r2, [pc, #220]	@ (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80049e0:	bf4c      	ite	mi
 80049e2:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 80049e6:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 80049ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049ee:	f7ff b9dd 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049f2:	6893      	ldr	r3, [r2, #8]
 80049f4:	0219      	lsls	r1, r3, #8
 80049f6:	bf4c      	ite	mi
 80049f8:	6893      	ldrmi	r3, [r2, #8]
 80049fa:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 80049fe:	4a2f      	ldr	r2, [pc, #188]	@ (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004a00:	bf4c      	ite	mi
 8004a02:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004a06:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004a0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a0e:	f7ff b9cd 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a12:	6893      	ldr	r3, [r2, #8]
 8004a14:	0219      	lsls	r1, r3, #8
 8004a16:	bf4c      	ite	mi
 8004a18:	6893      	ldrmi	r3, [r2, #8]
 8004a1a:	f8d2 30f4 	ldrpl.w	r3, [r2, #244]	@ 0xf4
 8004a1e:	4a27      	ldr	r2, [pc, #156]	@ (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004a20:	bf4c      	ite	mi
 8004a22:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004a26:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004a2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a2e:	f7ff b9bd 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a32:	688b      	ldr	r3, [r1, #8]
 8004a34:	4a21      	ldr	r2, [pc, #132]	@ (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8004a36:	0218      	lsls	r0, r3, #8
 8004a38:	bf4b      	itete	mi
 8004a3a:	688b      	ldrmi	r3, [r1, #8]
 8004a3c:	f8d1 30f4 	ldrpl.w	r3, [r1, #244]	@ 0xf4
 8004a40:	f3c3 6303 	ubfxmi	r3, r3, #24, #4
 8004a44:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8004a48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a4c:	f7ff b9ae 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7ff b9ab 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI_VALUE;
 8004a56:	481a      	ldr	r0, [pc, #104]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a58:	f7ff b9a8 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004a5c:	4818      	ldr	r0, [pc, #96]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a5e:	f7ff b9a5 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004a62:	4817      	ldr	r0, [pc, #92]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a64:	f7ff b9a2 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004a68:	4815      	ldr	r0, [pc, #84]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a6a:	f7ff b99f 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004a6e:	4814      	ldr	r0, [pc, #80]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a70:	f7ff b99c 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004a74:	4812      	ldr	r0, [pc, #72]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a76:	f7ff b999 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004a7a:	4811      	ldr	r0, [pc, #68]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a7c:	f7ff b996 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004a80:	480f      	ldr	r0, [pc, #60]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a82:	f7ff b993 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004a86:	480e      	ldr	r0, [pc, #56]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a88:	f7ff b990 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004a8c:	480c      	ldr	r0, [pc, #48]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a8e:	f7ff b98d 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
      frequency = LSE_VALUE;
 8004a92:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004a96:	f7ff b989 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = HSI_VALUE;
 8004a9a:	4809      	ldr	r0, [pc, #36]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004a9c:	f7ff b986 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004aa0:	4807      	ldr	r0, [pc, #28]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004aa2:	f7ff b983 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004aa6:	4806      	ldr	r0, [pc, #24]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8004aa8:	f7ff b980 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          frequency = 0U;
 8004aac:	2000      	movs	r0, #0
 8004aae:	f7ff b97d 	b.w	8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8004ab2:	bf00      	nop
 8004ab4:	46020c00 	.word	0x46020c00
 8004ab8:	016e3600 	.word	0x016e3600
 8004abc:	08005548 	.word	0x08005548
 8004ac0:	00f42400 	.word	0x00f42400

08004ac4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ac4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d13c      	bne.n	8004b48 <HAL_UART_Transmit_DMA+0x84>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	d042      	beq.n	8004b58 <HAL_UART_Transmit_DMA+0x94>
 8004ad2:	2a00      	cmp	r2, #0
 8004ad4:	d040      	beq.n	8004b58 <HAL_UART_Transmit_DMA+0x94>
    {
      return HAL_ERROR;
    }

    huart->pTxBuffPtr  = pData;
 8004ad6:	4604      	mov	r4, r0
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ada:	2521      	movs	r5, #33	@ 0x21
    huart->TxXferCount = Size;
 8004adc:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
    huart->pTxBuffPtr  = pData;
 8004ae0:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004ae2:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54

    if (huart->hdmatx != NULL)
 8004ae6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aec:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8004af0:	b1c8      	cbz	r0, 8004b26 <HAL_UART_Transmit_DMA+0x62>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004af2:	4d21      	ldr	r5, [pc, #132]	@ (8004b78 <HAL_UART_Transmit_DMA+0xb4>)

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004af4:	66c3      	str	r3, [r0, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af6:	68a3      	ldr	r3, [r4, #8]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004af8:	6605      	str	r5, [r0, #96]	@ 0x60
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004afa:	4d20      	ldr	r5, [pc, #128]	@ (8004b7c <HAL_UART_Transmit_DMA+0xb8>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b00:	6645      	str	r5, [r0, #100]	@ 0x64
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b02:	4d1f      	ldr	r5, [pc, #124]	@ (8004b80 <HAL_UART_Transmit_DMA+0xbc>)
 8004b04:	6685      	str	r5, [r0, #104]	@ 0x68
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b06:	d029      	beq.n	8004b5c <HAL_UART_Transmit_DMA+0x98>
      {
        nbByte = Size * 2U;
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004b08:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004b0a:	061b      	lsls	r3, r3, #24
 8004b0c:	d52c      	bpl.n	8004b68 <HAL_UART_Transmit_DMA+0xa4>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 8004b0e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8004b10:	b1e3      	cbz	r3, 8004b4c <HAL_UART_Transmit_DMA+0x88>
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	b1d3      	cbz	r3, 8004b4c <HAL_UART_Transmit_DMA+0x88>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8004b16:	609a      	str	r2, [r3, #8]
          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 8004b18:	6822      	ldr	r2, [r4, #0]
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 8004b1a:	60d9      	str	r1, [r3, #12]
            (uint32_t)&huart->Instance->TDR;
 8004b1c:	3228      	adds	r2, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 8004b1e:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 8004b20:	f7fc fd34 	bl	800158c <HAL_DMAEx_List_Start_IT>
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
      }

      if (status != HAL_OK)
 8004b24:	b990      	cbnz	r0, 8004b4c <HAL_UART_Transmit_DMA+0x88>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004b26:	2340      	movs	r3, #64	@ 0x40
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	f102 0308 	add.w	r3, r2, #8
 8004b30:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	f102 0008 	add.w	r0, r2, #8
 8004b3c:	e840 3100 	strex	r1, r3, [r0]
 8004b40:	2900      	cmp	r1, #0
 8004b42:	d1f3      	bne.n	8004b2c <HAL_UART_Transmit_DMA+0x68>

    return HAL_OK;
 8004b44:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8004b48:	2002      	movs	r0, #2
}
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b4c:	2210      	movs	r2, #16
        huart->gState = HAL_UART_STATE_READY;
 8004b4e:	2320      	movs	r3, #32
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b50:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8004b54:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 8004b58:	2001      	movs	r0, #1
}
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1d2      	bne.n	8004b08 <HAL_UART_Transmit_DMA+0x44>
        nbByte = Size * 2U;
 8004b62:	0052      	lsls	r2, r2, #1
 8004b64:	b292      	uxth	r2, r2
 8004b66:	e7cf      	b.n	8004b08 <HAL_UART_Transmit_DMA+0x44>
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 8004b68:	6825      	ldr	r5, [r4, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8004b70:	f7fc fa94 	bl	800109c <HAL_DMA_Start_IT>
 8004b74:	e7d6      	b.n	8004b24 <HAL_UART_Transmit_DMA+0x60>
 8004b76:	bf00      	nop
 8004b78:	08004ca5 	.word	0x08004ca5
 8004b7c:	08004cd5 	.word	0x08004cd5
 8004b80:	08004ced 	.word	0x08004ced

08004b84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	4605      	mov	r5, r0
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b88:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 8004b8c:	2820      	cmp	r0, #32
 8004b8e:	d168      	bne.n	8004c62 <HAL_UART_Receive_DMA+0xde>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b90:	b101      	cbz	r1, 8004b94 <HAL_UART_Receive_DMA+0x10>
 8004b92:	b90a      	cbnz	r2, 8004b98 <HAL_UART_Receive_DMA+0x14>
      huart->ErrorCode = HAL_UART_ERROR_DMA;

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;

      return HAL_ERROR;
 8004b94:	2001      	movs	r0, #1
}
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b9a:	682c      	ldr	r4, [r5, #0]
 8004b9c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c90 <HAL_UART_Receive_DMA+0x10c>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	66e8      	str	r0, [r5, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ba0:	429c      	cmp	r4, r3
 8004ba2:	d015      	beq.n	8004bd0 <HAL_UART_Receive_DMA+0x4c>
 8004ba4:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	d011      	beq.n	8004bd0 <HAL_UART_Receive_DMA+0x4c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	0218      	lsls	r0, r3, #8
 8004bb0:	d50e      	bpl.n	8004bd0 <HAL_UART_Receive_DMA+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	e844 3000 	strex	r0, r3, [r4]
 8004bbe:	b138      	cbz	r0, 8004bd0 <HAL_UART_Receive_DMA+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	e854 0f00 	ldrex	r0, [r4]
 8004bc4:	f040 6080 	orr.w	r0, r0, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	e844 0300 	strex	r3, r0, [r4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f7      	bne.n	8004bc0 <HAL_UART_Receive_DMA+0x3c>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bd2:	2622      	movs	r6, #34	@ 0x22
  if (huart->hdmarx != NULL)
 8004bd4:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd8:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
  huart->pRxBuffPtr = pData;
 8004bdc:	65a9      	str	r1, [r5, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004bde:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be2:	f8c5 608c 	str.w	r6, [r5, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 8004be6:	b1c8      	cbz	r0, 8004c1c <HAL_UART_Receive_DMA+0x98>
    huart->hdmarx->XferAbortCallback = NULL;
 8004be8:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004bea:	4b2a      	ldr	r3, [pc, #168]	@ (8004c94 <HAL_UART_Receive_DMA+0x110>)
 8004bec:	6603      	str	r3, [r0, #96]	@ 0x60
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004bee:	4b2a      	ldr	r3, [pc, #168]	@ (8004c98 <HAL_UART_Receive_DMA+0x114>)
 8004bf0:	6643      	str	r3, [r0, #100]	@ 0x64
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8004c9c <HAL_UART_Receive_DMA+0x118>)
 8004bf4:	6683      	str	r3, [r0, #104]	@ 0x68
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf6:	68ab      	ldr	r3, [r5, #8]
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfc:	d03a      	beq.n	8004c74 <HAL_UART_Receive_DMA+0xf0>
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004bfe:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	d53d      	bpl.n	8004c80 <HAL_UART_Receive_DMA+0xfc>
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 8004c04:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8004c06:	b373      	cbz	r3, 8004c66 <HAL_UART_Receive_DMA+0xe2>
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	b363      	cbz	r3, 8004c66 <HAL_UART_Receive_DMA+0xe2>
          (uint32_t)&huart->Instance->RDR;
 8004c0c:	3424      	adds	r4, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 8004c0e:	e9c3 4103 	strd	r4, r1, [r3, #12]
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8004c12:	609a      	str	r2, [r3, #8]
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 8004c14:	f7fc fcba 	bl	800158c <HAL_DMAEx_List_Start_IT>
    if (status != HAL_OK)
 8004c18:	bb28      	cbnz	r0, 8004c66 <HAL_UART_Receive_DMA+0xe2>
 8004c1a:	682c      	ldr	r4, [r5, #0]
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c1c:	692b      	ldr	r3, [r5, #16]
 8004c1e:	b13b      	cbz	r3, 8004c30 <HAL_UART_Receive_DMA+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	e854 3f00 	ldrex	r3, [r4]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	e844 3200 	strex	r2, r3, [r4]
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d1f7      	bne.n	8004c20 <HAL_UART_Receive_DMA+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	f104 0308 	add.w	r3, r4, #8
 8004c34:	e853 3f00 	ldrex	r3, [r3]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c38:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	f104 0108 	add.w	r1, r4, #8
 8004c40:	e841 3200 	strex	r2, r3, [r1]
 8004c44:	2a00      	cmp	r2, #0
 8004c46:	d1f3      	bne.n	8004c30 <HAL_UART_Receive_DMA+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	f104 0308 	add.w	r3, r4, #8
 8004c4c:	e853 3f00 	ldrex	r3, [r3]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	f104 0208 	add.w	r2, r4, #8
 8004c58:	e842 3000 	strex	r0, r3, [r2]
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d1f3      	bne.n	8004c48 <HAL_UART_Receive_DMA+0xc4>
 8004c60:	e799      	b.n	8004b96 <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 8004c62:	2002      	movs	r0, #2
}
 8004c64:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c66:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8004c68:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c6a:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
      huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
      return HAL_ERROR;
 8004c72:	e78f      	b.n	8004b94 <HAL_UART_Receive_DMA+0x10>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	692b      	ldr	r3, [r5, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1c1      	bne.n	8004bfe <HAL_UART_Receive_DMA+0x7a>
      nbByte = Size * 2U;
 8004c7a:	0052      	lsls	r2, r2, #1
 8004c7c:	b292      	uxth	r2, r2
 8004c7e:	e7be      	b.n	8004bfe <HAL_UART_Receive_DMA+0x7a>
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 8004c80:	4613      	mov	r3, r2
 8004c82:	460a      	mov	r2, r1
 8004c84:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8004c88:	f7fc fa08 	bl	800109c <HAL_DMA_Start_IT>
 8004c8c:	e7c4      	b.n	8004c18 <HAL_UART_Receive_DMA+0x94>
 8004c8e:	bf00      	nop
 8004c90:	46002400 	.word	0x46002400
 8004c94:	08004de5 	.word	0x08004de5
 8004c98:	08004dc5 	.word	0x08004dc5
 8004c9c:	08004ced 	.word	0x08004ced

08004ca0 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop

08004ca4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8004ca6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ca8:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8004caa:	2b81      	cmp	r3, #129	@ 0x81
 8004cac:	d00c      	beq.n	8004cc8 <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	6802      	ldr	r2, [r0, #0]
 8004cb2:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	e852 3f00 	ldrex	r3, [r2]
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	e842 3100 	strex	r1, r3, [r2]
 8004cc2:	2900      	cmp	r1, #0
 8004cc4:	d1f7      	bne.n	8004cb6 <UART_DMATransmitCplt+0x12>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cc6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004cc8:	f7ff ffea 	bl	8004ca0 <HAL_UART_TxCpltCallback>
}
 8004ccc:	bd08      	pop	{r3, pc}
 8004cce:	bf00      	nop

08004cd0 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop

08004cd4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004cd6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8004cd8:	f7ff fffa 	bl	8004cd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cdc:	bd08      	pop	{r3, pc}
 8004cde:	bf00      	nop

08004ce0 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop

08004ce4 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop

08004ce8 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop

08004cec <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cec:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
{
 8004cee:	b510      	push	{r4, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004cf0:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004cf2:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004cf6:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	0612      	lsls	r2, r2, #24
 8004cfe:	d501      	bpl.n	8004d04 <UART_DMAError+0x18>
 8004d00:	2921      	cmp	r1, #33	@ 0x21
 8004d02:	d00d      	beq.n	8004d20 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	0652      	lsls	r2, r2, #25
 8004d08:	d501      	bpl.n	8004d0e <UART_DMAError+0x22>
 8004d0a:	2c22      	cmp	r4, #34	@ 0x22
 8004d0c:	d023      	beq.n	8004d56 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d0e:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8004d12:	f043 0310 	orr.w	r3, r3, #16
 8004d16:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d1a:	f7ff ffe5 	bl	8004ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d1e:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004d2a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	e843 2100 	strex	r1, r2, [r3]
 8004d32:	2900      	cmp	r1, #0
 8004d34:	d1f7      	bne.n	8004d26 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	f103 0208 	add.w	r2, r3, #8
 8004d3a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004d3e:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	f103 0c08 	add.w	ip, r3, #8
 8004d46:	e84c 2100 	strex	r1, r2, [ip]
 8004d4a:	2900      	cmp	r1, #0
 8004d4c:	d1f3      	bne.n	8004d36 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 8004d54:	e7d6      	b.n	8004d04 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d60:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	e843 2100 	strex	r1, r2, [r3]
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	d1f7      	bne.n	8004d5c <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d6c:	4c13      	ldr	r4, [pc, #76]	@ (8004dbc <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	f103 0208 	add.w	r2, r3, #8
 8004d72:	e852 2f00 	ldrex	r2, [r2]
 8004d76:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	f103 0c08 	add.w	ip, r3, #8
 8004d7c:	e84c 2100 	strex	r1, r2, [ip]
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d1f4      	bne.n	8004d6e <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d84:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8004d86:	2a01      	cmp	r2, #1
 8004d88:	d006      	beq.n	8004d98 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	2220      	movs	r2, #32
  huart->RxISR = NULL;
 8004d8e:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004d90:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 8004d96:	e7ba      	b.n	8004d0e <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	e843 2100 	strex	r1, r2, [r3]
 8004da4:	2900      	cmp	r1, #0
 8004da6:	d0f0      	beq.n	8004d8a <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	e853 2f00 	ldrex	r2, [r3]
 8004dac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	e843 2100 	strex	r1, r2, [r3]
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d1ef      	bne.n	8004d98 <UART_DMAError+0xac>
 8004db8:	e7e7      	b.n	8004d8a <UART_DMAError+0x9e>
 8004dba:	bf00      	nop
 8004dbc:	effffffe 	.word	0xeffffffe

08004dc0 <HAL_UARTEx_RxEventCallback>:
}
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop

08004dc4 <UART_DMARxHalfCplt>:
{
 8004dc4:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004dc6:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc8:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004dca:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dcc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d002      	beq.n	8004dd8 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dd2:	f7ff ff87 	bl	8004ce4 <HAL_UART_RxHalfCpltCallback>
}
 8004dd6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004dd8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8004ddc:	0849      	lsrs	r1, r1, #1
 8004dde:	f7ff ffef 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
}
 8004de2:	bd08      	pop	{r3, pc}

08004de4 <UART_DMAReceiveCplt>:
{
 8004de4:	b508      	push	{r3, lr}
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8004de6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004de8:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8004dea:	2b81      	cmp	r3, #129	@ 0x81
 8004dec:	d01d      	beq.n	8004e2a <UART_DMAReceiveCplt+0x46>
    huart->RxXferCount = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	6802      	ldr	r2, [r0, #0]
 8004df2:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	e842 3100 	strex	r1, r3, [r2]
 8004e02:	2900      	cmp	r1, #0
 8004e04:	d1f7      	bne.n	8004df6 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	f102 0308 	add.w	r3, r2, #8
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	f102 0c08 	add.w	ip, r2, #8
 8004e16:	e84c 3100 	strex	r1, r3, [ip]
 8004e1a:	2900      	cmp	r1, #0
 8004e1c:	d1f3      	bne.n	8004e06 <UART_DMAReceiveCplt+0x22>
    huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	2320      	movs	r3, #32
 8004e20:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d007      	beq.n	8004e3a <UART_DMAReceiveCplt+0x56>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d013      	beq.n	8004e5c <UART_DMAReceiveCplt+0x78>
    HAL_UART_RxCpltCallback(huart);
 8004e34:	f7ff ff54 	bl	8004ce0 <HAL_UART_RxCpltCallback>
}
 8004e38:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	e842 3100 	strex	r1, r3, [r2]
 8004e46:	2900      	cmp	r1, #0
 8004e48:	d0ef      	beq.n	8004e2a <UART_DMAReceiveCplt+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	e852 3f00 	ldrex	r3, [r2]
 8004e4e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	e842 3100 	strex	r1, r3, [r2]
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d1ef      	bne.n	8004e3a <UART_DMAReceiveCplt+0x56>
 8004e5a:	e7e6      	b.n	8004e2a <UART_DMAReceiveCplt+0x46>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8004e60:	f7ff ffae 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
}
 8004e64:	bd08      	pop	{r3, pc}
 8004e66:	bf00      	nop

08004e68 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e68:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8004e6a:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e6c:	071a      	lsls	r2, r3, #28
 8004e6e:	d506      	bpl.n	8004e7e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e70:	6801      	ldr	r1, [r0, #0]
 8004e72:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004e74:	684a      	ldr	r2, [r1, #4]
 8004e76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e7a:	4322      	orrs	r2, r4
 8004e7c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e7e:	07dc      	lsls	r4, r3, #31
 8004e80:	d506      	bpl.n	8004e90 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e82:	6801      	ldr	r1, [r0, #0]
 8004e84:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004e86:	684a      	ldr	r2, [r1, #4]
 8004e88:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004e8c:	4322      	orrs	r2, r4
 8004e8e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e90:	0799      	lsls	r1, r3, #30
 8004e92:	d506      	bpl.n	8004ea2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e94:	6801      	ldr	r1, [r0, #0]
 8004e96:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004e98:	684a      	ldr	r2, [r1, #4]
 8004e9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004e9e:	4322      	orrs	r2, r4
 8004ea0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea2:	075a      	lsls	r2, r3, #29
 8004ea4:	d506      	bpl.n	8004eb4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea6:	6801      	ldr	r1, [r0, #0]
 8004ea8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004eaa:	684a      	ldr	r2, [r1, #4]
 8004eac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004eb0:	4322      	orrs	r2, r4
 8004eb2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eb4:	06dc      	lsls	r4, r3, #27
 8004eb6:	d506      	bpl.n	8004ec6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eb8:	6801      	ldr	r1, [r0, #0]
 8004eba:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004ebc:	688a      	ldr	r2, [r1, #8]
 8004ebe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ec2:	4322      	orrs	r2, r4
 8004ec4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ec6:	0699      	lsls	r1, r3, #26
 8004ec8:	d506      	bpl.n	8004ed8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eca:	6801      	ldr	r1, [r0, #0]
 8004ecc:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004ece:	688a      	ldr	r2, [r1, #8]
 8004ed0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ed4:	4322      	orrs	r2, r4
 8004ed6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ed8:	065a      	lsls	r2, r3, #25
 8004eda:	d50a      	bpl.n	8004ef2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004edc:	6801      	ldr	r1, [r0, #0]
 8004ede:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004ee0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ee2:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004eea:	ea42 0204 	orr.w	r2, r2, r4
 8004eee:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ef0:	d00b      	beq.n	8004f0a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	d506      	bpl.n	8004f04 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ef6:	6802      	ldr	r2, [r0, #0]
 8004ef8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004efa:	6853      	ldr	r3, [r2, #4]
 8004efc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6053      	str	r3, [r2, #4]
}
 8004f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f08:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f0a:	684a      	ldr	r2, [r1, #4]
 8004f0c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004f0e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004f12:	4322      	orrs	r2, r4
 8004f14:	604a      	str	r2, [r1, #4]
 8004f16:	e7ec      	b.n	8004ef2 <UART_AdvFeatureConfig+0x8a>

08004f18 <UART_CheckIdleState>:
{
 8004f18:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1a:	2300      	movs	r3, #0
{
 8004f1c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8004f22:	f7fb fe9f 	bl	8000c64 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f26:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004f28:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f2a:	6813      	ldr	r3, [r2, #0]
 8004f2c:	071b      	lsls	r3, r3, #28
 8004f2e:	d40f      	bmi.n	8004f50 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	0759      	lsls	r1, r3, #29
 8004f34:	d431      	bmi.n	8004f9a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f36:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004f38:	2220      	movs	r2, #32
  return HAL_OK;
 8004f3a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8004f3c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f40:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f44:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f46:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f50:	69d3      	ldr	r3, [r2, #28]
 8004f52:	0298      	lsls	r0, r3, #10
 8004f54:	d4ec      	bmi.n	8004f30 <UART_CheckIdleState+0x18>
 8004f56:	e00c      	b.n	8004f72 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f58:	6819      	ldr	r1, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	0749      	lsls	r1, r1, #29
 8004f5e:	d505      	bpl.n	8004f6c <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f60:	69d9      	ldr	r1, [r3, #28]
 8004f62:	0708      	lsls	r0, r1, #28
 8004f64:	d44a      	bmi.n	8004ffc <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f66:	69d9      	ldr	r1, [r3, #28]
 8004f68:	0509      	lsls	r1, r1, #20
 8004f6a:	d475      	bmi.n	8005058 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	0298      	lsls	r0, r3, #10
 8004f70:	d4de      	bmi.n	8004f30 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f72:	f7fb fe77 	bl	8000c64 <HAL_GetTick>
 8004f76:	1b43      	subs	r3, r0, r5
 8004f78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f7c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7e:	d3eb      	bcc.n	8004f58 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	e843 2100 	strex	r1, r2, [r3]
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	d1f7      	bne.n	8004f80 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8004f90:	2320      	movs	r3, #32
 8004f92:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8004f96:	2003      	movs	r0, #3
 8004f98:	e7d6      	b.n	8004f48 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9a:	69d3      	ldr	r3, [r2, #28]
 8004f9c:	025b      	lsls	r3, r3, #9
 8004f9e:	d4ca      	bmi.n	8004f36 <UART_CheckIdleState+0x1e>
 8004fa0:	e00d      	b.n	8004fbe <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	0750      	lsls	r0, r2, #29
 8004fa6:	d507      	bpl.n	8004fb8 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fa8:	69da      	ldr	r2, [r3, #28]
 8004faa:	0711      	lsls	r1, r2, #28
 8004fac:	f100 8082 	bmi.w	80050b4 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fb0:	69da      	ldr	r2, [r3, #28]
 8004fb2:	0512      	lsls	r2, r2, #20
 8004fb4:	f100 80ac 	bmi.w	8005110 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	025b      	lsls	r3, r3, #9
 8004fbc:	d4bb      	bmi.n	8004f36 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbe:	f7fb fe51 	bl	8000c64 <HAL_GetTick>
 8004fc2:	1b43      	subs	r3, r0, r5
 8004fc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	d3ea      	bcc.n	8004fa2 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fd0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	e843 2100 	strex	r1, r2, [r3]
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	d1f7      	bne.n	8004fcc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	f103 0208 	add.w	r2, r3, #8
 8004fe0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	f103 0008 	add.w	r0, r3, #8
 8004fec:	e840 2100 	strex	r1, r2, [r0]
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	d1f3      	bne.n	8004fdc <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8004ffa:	e7cc      	b.n	8004f96 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005004:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	e843 2100 	strex	r1, r2, [r3]
 800500c:	2900      	cmp	r1, #0
 800500e:	d1f7      	bne.n	8005000 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005010:	4856      	ldr	r0, [pc, #344]	@ (800516c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	f103 0208 	add.w	r2, r3, #8
 8005016:	e852 2f00 	ldrex	r2, [r2]
 800501a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	f103 0508 	add.w	r5, r3, #8
 8005020:	e845 2100 	strex	r1, r2, [r5]
 8005024:	2900      	cmp	r1, #0
 8005026:	d1f4      	bne.n	8005012 <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005028:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800502a:	2a01      	cmp	r2, #1
 800502c:	d00b      	beq.n	8005046 <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005030:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005032:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005034:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8005038:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800503c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005040:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8005044:	e79c      	b.n	8004f80 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	e843 2100 	strex	r1, r2, [r3]
 8005052:	2900      	cmp	r1, #0
 8005054:	d1f7      	bne.n	8005046 <UART_CheckIdleState+0x12e>
 8005056:	e7ea      	b.n	800502e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005058:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800505c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005062:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	e843 2100 	strex	r1, r2, [r3]
 800506a:	2900      	cmp	r1, #0
 800506c:	d1f7      	bne.n	800505e <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800506e:	483f      	ldr	r0, [pc, #252]	@ (800516c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	f103 0208 	add.w	r2, r3, #8
 8005074:	e852 2f00 	ldrex	r2, [r2]
 8005078:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	f103 0508 	add.w	r5, r3, #8
 800507e:	e845 2100 	strex	r1, r2, [r5]
 8005082:	2900      	cmp	r1, #0
 8005084:	d1f4      	bne.n	8005070 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005086:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005088:	2a01      	cmp	r2, #1
 800508a:	d00a      	beq.n	80050a2 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800508e:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8005090:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005092:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8005096:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800509c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80050a0:	e76e      	b.n	8004f80 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	e843 2100 	strex	r1, r2, [r3]
 80050ae:	2900      	cmp	r1, #0
 80050b0:	d1f7      	bne.n	80050a2 <UART_CheckIdleState+0x18a>
 80050b2:	e7eb      	b.n	800508c <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050b4:	2208      	movs	r2, #8
 80050b6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050bc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	e843 2100 	strex	r1, r2, [r3]
 80050c4:	2900      	cmp	r1, #0
 80050c6:	d1f7      	bne.n	80050b8 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050c8:	4828      	ldr	r0, [pc, #160]	@ (800516c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	f103 0208 	add.w	r2, r3, #8
 80050ce:	e852 2f00 	ldrex	r2, [r2]
 80050d2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	f103 0508 	add.w	r5, r3, #8
 80050d8:	e845 2100 	strex	r1, r2, [r5]
 80050dc:	2900      	cmp	r1, #0
 80050de:	d1f4      	bne.n	80050ca <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80050e2:	2a01      	cmp	r2, #1
 80050e4:	d00b      	beq.n	80050fe <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80050e8:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050ea:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80050ec:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80050f0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80050f4:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050f8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80050fc:	e766      	b.n	8004fcc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005102:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	e843 2100 	strex	r1, r2, [r3]
 800510a:	2900      	cmp	r1, #0
 800510c:	d1f7      	bne.n	80050fe <UART_CheckIdleState+0x1e6>
 800510e:	e7ea      	b.n	80050e6 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005110:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005114:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800511a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	e843 2100 	strex	r1, r2, [r3]
 8005122:	2900      	cmp	r1, #0
 8005124:	d1f7      	bne.n	8005116 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005126:	4811      	ldr	r0, [pc, #68]	@ (800516c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	f103 0208 	add.w	r2, r3, #8
 800512c:	e852 2f00 	ldrex	r2, [r2]
 8005130:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	f103 0508 	add.w	r5, r3, #8
 8005136:	e845 2100 	strex	r1, r2, [r5]
 800513a:	2900      	cmp	r1, #0
 800513c:	d1f4      	bne.n	8005128 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8005140:	2a01      	cmp	r2, #1
 8005142:	d00a      	beq.n	800515a <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005144:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005146:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8005148:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800514a:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800514e:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005154:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8005158:	e738      	b.n	8004fcc <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	e843 2100 	strex	r1, r2, [r3]
 8005166:	2900      	cmp	r1, #0
 8005168:	d1f7      	bne.n	800515a <UART_CheckIdleState+0x242>
 800516a:	e7eb      	b.n	8005144 <UART_CheckIdleState+0x22c>
 800516c:	effffffe 	.word	0xeffffffe

08005170 <HAL_UART_Init>:
  if (huart == NULL)
 8005170:	2800      	cmp	r0, #0
 8005172:	f000 8113 	beq.w	800539c <HAL_UART_Init+0x22c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005176:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800517a:	b570      	push	{r4, r5, r6, lr}
 800517c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8088 	beq.w	8005294 <HAL_UART_Init+0x124>
  huart->gState = HAL_UART_STATE_BUSY;
 8005184:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8005186:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005188:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800518c:	682b      	ldr	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800518e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  __HAL_UART_DISABLE(huart);
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005196:	2a00      	cmp	r2, #0
 8005198:	d178      	bne.n	800528c <HAL_UART_Init+0x11c>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800519a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800519e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051a2:	4313      	orrs	r3, r2
 80051a4:	430b      	orrs	r3, r1
 80051a6:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a8:	4989      	ldr	r1, [pc, #548]	@ (80053d0 <HAL_UART_Init+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051aa:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ac:	4001      	ands	r1, r0
 80051ae:	430b      	orrs	r3, r1
 80051b0:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051b2:	686b      	ldr	r3, [r5, #4]
 80051b4:	68e1      	ldr	r1, [r4, #12]
 80051b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80051ba:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051bc:	4985      	ldr	r1, [pc, #532]	@ (80053d4 <HAL_UART_Init+0x264>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051be:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c0:	428d      	cmp	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051c2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051c4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c6:	f000 80f3 	beq.w	80053b0 <HAL_UART_Init+0x240>
 80051ca:	f101 5180 	add.w	r1, r1, #268435456	@ 0x10000000
 80051ce:	428d      	cmp	r5, r1
 80051d0:	d065      	beq.n	800529e <HAL_UART_Init+0x12e>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d2:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80051d4:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d6:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 80051da:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80051de:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e0:	430b      	orrs	r3, r1
 80051e2:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051e4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051e6:	497c      	ldr	r1, [pc, #496]	@ (80053d8 <HAL_UART_Init+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051e8:	f023 030f 	bic.w	r3, r3, #15
 80051ec:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ee:	428d      	cmp	r5, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051f0:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051f2:	d010      	beq.n	8005216 <HAL_UART_Init+0xa6>
 80051f4:	4b79      	ldr	r3, [pc, #484]	@ (80053dc <HAL_UART_Init+0x26c>)
 80051f6:	429d      	cmp	r5, r3
 80051f8:	f000 80cd 	beq.w	8005396 <HAL_UART_Init+0x226>
 80051fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005200:	429d      	cmp	r5, r3
 8005202:	f000 808c 	beq.w	800531e <HAL_UART_Init+0x1ae>
 8005206:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800520a:	429d      	cmp	r5, r3
 800520c:	f040 80c8 	bne.w	80053a0 <HAL_UART_Init+0x230>
 8005210:	2008      	movs	r0, #8
 8005212:	2100      	movs	r1, #0
 8005214:	e001      	b.n	800521a <HAL_UART_Init+0xaa>
 8005216:	2001      	movs	r0, #1
 8005218:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800521e:	f000 8086 	beq.w	800532e <HAL_UART_Init+0x1be>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005222:	f7fe fd9b 	bl	8003d5c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8005226:	b1d0      	cbz	r0, 800525e <HAL_UART_Init+0xee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005228:	4a6d      	ldr	r2, [pc, #436]	@ (80053e0 <HAL_UART_Init+0x270>)
 800522a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005232:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005236:	fbb0 f0f1 	udiv	r0, r0, r1
 800523a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800523e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005242:	f1a0 0310 	sub.w	r3, r0, #16
 8005246:	4293      	cmp	r3, r2
 8005248:	f200 8096 	bhi.w	8005378 <HAL_UART_Init+0x208>
  huart->RxISR = NULL;
 800524c:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800524e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8005256:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8005258:	66a1      	str	r1, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800525a:	67a3      	str	r3, [r4, #120]	@ 0x78
  return ret;
 800525c:	e005      	b.n	800526a <HAL_UART_Init+0xfa>
  huart->NbRxDataToProcess = 1;
 800525e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  huart->TxISR = NULL;
 8005262:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
        huart->Instance->BRR = brrtemp;
 8005266:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8005268:	66a3      	str	r3, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526a:	6853      	ldr	r3, [r2, #4]
  return (UART_CheckIdleState(huart));
 800526c:	4620      	mov	r0, r4
}
 800526e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005272:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8005276:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005278:	6893      	ldr	r3, [r2, #8]
 800527a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800527e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005280:	6813      	ldr	r3, [r2, #0]
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005288:	f7ff be46 	b.w	8004f18 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800528c:	4620      	mov	r0, r4
 800528e:	f7ff fdeb 	bl	8004e68 <UART_AdvFeatureConfig>
 8005292:	e782      	b.n	800519a <HAL_UART_Init+0x2a>
    huart->Lock = HAL_UNLOCKED;
 8005294:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8005298:	f7fb fb18 	bl	80008cc <HAL_UART_MspInit>
 800529c:	e772      	b.n	8005184 <HAL_UART_Init+0x14>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800529e:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052a0:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052a2:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 80052a6:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 80052aa:	431a      	orrs	r2, r3
 80052ac:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052ae:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80052b0:	f023 030f 	bic.w	r3, r3, #15
 80052b4:	4303      	orrs	r3, r0
 80052b6:	2000      	movs	r0, #0
 80052b8:	62eb      	str	r3, [r5, #44]	@ 0x2c
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80052ba:	f7fe fd4f 	bl	8003d5c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 80052be:	2800      	cmp	r0, #0
 80052c0:	d062      	beq.n	8005388 <HAL_UART_Init+0x218>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052c4:	4a46      	ldr	r2, [pc, #280]	@ (80053e0 <HAL_UART_Init+0x270>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052c6:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052c8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052cc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052d0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052d4:	428b      	cmp	r3, r1
 80052d6:	d34f      	bcc.n	8005378 <HAL_UART_Init+0x208>
 80052d8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80052dc:	d84c      	bhi.n	8005378 <HAL_UART_Init+0x208>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052de:	2600      	movs	r6, #0
 80052e0:	4633      	mov	r3, r6
 80052e2:	4631      	mov	r1, r6
 80052e4:	f7fb f868 	bl	80003b8 <__aeabi_uldivmod>
 80052e8:	0209      	lsls	r1, r1, #8
 80052ea:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 80052ee:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80052f2:	0200      	lsls	r0, r0, #8
 80052f4:	eb10 000c 	adds.w	r0, r0, ip
 80052f8:	462a      	mov	r2, r5
 80052fa:	4633      	mov	r3, r6
 80052fc:	f141 0100 	adc.w	r1, r1, #0
 8005300:	f7fb f85a 	bl	80003b8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005304:	4b37      	ldr	r3, [pc, #220]	@ (80053e4 <HAL_UART_Init+0x274>)
 8005306:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800530a:	429a      	cmp	r2, r3
 800530c:	d834      	bhi.n	8005378 <HAL_UART_Init+0x208>
  huart->NbRxDataToProcess = 1;
 800530e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
          huart->Instance->BRR = usartdiv;
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8005316:	e9c4 661d 	strd	r6, r6, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800531a:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 800531c:	e7a5      	b.n	800526a <HAL_UART_Init+0xfa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005322:	f04f 0004 	mov.w	r0, #4
 8005326:	f04f 0100 	mov.w	r1, #0
 800532a:	f47f af7a 	bne.w	8005222 <HAL_UART_Init+0xb2>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800532e:	f7fe fd15 	bl	8003d5c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 8005332:	2800      	cmp	r0, #0
 8005334:	d093      	beq.n	800525e <HAL_UART_Init+0xee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005336:	4b2a      	ldr	r3, [pc, #168]	@ (80053e0 <HAL_UART_Init+0x270>)
 8005338:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800533a:	6862      	ldr	r2, [r4, #4]
 800533c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8005340:	0853      	lsrs	r3, r2, #1
 8005342:	fbb0 f0f1 	udiv	r0, r0, r1
 8005346:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800534a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800534e:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 8005352:	f1a3 0210 	sub.w	r2, r3, #16
 8005356:	428a      	cmp	r2, r1
 8005358:	d80e      	bhi.n	8005378 <HAL_UART_Init+0x208>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800535a:	f023 010f 	bic.w	r1, r3, #15
 800535e:	b289      	uxth	r1, r1
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005360:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005364:	430b      	orrs	r3, r1
  huart->NbRxDataToProcess = 1;
 8005366:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
  huart->RxISR = NULL;
 800536a:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8005370:	6761      	str	r1, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8005372:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8005374:	67a1      	str	r1, [r4, #120]	@ 0x78
  return ret;
 8005376:	e778      	b.n	800526a <HAL_UART_Init+0xfa>
  huart->RxISR = NULL;
 8005378:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800537a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
}
 800537e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005380:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8005382:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8005384:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8005386:	bd70      	pop	{r4, r5, r6, pc}
  huart->NbRxDataToProcess = 1;
 8005388:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  huart->TxISR = NULL;
 800538c:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
          huart->Instance->BRR = usartdiv;
 8005390:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8005392:	66a1      	str	r1, [r4, #104]	@ 0x68
  return ret;
 8005394:	e769      	b.n	800526a <HAL_UART_Init+0xfa>
 8005396:	2002      	movs	r0, #2
 8005398:	2100      	movs	r1, #0
 800539a:	e73e      	b.n	800521a <HAL_UART_Init+0xaa>
}
 800539c:	2001      	movs	r0, #1
 800539e:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053a0:	4811      	ldr	r0, [pc, #68]	@ (80053e8 <HAL_UART_Init+0x278>)
 80053a2:	2100      	movs	r1, #0
 80053a4:	1a28      	subs	r0, r5, r0
 80053a6:	fab0 f080 	clz	r0, r0
 80053aa:	0940      	lsrs	r0, r0, #5
 80053ac:	0100      	lsls	r0, r0, #4
 80053ae:	e734      	b.n	800521a <HAL_UART_Init+0xaa>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b0:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053b2:	2100      	movs	r1, #0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b4:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 80053b8:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 80053bc:	431a      	orrs	r2, r3
 80053be:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053c0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80053c2:	f023 030f 	bic.w	r3, r3, #15
 80053c6:	4303      	orrs	r3, r0
 80053c8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80053ca:	2020      	movs	r0, #32
 80053cc:	e775      	b.n	80052ba <HAL_UART_Init+0x14a>
 80053ce:	bf00      	nop
 80053d0:	cfff69f3 	.word	0xcfff69f3
 80053d4:	46002400 	.word	0x46002400
 80053d8:	40013800 	.word	0x40013800
 80053dc:	40004400 	.word	0x40004400
 80053e0:	08005620 	.word	0x08005620
 80053e4:	000ffcff 	.word	0x000ffcff
 80053e8:	40005000 	.word	0x40005000

080053ec <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053ec:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80053f0:	2a01      	cmp	r2, #1
 80053f2:	d017      	beq.n	8005424 <HAL_UARTEx_DisableFifoMode+0x38>
 80053f4:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 80053f6:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053f8:	2100      	movs	r1, #0
{
 80053fa:	b430      	push	{r4, r5}

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80053fc:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053fe:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005400:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005404:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005406:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005408:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800540c:	f024 0401 	bic.w	r4, r4, #1
 8005410:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005412:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005414:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005416:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84

  return HAL_OK;
 800541a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800541c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8005420:	bc30      	pop	{r4, r5}
 8005422:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005424:	2002      	movs	r0, #2
}
 8005426:	4770      	bx	lr

08005428 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005428:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800542c:	2a01      	cmp	r2, #1
 800542e:	d037      	beq.n	80054a0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8005430:	4603      	mov	r3, r0
 8005432:	2024      	movs	r0, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005434:	681a      	ldr	r2, [r3, #0]
{
 8005436:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005438:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800543c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800543e:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005440:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 8005442:	f020 0001 	bic.w	r0, r0, #1
 8005446:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005448:	6890      	ldr	r0, [r2, #8]
 800544a:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800544e:	4301      	orrs	r1, r0
 8005450:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005452:	b315      	cbz	r5, 800549a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005454:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005456:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005458:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800545c:	4911      	ldr	r1, [pc, #68]	@ (80054a4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800545e:	4d12      	ldr	r5, [pc, #72]	@ (80054a8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005460:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005464:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005468:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800546c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005470:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005474:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005476:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005478:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800547c:	fbb1 f1f5 	udiv	r1, r1, r5
 8005480:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8005484:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8005486:	2520      	movs	r5, #32
 8005488:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800548c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800548e:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8005492:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005494:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8005498:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800549a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800549c:	4608      	mov	r0, r1
 800549e:	e7ef      	b.n	8005480 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80054a0:	2002      	movs	r0, #2
}
 80054a2:	4770      	bx	lr
 80054a4:	08005640 	.word	0x08005640
 80054a8:	08005638 	.word	0x08005638

080054ac <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80054ac:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80054b0:	2a01      	cmp	r2, #1
 80054b2:	d037      	beq.n	8005524 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80054b4:	4603      	mov	r3, r0
 80054b6:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054b8:	681a      	ldr	r2, [r3, #0]
{
 80054ba:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80054bc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054c0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80054c2:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054c4:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 80054c6:	f020 0001 	bic.w	r0, r0, #1
 80054ca:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054cc:	6890      	ldr	r0, [r2, #8]
 80054ce:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 80054d2:	4301      	orrs	r1, r0
 80054d4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054d6:	b315      	cbz	r5, 800551e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054d8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054da:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054dc:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054e0:	4911      	ldr	r1, [pc, #68]	@ (8005528 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80054e2:	4d12      	ldr	r5, [pc, #72]	@ (800552c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054e4:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054e8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054ec:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80054f0:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80054f4:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054f8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054fa:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054fc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005500:	fbb1 f1f5 	udiv	r1, r1, r5
 8005504:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8005508:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800550a:	2520      	movs	r5, #32
 800550c:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005510:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005512:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8005516:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005518:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800551c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800551e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005520:	4608      	mov	r0, r1
 8005522:	e7ef      	b.n	8005504 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005524:	2002      	movs	r0, #2
}
 8005526:	4770      	bx	lr
 8005528:	08005640 	.word	0x08005640
 800552c:	08005638 	.word	0x08005638

08005530 <_init>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	bf00      	nop
 8005534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005536:	bc08      	pop	{r3}
 8005538:	469e      	mov	lr, r3
 800553a:	4770      	bx	lr

0800553c <_fini>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	bf00      	nop
 8005540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005542:	bc08      	pop	{r3}
 8005544:	469e      	mov	lr, r3
 8005546:	4770      	bx	lr
